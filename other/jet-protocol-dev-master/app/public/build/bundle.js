
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35730/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop$1() { }
    const identity = x => x;
    function assign$2(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run$1(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run$1);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop$1;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign$2($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_rest_props(props, keys) {
        const rest = {};
        keys = new Set(keys);
        for (const k in props)
            if (!keys.has(k) && k[0] !== '$')
                rest[k] = props[k];
        return rest;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop$1;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop$1;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function set_custom_element_data(node, prop, value) {
        if (prop in node) {
            node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;
        }
        else {
            attr(node, prop, value);
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    // unfortunately this can't be a constant as that wouldn't be tree-shakeable
    // so we cache the result instead
    let crossorigin;
    function is_crossorigin() {
        if (crossorigin === undefined) {
            crossorigin = false;
            try {
                if (typeof window !== 'undefined' && window.parent) {
                    void window.parent.document;
                }
            }
            catch (error) {
                crossorigin = true;
            }
        }
        return crossorigin;
    }
    function add_resize_listener(node, fn) {
        const computed_style = getComputedStyle(node);
        if (computed_style.position === 'static') {
            node.style.position = 'relative';
        }
        const iframe = element('iframe');
        iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
            'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
        iframe.setAttribute('aria-hidden', 'true');
        iframe.tabIndex = -1;
        const crossorigin = is_crossorigin();
        let unsubscribe;
        if (crossorigin) {
            iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
            unsubscribe = listen(window, 'message', (event) => {
                if (event.source === iframe.contentWindow)
                    fn();
            });
        }
        else {
            iframe.src = 'about:blank';
            iframe.onload = () => {
                unsubscribe = listen(iframe.contentWindow, 'resize', fn);
            };
        }
        append(node, iframe);
        return () => {
            if (crossorigin) {
                unsubscribe();
            }
            else if (unsubscribe && iframe.contentWindow) {
                unsubscribe();
            }
            detach(iframe);
        };
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }
    class HtmlTag {
        constructor() {
            this.e = this.n = null;
        }
        c(html) {
            this.h(html);
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                this.e = element(target.nodeName);
                this.t = target;
                this.c(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    const active_docs = new Set();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash$2(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash$2(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        active_docs.add(doc);
        const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);
        const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
        if (!current_rules[name]) {
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            active_docs.forEach(doc => {
                const stylesheet = doc.__svelte_stylesheet;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                doc.__svelte_rules = {};
            });
            active_docs.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function beforeUpdate(fn) {
        get_current_component().$$.before_update.push(fn);
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop$1, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                started = true;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        let config = fn(node, params);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop$1, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config();
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop$1, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run$1).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init$1(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop$1,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$1;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.2' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /*
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/utils.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     */

    const isUndefined$1 = value => typeof value === "undefined";

    const isFunction$2 = value => typeof value === "function";

    const isNumber$1 = value => typeof value === "number";

    /**
     * Decides whether a given `event` should result in a navigation or not.
     * @param {object} event
     */
    function shouldNavigate(event) {
    	return (
    		!event.defaultPrevented &&
    		event.button === 0 &&
    		!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)
    	);
    }

    function createCounter() {
    	let i = 0;
    	/**
    	 * Returns an id and increments the internal state
    	 * @returns {number}
    	 */
    	return () => i++;
    }

    /**
     * Create a globally unique id
     *
     * @returns {string} An id
     */
    function createGlobalId() {
    	return Math.random().toString(36).substring(2);
    }

    const isSSR = typeof window === "undefined";

    function addListener$1(target, type, handler) {
    	target.addEventListener(type, handler);
    	return () => target.removeEventListener(type, handler);
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop$1) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop$1) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop$1;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop$1;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop$1;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    /*
     * Adapted from https://github.com/EmilTholin/svelte-routing
     *
     * https://github.com/EmilTholin/svelte-routing/blob/master/LICENSE
     */

    const createKey = ctxName => `@@svnav-ctx__${ctxName}`;

    // Use strings instead of objects, so different versions of
    // svelte-navigator can potentially still work together
    const LOCATION = createKey("LOCATION");
    const ROUTER = createKey("ROUTER");
    const ROUTE = createKey("ROUTE");
    const ROUTE_PARAMS = createKey("ROUTE_PARAMS");
    const FOCUS_ELEM = createKey("FOCUS_ELEM");

    const paramRegex = /^:(.+)/;

    /**
     * Check if `string` starts with `search`
     * @param {string} string
     * @param {string} search
     * @return {boolean}
     */
    const startsWith$1 = (string, search) =>
    	string.substr(0, search.length) === search;

    /**
     * Check if `segment` is a root segment
     * @param {string} segment
     * @return {boolean}
     */
    const isRootSegment = segment => segment === "";

    /**
     * Check if `segment` is a dynamic segment
     * @param {string} segment
     * @return {boolean}
     */
    const isDynamic = segment => paramRegex.test(segment);

    /**
     * Check if `segment` is a splat
     * @param {string} segment
     * @return {boolean}
     */
    const isSplat = segment => segment[0] === "*";

    /**
     * Strip potention splat and splatname of the end of a path
     * @param {string} str
     * @return {string}
     */
    const stripSplat = str => str.replace(/\*.*$/, "");

    /**
     * Strip `str` of potential start and end `/`
     * @param {string} str
     * @return {string}
     */
    const stripSlashes = str => str.replace(/(^\/+|\/+$)/g, "");

    /**
     * Split up the URI into segments delimited by `/`
     * @param {string} uri
     * @return {string[]}
     */
    function segmentize(uri, filterFalsy = false) {
    	const segments = stripSlashes(uri).split("/");
    	return filterFalsy ? segments.filter(Boolean) : segments;
    }

    /**
     * Add the query to the pathname if a query is given
     * @param {string} pathname
     * @param {string} [query]
     * @return {string}
     */
    const addQuery = (pathname, query) =>
    	pathname + (query ? `?${query}` : "");

    /**
     * Normalizes a basepath
     *
     * @param {string} path
     * @returns {string}
     *
     * @example
     * normalizePath("base/path/") // -> "/base/path"
     */
    const normalizePath = path => `/${stripSlashes(path)}`;

    /**
     * Joins and normalizes multiple path fragments
     *
     * @param {...string} pathFragments
     * @returns {string}
     */
    function join(...pathFragments) {
    	const joinFragment = fragment => segmentize(fragment, true).join("/");
    	const joinedSegments = pathFragments.map(joinFragment).join("/");
    	return normalizePath(joinedSegments);
    }

    // We start from 1 here, so we can check if an origin id has been passed
    // by using `originId || <fallback>`
    const LINK_ID = 1;
    const ROUTE_ID = 2;
    const ROUTER_ID = 3;
    const USE_FOCUS_ID = 4;
    const USE_LOCATION_ID = 5;
    const USE_MATCH_ID = 6;
    const USE_NAVIGATE_ID = 7;
    const USE_PARAMS_ID = 8;
    const USE_RESOLVABLE_ID = 9;
    const USE_RESOLVE_ID = 10;
    const NAVIGATE_ID = 11;

    const labels = {
    	[LINK_ID]: "Link",
    	[ROUTE_ID]: "Route",
    	[ROUTER_ID]: "Router",
    	[USE_FOCUS_ID]: "useFocus",
    	[USE_LOCATION_ID]: "useLocation",
    	[USE_MATCH_ID]: "useMatch",
    	[USE_NAVIGATE_ID]: "useNavigate",
    	[USE_PARAMS_ID]: "useParams",
    	[USE_RESOLVABLE_ID]: "useResolvable",
    	[USE_RESOLVE_ID]: "useResolve",
    	[NAVIGATE_ID]: "navigate",
    };

    const createLabel = labelId => labels[labelId];

    function createIdentifier(labelId, props) {
    	let attr;
    	if (labelId === ROUTE_ID) {
    		attr = props.path ? `path="${props.path}"` : "default";
    	} else if (labelId === LINK_ID) {
    		attr = `to="${props.to}"`;
    	} else if (labelId === ROUTER_ID) {
    		attr = `basepath="${props.basepath || ""}"`;
    	}
    	return `<${createLabel(labelId)} ${attr || ""} />`;
    }

    function createMessage(labelId, message, props, originId) {
    	const origin = props && createIdentifier(originId || labelId, props);
    	const originMsg = origin ? `\n\nOccurred in: ${origin}` : "";
    	const label = createLabel(labelId);
    	const msg = isFunction$2(message) ? message(label) : message;
    	return `<${label}> ${msg}${originMsg}`;
    }

    const createMessageHandler = handler => (...args) =>
    	handler(createMessage(...args));

    const fail$1 = createMessageHandler(message => {
    	throw new Error(message);
    });

    // eslint-disable-next-line no-console
    const warn = createMessageHandler(console.warn);

    const SEGMENT_POINTS = 4;
    const STATIC_POINTS = 3;
    const DYNAMIC_POINTS = 2;
    const SPLAT_PENALTY = 1;
    const ROOT_POINTS = 1;

    /**
     * Score a route depending on how its individual segments look
     * @param {object} route
     * @param {number} index
     * @return {object}
     */
    function rankRoute(route, index) {
    	const score = route.default
    		? 0
    		: segmentize(route.fullPath).reduce((acc, segment) => {
    				let nextScore = acc;
    				nextScore += SEGMENT_POINTS;

    				if (isRootSegment(segment)) {
    					nextScore += ROOT_POINTS;
    				} else if (isDynamic(segment)) {
    					nextScore += DYNAMIC_POINTS;
    				} else if (isSplat(segment)) {
    					nextScore -= SEGMENT_POINTS + SPLAT_PENALTY;
    				} else {
    					nextScore += STATIC_POINTS;
    				}

    				return nextScore;
    		  }, 0);

    	return { route, score, index };
    }

    /**
     * Give a score to all routes and sort them on that
     * @param {object[]} routes
     * @return {object[]}
     */
    function rankRoutes(routes) {
    	return (
    		routes
    			.map(rankRoute)
    			// If two routes have the exact same score, we go by index instead
    			.sort((a, b) => {
    				if (a.score < b.score) {
    					return 1;
    				}
    				if (a.score > b.score) {
    					return -1;
    				}
    				return a.index - b.index;
    			})
    	);
    }

    /**
     * Ranks and picks the best route to match. Each segment gets the highest
     * amount of points, then the type of segment gets an additional amount of
     * points where
     *
     *  static > dynamic > splat > root
     *
     * This way we don't have to worry about the order of our routes, let the
     * computers do it.
     *
     * A route looks like this
     *
     *  { fullPath, default, value }
     *
     * And a returned match looks like:
     *
     *  { route, params, uri }
     *
     * @param {object[]} routes
     * @param {string} uri
     * @return {?object}
     */
    function pick(routes, uri) {
    	let bestMatch;
    	let defaultMatch;

    	const [uriPathname] = uri.split("?");
    	const uriSegments = segmentize(uriPathname);
    	const isRootUri = uriSegments[0] === "";
    	const ranked = rankRoutes(routes);

    	for (let i = 0, l = ranked.length; i < l; i++) {
    		const { route } = ranked[i];
    		let missed = false;
    		const params = {};

    		// eslint-disable-next-line no-shadow
    		const createMatch = uri => ({ ...route, params, uri });

    		if (route.default) {
    			defaultMatch = createMatch(uri);
    			continue;
    		}

    		const routeSegments = segmentize(route.fullPath);
    		const max = Math.max(uriSegments.length, routeSegments.length);
    		let index = 0;

    		for (; index < max; index++) {
    			const routeSegment = routeSegments[index];
    			const uriSegment = uriSegments[index];

    			if (!isUndefined$1(routeSegment) && isSplat(routeSegment)) {
    				// Hit a splat, just grab the rest, and return a match
    				// uri:   /files/documents/work
    				// route: /files/* or /files/*splatname
    				const splatName = routeSegment === "*" ? "*" : routeSegment.slice(1);

    				params[splatName] = uriSegments
    					.slice(index)
    					.map(decodeURIComponent)
    					.join("/");
    				break;
    			}

    			if (isUndefined$1(uriSegment)) {
    				// URI is shorter than the route, no match
    				// uri:   /users
    				// route: /users/:userId
    				missed = true;
    				break;
    			}

    			const dynamicMatch = paramRegex.exec(routeSegment);

    			if (dynamicMatch && !isRootUri) {
    				const value = decodeURIComponent(uriSegment);
    				params[dynamicMatch[1]] = value;
    			} else if (routeSegment !== uriSegment) {
    				// Current segments don't match, not dynamic, not splat, so no match
    				// uri:   /users/123/settings
    				// route: /users/:id/profile
    				missed = true;
    				break;
    			}
    		}

    		if (!missed) {
    			bestMatch = createMatch(join(...uriSegments.slice(0, index)));
    			break;
    		}
    	}

    	return bestMatch || defaultMatch || null;
    }

    /**
     * Check if the `route.fullPath` matches the `uri`.
     * @param {Object} route
     * @param {string} uri
     * @return {?object}
     */
    function match(route, uri) {
    	return pick([route], uri);
    }

    /**
     * Resolve URIs as though every path is a directory, no files. Relative URIs
     * in the browser can feel awkward because not only can you be "in a directory",
     * you can be "at a file", too. For example:
     *
     *  browserSpecResolve('foo', '/bar/') => /bar/foo
     *  browserSpecResolve('foo', '/bar') => /foo
     *
     * But on the command line of a file system, it's not as complicated. You can't
     * `cd` from a file, only directories. This way, links have to know less about
     * their current path. To go deeper you can do this:
     *
     *  <Link to="deeper"/>
     *  // instead of
     *  <Link to=`{${props.uri}/deeper}`/>
     *
     * Just like `cd`, if you want to go deeper from the command line, you do this:
     *
     *  cd deeper
     *  # not
     *  cd $(pwd)/deeper
     *
     * By treating every path as a directory, linking to relative paths should
     * require less contextual information and (fingers crossed) be more intuitive.
     * @param {string} to
     * @param {string} base
     * @return {string}
     */
    function resolve(to, base) {
    	// /foo/bar, /baz/qux => /foo/bar
    	if (startsWith$1(to, "/")) {
    		return to;
    	}

    	const [toPathname, toQuery] = to.split("?");
    	const [basePathname] = base.split("?");
    	const toSegments = segmentize(toPathname);
    	const baseSegments = segmentize(basePathname);

    	// ?a=b, /users?b=c => /users?a=b
    	if (toSegments[0] === "") {
    		return addQuery(basePathname, toQuery);
    	}

    	// profile, /users/789 => /users/789/profile
    	if (!startsWith$1(toSegments[0], ".")) {
    		const pathname = baseSegments.concat(toSegments).join("/");
    		return addQuery((basePathname === "/" ? "" : "/") + pathname, toQuery);
    	}

    	// ./       , /users/123 => /users/123
    	// ../      , /users/123 => /users
    	// ../..    , /users/123 => /
    	// ../../one, /a/b/c/d   => /a/b/one
    	// .././one , /a/b/c/d   => /a/b/c/one
    	const allSegments = baseSegments.concat(toSegments);
    	const segments = [];

    	allSegments.forEach(segment => {
    		if (segment === "..") {
    			segments.pop();
    		} else if (segment !== ".") {
    			segments.push(segment);
    		}
    	});

    	return addQuery(`/${segments.join("/")}`, toQuery);
    }

    /**
     * Normalizes a location for consumption by `Route` children and the `Router`.
     * It removes the apps basepath from the pathname
     * and sets default values for `search` and `hash` properties.
     *
     * @param {Object} location The current global location supplied by the history component
     * @param {string} basepath The applications basepath (i.e. when serving from a subdirectory)
     *
     * @returns The normalized location
     */
    function normalizeLocation(location, basepath) {
    	const { pathname, hash = "", search = "", state } = location;
    	const baseSegments = segmentize(basepath, true);
    	const pathSegments = segmentize(pathname, true);
    	while (baseSegments.length) {
    		if (baseSegments[0] !== pathSegments[0]) {
    			fail$1(
    				ROUTER_ID,
    				`Invalid state: All locations must begin with the basepath "${basepath}", found "${pathname}"`,
    			);
    		}
    		baseSegments.shift();
    		pathSegments.shift();
    	}
    	return {
    		pathname: join(...pathSegments),
    		hash,
    		search,
    		state,
    	};
    }

    const normalizeUrlFragment = frag => (frag.length === 1 ? "" : frag);

    /**
     * Creates a location object from an url.
     * It is used to create a location from the url prop used in SSR
     *
     * @param {string} url The url string (e.g. "/path/to/somewhere")
     *
     * @returns {{ pathname: string; search: string; hash: string }} The location
     */
    function createLocation(url) {
    	const searchIndex = url.indexOf("?");
    	const hashIndex = url.indexOf("#");
    	const hasSearchIndex = searchIndex !== -1;
    	const hasHashIndex = hashIndex !== -1;
    	const hash = hasHashIndex ? normalizeUrlFragment(url.substr(hashIndex)) : "";
    	const pathnameAndSearch = hasHashIndex ? url.substr(0, hashIndex) : url;
    	const search = hasSearchIndex
    		? normalizeUrlFragment(pathnameAndSearch.substr(searchIndex))
    		: "";
    	const pathname = hasSearchIndex
    		? pathnameAndSearch.substr(0, searchIndex)
    		: pathnameAndSearch;
    	return { pathname, search, hash };
    }

    /**
     * Resolves a link relative to the parent Route and the Routers basepath.
     *
     * @param {string} path The given path, that will be resolved
     * @param {string} routeBase The current Routes base path
     * @param {string} appBase The basepath of the app. Used, when serving from a subdirectory
     * @returns {string} The resolved path
     *
     * @example
     * resolveLink("relative", "/routeBase", "/") // -> "/routeBase/relative"
     * resolveLink("/absolute", "/routeBase", "/") // -> "/absolute"
     * resolveLink("relative", "/routeBase", "/base") // -> "/base/routeBase/relative"
     * resolveLink("/absolute", "/routeBase", "/base") // -> "/base/absolute"
     */
    function resolveLink(path, routeBase, appBase) {
    	return join(appBase, resolve(path, routeBase));
    }

    /**
     * Get the uri for a Route, by matching it against the current location.
     *
     * @param {string} routePath The Routes resolved path
     * @param {string} pathname The current locations pathname
     */
    function extractBaseUri(routePath, pathname) {
    	const fullPath = normalizePath(stripSplat(routePath));
    	const baseSegments = segmentize(fullPath, true);
    	const pathSegments = segmentize(pathname, true).slice(0, baseSegments.length);
    	const routeMatch = match({ fullPath }, join(...pathSegments));
    	return routeMatch && routeMatch.uri;
    }

    /*
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/history.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     */

    const POP = "POP";
    const PUSH = "PUSH";
    const REPLACE = "REPLACE";

    function getLocation(source) {
    	return {
    		...source.location,
    		pathname: encodeURI(decodeURI(source.location.pathname)),
    		state: source.history.state,
    		_key: (source.history.state && source.history.state._key) || "initial",
    	};
    }

    function createHistory(source) {
    	let listeners = [];
    	let location = getLocation(source);
    	let action = POP;

    	const notifyListeners = (listenerFns = listeners) =>
    		listenerFns.forEach(listener => listener({ location, action }));

    	return {
    		get location() {
    			return location;
    		},
    		listen(listener) {
    			listeners.push(listener);

    			const popstateListener = () => {
    				location = getLocation(source);
    				action = POP;
    				notifyListeners([listener]);
    			};

    			// Call listener when it is registered
    			notifyListeners([listener]);

    			const unlisten = addListener$1(source, "popstate", popstateListener);
    			return () => {
    				unlisten();
    				listeners = listeners.filter(fn => fn !== listener);
    			};
    		},
    		/**
    		 * Navigate to a new absolute route.
    		 *
    		 * @param {string|number} to The path to navigate to.
    		 *
    		 * If `to` is a number we will navigate to the stack entry index + `to`
    		 * (-> `navigate(-1)`, is equivalent to hitting the back button of the browser)
    		 * @param {Object} options
    		 * @param {*} [options.state] The state will be accessible through `location.state`
    		 * @param {boolean} [options.replace=false] Replace the current entry in the history
    		 * stack, instead of pushing on a new one
    		 */
    		navigate(to, options) {
    			const { state = {}, replace = false } = options || {};
    			action = replace ? REPLACE : PUSH;
    			if (isNumber$1(to)) {
    				if (options) {
    					warn(
    						NAVIGATE_ID,
    						"Navigation options (state or replace) are not supported, " +
    							"when passing a number as the first argument to navigate. " +
    							"They are ignored.",
    					);
    				}
    				action = POP;
    				source.history.go(to);
    			} else {
    				const keyedState = { ...state, _key: createGlobalId() };
    				// try...catch iOS Safari limits to 100 pushState calls
    				try {
    					source.history[replace ? "replaceState" : "pushState"](
    						keyedState,
    						"",
    						to,
    					);
    				} catch (e) {
    					source.location[replace ? "replace" : "assign"](to);
    				}
    			}

    			location = getLocation(source);
    			notifyListeners();
    		},
    	};
    }

    function createStackFrame(state, uri) {
    	return { ...createLocation(uri), state };
    }

    // Stores history entries in memory for testing or other platforms like Native
    function createMemorySource(initialPathname = "/") {
    	let index = 0;
    	let stack = [createStackFrame(null, initialPathname)];

    	return {
    		// This is just for testing...
    		get entries() {
    			return stack;
    		},
    		get location() {
    			return stack[index];
    		},
    		addEventListener() {},
    		removeEventListener() {},
    		history: {
    			get state() {
    				return stack[index].state;
    			},
    			pushState(state, title, uri) {
    				index++;
    				// Throw away anything in the stack with an index greater than the current index.
    				// This happens, when we go back using `go(-n)`. The index is now less than `stack.length`.
    				// If we call `go(+n)` the stack entries with an index greater than the current index can
    				// be reused.
    				// However, if we navigate to a path, instead of a number, we want to create a new branch
    				// of navigation.
    				stack = stack.slice(0, index);
    				stack.push(createStackFrame(state, uri));
    			},
    			replaceState(state, title, uri) {
    				stack[index] = createStackFrame(state, uri);
    			},
    			go(to) {
    				const newIndex = index + to;
    				if (newIndex < 0 || newIndex > stack.length - 1) {
    					return;
    				}
    				index = newIndex;
    			},
    		},
    	};
    }

    // Global history uses window.history as the source if available,
    // otherwise a memory history
    const canUseDOM = !!(
    	!isSSR &&
    	window.document &&
    	window.document.createElement
    );
    // Use memory history in iframes (for example in Svelte REPL)
    const isEmbeddedPage = !isSSR && window.location.origin === "null";
    const globalHistory = createHistory(
    	canUseDOM && !isEmbeddedPage ? window : createMemorySource(),
    );
    const { navigate } = globalHistory;

    // We need to keep the focus candidate in a separate file, so svelte does
    // not update, when we mutate it.
    // Also, we need a single global reference, because taking focus needs to
    // work globally, even if we have multiple top level routers
    // eslint-disable-next-line import/no-mutable-exports
    let focusCandidate = null;

    // eslint-disable-next-line import/no-mutable-exports
    let initialNavigation = true;

    /**
     * Check if RouterA is above RouterB in the document
     * @param {number} routerIdA The first Routers id
     * @param {number} routerIdB The second Routers id
     */
    function isAbove(routerIdA, routerIdB) {
    	const routerMarkers = document.querySelectorAll("[data-svnav-router]");
    	for (let i = 0; i < routerMarkers.length; i++) {
    		const node = routerMarkers[i];
    		const currentId = Number(node.dataset.svnavRouter);
    		if (currentId === routerIdA) return true;
    		if (currentId === routerIdB) return false;
    	}
    	return false;
    }

    /**
     * Check if a Route candidate is the best choice to move focus to,
     * and store the best match.
     * @param {{
         level: number;
         routerId: number;
         route: {
           id: number;
           focusElement: import("svelte/store").Readable<Promise<Element>|null>;
         }
       }} item A Route candidate, that updated and is visible after a navigation
     */
    function pushFocusCandidate(item) {
    	if (
    		// Best candidate if it's the only candidate...
    		!focusCandidate ||
    		// Route is nested deeper, than previous candidate
    		// -> Route change was triggered in the deepest affected
    		// Route, so that's were focus should move to
    		item.level > focusCandidate.level ||
    		// If the level is identical, we want to focus the first Route in the document,
    		// so we pick the first Router lookin from page top to page bottom.
    		(item.level === focusCandidate.level &&
    			isAbove(item.routerId, focusCandidate.routerId))
    	) {
    		focusCandidate = item;
    	}
    }

    /**
     * Reset the focus candidate.
     */
    function clearFocusCandidate() {
    	focusCandidate = null;
    }

    function initialNavigationOccurred() {
    	initialNavigation = false;
    }

    /*
     * `focus` Adapted from https://github.com/oaf-project/oaf-side-effects/blob/master/src/index.ts
     *
     * https://github.com/oaf-project/oaf-side-effects/blob/master/LICENSE
     */
    function focus(elem) {
    	if (!elem) return false;
    	const TABINDEX = "tabindex";
    	try {
    		if (!elem.hasAttribute(TABINDEX)) {
    			elem.setAttribute(TABINDEX, "-1");
    			let unlisten;
    			// We remove tabindex after blur to avoid weird browser behavior
    			// where a mouse click can activate elements with tabindex="-1".
    			const blurListener = () => {
    				elem.removeAttribute(TABINDEX);
    				unlisten();
    			};
    			unlisten = addListener$1(elem, "blur", blurListener);
    		}
    		elem.focus();
    		return document.activeElement === elem;
    	} catch (e) {
    		// Apparently trying to focus a disabled element in IE can throw.
    		// See https://stackoverflow.com/a/1600194/2476884
    		return false;
    	}
    }

    function isEndMarker(elem, id) {
    	return Number(elem.dataset.svnavRouteEnd) === id;
    }

    function isHeading(elem) {
    	return /^H[1-6]$/i.test(elem.tagName);
    }

    function query(selector, parent = document) {
    	return parent.querySelector(selector);
    }

    function queryHeading(id) {
    	const marker = query(`[data-svnav-route-start="${id}"]`);
    	let current = marker.nextElementSibling;
    	while (!isEndMarker(current, id)) {
    		if (isHeading(current)) {
    			return current;
    		}
    		const heading = query("h1,h2,h3,h4,h5,h6", current);
    		if (heading) {
    			return heading;
    		}
    		current = current.nextElementSibling;
    	}
    	return null;
    }

    function handleFocus(route) {
    	Promise.resolve(get_store_value(route.focusElement)).then(elem => {
    		const focusElement = elem || queryHeading(route.id);
    		if (!focusElement) {
    			warn(
    				ROUTER_ID,
    				"Could not find an element to focus. " +
    					"You should always render a header for accessibility reasons, " +
    					'or set a custom focus element via the "useFocus" hook. ' +
    					"If you don't want this Route or Router to manage focus, " +
    					'pass "primary={false}" to it.',
    				route,
    				ROUTE_ID,
    			);
    		}
    		const headingFocused = focus(focusElement);
    		if (headingFocused) return;
    		focus(document.documentElement);
    	});
    }

    const createTriggerFocus = (a11yConfig, announcementText, location) => (
    	manageFocus,
    	announceNavigation,
    ) =>
    	// Wait until the dom is updated, so we can look for headings
    	tick().then(() => {
    		if (!focusCandidate || initialNavigation) {
    			initialNavigationOccurred();
    			return;
    		}
    		if (manageFocus) {
    			handleFocus(focusCandidate.route);
    		}
    		if (a11yConfig.announcements && announceNavigation) {
    			const { path, fullPath, meta, params, uri } = focusCandidate.route;
    			const announcementMessage = a11yConfig.createAnnouncement(
    				{ path, fullPath, meta, params, uri },
    				get_store_value(location),
    			);
    			Promise.resolve(announcementMessage).then(message => {
    				announcementText.set(message);
    			});
    		}
    		clearFocusCandidate();
    	});

    const visuallyHiddenStyle =
    	"position:fixed;" +
    	"top:-1px;" +
    	"left:0;" +
    	"width:1px;" +
    	"height:1px;" +
    	"padding:0;" +
    	"overflow:hidden;" +
    	"clip:rect(0,0,0,0);" +
    	"white-space:nowrap;" +
    	"border:0;";

    /* node_modules/svelte-navigator/src/Router.svelte generated by Svelte v3.44.2 */

    const file$B = "node_modules/svelte-navigator/src/Router.svelte";

    // (195:0) {#if isTopLevelRouter && manageFocus && a11yConfig.announcements}
    function create_if_block$r(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*$announcementText*/ ctx[0]);
    			attr_dev(div, "role", "status");
    			attr_dev(div, "aria-atomic", "true");
    			attr_dev(div, "aria-live", "polite");
    			attr_dev(div, "style", visuallyHiddenStyle);
    			add_location(div, file$B, 195, 1, 5906);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$announcementText*/ 1) set_data_dev(t, /*$announcementText*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$r.name,
    		type: "if",
    		source: "(195:0) {#if isTopLevelRouter && manageFocus && a11yConfig.announcements}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$C(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let if_block_anchor;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[20].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);
    	let if_block = /*isTopLevelRouter*/ ctx[2] && /*manageFocus*/ ctx[4] && /*a11yConfig*/ ctx[1].announcements && create_if_block$r(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = space();
    			if (default_slot) default_slot.c();
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			set_style(div, "display", "none");
    			attr_dev(div, "aria-hidden", "true");
    			attr_dev(div, "data-svnav-router", /*routerId*/ ctx[3]);
    			add_location(div, file$B, 190, 0, 5750);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t0, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[19],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[19], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*isTopLevelRouter*/ ctx[2] && /*manageFocus*/ ctx[4] && /*a11yConfig*/ ctx[1].announcements) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const createId$1 = createCounter();
    const defaultBasepath = "/";

    function instance$D($$self, $$props, $$invalidate) {
    	let $location;
    	let $activeRoute;
    	let $prevLocation;
    	let $routes;
    	let $announcementText;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Router', slots, ['default']);
    	let { basepath = defaultBasepath } = $$props;
    	let { url = null } = $$props;
    	let { history = globalHistory } = $$props;
    	let { primary = true } = $$props;
    	let { a11y = {} } = $$props;

    	const a11yConfig = {
    		createAnnouncement: route => `Navigated to ${route.uri}`,
    		announcements: true,
    		...a11y
    	};

    	// Remember the initial `basepath`, so we can fire a warning
    	// when the user changes it later
    	const initialBasepath = basepath;

    	const normalizedBasepath = normalizePath(basepath);
    	const locationContext = getContext(LOCATION);
    	const routerContext = getContext(ROUTER);
    	const isTopLevelRouter = !locationContext;
    	const routerId = createId$1();
    	const manageFocus = primary && !(routerContext && !routerContext.manageFocus);
    	const announcementText = writable("");
    	validate_store(announcementText, 'announcementText');
    	component_subscribe($$self, announcementText, value => $$invalidate(0, $announcementText = value));
    	const routes = writable([]);
    	validate_store(routes, 'routes');
    	component_subscribe($$self, routes, value => $$invalidate(18, $routes = value));
    	const activeRoute = writable(null);
    	validate_store(activeRoute, 'activeRoute');
    	component_subscribe($$self, activeRoute, value => $$invalidate(16, $activeRoute = value));

    	// Used in SSR to synchronously set that a Route is active.
    	let hasActiveRoute = false;

    	// Nesting level of router.
    	// We will need this to identify sibling routers, when moving
    	// focus on navigation, so we can focus the first possible router
    	const level = isTopLevelRouter ? 0 : routerContext.level + 1;

    	// If we're running an SSR we force the location to the `url` prop
    	const getInitialLocation = () => normalizeLocation(isSSR ? createLocation(url) : history.location, normalizedBasepath);

    	const location = isTopLevelRouter
    	? writable(getInitialLocation())
    	: locationContext;

    	validate_store(location, 'location');
    	component_subscribe($$self, location, value => $$invalidate(15, $location = value));
    	const prevLocation = writable($location);
    	validate_store(prevLocation, 'prevLocation');
    	component_subscribe($$self, prevLocation, value => $$invalidate(17, $prevLocation = value));
    	const triggerFocus = createTriggerFocus(a11yConfig, announcementText, location);
    	const createRouteFilter = routeId => routeList => routeList.filter(routeItem => routeItem.id !== routeId);

    	function registerRoute(route) {
    		if (isSSR) {
    			// In SSR we should set the activeRoute immediately if it is a match.
    			// If there are more Routes being registered after a match is found,
    			// we just skip them.
    			if (hasActiveRoute) {
    				return;
    			}

    			const matchingRoute = match(route, $location.pathname);

    			if (matchingRoute) {
    				hasActiveRoute = true;

    				// Return the match in SSR mode, so the matched Route can use it immediatly.
    				// Waiting for activeRoute to update does not work, because it updates
    				// after the Route is initialized
    				return matchingRoute; // eslint-disable-line consistent-return
    			}
    		} else {
    			routes.update(prevRoutes => {
    				// Remove an old version of the updated route,
    				// before pushing the new version
    				const nextRoutes = createRouteFilter(route.id)(prevRoutes);

    				nextRoutes.push(route);
    				return nextRoutes;
    			});
    		}
    	}

    	function unregisterRoute(routeId) {
    		routes.update(createRouteFilter(routeId));
    	}

    	if (!isTopLevelRouter && basepath !== defaultBasepath) {
    		warn(ROUTER_ID, 'Only top-level Routers can have a "basepath" prop. It is ignored.', { basepath });
    	}

    	if (isTopLevelRouter) {
    		// The topmost Router in the tree is responsible for updating
    		// the location store and supplying it through context.
    		onMount(() => {
    			const unlisten = history.listen(changedHistory => {
    				const normalizedLocation = normalizeLocation(changedHistory.location, normalizedBasepath);
    				prevLocation.set($location);
    				location.set(normalizedLocation);
    			});

    			return unlisten;
    		});

    		setContext(LOCATION, location);
    	}

    	setContext(ROUTER, {
    		activeRoute,
    		registerRoute,
    		unregisterRoute,
    		manageFocus,
    		level,
    		id: routerId,
    		history: isTopLevelRouter ? history : routerContext.history,
    		basepath: isTopLevelRouter
    		? normalizedBasepath
    		: routerContext.basepath
    	});

    	const writable_props = ['basepath', 'url', 'history', 'primary', 'a11y'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('basepath' in $$props) $$invalidate(10, basepath = $$props.basepath);
    		if ('url' in $$props) $$invalidate(11, url = $$props.url);
    		if ('history' in $$props) $$invalidate(12, history = $$props.history);
    		if ('primary' in $$props) $$invalidate(13, primary = $$props.primary);
    		if ('a11y' in $$props) $$invalidate(14, a11y = $$props.a11y);
    		if ('$$scope' in $$props) $$invalidate(19, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		createCounter,
    		createId: createId$1,
    		getContext,
    		setContext,
    		onMount,
    		writable,
    		LOCATION,
    		ROUTER,
    		globalHistory,
    		normalizePath,
    		pick,
    		match,
    		normalizeLocation,
    		createLocation,
    		isSSR,
    		warn,
    		ROUTER_ID,
    		pushFocusCandidate,
    		visuallyHiddenStyle,
    		createTriggerFocus,
    		defaultBasepath,
    		basepath,
    		url,
    		history,
    		primary,
    		a11y,
    		a11yConfig,
    		initialBasepath,
    		normalizedBasepath,
    		locationContext,
    		routerContext,
    		isTopLevelRouter,
    		routerId,
    		manageFocus,
    		announcementText,
    		routes,
    		activeRoute,
    		hasActiveRoute,
    		level,
    		getInitialLocation,
    		location,
    		prevLocation,
    		triggerFocus,
    		createRouteFilter,
    		registerRoute,
    		unregisterRoute,
    		$location,
    		$activeRoute,
    		$prevLocation,
    		$routes,
    		$announcementText
    	});

    	$$self.$inject_state = $$props => {
    		if ('basepath' in $$props) $$invalidate(10, basepath = $$props.basepath);
    		if ('url' in $$props) $$invalidate(11, url = $$props.url);
    		if ('history' in $$props) $$invalidate(12, history = $$props.history);
    		if ('primary' in $$props) $$invalidate(13, primary = $$props.primary);
    		if ('a11y' in $$props) $$invalidate(14, a11y = $$props.a11y);
    		if ('hasActiveRoute' in $$props) hasActiveRoute = $$props.hasActiveRoute;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*basepath*/ 1024) {
    			if (basepath !== initialBasepath) {
    				warn(ROUTER_ID, 'You cannot change the "basepath" prop. It is ignored.');
    			}
    		}

    		if ($$self.$$.dirty[0] & /*$routes, $location*/ 294912) {
    			// This reactive statement will be run when the Router is created
    			// when there are no Routes and then again the following tick, so it
    			// will not find an active Route in SSR and in the browser it will only
    			// pick an active Route after all Routes have been registered.
    			{
    				const bestMatch = pick($routes, $location.pathname);
    				activeRoute.set(bestMatch);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*$location, $prevLocation*/ 163840) {
    			// Manage focus and announce navigation to screen reader users
    			{
    				if (isTopLevelRouter) {
    					const hasHash = !!$location.hash;

    					// When a hash is present in the url, we skip focus management, because
    					// focusing a different element will prevent in-page jumps (See #3)
    					const shouldManageFocus = !hasHash && manageFocus;

    					// We don't want to make an announcement, when the hash changes,
    					// but the active route stays the same
    					const announceNavigation = !hasHash || $location.pathname !== $prevLocation.pathname;

    					triggerFocus(shouldManageFocus, announceNavigation);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*$activeRoute*/ 65536) {
    			// Queue matched Route, so top level Router can decide which Route to focus.
    			// Non primary Routers should just be ignored
    			if (manageFocus && $activeRoute && $activeRoute.primary) {
    				pushFocusCandidate({ level, routerId, route: $activeRoute });
    			}
    		}
    	};

    	return [
    		$announcementText,
    		a11yConfig,
    		isTopLevelRouter,
    		routerId,
    		manageFocus,
    		announcementText,
    		routes,
    		activeRoute,
    		location,
    		prevLocation,
    		basepath,
    		url,
    		history,
    		primary,
    		a11y,
    		$location,
    		$activeRoute,
    		$prevLocation,
    		$routes,
    		$$scope,
    		slots
    	];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$D,
    			create_fragment$C,
    			safe_not_equal,
    			{
    				basepath: 10,
    				url: 11,
    				history: 12,
    				primary: 13,
    				a11y: 14
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$C.name
    		});
    	}

    	get basepath() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set basepath(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get url() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set url(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get history() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set history(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get primary() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set primary(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get a11y() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set a11y(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Router$1 = Router;

    /**
     * Check if a component or hook have been created outside of a
     * context providing component
     * @param {number} componentId
     * @param {*} props
     * @param {string?} ctxKey
     * @param {number?} ctxProviderId
     */
    function usePreflightCheck(
    	componentId,
    	props,
    	ctxKey = ROUTER,
    	ctxProviderId = ROUTER_ID,
    ) {
    	const ctx = getContext(ctxKey);
    	if (!ctx) {
    		fail$1(
    			componentId,
    			label =>
    				`You cannot use ${label} outside of a ${createLabel(ctxProviderId)}.`,
    			props,
    		);
    	}
    }

    const toReadonly = ctx => {
    	const { subscribe } = getContext(ctx);
    	return { subscribe };
    };

    /**
     * Access the current location via a readable store.
     * @returns {import("svelte/store").Readable<{
        pathname: string;
        search: string;
        hash: string;
        state: {};
      }>}
     *
     * @example
      ```html
      <script>
        import { useLocation } from "svelte-navigator";

        const location = useLocation();

        $: console.log($location);
        // {
        //   pathname: "/blog",
        //   search: "?id=123",
        //   hash: "#comments",
        //   state: {}
        // }
      </script>
      ```
     */
    function useLocation() {
    	usePreflightCheck(USE_LOCATION_ID);
    	return toReadonly(LOCATION);
    }

    /**
     * @typedef {{
        path: string;
        fullPath: string;
        uri: string;
        params: {};
      }} RouteMatch
     */

    /**
     * @typedef {import("svelte/store").Readable<RouteMatch|null>} RouteMatchStore
     */

    /**
     * Access the history of top level Router.
     */
    function useHistory() {
    	const { history } = getContext(ROUTER);
    	return history;
    }

    /**
     * Access the base of the parent Route.
     */
    function useRouteBase() {
    	const route = getContext(ROUTE);
    	return route ? derived(route, _route => _route.base) : writable("/");
    }

    /**
     * Resolve a given link relative to the current `Route` and the `Router`s `basepath`.
     * It is used under the hood in `Link` and `useNavigate`.
     * You can use it to manually resolve links, when using the `link` or `links` actions.
     *
     * @returns {(path: string) => string}
     *
     * @example
      ```html
      <script>
        import { link, useResolve } from "svelte-navigator";

        const resolve = useResolve();
        // `resolvedLink` will be resolved relative to its parent Route
        // and the Routers `basepath`
        const resolvedLink = resolve("relativePath");
      </script>

      <a href={resolvedLink} use:link>Relative link</a>
      ```
     */
    function useResolve() {
    	usePreflightCheck(USE_RESOLVE_ID);
    	const routeBase = useRouteBase();
    	const { basepath: appBase } = getContext(ROUTER);
    	/**
    	 * Resolves the path relative to the current route and basepath.
    	 *
    	 * @param {string} path The path to resolve
    	 * @returns {string} The resolved path
    	 */
    	const resolve = path => resolveLink(path, get_store_value(routeBase), appBase);
    	return resolve;
    }

    /**
     * A hook, that returns a context-aware version of `navigate`.
     * It will automatically resolve the given link relative to the current Route.
     * It will also resolve a link against the `basepath` of the Router.
     *
     * @example
      ```html
      <!-- App.svelte -->
      <script>
        import { link, Route } from "svelte-navigator";
        import RouteComponent from "./RouteComponent.svelte";
      </script>

      <Router>
        <Route path="route1">
          <RouteComponent />
        </Route>
        <!-- ... -->
      </Router>

      <!-- RouteComponent.svelte -->
      <script>
        import { useNavigate } from "svelte-navigator";

        const navigate = useNavigate();
      </script>

      <button on:click="{() => navigate('relativePath')}">
        go to /route1/relativePath
      </button>
      <button on:click="{() => navigate('/absolutePath')}">
        go to /absolutePath
      </button>
      ```
      *
      * @example
      ```html
      <!-- App.svelte -->
      <script>
        import { link, Route } from "svelte-navigator";
        import RouteComponent from "./RouteComponent.svelte";
      </script>

      <Router basepath="/base">
        <Route path="route1">
          <RouteComponent />
        </Route>
        <!-- ... -->
      </Router>

      <!-- RouteComponent.svelte -->
      <script>
        import { useNavigate } from "svelte-navigator";

        const navigate = useNavigate();
      </script>

      <button on:click="{() => navigate('relativePath')}">
        go to /base/route1/relativePath
      </button>
      <button on:click="{() => navigate('/absolutePath')}">
        go to /base/absolutePath
      </button>
      ```
     */
    function useNavigate() {
    	usePreflightCheck(USE_NAVIGATE_ID);
    	const resolve = useResolve();
    	const { navigate } = useHistory();
    	/**
    	 * Navigate to a new route.
    	 * Resolves the link relative to the current route and basepath.
    	 *
    	 * @param {string|number} to The path to navigate to.
    	 *
    	 * If `to` is a number we will navigate to the stack entry index + `to`
    	 * (-> `navigate(-1)`, is equivalent to hitting the back button of the browser)
    	 * @param {Object} options
    	 * @param {*} [options.state]
    	 * @param {boolean} [options.replace=false]
    	 */
    	const navigateRelative = (to, options) => {
    		// If to is a number, we navigate to the target stack entry via `history.go`.
    		// Otherwise resolve the link
    		const target = isNumber$1(to) ? to : resolve(to);
    		return navigate(target, options);
    	};
    	return navigateRelative;
    }

    /* node_modules/svelte-navigator/src/Route.svelte generated by Svelte v3.44.2 */
    const file$A = "node_modules/svelte-navigator/src/Route.svelte";

    const get_default_slot_changes$1 = dirty => ({
    	params: dirty & /*$params*/ 16,
    	location: dirty & /*$location*/ 8
    });

    const get_default_slot_context$1 = ctx => ({
    	params: isSSR ? get_store_value(/*params*/ ctx[9]) : /*$params*/ ctx[4],
    	location: /*$location*/ ctx[3],
    	navigate: /*navigate*/ ctx[10]
    });

    // (97:0) {#if isActive}
    function create_if_block$q(ctx) {
    	let router;
    	let current;

    	router = new Router$1({
    			props: {
    				primary: /*primary*/ ctx[1],
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(router.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(router, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const router_changes = {};
    			if (dirty & /*primary*/ 2) router_changes.primary = /*primary*/ ctx[1];

    			if (dirty & /*$$scope, component, $location, $params, $$restProps*/ 264217) {
    				router_changes.$$scope = { dirty, ctx };
    			}

    			router.$set(router_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(router, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$q.name,
    		type: "if",
    		source: "(97:0) {#if isActive}",
    		ctx
    	});

    	return block;
    }

    // (113:2) {:else}
    function create_else_block$f(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[17].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], get_default_slot_context$1);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, $params, $location*/ 262168)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[18],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, get_default_slot_changes$1),
    						get_default_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$f.name,
    		type: "else",
    		source: "(113:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (105:2) {#if component !== null}
    function create_if_block_1$j(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{ location: /*$location*/ ctx[3] },
    		{ navigate: /*navigate*/ ctx[10] },
    		isSSR ? get_store_value(/*params*/ ctx[9]) : /*$params*/ ctx[4],
    		/*$$restProps*/ ctx[11]
    	];

    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign$2(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*$location, navigate, isSSR, get, params, $params, $$restProps*/ 3608)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*$location*/ 8 && { location: /*$location*/ ctx[3] },
    					dirty & /*navigate*/ 1024 && { navigate: /*navigate*/ ctx[10] },
    					dirty & /*isSSR, get, params, $params*/ 528 && get_spread_object(isSSR ? get_store_value(/*params*/ ctx[9]) : /*$params*/ ctx[4]),
    					dirty & /*$$restProps*/ 2048 && get_spread_object(/*$$restProps*/ ctx[11])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$j.name,
    		type: "if",
    		source: "(105:2) {#if component !== null}",
    		ctx
    	});

    	return block;
    }

    // (98:1) <Router {primary}>
    function create_default_slot$4(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$j, create_else_block$f];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*component*/ ctx[0] !== null) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(98:1) <Router {primary}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$B(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let current;
    	let if_block = /*isActive*/ ctx[2] && create_if_block$q(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			div1 = element("div");
    			set_style(div0, "display", "none");
    			attr_dev(div0, "aria-hidden", "true");
    			attr_dev(div0, "data-svnav-route-start", /*id*/ ctx[5]);
    			add_location(div0, file$A, 95, 0, 2622);
    			set_style(div1, "display", "none");
    			attr_dev(div1, "aria-hidden", "true");
    			attr_dev(div1, "data-svnav-route-end", /*id*/ ctx[5]);
    			add_location(div1, file$A, 121, 0, 3295);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*isActive*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*isActive*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$q(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t1.parentNode, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const createId = createCounter();

    function instance$C($$self, $$props, $$invalidate) {
    	let isActive;
    	const omit_props_names = ["path","component","meta","primary"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $activeRoute;
    	let $location;
    	let $parentBase;
    	let $params;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Route', slots, ['default']);
    	let { path = "" } = $$props;
    	let { component = null } = $$props;
    	let { meta = {} } = $$props;
    	let { primary = true } = $$props;
    	usePreflightCheck(ROUTE_ID, $$props);
    	const id = createId();
    	const { registerRoute, unregisterRoute, activeRoute } = getContext(ROUTER);
    	validate_store(activeRoute, 'activeRoute');
    	component_subscribe($$self, activeRoute, value => $$invalidate(15, $activeRoute = value));
    	const parentBase = useRouteBase();
    	validate_store(parentBase, 'parentBase');
    	component_subscribe($$self, parentBase, value => $$invalidate(16, $parentBase = value));
    	const location = useLocation();
    	validate_store(location, 'location');
    	component_subscribe($$self, location, value => $$invalidate(3, $location = value));
    	const focusElement = writable(null);

    	// In SSR we cannot wait for $activeRoute to update,
    	// so we use the match returned from `registerRoute` instead
    	let ssrMatch;

    	const route = writable();
    	const params = writable({});
    	validate_store(params, 'params');
    	component_subscribe($$self, params, value => $$invalidate(4, $params = value));
    	setContext(ROUTE, route);
    	setContext(ROUTE_PARAMS, params);
    	setContext(FOCUS_ELEM, focusElement);

    	// We need to call useNavigate after the route is set,
    	// so we can use the routes path for link resolution
    	const navigate = useNavigate();

    	// There is no need to unregister Routes in SSR since it will all be
    	// thrown away anyway
    	if (!isSSR) {
    		onDestroy(() => unregisterRoute(id));
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(23, $$props = assign$2(assign$2({}, $$props), exclude_internal_props($$new_props)));
    		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('path' in $$new_props) $$invalidate(12, path = $$new_props.path);
    		if ('component' in $$new_props) $$invalidate(0, component = $$new_props.component);
    		if ('meta' in $$new_props) $$invalidate(13, meta = $$new_props.meta);
    		if ('primary' in $$new_props) $$invalidate(1, primary = $$new_props.primary);
    		if ('$$scope' in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		createCounter,
    		createId,
    		getContext,
    		onDestroy,
    		setContext,
    		writable,
    		get: get_store_value,
    		Router: Router$1,
    		ROUTER,
    		ROUTE,
    		ROUTE_PARAMS,
    		FOCUS_ELEM,
    		useLocation,
    		useNavigate,
    		useRouteBase,
    		usePreflightCheck,
    		isSSR,
    		extractBaseUri,
    		join,
    		ROUTE_ID,
    		path,
    		component,
    		meta,
    		primary,
    		id,
    		registerRoute,
    		unregisterRoute,
    		activeRoute,
    		parentBase,
    		location,
    		focusElement,
    		ssrMatch,
    		route,
    		params,
    		navigate,
    		isActive,
    		$activeRoute,
    		$location,
    		$parentBase,
    		$params
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(23, $$props = assign$2(assign$2({}, $$props), $$new_props));
    		if ('path' in $$props) $$invalidate(12, path = $$new_props.path);
    		if ('component' in $$props) $$invalidate(0, component = $$new_props.component);
    		if ('meta' in $$props) $$invalidate(13, meta = $$new_props.meta);
    		if ('primary' in $$props) $$invalidate(1, primary = $$new_props.primary);
    		if ('ssrMatch' in $$props) $$invalidate(14, ssrMatch = $$new_props.ssrMatch);
    		if ('isActive' in $$props) $$invalidate(2, isActive = $$new_props.isActive);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*path, $parentBase, meta, $location, primary*/ 77834) {
    			{
    				// The route store will be re-computed whenever props, location or parentBase change
    				const isDefault = path === "";

    				const rawBase = join($parentBase, path);

    				const updatedRoute = {
    					id,
    					path,
    					meta,
    					// If no path prop is given, this Route will act as the default Route
    					// that is rendered if no other Route in the Router is a match
    					default: isDefault,
    					fullPath: isDefault ? "" : rawBase,
    					base: isDefault
    					? $parentBase
    					: extractBaseUri(rawBase, $location.pathname),
    					primary,
    					focusElement
    				};

    				route.set(updatedRoute);

    				// If we're in SSR mode and the Route matches,
    				// `registerRoute` will return the match
    				$$invalidate(14, ssrMatch = registerRoute(updatedRoute));
    			}
    		}

    		if ($$self.$$.dirty & /*ssrMatch, $activeRoute*/ 49152) {
    			$$invalidate(2, isActive = !!(ssrMatch || $activeRoute && $activeRoute.id === id));
    		}

    		if ($$self.$$.dirty & /*isActive, ssrMatch, $activeRoute*/ 49156) {
    			if (isActive) {
    				const { params: activeParams } = ssrMatch || $activeRoute;
    				params.set(activeParams);
    			}
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		component,
    		primary,
    		isActive,
    		$location,
    		$params,
    		id,
    		activeRoute,
    		parentBase,
    		location,
    		params,
    		navigate,
    		$$restProps,
    		path,
    		meta,
    		ssrMatch,
    		$activeRoute,
    		$parentBase,
    		slots,
    		$$scope
    	];
    }

    class Route extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$C, create_fragment$B, safe_not_equal, {
    			path: 12,
    			component: 0,
    			meta: 13,
    			primary: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Route",
    			options,
    			id: create_fragment$B.name
    		});
    	}

    	get path() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get meta() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set meta(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get primary() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set primary(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Route$1 = Route;

    /*
     * Adapted from https://github.com/EmilTholin/svelte-routing
     *
     * https://github.com/EmilTholin/svelte-routing/blob/master/LICENSE
     */

    const createAction = getAnchor => (node, navigate$1 = navigate) => {
    	const handleClick = event => {
    		const anchor = getAnchor(event);
    		if (anchor && anchor.target === "" && shouldNavigate(event)) {
    			event.preventDefault();
    			const to = anchor.pathname + anchor.search + anchor.hash;
    			navigate$1(to, { replace: anchor.hasAttribute("replace") });
    		}
    	};
    	const unlisten = addListener$1(node, "click", handleClick);
    	return { destroy: unlisten };
    };

    // prettier-ignore
    /**
     * A link action that can be added to <a href=""> tags rather
     * than using the <Link> component.
     *
     * Example:
     * ```html
     * <a href="/post/{postId}" use:link>{post.title}</a>
     * ```
     */
    const link = /*#__PURE__*/createAction(event => event.currentTarget); // eslint-disable-line spaced-comment, max-len

    var global$2 = (typeof global !== "undefined" ? global :
                typeof self !== "undefined" ? self :
                typeof window !== "undefined" ? window : {});

    var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs$1 (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, basedir, module) {
    	return module = {
    		path: basedir,
    		exports: {},
    		require: function (path, base) {
    			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    		}
    	}, fn(module, module.exports), module.exports;
    }

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var _nodeResolve_empty = {};

    var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': _nodeResolve_empty
    });

    var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

    var naclFast = createCommonjsModule(function (module) {
    (function(nacl) {

    // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
    // Public domain.
    //
    // Implementation derived from TweetNaCl version 20140427.
    // See for details: http://tweetnacl.cr.yp.to/

    var gf = function(init) {
      var i, r = new Float64Array(16);
      if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
      return r;
    };

    //  Pluggable, initialized in high-level API below.
    var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

    var _0 = new Uint8Array(16);
    var _9 = new Uint8Array(32); _9[0] = 9;

    var gf0 = gf(),
        gf1 = gf([1]),
        _121665 = gf([0xdb41, 1]),
        D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
        D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
        X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
        Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
        I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

    function ts64(x, i, h, l) {
      x[i]   = (h >> 24) & 0xff;
      x[i+1] = (h >> 16) & 0xff;
      x[i+2] = (h >>  8) & 0xff;
      x[i+3] = h & 0xff;
      x[i+4] = (l >> 24)  & 0xff;
      x[i+5] = (l >> 16)  & 0xff;
      x[i+6] = (l >>  8)  & 0xff;
      x[i+7] = l & 0xff;
    }

    function vn(x, xi, y, yi, n) {
      var i,d = 0;
      for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
      return (1 & ((d - 1) >>> 8)) - 1;
    }

    function crypto_verify_16(x, xi, y, yi) {
      return vn(x,xi,y,yi,16);
    }

    function crypto_verify_32(x, xi, y, yi) {
      return vn(x,xi,y,yi,32);
    }

    function core_salsa20(o, p, k, c) {
      var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
          j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
          j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
          j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
          j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
          j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
          j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
          j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
          j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
          j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
          j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
          j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
          j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
          j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
          j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
          j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

      var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
          x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
          x15 = j15, u;

      for (var i = 0; i < 20; i += 2) {
        u = x0 + x12 | 0;
        x4 ^= u<<7 | u>>>(32-7);
        u = x4 + x0 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x4 | 0;
        x12 ^= u<<13 | u>>>(32-13);
        u = x12 + x8 | 0;
        x0 ^= u<<18 | u>>>(32-18);

        u = x5 + x1 | 0;
        x9 ^= u<<7 | u>>>(32-7);
        u = x9 + x5 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x9 | 0;
        x1 ^= u<<13 | u>>>(32-13);
        u = x1 + x13 | 0;
        x5 ^= u<<18 | u>>>(32-18);

        u = x10 + x6 | 0;
        x14 ^= u<<7 | u>>>(32-7);
        u = x14 + x10 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x14 | 0;
        x6 ^= u<<13 | u>>>(32-13);
        u = x6 + x2 | 0;
        x10 ^= u<<18 | u>>>(32-18);

        u = x15 + x11 | 0;
        x3 ^= u<<7 | u>>>(32-7);
        u = x3 + x15 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x3 | 0;
        x11 ^= u<<13 | u>>>(32-13);
        u = x11 + x7 | 0;
        x15 ^= u<<18 | u>>>(32-18);

        u = x0 + x3 | 0;
        x1 ^= u<<7 | u>>>(32-7);
        u = x1 + x0 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x1 | 0;
        x3 ^= u<<13 | u>>>(32-13);
        u = x3 + x2 | 0;
        x0 ^= u<<18 | u>>>(32-18);

        u = x5 + x4 | 0;
        x6 ^= u<<7 | u>>>(32-7);
        u = x6 + x5 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x6 | 0;
        x4 ^= u<<13 | u>>>(32-13);
        u = x4 + x7 | 0;
        x5 ^= u<<18 | u>>>(32-18);

        u = x10 + x9 | 0;
        x11 ^= u<<7 | u>>>(32-7);
        u = x11 + x10 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x11 | 0;
        x9 ^= u<<13 | u>>>(32-13);
        u = x9 + x8 | 0;
        x10 ^= u<<18 | u>>>(32-18);

        u = x15 + x14 | 0;
        x12 ^= u<<7 | u>>>(32-7);
        u = x12 + x15 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x12 | 0;
        x14 ^= u<<13 | u>>>(32-13);
        u = x14 + x13 | 0;
        x15 ^= u<<18 | u>>>(32-18);
      }
       x0 =  x0 +  j0 | 0;
       x1 =  x1 +  j1 | 0;
       x2 =  x2 +  j2 | 0;
       x3 =  x3 +  j3 | 0;
       x4 =  x4 +  j4 | 0;
       x5 =  x5 +  j5 | 0;
       x6 =  x6 +  j6 | 0;
       x7 =  x7 +  j7 | 0;
       x8 =  x8 +  j8 | 0;
       x9 =  x9 +  j9 | 0;
      x10 = x10 + j10 | 0;
      x11 = x11 + j11 | 0;
      x12 = x12 + j12 | 0;
      x13 = x13 + j13 | 0;
      x14 = x14 + j14 | 0;
      x15 = x15 + j15 | 0;

      o[ 0] = x0 >>>  0 & 0xff;
      o[ 1] = x0 >>>  8 & 0xff;
      o[ 2] = x0 >>> 16 & 0xff;
      o[ 3] = x0 >>> 24 & 0xff;

      o[ 4] = x1 >>>  0 & 0xff;
      o[ 5] = x1 >>>  8 & 0xff;
      o[ 6] = x1 >>> 16 & 0xff;
      o[ 7] = x1 >>> 24 & 0xff;

      o[ 8] = x2 >>>  0 & 0xff;
      o[ 9] = x2 >>>  8 & 0xff;
      o[10] = x2 >>> 16 & 0xff;
      o[11] = x2 >>> 24 & 0xff;

      o[12] = x3 >>>  0 & 0xff;
      o[13] = x3 >>>  8 & 0xff;
      o[14] = x3 >>> 16 & 0xff;
      o[15] = x3 >>> 24 & 0xff;

      o[16] = x4 >>>  0 & 0xff;
      o[17] = x4 >>>  8 & 0xff;
      o[18] = x4 >>> 16 & 0xff;
      o[19] = x4 >>> 24 & 0xff;

      o[20] = x5 >>>  0 & 0xff;
      o[21] = x5 >>>  8 & 0xff;
      o[22] = x5 >>> 16 & 0xff;
      o[23] = x5 >>> 24 & 0xff;

      o[24] = x6 >>>  0 & 0xff;
      o[25] = x6 >>>  8 & 0xff;
      o[26] = x6 >>> 16 & 0xff;
      o[27] = x6 >>> 24 & 0xff;

      o[28] = x7 >>>  0 & 0xff;
      o[29] = x7 >>>  8 & 0xff;
      o[30] = x7 >>> 16 & 0xff;
      o[31] = x7 >>> 24 & 0xff;

      o[32] = x8 >>>  0 & 0xff;
      o[33] = x8 >>>  8 & 0xff;
      o[34] = x8 >>> 16 & 0xff;
      o[35] = x8 >>> 24 & 0xff;

      o[36] = x9 >>>  0 & 0xff;
      o[37] = x9 >>>  8 & 0xff;
      o[38] = x9 >>> 16 & 0xff;
      o[39] = x9 >>> 24 & 0xff;

      o[40] = x10 >>>  0 & 0xff;
      o[41] = x10 >>>  8 & 0xff;
      o[42] = x10 >>> 16 & 0xff;
      o[43] = x10 >>> 24 & 0xff;

      o[44] = x11 >>>  0 & 0xff;
      o[45] = x11 >>>  8 & 0xff;
      o[46] = x11 >>> 16 & 0xff;
      o[47] = x11 >>> 24 & 0xff;

      o[48] = x12 >>>  0 & 0xff;
      o[49] = x12 >>>  8 & 0xff;
      o[50] = x12 >>> 16 & 0xff;
      o[51] = x12 >>> 24 & 0xff;

      o[52] = x13 >>>  0 & 0xff;
      o[53] = x13 >>>  8 & 0xff;
      o[54] = x13 >>> 16 & 0xff;
      o[55] = x13 >>> 24 & 0xff;

      o[56] = x14 >>>  0 & 0xff;
      o[57] = x14 >>>  8 & 0xff;
      o[58] = x14 >>> 16 & 0xff;
      o[59] = x14 >>> 24 & 0xff;

      o[60] = x15 >>>  0 & 0xff;
      o[61] = x15 >>>  8 & 0xff;
      o[62] = x15 >>> 16 & 0xff;
      o[63] = x15 >>> 24 & 0xff;
    }

    function core_hsalsa20(o,p,k,c) {
      var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
          j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
          j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
          j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
          j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
          j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
          j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
          j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
          j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
          j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
          j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
          j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
          j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
          j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
          j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
          j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

      var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
          x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
          x15 = j15, u;

      for (var i = 0; i < 20; i += 2) {
        u = x0 + x12 | 0;
        x4 ^= u<<7 | u>>>(32-7);
        u = x4 + x0 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x4 | 0;
        x12 ^= u<<13 | u>>>(32-13);
        u = x12 + x8 | 0;
        x0 ^= u<<18 | u>>>(32-18);

        u = x5 + x1 | 0;
        x9 ^= u<<7 | u>>>(32-7);
        u = x9 + x5 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x9 | 0;
        x1 ^= u<<13 | u>>>(32-13);
        u = x1 + x13 | 0;
        x5 ^= u<<18 | u>>>(32-18);

        u = x10 + x6 | 0;
        x14 ^= u<<7 | u>>>(32-7);
        u = x14 + x10 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x14 | 0;
        x6 ^= u<<13 | u>>>(32-13);
        u = x6 + x2 | 0;
        x10 ^= u<<18 | u>>>(32-18);

        u = x15 + x11 | 0;
        x3 ^= u<<7 | u>>>(32-7);
        u = x3 + x15 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x3 | 0;
        x11 ^= u<<13 | u>>>(32-13);
        u = x11 + x7 | 0;
        x15 ^= u<<18 | u>>>(32-18);

        u = x0 + x3 | 0;
        x1 ^= u<<7 | u>>>(32-7);
        u = x1 + x0 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x1 | 0;
        x3 ^= u<<13 | u>>>(32-13);
        u = x3 + x2 | 0;
        x0 ^= u<<18 | u>>>(32-18);

        u = x5 + x4 | 0;
        x6 ^= u<<7 | u>>>(32-7);
        u = x6 + x5 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x6 | 0;
        x4 ^= u<<13 | u>>>(32-13);
        u = x4 + x7 | 0;
        x5 ^= u<<18 | u>>>(32-18);

        u = x10 + x9 | 0;
        x11 ^= u<<7 | u>>>(32-7);
        u = x11 + x10 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x11 | 0;
        x9 ^= u<<13 | u>>>(32-13);
        u = x9 + x8 | 0;
        x10 ^= u<<18 | u>>>(32-18);

        u = x15 + x14 | 0;
        x12 ^= u<<7 | u>>>(32-7);
        u = x12 + x15 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x12 | 0;
        x14 ^= u<<13 | u>>>(32-13);
        u = x14 + x13 | 0;
        x15 ^= u<<18 | u>>>(32-18);
      }

      o[ 0] = x0 >>>  0 & 0xff;
      o[ 1] = x0 >>>  8 & 0xff;
      o[ 2] = x0 >>> 16 & 0xff;
      o[ 3] = x0 >>> 24 & 0xff;

      o[ 4] = x5 >>>  0 & 0xff;
      o[ 5] = x5 >>>  8 & 0xff;
      o[ 6] = x5 >>> 16 & 0xff;
      o[ 7] = x5 >>> 24 & 0xff;

      o[ 8] = x10 >>>  0 & 0xff;
      o[ 9] = x10 >>>  8 & 0xff;
      o[10] = x10 >>> 16 & 0xff;
      o[11] = x10 >>> 24 & 0xff;

      o[12] = x15 >>>  0 & 0xff;
      o[13] = x15 >>>  8 & 0xff;
      o[14] = x15 >>> 16 & 0xff;
      o[15] = x15 >>> 24 & 0xff;

      o[16] = x6 >>>  0 & 0xff;
      o[17] = x6 >>>  8 & 0xff;
      o[18] = x6 >>> 16 & 0xff;
      o[19] = x6 >>> 24 & 0xff;

      o[20] = x7 >>>  0 & 0xff;
      o[21] = x7 >>>  8 & 0xff;
      o[22] = x7 >>> 16 & 0xff;
      o[23] = x7 >>> 24 & 0xff;

      o[24] = x8 >>>  0 & 0xff;
      o[25] = x8 >>>  8 & 0xff;
      o[26] = x8 >>> 16 & 0xff;
      o[27] = x8 >>> 24 & 0xff;

      o[28] = x9 >>>  0 & 0xff;
      o[29] = x9 >>>  8 & 0xff;
      o[30] = x9 >>> 16 & 0xff;
      o[31] = x9 >>> 24 & 0xff;
    }

    function crypto_core_salsa20(out,inp,k,c) {
      core_salsa20(out,inp,k,c);
    }

    function crypto_core_hsalsa20(out,inp,k,c) {
      core_hsalsa20(out,inp,k,c);
    }

    var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
                // "expand 32-byte k"

    function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
      var z = new Uint8Array(16), x = new Uint8Array(64);
      var u, i;
      for (i = 0; i < 16; i++) z[i] = 0;
      for (i = 0; i < 8; i++) z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = u + (z[i] & 0xff) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
        mpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
      }
      return 0;
    }

    function crypto_stream_salsa20(c,cpos,b,n,k) {
      var z = new Uint8Array(16), x = new Uint8Array(64);
      var u, i;
      for (i = 0; i < 16; i++) z[i] = 0;
      for (i = 0; i < 8; i++) z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < 64; i++) c[cpos+i] = x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = u + (z[i] & 0xff) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < b; i++) c[cpos+i] = x[i];
      }
      return 0;
    }

    function crypto_stream(c,cpos,d,n,k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s,n,k,sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++) sn[i] = n[i+16];
      return crypto_stream_salsa20(c,cpos,d,sn,s);
    }

    function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s,n,k,sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++) sn[i] = n[i+16];
      return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
    }

    /*
    * Port of Andrew Moon's Poly1305-donna-16. Public domain.
    * https://github.com/floodyberry/poly1305-donna
    */

    var poly1305 = function(key) {
      this.buffer = new Uint8Array(16);
      this.r = new Uint16Array(10);
      this.h = new Uint16Array(10);
      this.pad = new Uint16Array(8);
      this.leftover = 0;
      this.fin = 0;

      var t0, t1, t2, t3, t4, t5, t6, t7;

      t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
      t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
      t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
      t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
      t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
      this.r[5] = ((t4 >>>  1)) & 0x1ffe;
      t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
      t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
      t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
      this.r[9] = ((t7 >>>  5)) & 0x007f;

      this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
      this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
      this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
      this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
      this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
      this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
      this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
      this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
    };

    poly1305.prototype.blocks = function(m, mpos, bytes) {
      var hibit = this.fin ? 0 : (1 << 11);
      var t0, t1, t2, t3, t4, t5, t6, t7, c;
      var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

      var h0 = this.h[0],
          h1 = this.h[1],
          h2 = this.h[2],
          h3 = this.h[3],
          h4 = this.h[4],
          h5 = this.h[5],
          h6 = this.h[6],
          h7 = this.h[7],
          h8 = this.h[8],
          h9 = this.h[9];

      var r0 = this.r[0],
          r1 = this.r[1],
          r2 = this.r[2],
          r3 = this.r[3],
          r4 = this.r[4],
          r5 = this.r[5],
          r6 = this.r[6],
          r7 = this.r[7],
          r8 = this.r[8],
          r9 = this.r[9];

      while (bytes >= 16) {
        t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
        t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
        t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
        t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
        t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
        h5 += ((t4 >>>  1)) & 0x1fff;
        t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
        t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
        t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
        h9 += ((t7 >>> 5)) | hibit;

        c = 0;

        d0 = c;
        d0 += h0 * r0;
        d0 += h1 * (5 * r9);
        d0 += h2 * (5 * r8);
        d0 += h3 * (5 * r7);
        d0 += h4 * (5 * r6);
        c = (d0 >>> 13); d0 &= 0x1fff;
        d0 += h5 * (5 * r5);
        d0 += h6 * (5 * r4);
        d0 += h7 * (5 * r3);
        d0 += h8 * (5 * r2);
        d0 += h9 * (5 * r1);
        c += (d0 >>> 13); d0 &= 0x1fff;

        d1 = c;
        d1 += h0 * r1;
        d1 += h1 * r0;
        d1 += h2 * (5 * r9);
        d1 += h3 * (5 * r8);
        d1 += h4 * (5 * r7);
        c = (d1 >>> 13); d1 &= 0x1fff;
        d1 += h5 * (5 * r6);
        d1 += h6 * (5 * r5);
        d1 += h7 * (5 * r4);
        d1 += h8 * (5 * r3);
        d1 += h9 * (5 * r2);
        c += (d1 >>> 13); d1 &= 0x1fff;

        d2 = c;
        d2 += h0 * r2;
        d2 += h1 * r1;
        d2 += h2 * r0;
        d2 += h3 * (5 * r9);
        d2 += h4 * (5 * r8);
        c = (d2 >>> 13); d2 &= 0x1fff;
        d2 += h5 * (5 * r7);
        d2 += h6 * (5 * r6);
        d2 += h7 * (5 * r5);
        d2 += h8 * (5 * r4);
        d2 += h9 * (5 * r3);
        c += (d2 >>> 13); d2 &= 0x1fff;

        d3 = c;
        d3 += h0 * r3;
        d3 += h1 * r2;
        d3 += h2 * r1;
        d3 += h3 * r0;
        d3 += h4 * (5 * r9);
        c = (d3 >>> 13); d3 &= 0x1fff;
        d3 += h5 * (5 * r8);
        d3 += h6 * (5 * r7);
        d3 += h7 * (5 * r6);
        d3 += h8 * (5 * r5);
        d3 += h9 * (5 * r4);
        c += (d3 >>> 13); d3 &= 0x1fff;

        d4 = c;
        d4 += h0 * r4;
        d4 += h1 * r3;
        d4 += h2 * r2;
        d4 += h3 * r1;
        d4 += h4 * r0;
        c = (d4 >>> 13); d4 &= 0x1fff;
        d4 += h5 * (5 * r9);
        d4 += h6 * (5 * r8);
        d4 += h7 * (5 * r7);
        d4 += h8 * (5 * r6);
        d4 += h9 * (5 * r5);
        c += (d4 >>> 13); d4 &= 0x1fff;

        d5 = c;
        d5 += h0 * r5;
        d5 += h1 * r4;
        d5 += h2 * r3;
        d5 += h3 * r2;
        d5 += h4 * r1;
        c = (d5 >>> 13); d5 &= 0x1fff;
        d5 += h5 * r0;
        d5 += h6 * (5 * r9);
        d5 += h7 * (5 * r8);
        d5 += h8 * (5 * r7);
        d5 += h9 * (5 * r6);
        c += (d5 >>> 13); d5 &= 0x1fff;

        d6 = c;
        d6 += h0 * r6;
        d6 += h1 * r5;
        d6 += h2 * r4;
        d6 += h3 * r3;
        d6 += h4 * r2;
        c = (d6 >>> 13); d6 &= 0x1fff;
        d6 += h5 * r1;
        d6 += h6 * r0;
        d6 += h7 * (5 * r9);
        d6 += h8 * (5 * r8);
        d6 += h9 * (5 * r7);
        c += (d6 >>> 13); d6 &= 0x1fff;

        d7 = c;
        d7 += h0 * r7;
        d7 += h1 * r6;
        d7 += h2 * r5;
        d7 += h3 * r4;
        d7 += h4 * r3;
        c = (d7 >>> 13); d7 &= 0x1fff;
        d7 += h5 * r2;
        d7 += h6 * r1;
        d7 += h7 * r0;
        d7 += h8 * (5 * r9);
        d7 += h9 * (5 * r8);
        c += (d7 >>> 13); d7 &= 0x1fff;

        d8 = c;
        d8 += h0 * r8;
        d8 += h1 * r7;
        d8 += h2 * r6;
        d8 += h3 * r5;
        d8 += h4 * r4;
        c = (d8 >>> 13); d8 &= 0x1fff;
        d8 += h5 * r3;
        d8 += h6 * r2;
        d8 += h7 * r1;
        d8 += h8 * r0;
        d8 += h9 * (5 * r9);
        c += (d8 >>> 13); d8 &= 0x1fff;

        d9 = c;
        d9 += h0 * r9;
        d9 += h1 * r8;
        d9 += h2 * r7;
        d9 += h3 * r6;
        d9 += h4 * r5;
        c = (d9 >>> 13); d9 &= 0x1fff;
        d9 += h5 * r4;
        d9 += h6 * r3;
        d9 += h7 * r2;
        d9 += h8 * r1;
        d9 += h9 * r0;
        c += (d9 >>> 13); d9 &= 0x1fff;

        c = (((c << 2) + c)) | 0;
        c = (c + d0) | 0;
        d0 = c & 0x1fff;
        c = (c >>> 13);
        d1 += c;

        h0 = d0;
        h1 = d1;
        h2 = d2;
        h3 = d3;
        h4 = d4;
        h5 = d5;
        h6 = d6;
        h7 = d7;
        h8 = d8;
        h9 = d9;

        mpos += 16;
        bytes -= 16;
      }
      this.h[0] = h0;
      this.h[1] = h1;
      this.h[2] = h2;
      this.h[3] = h3;
      this.h[4] = h4;
      this.h[5] = h5;
      this.h[6] = h6;
      this.h[7] = h7;
      this.h[8] = h8;
      this.h[9] = h9;
    };

    poly1305.prototype.finish = function(mac, macpos) {
      var g = new Uint16Array(10);
      var c, mask, f, i;

      if (this.leftover) {
        i = this.leftover;
        this.buffer[i++] = 1;
        for (; i < 16; i++) this.buffer[i] = 0;
        this.fin = 1;
        this.blocks(this.buffer, 0, 16);
      }

      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      for (i = 2; i < 10; i++) {
        this.h[i] += c;
        c = this.h[i] >>> 13;
        this.h[i] &= 0x1fff;
      }
      this.h[0] += (c * 5);
      c = this.h[0] >>> 13;
      this.h[0] &= 0x1fff;
      this.h[1] += c;
      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      this.h[2] += c;

      g[0] = this.h[0] + 5;
      c = g[0] >>> 13;
      g[0] &= 0x1fff;
      for (i = 1; i < 10; i++) {
        g[i] = this.h[i] + c;
        c = g[i] >>> 13;
        g[i] &= 0x1fff;
      }
      g[9] -= (1 << 13);

      mask = (c ^ 1) - 1;
      for (i = 0; i < 10; i++) g[i] &= mask;
      mask = ~mask;
      for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

      this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
      this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
      this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
      this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
      this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
      this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
      this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
      this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

      f = this.h[0] + this.pad[0];
      this.h[0] = f & 0xffff;
      for (i = 1; i < 8; i++) {
        f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
        this.h[i] = f & 0xffff;
      }

      mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
      mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
      mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
      mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
      mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
      mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
      mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
      mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
      mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
      mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
      mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
      mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
      mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
      mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
      mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
      mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
    };

    poly1305.prototype.update = function(m, mpos, bytes) {
      var i, want;

      if (this.leftover) {
        want = (16 - this.leftover);
        if (want > bytes)
          want = bytes;
        for (i = 0; i < want; i++)
          this.buffer[this.leftover + i] = m[mpos+i];
        bytes -= want;
        mpos += want;
        this.leftover += want;
        if (this.leftover < 16)
          return;
        this.blocks(this.buffer, 0, 16);
        this.leftover = 0;
      }

      if (bytes >= 16) {
        want = bytes - (bytes % 16);
        this.blocks(m, mpos, want);
        mpos += want;
        bytes -= want;
      }

      if (bytes) {
        for (i = 0; i < bytes; i++)
          this.buffer[this.leftover + i] = m[mpos+i];
        this.leftover += bytes;
      }
    };

    function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
      var s = new poly1305(k);
      s.update(m, mpos, n);
      s.finish(out, outpos);
      return 0;
    }

    function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
      var x = new Uint8Array(16);
      crypto_onetimeauth(x,0,m,mpos,n,k);
      return crypto_verify_16(h,hpos,x,0);
    }

    function crypto_secretbox(c,m,d,n,k) {
      var i;
      if (d < 32) return -1;
      crypto_stream_xor(c,0,m,0,d,n,k);
      crypto_onetimeauth(c, 16, c, 32, d - 32, c);
      for (i = 0; i < 16; i++) c[i] = 0;
      return 0;
    }

    function crypto_secretbox_open(m,c,d,n,k) {
      var i;
      var x = new Uint8Array(32);
      if (d < 32) return -1;
      crypto_stream(x,0,32,n,k);
      if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
      crypto_stream_xor(m,0,c,0,d,n,k);
      for (i = 0; i < 32; i++) m[i] = 0;
      return 0;
    }

    function set25519(r, a) {
      var i;
      for (i = 0; i < 16; i++) r[i] = a[i]|0;
    }

    function car25519(o) {
      var i, v, c = 1;
      for (i = 0; i < 16; i++) {
        v = o[i] + c + 65535;
        c = Math.floor(v / 65536);
        o[i] = v - c * 65536;
      }
      o[0] += c-1 + 37 * (c-1);
    }

    function sel25519(p, q, b) {
      var t, c = ~(b-1);
      for (var i = 0; i < 16; i++) {
        t = c & (p[i] ^ q[i]);
        p[i] ^= t;
        q[i] ^= t;
      }
    }

    function pack25519(o, n) {
      var i, j, b;
      var m = gf(), t = gf();
      for (i = 0; i < 16; i++) t[i] = n[i];
      car25519(t);
      car25519(t);
      car25519(t);
      for (j = 0; j < 2; j++) {
        m[0] = t[0] - 0xffed;
        for (i = 1; i < 15; i++) {
          m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
          m[i-1] &= 0xffff;
        }
        m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
        b = (m[15]>>16) & 1;
        m[14] &= 0xffff;
        sel25519(t, m, 1-b);
      }
      for (i = 0; i < 16; i++) {
        o[2*i] = t[i] & 0xff;
        o[2*i+1] = t[i]>>8;
      }
    }

    function neq25519(a, b) {
      var c = new Uint8Array(32), d = new Uint8Array(32);
      pack25519(c, a);
      pack25519(d, b);
      return crypto_verify_32(c, 0, d, 0);
    }

    function par25519(a) {
      var d = new Uint8Array(32);
      pack25519(d, a);
      return d[0] & 1;
    }

    function unpack25519(o, n) {
      var i;
      for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
      o[15] &= 0x7fff;
    }

    function A(o, a, b) {
      for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
    }

    function Z(o, a, b) {
      for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
    }

    function M(o, a, b) {
      var v, c,
         t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
         t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
        t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
        t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
        b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3],
        b4 = b[4],
        b5 = b[5],
        b6 = b[6],
        b7 = b[7],
        b8 = b[8],
        b9 = b[9],
        b10 = b[10],
        b11 = b[11],
        b12 = b[12],
        b13 = b[13],
        b14 = b[14],
        b15 = b[15];

      v = a[0];
      t0 += v * b0;
      t1 += v * b1;
      t2 += v * b2;
      t3 += v * b3;
      t4 += v * b4;
      t5 += v * b5;
      t6 += v * b6;
      t7 += v * b7;
      t8 += v * b8;
      t9 += v * b9;
      t10 += v * b10;
      t11 += v * b11;
      t12 += v * b12;
      t13 += v * b13;
      t14 += v * b14;
      t15 += v * b15;
      v = a[1];
      t1 += v * b0;
      t2 += v * b1;
      t3 += v * b2;
      t4 += v * b3;
      t5 += v * b4;
      t6 += v * b5;
      t7 += v * b6;
      t8 += v * b7;
      t9 += v * b8;
      t10 += v * b9;
      t11 += v * b10;
      t12 += v * b11;
      t13 += v * b12;
      t14 += v * b13;
      t15 += v * b14;
      t16 += v * b15;
      v = a[2];
      t2 += v * b0;
      t3 += v * b1;
      t4 += v * b2;
      t5 += v * b3;
      t6 += v * b4;
      t7 += v * b5;
      t8 += v * b6;
      t9 += v * b7;
      t10 += v * b8;
      t11 += v * b9;
      t12 += v * b10;
      t13 += v * b11;
      t14 += v * b12;
      t15 += v * b13;
      t16 += v * b14;
      t17 += v * b15;
      v = a[3];
      t3 += v * b0;
      t4 += v * b1;
      t5 += v * b2;
      t6 += v * b3;
      t7 += v * b4;
      t8 += v * b5;
      t9 += v * b6;
      t10 += v * b7;
      t11 += v * b8;
      t12 += v * b9;
      t13 += v * b10;
      t14 += v * b11;
      t15 += v * b12;
      t16 += v * b13;
      t17 += v * b14;
      t18 += v * b15;
      v = a[4];
      t4 += v * b0;
      t5 += v * b1;
      t6 += v * b2;
      t7 += v * b3;
      t8 += v * b4;
      t9 += v * b5;
      t10 += v * b6;
      t11 += v * b7;
      t12 += v * b8;
      t13 += v * b9;
      t14 += v * b10;
      t15 += v * b11;
      t16 += v * b12;
      t17 += v * b13;
      t18 += v * b14;
      t19 += v * b15;
      v = a[5];
      t5 += v * b0;
      t6 += v * b1;
      t7 += v * b2;
      t8 += v * b3;
      t9 += v * b4;
      t10 += v * b5;
      t11 += v * b6;
      t12 += v * b7;
      t13 += v * b8;
      t14 += v * b9;
      t15 += v * b10;
      t16 += v * b11;
      t17 += v * b12;
      t18 += v * b13;
      t19 += v * b14;
      t20 += v * b15;
      v = a[6];
      t6 += v * b0;
      t7 += v * b1;
      t8 += v * b2;
      t9 += v * b3;
      t10 += v * b4;
      t11 += v * b5;
      t12 += v * b6;
      t13 += v * b7;
      t14 += v * b8;
      t15 += v * b9;
      t16 += v * b10;
      t17 += v * b11;
      t18 += v * b12;
      t19 += v * b13;
      t20 += v * b14;
      t21 += v * b15;
      v = a[7];
      t7 += v * b0;
      t8 += v * b1;
      t9 += v * b2;
      t10 += v * b3;
      t11 += v * b4;
      t12 += v * b5;
      t13 += v * b6;
      t14 += v * b7;
      t15 += v * b8;
      t16 += v * b9;
      t17 += v * b10;
      t18 += v * b11;
      t19 += v * b12;
      t20 += v * b13;
      t21 += v * b14;
      t22 += v * b15;
      v = a[8];
      t8 += v * b0;
      t9 += v * b1;
      t10 += v * b2;
      t11 += v * b3;
      t12 += v * b4;
      t13 += v * b5;
      t14 += v * b6;
      t15 += v * b7;
      t16 += v * b8;
      t17 += v * b9;
      t18 += v * b10;
      t19 += v * b11;
      t20 += v * b12;
      t21 += v * b13;
      t22 += v * b14;
      t23 += v * b15;
      v = a[9];
      t9 += v * b0;
      t10 += v * b1;
      t11 += v * b2;
      t12 += v * b3;
      t13 += v * b4;
      t14 += v * b5;
      t15 += v * b6;
      t16 += v * b7;
      t17 += v * b8;
      t18 += v * b9;
      t19 += v * b10;
      t20 += v * b11;
      t21 += v * b12;
      t22 += v * b13;
      t23 += v * b14;
      t24 += v * b15;
      v = a[10];
      t10 += v * b0;
      t11 += v * b1;
      t12 += v * b2;
      t13 += v * b3;
      t14 += v * b4;
      t15 += v * b5;
      t16 += v * b6;
      t17 += v * b7;
      t18 += v * b8;
      t19 += v * b9;
      t20 += v * b10;
      t21 += v * b11;
      t22 += v * b12;
      t23 += v * b13;
      t24 += v * b14;
      t25 += v * b15;
      v = a[11];
      t11 += v * b0;
      t12 += v * b1;
      t13 += v * b2;
      t14 += v * b3;
      t15 += v * b4;
      t16 += v * b5;
      t17 += v * b6;
      t18 += v * b7;
      t19 += v * b8;
      t20 += v * b9;
      t21 += v * b10;
      t22 += v * b11;
      t23 += v * b12;
      t24 += v * b13;
      t25 += v * b14;
      t26 += v * b15;
      v = a[12];
      t12 += v * b0;
      t13 += v * b1;
      t14 += v * b2;
      t15 += v * b3;
      t16 += v * b4;
      t17 += v * b5;
      t18 += v * b6;
      t19 += v * b7;
      t20 += v * b8;
      t21 += v * b9;
      t22 += v * b10;
      t23 += v * b11;
      t24 += v * b12;
      t25 += v * b13;
      t26 += v * b14;
      t27 += v * b15;
      v = a[13];
      t13 += v * b0;
      t14 += v * b1;
      t15 += v * b2;
      t16 += v * b3;
      t17 += v * b4;
      t18 += v * b5;
      t19 += v * b6;
      t20 += v * b7;
      t21 += v * b8;
      t22 += v * b9;
      t23 += v * b10;
      t24 += v * b11;
      t25 += v * b12;
      t26 += v * b13;
      t27 += v * b14;
      t28 += v * b15;
      v = a[14];
      t14 += v * b0;
      t15 += v * b1;
      t16 += v * b2;
      t17 += v * b3;
      t18 += v * b4;
      t19 += v * b5;
      t20 += v * b6;
      t21 += v * b7;
      t22 += v * b8;
      t23 += v * b9;
      t24 += v * b10;
      t25 += v * b11;
      t26 += v * b12;
      t27 += v * b13;
      t28 += v * b14;
      t29 += v * b15;
      v = a[15];
      t15 += v * b0;
      t16 += v * b1;
      t17 += v * b2;
      t18 += v * b3;
      t19 += v * b4;
      t20 += v * b5;
      t21 += v * b6;
      t22 += v * b7;
      t23 += v * b8;
      t24 += v * b9;
      t25 += v * b10;
      t26 += v * b11;
      t27 += v * b12;
      t28 += v * b13;
      t29 += v * b14;
      t30 += v * b15;

      t0  += 38 * t16;
      t1  += 38 * t17;
      t2  += 38 * t18;
      t3  += 38 * t19;
      t4  += 38 * t20;
      t5  += 38 * t21;
      t6  += 38 * t22;
      t7  += 38 * t23;
      t8  += 38 * t24;
      t9  += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      // t15 left as is

      // first car
      c = 1;
      v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
      v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
      v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
      v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
      v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
      v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
      v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
      v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
      v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
      v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
      v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
      v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
      v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
      v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
      v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
      v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
      t0 += c-1 + 37 * (c-1);

      // second car
      c = 1;
      v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
      v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
      v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
      v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
      v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
      v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
      v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
      v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
      v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
      v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
      v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
      v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
      v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
      v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
      v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
      v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
      t0 += c-1 + 37 * (c-1);

      o[ 0] = t0;
      o[ 1] = t1;
      o[ 2] = t2;
      o[ 3] = t3;
      o[ 4] = t4;
      o[ 5] = t5;
      o[ 6] = t6;
      o[ 7] = t7;
      o[ 8] = t8;
      o[ 9] = t9;
      o[10] = t10;
      o[11] = t11;
      o[12] = t12;
      o[13] = t13;
      o[14] = t14;
      o[15] = t15;
    }

    function S(o, a) {
      M(o, a, a);
    }

    function inv25519(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++) c[a] = i[a];
      for (a = 253; a >= 0; a--) {
        S(c, c);
        if(a !== 2 && a !== 4) M(c, c, i);
      }
      for (a = 0; a < 16; a++) o[a] = c[a];
    }

    function pow2523(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++) c[a] = i[a];
      for (a = 250; a >= 0; a--) {
          S(c, c);
          if(a !== 1) M(c, c, i);
      }
      for (a = 0; a < 16; a++) o[a] = c[a];
    }

    function crypto_scalarmult(q, n, p) {
      var z = new Uint8Array(32);
      var x = new Float64Array(80), r, i;
      var a = gf(), b = gf(), c = gf(),
          d = gf(), e = gf(), f = gf();
      for (i = 0; i < 31; i++) z[i] = n[i];
      z[31]=(n[31]&127)|64;
      z[0]&=248;
      unpack25519(x,p);
      for (i = 0; i < 16; i++) {
        b[i]=x[i];
        d[i]=a[i]=c[i]=0;
      }
      a[0]=d[0]=1;
      for (i=254; i>=0; --i) {
        r=(z[i>>>3]>>>(i&7))&1;
        sel25519(a,b,r);
        sel25519(c,d,r);
        A(e,a,c);
        Z(a,a,c);
        A(c,b,d);
        Z(b,b,d);
        S(d,e);
        S(f,a);
        M(a,c,a);
        M(c,b,e);
        A(e,a,c);
        Z(a,a,c);
        S(b,a);
        Z(c,d,f);
        M(a,c,_121665);
        A(a,a,d);
        M(c,c,a);
        M(a,d,f);
        M(d,b,x);
        S(b,e);
        sel25519(a,b,r);
        sel25519(c,d,r);
      }
      for (i = 0; i < 16; i++) {
        x[i+16]=a[i];
        x[i+32]=c[i];
        x[i+48]=b[i];
        x[i+64]=d[i];
      }
      var x32 = x.subarray(32);
      var x16 = x.subarray(16);
      inv25519(x32,x32);
      M(x16,x16,x32);
      pack25519(q,x16);
      return 0;
    }

    function crypto_scalarmult_base(q, n) {
      return crypto_scalarmult(q, n, _9);
    }

    function crypto_box_keypair(y, x) {
      randombytes(x, 32);
      return crypto_scalarmult_base(y, x);
    }

    function crypto_box_beforenm(k, y, x) {
      var s = new Uint8Array(32);
      crypto_scalarmult(s, x, y);
      return crypto_core_hsalsa20(k, _0, s, sigma);
    }

    var crypto_box_afternm = crypto_secretbox;
    var crypto_box_open_afternm = crypto_secretbox_open;

    function crypto_box(c, m, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_afternm(c, m, d, n, k);
    }

    function crypto_box_open(m, c, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_open_afternm(m, c, d, n, k);
    }

    var K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    function crypto_hashblocks_hl(hh, hl, m, n) {
      var wh = new Int32Array(16), wl = new Int32Array(16),
          bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
          bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
          th, tl, i, j, h, l, a, b, c, d;

      var ah0 = hh[0],
          ah1 = hh[1],
          ah2 = hh[2],
          ah3 = hh[3],
          ah4 = hh[4],
          ah5 = hh[5],
          ah6 = hh[6],
          ah7 = hh[7],

          al0 = hl[0],
          al1 = hl[1],
          al2 = hl[2],
          al3 = hl[3],
          al4 = hl[4],
          al5 = hl[5],
          al6 = hl[6],
          al7 = hl[7];

      var pos = 0;
      while (n >= 128) {
        for (i = 0; i < 16; i++) {
          j = 8 * i + pos;
          wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
          wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
        }
        for (i = 0; i < 80; i++) {
          bh0 = ah0;
          bh1 = ah1;
          bh2 = ah2;
          bh3 = ah3;
          bh4 = ah4;
          bh5 = ah5;
          bh6 = ah6;
          bh7 = ah7;

          bl0 = al0;
          bl1 = al1;
          bl2 = al2;
          bl3 = al3;
          bl4 = al4;
          bl5 = al5;
          bl6 = al6;
          bl7 = al7;

          // add
          h = ah7;
          l = al7;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          // Sigma1
          h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
          l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // Ch
          h = (ah4 & ah5) ^ (~ah4 & ah6);
          l = (al4 & al5) ^ (~al4 & al6);

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // K
          h = K[i*2];
          l = K[i*2+1];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // w
          h = wh[i%16];
          l = wl[i%16];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          th = c & 0xffff | d << 16;
          tl = a & 0xffff | b << 16;

          // add
          h = th;
          l = tl;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          // Sigma0
          h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
          l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // Maj
          h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
          l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          bh7 = (c & 0xffff) | (d << 16);
          bl7 = (a & 0xffff) | (b << 16);

          // add
          h = bh3;
          l = bl3;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = th;
          l = tl;

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          bh3 = (c & 0xffff) | (d << 16);
          bl3 = (a & 0xffff) | (b << 16);

          ah1 = bh0;
          ah2 = bh1;
          ah3 = bh2;
          ah4 = bh3;
          ah5 = bh4;
          ah6 = bh5;
          ah7 = bh6;
          ah0 = bh7;

          al1 = bl0;
          al2 = bl1;
          al3 = bl2;
          al4 = bl3;
          al5 = bl4;
          al6 = bl5;
          al7 = bl6;
          al0 = bl7;

          if (i%16 === 15) {
            for (j = 0; j < 16; j++) {
              // add
              h = wh[j];
              l = wl[j];

              a = l & 0xffff; b = l >>> 16;
              c = h & 0xffff; d = h >>> 16;

              h = wh[(j+9)%16];
              l = wl[(j+9)%16];

              a += l & 0xffff; b += l >>> 16;
              c += h & 0xffff; d += h >>> 16;

              // sigma0
              th = wh[(j+1)%16];
              tl = wl[(j+1)%16];
              h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
              l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

              a += l & 0xffff; b += l >>> 16;
              c += h & 0xffff; d += h >>> 16;

              // sigma1
              th = wh[(j+14)%16];
              tl = wl[(j+14)%16];
              h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
              l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

              a += l & 0xffff; b += l >>> 16;
              c += h & 0xffff; d += h >>> 16;

              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;

              wh[j] = (c & 0xffff) | (d << 16);
              wl[j] = (a & 0xffff) | (b << 16);
            }
          }
        }

        // add
        h = ah0;
        l = al0;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[0];
        l = hl[0];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[0] = ah0 = (c & 0xffff) | (d << 16);
        hl[0] = al0 = (a & 0xffff) | (b << 16);

        h = ah1;
        l = al1;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[1];
        l = hl[1];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[1] = ah1 = (c & 0xffff) | (d << 16);
        hl[1] = al1 = (a & 0xffff) | (b << 16);

        h = ah2;
        l = al2;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[2];
        l = hl[2];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[2] = ah2 = (c & 0xffff) | (d << 16);
        hl[2] = al2 = (a & 0xffff) | (b << 16);

        h = ah3;
        l = al3;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[3];
        l = hl[3];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[3] = ah3 = (c & 0xffff) | (d << 16);
        hl[3] = al3 = (a & 0xffff) | (b << 16);

        h = ah4;
        l = al4;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[4];
        l = hl[4];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[4] = ah4 = (c & 0xffff) | (d << 16);
        hl[4] = al4 = (a & 0xffff) | (b << 16);

        h = ah5;
        l = al5;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[5];
        l = hl[5];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[5] = ah5 = (c & 0xffff) | (d << 16);
        hl[5] = al5 = (a & 0xffff) | (b << 16);

        h = ah6;
        l = al6;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[6];
        l = hl[6];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[6] = ah6 = (c & 0xffff) | (d << 16);
        hl[6] = al6 = (a & 0xffff) | (b << 16);

        h = ah7;
        l = al7;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = hh[7];
        l = hl[7];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[7] = ah7 = (c & 0xffff) | (d << 16);
        hl[7] = al7 = (a & 0xffff) | (b << 16);

        pos += 128;
        n -= 128;
      }

      return n;
    }

    function crypto_hash(out, m, n) {
      var hh = new Int32Array(8),
          hl = new Int32Array(8),
          x = new Uint8Array(256),
          i, b = n;

      hh[0] = 0x6a09e667;
      hh[1] = 0xbb67ae85;
      hh[2] = 0x3c6ef372;
      hh[3] = 0xa54ff53a;
      hh[4] = 0x510e527f;
      hh[5] = 0x9b05688c;
      hh[6] = 0x1f83d9ab;
      hh[7] = 0x5be0cd19;

      hl[0] = 0xf3bcc908;
      hl[1] = 0x84caa73b;
      hl[2] = 0xfe94f82b;
      hl[3] = 0x5f1d36f1;
      hl[4] = 0xade682d1;
      hl[5] = 0x2b3e6c1f;
      hl[6] = 0xfb41bd6b;
      hl[7] = 0x137e2179;

      crypto_hashblocks_hl(hh, hl, m, n);
      n %= 128;

      for (i = 0; i < n; i++) x[i] = m[b-n+i];
      x[n] = 128;

      n = 256-128*(n<112?1:0);
      x[n-9] = 0;
      ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
      crypto_hashblocks_hl(hh, hl, x, n);

      for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

      return 0;
    }

    function add(p, q) {
      var a = gf(), b = gf(), c = gf(),
          d = gf(), e = gf(), f = gf(),
          g = gf(), h = gf(), t = gf();

      Z(a, p[1], p[0]);
      Z(t, q[1], q[0]);
      M(a, a, t);
      A(b, p[0], p[1]);
      A(t, q[0], q[1]);
      M(b, b, t);
      M(c, p[3], q[3]);
      M(c, c, D2);
      M(d, p[2], q[2]);
      A(d, d, d);
      Z(e, b, a);
      Z(f, d, c);
      A(g, d, c);
      A(h, b, a);

      M(p[0], e, f);
      M(p[1], h, g);
      M(p[2], g, f);
      M(p[3], e, h);
    }

    function cswap(p, q, b) {
      var i;
      for (i = 0; i < 4; i++) {
        sel25519(p[i], q[i], b);
      }
    }

    function pack(r, p) {
      var tx = gf(), ty = gf(), zi = gf();
      inv25519(zi, p[2]);
      M(tx, p[0], zi);
      M(ty, p[1], zi);
      pack25519(r, ty);
      r[31] ^= par25519(tx) << 7;
    }

    function scalarmult(p, q, s) {
      var b, i;
      set25519(p[0], gf0);
      set25519(p[1], gf1);
      set25519(p[2], gf1);
      set25519(p[3], gf0);
      for (i = 255; i >= 0; --i) {
        b = (s[(i/8)|0] >> (i&7)) & 1;
        cswap(p, q, b);
        add(q, p);
        add(p, p);
        cswap(p, q, b);
      }
    }

    function scalarbase(p, s) {
      var q = [gf(), gf(), gf(), gf()];
      set25519(q[0], X);
      set25519(q[1], Y);
      set25519(q[2], gf1);
      M(q[3], X, Y);
      scalarmult(p, q, s);
    }

    function crypto_sign_keypair(pk, sk, seeded) {
      var d = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()];
      var i;

      if (!seeded) randombytes(sk, 32);
      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;

      scalarbase(p, d);
      pack(pk, p);

      for (i = 0; i < 32; i++) sk[i+32] = pk[i];
      return 0;
    }

    var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

    function modL(r, x) {
      var carry, i, j, k;
      for (i = 63; i >= 32; --i) {
        carry = 0;
        for (j = i - 32, k = i - 12; j < k; ++j) {
          x[j] += carry - 16 * x[i] * L[j - (i - 32)];
          carry = Math.floor((x[j] + 128) / 256);
          x[j] -= carry * 256;
        }
        x[j] += carry;
        x[i] = 0;
      }
      carry = 0;
      for (j = 0; j < 32; j++) {
        x[j] += carry - (x[31] >> 4) * L[j];
        carry = x[j] >> 8;
        x[j] &= 255;
      }
      for (j = 0; j < 32; j++) x[j] -= carry * L[j];
      for (i = 0; i < 32; i++) {
        x[i+1] += x[i] >> 8;
        r[i] = x[i] & 255;
      }
    }

    function reduce(r) {
      var x = new Float64Array(64), i;
      for (i = 0; i < 64; i++) x[i] = r[i];
      for (i = 0; i < 64; i++) r[i] = 0;
      modL(r, x);
    }

    // Note: difference from C - smlen returned, not passed as argument.
    function crypto_sign(sm, m, n, sk) {
      var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
      var i, j, x = new Float64Array(64);
      var p = [gf(), gf(), gf(), gf()];

      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;

      var smlen = n + 64;
      for (i = 0; i < n; i++) sm[64 + i] = m[i];
      for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

      crypto_hash(r, sm.subarray(32), n+32);
      reduce(r);
      scalarbase(p, r);
      pack(sm, p);

      for (i = 32; i < 64; i++) sm[i] = sk[i];
      crypto_hash(h, sm, n + 64);
      reduce(h);

      for (i = 0; i < 64; i++) x[i] = 0;
      for (i = 0; i < 32; i++) x[i] = r[i];
      for (i = 0; i < 32; i++) {
        for (j = 0; j < 32; j++) {
          x[i+j] += h[i] * d[j];
        }
      }

      modL(sm.subarray(32), x);
      return smlen;
    }

    function unpackneg(r, p) {
      var t = gf(), chk = gf(), num = gf(),
          den = gf(), den2 = gf(), den4 = gf(),
          den6 = gf();

      set25519(r[2], gf1);
      unpack25519(r[1], p);
      S(num, r[1]);
      M(den, num, D);
      Z(num, num, r[2]);
      A(den, r[2], den);

      S(den2, den);
      S(den4, den2);
      M(den6, den4, den2);
      M(t, den6, num);
      M(t, t, den);

      pow2523(t, t);
      M(t, t, num);
      M(t, t, den);
      M(t, t, den);
      M(r[0], t, den);

      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) M(r[0], r[0], I);

      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) return -1;

      if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

      M(r[3], r[0], r[1]);
      return 0;
    }

    function crypto_sign_open(m, sm, n, pk) {
      var i;
      var t = new Uint8Array(32), h = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()],
          q = [gf(), gf(), gf(), gf()];

      if (n < 64) return -1;

      if (unpackneg(q, pk)) return -1;

      for (i = 0; i < n; i++) m[i] = sm[i];
      for (i = 0; i < 32; i++) m[i+32] = pk[i];
      crypto_hash(h, m, n);
      reduce(h);
      scalarmult(p, q, h);

      scalarbase(q, sm.subarray(32));
      add(p, q);
      pack(t, p);

      n -= 64;
      if (crypto_verify_32(sm, 0, t, 0)) {
        for (i = 0; i < n; i++) m[i] = 0;
        return -1;
      }

      for (i = 0; i < n; i++) m[i] = sm[i + 64];
      return n;
    }

    var crypto_secretbox_KEYBYTES = 32,
        crypto_secretbox_NONCEBYTES = 24,
        crypto_secretbox_ZEROBYTES = 32,
        crypto_secretbox_BOXZEROBYTES = 16,
        crypto_scalarmult_BYTES = 32,
        crypto_scalarmult_SCALARBYTES = 32,
        crypto_box_PUBLICKEYBYTES = 32,
        crypto_box_SECRETKEYBYTES = 32,
        crypto_box_BEFORENMBYTES = 32,
        crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
        crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
        crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
        crypto_sign_BYTES = 64,
        crypto_sign_PUBLICKEYBYTES = 32,
        crypto_sign_SECRETKEYBYTES = 64,
        crypto_sign_SEEDBYTES = 32,
        crypto_hash_BYTES = 64;

    nacl.lowlevel = {
      crypto_core_hsalsa20: crypto_core_hsalsa20,
      crypto_stream_xor: crypto_stream_xor,
      crypto_stream: crypto_stream,
      crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
      crypto_stream_salsa20: crypto_stream_salsa20,
      crypto_onetimeauth: crypto_onetimeauth,
      crypto_onetimeauth_verify: crypto_onetimeauth_verify,
      crypto_verify_16: crypto_verify_16,
      crypto_verify_32: crypto_verify_32,
      crypto_secretbox: crypto_secretbox,
      crypto_secretbox_open: crypto_secretbox_open,
      crypto_scalarmult: crypto_scalarmult,
      crypto_scalarmult_base: crypto_scalarmult_base,
      crypto_box_beforenm: crypto_box_beforenm,
      crypto_box_afternm: crypto_box_afternm,
      crypto_box: crypto_box,
      crypto_box_open: crypto_box_open,
      crypto_box_keypair: crypto_box_keypair,
      crypto_hash: crypto_hash,
      crypto_sign: crypto_sign,
      crypto_sign_keypair: crypto_sign_keypair,
      crypto_sign_open: crypto_sign_open,

      crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
      crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
      crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
      crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
      crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
      crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
      crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
      crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
      crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
      crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
      crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
      crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
      crypto_sign_BYTES: crypto_sign_BYTES,
      crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
      crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
      crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
      crypto_hash_BYTES: crypto_hash_BYTES,

      gf: gf,
      D: D,
      L: L,
      pack25519: pack25519,
      unpack25519: unpack25519,
      M: M,
      A: A,
      S: S,
      Z: Z,
      pow2523: pow2523,
      add: add,
      set25519: set25519,
      modL: modL,
      scalarmult: scalarmult,
      scalarbase: scalarbase,
    };

    /* High-level API */

    function checkLengths(k, n) {
      if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
      if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
    }

    function checkBoxLengths(pk, sk) {
      if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
      if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
    }

    function checkArrayTypes() {
      for (var i = 0; i < arguments.length; i++) {
        if (!(arguments[i] instanceof Uint8Array))
          throw new TypeError('unexpected type, use Uint8Array');
      }
    }

    function cleanup(arr) {
      for (var i = 0; i < arr.length; i++) arr[i] = 0;
    }

    nacl.randomBytes = function(n) {
      var b = new Uint8Array(n);
      randombytes(b, n);
      return b;
    };

    nacl.secretbox = function(msg, nonce, key) {
      checkArrayTypes(msg, nonce, key);
      checkLengths(key, nonce);
      var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
      var c = new Uint8Array(m.length);
      for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
      crypto_secretbox(c, m, m.length, nonce, key);
      return c.subarray(crypto_secretbox_BOXZEROBYTES);
    };

    nacl.secretbox.open = function(box, nonce, key) {
      checkArrayTypes(box, nonce, key);
      checkLengths(key, nonce);
      var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
      var m = new Uint8Array(c.length);
      for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
      if (c.length < 32) return null;
      if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
      return m.subarray(crypto_secretbox_ZEROBYTES);
    };

    nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
    nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
    nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

    nacl.scalarMult = function(n, p) {
      checkArrayTypes(n, p);
      if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
      if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult(q, n, p);
      return q;
    };

    nacl.scalarMult.base = function(n) {
      checkArrayTypes(n);
      if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult_base(q, n);
      return q;
    };

    nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
    nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

    nacl.box = function(msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox(msg, nonce, k);
    };

    nacl.box.before = function(publicKey, secretKey) {
      checkArrayTypes(publicKey, secretKey);
      checkBoxLengths(publicKey, secretKey);
      var k = new Uint8Array(crypto_box_BEFORENMBYTES);
      crypto_box_beforenm(k, publicKey, secretKey);
      return k;
    };

    nacl.box.after = nacl.secretbox;

    nacl.box.open = function(msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox.open(msg, nonce, k);
    };

    nacl.box.open.after = nacl.secretbox.open;

    nacl.box.keyPair = function() {
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
      crypto_box_keypair(pk, sk);
      return {publicKey: pk, secretKey: sk};
    };

    nacl.box.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_box_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      crypto_scalarmult_base(pk, secretKey);
      return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
    };

    nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
    nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
    nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
    nacl.box.nonceLength = crypto_box_NONCEBYTES;
    nacl.box.overheadLength = nacl.secretbox.overheadLength;

    nacl.sign = function(msg, secretKey) {
      checkArrayTypes(msg, secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
      crypto_sign(signedMsg, msg, msg.length, secretKey);
      return signedMsg;
    };

    nacl.sign.open = function(signedMsg, publicKey) {
      checkArrayTypes(signedMsg, publicKey);
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
        throw new Error('bad public key size');
      var tmp = new Uint8Array(signedMsg.length);
      var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
      if (mlen < 0) return null;
      var m = new Uint8Array(mlen);
      for (var i = 0; i < m.length; i++) m[i] = tmp[i];
      return m;
    };

    nacl.sign.detached = function(msg, secretKey) {
      var signedMsg = nacl.sign(msg, secretKey);
      var sig = new Uint8Array(crypto_sign_BYTES);
      for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
      return sig;
    };

    nacl.sign.detached.verify = function(msg, sig, publicKey) {
      checkArrayTypes(msg, sig, publicKey);
      if (sig.length !== crypto_sign_BYTES)
        throw new Error('bad signature size');
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
        throw new Error('bad public key size');
      var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
      var m = new Uint8Array(crypto_sign_BYTES + msg.length);
      var i;
      for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
      for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
      return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
    };

    nacl.sign.keyPair = function() {
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      crypto_sign_keypair(pk, sk);
      return {publicKey: pk, secretKey: sk};
    };

    nacl.sign.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
      return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
    };

    nacl.sign.keyPair.fromSeed = function(seed) {
      checkArrayTypes(seed);
      if (seed.length !== crypto_sign_SEEDBYTES)
        throw new Error('bad seed size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      for (var i = 0; i < 32; i++) sk[i] = seed[i];
      crypto_sign_keypair(pk, sk, true);
      return {publicKey: pk, secretKey: sk};
    };

    nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
    nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
    nacl.sign.seedLength = crypto_sign_SEEDBYTES;
    nacl.sign.signatureLength = crypto_sign_BYTES;

    nacl.hash = function(msg) {
      checkArrayTypes(msg);
      var h = new Uint8Array(crypto_hash_BYTES);
      crypto_hash(h, msg, msg.length);
      return h;
    };

    nacl.hash.hashLength = crypto_hash_BYTES;

    nacl.verify = function(x, y) {
      checkArrayTypes(x, y);
      // Zero length arguments are considered not equal.
      if (x.length === 0 || y.length === 0) return false;
      if (x.length !== y.length) return false;
      return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
    };

    nacl.setPRNG = function(fn) {
      randombytes = fn;
    };

    (function() {
      // Initialize PRNG if environment provides CSPRNG.
      // If not, methods calling randombytes will throw.
      var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
      if (crypto && crypto.getRandomValues) {
        // Browsers.
        var QUOTA = 65536;
        nacl.setPRNG(function(x, n) {
          var i, v = new Uint8Array(n);
          for (i = 0; i < n; i += QUOTA) {
            crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
          }
          for (i = 0; i < n; i++) x[i] = v[i];
          cleanup(v);
        });
      } else if (typeof commonjsRequire !== 'undefined') {
        // Node.js.
        crypto = require$$0$2;
        if (crypto && crypto.randomBytes) {
          nacl.setPRNG(function(x, n) {
            var i, v = crypto.randomBytes(n);
            for (i = 0; i < n; i++) x[i] = v[i];
            cleanup(v);
          });
        }
      }
    })();

    })(module.exports ? module.exports : (self.nacl = self.nacl || {}));
    });

    var lookup$2 = [];
    var revLookup$2 = [];
    var Arr$2 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var inited = false;
    function init () {
      inited = true;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup$2[i] = code[i];
        revLookup$2[code.charCodeAt(i)] = i;
      }

      revLookup$2['-'.charCodeAt(0)] = 62;
      revLookup$2['_'.charCodeAt(0)] = 63;
    }

    function toByteArray$2 (b64) {
      if (!inited) {
        init();
      }
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr$2(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (revLookup$2[b64.charCodeAt(i)] << 18) | (revLookup$2[b64.charCodeAt(i + 1)] << 12) | (revLookup$2[b64.charCodeAt(i + 2)] << 6) | revLookup$2[b64.charCodeAt(i + 3)];
        arr[L++] = (tmp >> 16) & 0xFF;
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = (revLookup$2[b64.charCodeAt(i)] << 2) | (revLookup$2[b64.charCodeAt(i + 1)] >> 4);
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = (revLookup$2[b64.charCodeAt(i)] << 10) | (revLookup$2[b64.charCodeAt(i + 1)] << 4) | (revLookup$2[b64.charCodeAt(i + 2)] >> 2);
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64$2 (num) {
      return lookup$2[num >> 18 & 0x3F] + lookup$2[num >> 12 & 0x3F] + lookup$2[num >> 6 & 0x3F] + lookup$2[num & 0x3F]
    }

    function encodeChunk$2 (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output.push(tripletToBase64$2(tmp));
      }
      return output.join('')
    }

    function fromByteArray$2 (uint8) {
      if (!inited) {
        init();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk$2(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup$2[tmp >> 2];
        output += lookup$2[(tmp << 4) & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
        output += lookup$2[tmp >> 10];
        output += lookup$2[(tmp >> 4) & 0x3F];
        output += lookup$2[(tmp << 2) & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('')
    }

    function read (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    function write (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }

    var toString$3 = {}.toString;

    var isArray$1 = Array.isArray || function (arr) {
      return toString$3.call(arr) == '[object Array]';
    };

    var INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer.TYPED_ARRAY_SUPPORT = global$2.TYPED_ARRAY_SUPPORT !== undefined
      ? global$2.TYPED_ARRAY_SUPPORT
      : true;

    /*
     * Export kMaxLength after typed array support is determined.
     */
    var _kMaxLength = kMaxLength();

    function kMaxLength () {
      return Buffer.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
        return new Buffer(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(this, arg)
      }
      return from(this, arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer._augment = function (arr) {
      arr.__proto__ = Buffer.prototype;
      return arr
    };

    function from (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset)
      }

      return fromObject(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length)
    };

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      Buffer.prototype.__proto__ = Uint8Array.prototype;
      Buffer.__proto__ = Uint8Array;
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(that, size).fill(fill, encoding)
          : createBuffer(that, size).fill(fill)
      }
      return createBuffer(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding)
    };

    function allocUnsafe (that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size)
    };

    function fromString (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength$1(string, encoding) | 0;
      that = createBuffer(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }
      return that
    }

    function fromObject (that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray$1(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }

    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0;
      }
      return Buffer.alloc(+length)
    }
    Buffer.isBuffer = isBuffer;
    function internalIsBuffer (b) {
      return !!(b != null && b._isBuffer)
    }

    Buffer.compare = function compare (a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!isArray$1(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength$1 (string, encoding) {
      if (internalIsBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength$1;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.equals = function equals (b) {
      if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      var str = '';
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return fromByteArray$2(buf)
      } else {
        return fromByteArray$2(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex$2(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val)
          ? val
          : utf8ToBytes(new Buffer(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex$2 (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }


    function base64ToBytes (str) {
      return toByteArray$2(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }


    // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    function isBuffer(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
    }

    function isFastBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
    }

    var bufferEs6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
        kMaxLength: _kMaxLength,
        Buffer: Buffer,
        SlowBuffer: SlowBuffer,
        isBuffer: isBuffer
    });

    var bn$1 = createCommonjsModule(function (module) {
    (function (module, exports) {

      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require$$0$2.Buffer;
        }
      } catch (e) {
      }

      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };

      function parseHex4Bits (string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) {
          return c - 48;
        // 'A' - 'F'
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, 'Invalid character in ' + string);
        }
      }

      function parseHexByte (string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex (number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        // 24-bits chunks
        var off = 0;
        var j = 0;

        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this._strip();
      };

      function parseBase (str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            b = c - 49 + 0xa;

          // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa;

          // '0' - '9'
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this._strip();
      };

      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      function move (dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }

      BN.prototype._move = function _move (dest) {
        move(dest, this);
      };

      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype._strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
      if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        try {
          BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }

      function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }

      /*

      var zeros = [];
      var groupSizes = [];
      var groupBases = [];

      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }

      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON () {
        return this.toString(16, 2);
      };

      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer (endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }

      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      var allocate = function allocate (ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };

      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        this._strip();

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };

      BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
        var position = 0;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position++] = word & 0xff;
          if (position < res.length) {
            res[position++] = (word >> 8) & 0xff;
          }
          if (position < res.length) {
            res[position++] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position < res.length) {
              res[position++] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position < res.length) {
          res[position++] = carry;

          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };

      BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
        var position = res.length - 1;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position--] = word & 0xff;
          if (position >= 0) {
            res[position--] = (word >> 8) & 0xff;
          }
          if (position >= 0) {
            res[position--] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position >= 0) {
              res[position--] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position >= 0) {
          res[position--] = carry;

          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray (num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] >>> wbit) & 0x01;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this._strip();
      };

      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this._strip();
      };

      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this._strip();
      };

      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this._strip();
      };

      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this._strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this._strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };

      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out._strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out._strip();
      }

      function jumboMulTo (self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }

      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this._strip();
      };

      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this._strip();
      };

      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this._strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this._strip();
      };

      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs () {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this._strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this._strip();
      };

      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modrn = function modrn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return isNegNum ? -acc : acc;
      };

      // WARNING: DEPRECATED
      BN.prototype.modn = function modn (num) {
        return this.modrn(num);
      };

      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        this._strip();
        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this._strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };

      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);

        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };

      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont (num) {
        return new Mont(num);
      };

      function Mont (m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal$1);
    });

    var buffer_1 = /*@__PURE__*/getAugmentedNamespace(bufferEs6);

    var safeBuffer = createCommonjsModule(function (module, exports) {
    /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
    /* eslint-disable node/no-deprecated-api */

    var Buffer = buffer_1.Buffer;

    // alternative to using Object.keys for old browsers
    function copyProps (src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer_1;
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer_1, exports);
      exports.Buffer = SafeBuffer;
    }

    function SafeBuffer (arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length)
    }

    SafeBuffer.prototype = Object.create(Buffer.prototype);

    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer);

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number')
      }
      return Buffer(arg, encodingOrOffset, length)
    };

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      var buf = Buffer(size);
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf
    };

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return Buffer(size)
    };

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return buffer_1.SlowBuffer(size)
    };
    });

    // base-x encoding / decoding
    // Copyright (c) 2018 base-x contributors
    // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
    // Distributed under the MIT software license, see the accompanying
    // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
    // @ts-ignore
    var _Buffer = safeBuffer.Buffer;
    function base$1 (ALPHABET) {
      if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
        BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
      var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
      function encode (source) {
        if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source); }
        if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }
        if (source.length === 0) { return '' }
            // Skip & count leading zeroes.
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
            // Allocate enough space in big-endian base58 representation.
        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
        var b58 = new Uint8Array(size);
            // Process the bytes.
        while (pbegin !== pend) {
          var carry = source[pbegin];
                // Apply "b58 = b58 * 256 + ch".
          var i = 0;
          for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
            carry += (256 * b58[it1]) >>> 0;
            b58[it1] = (carry % BASE) >>> 0;
            carry = (carry / BASE) >>> 0;
          }
          if (carry !== 0) { throw new Error('Non-zero carry') }
          length = i;
          pbegin++;
        }
            // Skip leading zeroes in base58 result.
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
            // Translate the result into a string.
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
        return str
      }
      function decodeUnsafe (source) {
        if (typeof source !== 'string') { throw new TypeError('Expected String') }
        if (source.length === 0) { return _Buffer.alloc(0) }
        var psz = 0;
            // Skip and count leading '1's.
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
            // Allocate enough space in big-endian base256 representation.
        var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
        var b256 = new Uint8Array(size);
            // Process the characters.
        while (source[psz]) {
                // Decode character
          var carry = BASE_MAP[source.charCodeAt(psz)];
                // Invalid character
          if (carry === 255) { return }
          var i = 0;
          for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
            carry += (BASE * b256[it3]) >>> 0;
            b256[it3] = (carry % 256) >>> 0;
            carry = (carry / 256) >>> 0;
          }
          if (carry !== 0) { throw new Error('Non-zero carry') }
          length = i;
          psz++;
        }
            // Skip leading zeroes in b256.
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
        vch.fill(0x00, 0, zeroes);
        var j = zeroes;
        while (it4 !== size) {
          vch[j++] = b256[it4++];
        }
        return vch
      }
      function decode (string) {
        var buffer = decodeUnsafe(string);
        if (buffer) { return buffer }
        throw new Error('Non-base' + BASE + ' character')
      }
      return {
        encode: encode,
        decodeUnsafe: decodeUnsafe,
        decode: decode
      }
    }
    var src$1 = base$1;

    var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

    var bs58 = src$1(ALPHABET);

    // This is free and unencumbered software released into the public domain.
    // See LICENSE.md for more information.

    //
    // Utilities
    //

    /**
     * @param {number} a The number to test.
     * @param {number} min The minimum value in the range, inclusive.
     * @param {number} max The maximum value in the range, inclusive.
     * @return {boolean} True if a >= min and a <= max.
     */
    function inRange(a, min, max) {
      return min <= a && a <= max;
    }

    /**
     * @param {*} o
     * @return {Object}
     */
    function ToDictionary(o) {
      if (o === undefined) return {};
      if (o === Object(o)) return o;
      throw TypeError('Could not convert argument to dictionary');
    }

    /**
     * @param {string} string Input string of UTF-16 code units.
     * @return {!Array.<number>} Code points.
     */
    function stringToCodePoints(string) {
      // https://heycam.github.io/webidl/#dfn-obtain-unicode

      // 1. Let S be the DOMString value.
      var s = String(string);

      // 2. Let n be the length of S.
      var n = s.length;

      // 3. Initialize i to 0.
      var i = 0;

      // 4. Initialize U to be an empty sequence of Unicode characters.
      var u = [];

      // 5. While i < n:
      while (i < n) {

        // 1. Let c be the code unit in S at index i.
        var c = s.charCodeAt(i);

        // 2. Depending on the value of c:

        // c < 0xD800 or c > 0xDFFF
        if (c < 0xD800 || c > 0xDFFF) {
          // Append to U the Unicode character with code point c.
          u.push(c);
        }

        // 0xDC00 ≤ c ≤ 0xDFFF
        else if (0xDC00 <= c && c <= 0xDFFF) {
          // Append to U a U+FFFD REPLACEMENT CHARACTER.
          u.push(0xFFFD);
        }

        // 0xD800 ≤ c ≤ 0xDBFF
        else if (0xD800 <= c && c <= 0xDBFF) {
          // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT
          // CHARACTER.
          if (i === n - 1) {
            u.push(0xFFFD);
          }
          // 2. Otherwise, i < n−1:
          else {
            // 1. Let d be the code unit in S at index i+1.
            var d = string.charCodeAt(i + 1);

            // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:
            if (0xDC00 <= d && d <= 0xDFFF) {
              // 1. Let a be c & 0x3FF.
              var a = c & 0x3FF;

              // 2. Let b be d & 0x3FF.
              var b = d & 0x3FF;

              // 3. Append to U the Unicode character with code point
              // 2^16+2^10*a+b.
              u.push(0x10000 + (a << 10) + b);

              // 4. Set i to i+1.
              i += 1;
            }

            // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a
            // U+FFFD REPLACEMENT CHARACTER.
            else  {
              u.push(0xFFFD);
            }
          }
        }

        // 3. Set i to i+1.
        i += 1;
      }

      // 6. Return U.
      return u;
    }

    /**
     * @param {!Array.<number>} code_points Array of code points.
     * @return {string} string String of UTF-16 code units.
     */
    function codePointsToString(code_points) {
      var s = '';
      for (var i = 0; i < code_points.length; ++i) {
        var cp = code_points[i];
        if (cp <= 0xFFFF) {
          s += String.fromCharCode(cp);
        } else {
          cp -= 0x10000;
          s += String.fromCharCode((cp >> 10) + 0xD800,
                                   (cp & 0x3FF) + 0xDC00);
        }
      }
      return s;
    }


    //
    // Implementation of Encoding specification
    // https://encoding.spec.whatwg.org/
    //

    //
    // 3. Terminology
    //

    /**
     * End-of-stream is a special token that signifies no more tokens
     * are in the stream.
     * @const
     */ var end_of_stream = -1;

    /**
     * A stream represents an ordered sequence of tokens.
     *
     * @constructor
     * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the
     * stream.
     */
    function Stream(tokens) {
      /** @type {!Array.<number>} */
      this.tokens = [].slice.call(tokens);
    }

    Stream.prototype = {
      /**
       * @return {boolean} True if end-of-stream has been hit.
       */
      endOfStream: function() {
        return !this.tokens.length;
      },

      /**
       * When a token is read from a stream, the first token in the
       * stream must be returned and subsequently removed, and
       * end-of-stream must be returned otherwise.
       *
       * @return {number} Get the next token from the stream, or
       * end_of_stream.
       */
       read: function() {
        if (!this.tokens.length)
          return end_of_stream;
         return this.tokens.shift();
       },

      /**
       * When one or more tokens are prepended to a stream, those tokens
       * must be inserted, in given order, before the first token in the
       * stream.
       *
       * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.
       */
      prepend: function(token) {
        if (Array.isArray(token)) {
          var tokens = /**@type {!Array.<number>}*/(token);
          while (tokens.length)
            this.tokens.unshift(tokens.pop());
        } else {
          this.tokens.unshift(token);
        }
      },

      /**
       * When one or more tokens are pushed to a stream, those tokens
       * must be inserted, in given order, after the last token in the
       * stream.
       *
       * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.
       */
      push: function(token) {
        if (Array.isArray(token)) {
          var tokens = /**@type {!Array.<number>}*/(token);
          while (tokens.length)
            this.tokens.push(tokens.shift());
        } else {
          this.tokens.push(token);
        }
      }
    };

    //
    // 4. Encodings
    //

    // 4.1 Encoders and decoders

    /** @const */
    var finished = -1;

    /**
     * @param {boolean} fatal If true, decoding errors raise an exception.
     * @param {number=} opt_code_point Override the standard fallback code point.
     * @return {number} The code point to insert on a decoding error.
     */
    function decoderError(fatal, opt_code_point) {
      if (fatal)
        throw TypeError('Decoder error');
      return opt_code_point || 0xFFFD;
    }

    //
    // 7. API
    //

    /** @const */ var DEFAULT_ENCODING = 'utf-8';

    // 7.1 Interface TextDecoder

    /**
     * @constructor
     * @param {string=} encoding The label of the encoding;
     *     defaults to 'utf-8'.
     * @param {Object=} options
     */
    function TextDecoder$1(encoding, options) {
      if (!(this instanceof TextDecoder$1)) {
        return new TextDecoder$1(encoding, options);
      }
      encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
      if (encoding !== DEFAULT_ENCODING) {
        throw new Error('Encoding not supported. Only utf-8 is supported');
      }
      options = ToDictionary(options);

      /** @private @type {boolean} */
      this._streaming = false;
      /** @private @type {boolean} */
      this._BOMseen = false;
      /** @private @type {?Decoder} */
      this._decoder = null;
      /** @private @type {boolean} */
      this._fatal = Boolean(options['fatal']);
      /** @private @type {boolean} */
      this._ignoreBOM = Boolean(options['ignoreBOM']);

      Object.defineProperty(this, 'encoding', {value: 'utf-8'});
      Object.defineProperty(this, 'fatal', {value: this._fatal});
      Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});
    }

    TextDecoder$1.prototype = {
      /**
       * @param {ArrayBufferView=} input The buffer of bytes to decode.
       * @param {Object=} options
       * @return {string} The decoded string.
       */
      decode: function decode(input, options) {
        var bytes;
        if (typeof input === 'object' && input instanceof ArrayBuffer) {
          bytes = new Uint8Array(input);
        } else if (typeof input === 'object' && 'buffer' in input &&
                   input.buffer instanceof ArrayBuffer) {
          bytes = new Uint8Array(input.buffer,
                                 input.byteOffset,
                                 input.byteLength);
        } else {
          bytes = new Uint8Array(0);
        }

        options = ToDictionary(options);

        if (!this._streaming) {
          this._decoder = new UTF8Decoder({fatal: this._fatal});
          this._BOMseen = false;
        }
        this._streaming = Boolean(options['stream']);

        var input_stream = new Stream(bytes);

        var code_points = [];

        /** @type {?(number|!Array.<number>)} */
        var result;

        while (!input_stream.endOfStream()) {
          result = this._decoder.handler(input_stream, input_stream.read());
          if (result === finished)
            break;
          if (result === null)
            continue;
          if (Array.isArray(result))
            code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
          else
            code_points.push(result);
        }
        if (!this._streaming) {
          do {
            result = this._decoder.handler(input_stream, input_stream.read());
            if (result === finished)
              break;
            if (result === null)
              continue;
            if (Array.isArray(result))
              code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
            else
              code_points.push(result);
          } while (!input_stream.endOfStream());
          this._decoder = null;
        }

        if (code_points.length) {
          // If encoding is one of utf-8, utf-16be, and utf-16le, and
          // ignore BOM flag and BOM seen flag are unset, run these
          // subsubsteps:
          if (['utf-8'].indexOf(this.encoding) !== -1 &&
              !this._ignoreBOM && !this._BOMseen) {
            // If token is U+FEFF, set BOM seen flag.
            if (code_points[0] === 0xFEFF) {
              this._BOMseen = true;
              code_points.shift();
            } else {
              // Otherwise, if token is not end-of-stream, set BOM seen
              // flag and append token to output.
              this._BOMseen = true;
            }
          }
        }

        return codePointsToString(code_points);
      }
    };

    // 7.2 Interface TextEncoder

    /**
     * @constructor
     * @param {string=} encoding The label of the encoding;
     *     defaults to 'utf-8'.
     * @param {Object=} options
     */
    function TextEncoder$1(encoding, options) {
      if (!(this instanceof TextEncoder$1))
        return new TextEncoder$1(encoding, options);
      encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
      if (encoding !== DEFAULT_ENCODING) {
        throw new Error('Encoding not supported. Only utf-8 is supported');
      }
      options = ToDictionary(options);

      /** @private @type {boolean} */
      this._streaming = false;
      /** @private @type {?Encoder} */
      this._encoder = null;
      /** @private @type {{fatal: boolean}} */
      this._options = {fatal: Boolean(options['fatal'])};

      Object.defineProperty(this, 'encoding', {value: 'utf-8'});
    }

    TextEncoder$1.prototype = {
      /**
       * @param {string=} opt_string The string to encode.
       * @param {Object=} options
       * @return {Uint8Array} Encoded bytes, as a Uint8Array.
       */
      encode: function encode(opt_string, options) {
        opt_string = opt_string ? String(opt_string) : '';
        options = ToDictionary(options);

        // NOTE: This option is nonstandard. None of the encodings
        // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,
        // so streaming is not necessary.
        if (!this._streaming)
          this._encoder = new UTF8Encoder(this._options);
        this._streaming = Boolean(options['stream']);

        var bytes = [];
        var input_stream = new Stream(stringToCodePoints(opt_string));
        /** @type {?(number|!Array.<number>)} */
        var result;
        while (!input_stream.endOfStream()) {
          result = this._encoder.handler(input_stream, input_stream.read());
          if (result === finished)
            break;
          if (Array.isArray(result))
            bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
          else
            bytes.push(result);
        }
        if (!this._streaming) {
          while (true) {
            result = this._encoder.handler(input_stream, input_stream.read());
            if (result === finished)
              break;
            if (Array.isArray(result))
              bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
            else
              bytes.push(result);
          }
          this._encoder = null;
        }
        return new Uint8Array(bytes);
      }
    };

    //
    // 8. The encoding
    //

    // 8.1 utf-8

    /**
     * @constructor
     * @implements {Decoder}
     * @param {{fatal: boolean}} options
     */
    function UTF8Decoder(options) {
      var fatal = options.fatal;

      // utf-8's decoder's has an associated utf-8 code point, utf-8
      // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
      // lower boundary (initially 0x80), and a utf-8 upper boundary
      // (initially 0xBF).
      var /** @type {number} */ utf8_code_point = 0,
          /** @type {number} */ utf8_bytes_seen = 0,
          /** @type {number} */ utf8_bytes_needed = 0,
          /** @type {number} */ utf8_lower_boundary = 0x80,
          /** @type {number} */ utf8_upper_boundary = 0xBF;

      /**
       * @param {Stream} stream The stream of bytes being decoded.
       * @param {number} bite The next byte read from the stream.
       * @return {?(number|!Array.<number>)} The next code point(s)
       *     decoded, or null if not enough data exists in the input
       *     stream to decode a complete code point.
       */
      this.handler = function(stream, bite) {
        // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
        // set utf-8 bytes needed to 0 and return error.
        if (bite === end_of_stream && utf8_bytes_needed !== 0) {
          utf8_bytes_needed = 0;
          return decoderError(fatal);
        }

        // 2. If byte is end-of-stream, return finished.
        if (bite === end_of_stream)
          return finished;

        // 3. If utf-8 bytes needed is 0, based on byte:
        if (utf8_bytes_needed === 0) {

          // 0x00 to 0x7F
          if (inRange(bite, 0x00, 0x7F)) {
            // Return a code point whose value is byte.
            return bite;
          }

          // 0xC2 to 0xDF
          if (inRange(bite, 0xC2, 0xDF)) {
            // Set utf-8 bytes needed to 1 and utf-8 code point to byte
            // − 0xC0.
            utf8_bytes_needed = 1;
            utf8_code_point = bite - 0xC0;
          }

          // 0xE0 to 0xEF
          else if (inRange(bite, 0xE0, 0xEF)) {
            // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
            if (bite === 0xE0)
              utf8_lower_boundary = 0xA0;
            // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.
            if (bite === 0xED)
              utf8_upper_boundary = 0x9F;
            // 3. Set utf-8 bytes needed to 2 and utf-8 code point to
            // byte − 0xE0.
            utf8_bytes_needed = 2;
            utf8_code_point = bite - 0xE0;
          }

          // 0xF0 to 0xF4
          else if (inRange(bite, 0xF0, 0xF4)) {
            // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
            if (bite === 0xF0)
              utf8_lower_boundary = 0x90;
            // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.
            if (bite === 0xF4)
              utf8_upper_boundary = 0x8F;
            // 3. Set utf-8 bytes needed to 3 and utf-8 code point to
            // byte − 0xF0.
            utf8_bytes_needed = 3;
            utf8_code_point = bite - 0xF0;
          }

          // Otherwise
          else {
            // Return error.
            return decoderError(fatal);
          }

          // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code
          // point to utf-8 code point << (6 × utf-8 bytes needed) and
          // return continue.
          utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);
          return null;
        }

        // 4. If byte is not in the range utf-8 lower boundary to utf-8
        // upper boundary, run these substeps:
        if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {

          // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
          // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
          // utf-8 upper boundary to 0xBF.
          utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
          utf8_lower_boundary = 0x80;
          utf8_upper_boundary = 0xBF;

          // 2. Prepend byte to stream.
          stream.prepend(bite);

          // 3. Return error.
          return decoderError(fatal);
        }

        // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
        // to 0xBF.
        utf8_lower_boundary = 0x80;
        utf8_upper_boundary = 0xBF;

        // 6. Increase utf-8 bytes seen by one and set utf-8 code point
        // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes
        // needed − utf-8 bytes seen)).
        utf8_bytes_seen += 1;
        utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));

        // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,
        // continue.
        if (utf8_bytes_seen !== utf8_bytes_needed)
          return null;

        // 8. Let code point be utf-8 code point.
        var code_point = utf8_code_point;

        // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
        // seen to 0.
        utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;

        // 10. Return a code point whose value is code point.
        return code_point;
      };
    }

    /**
     * @constructor
     * @implements {Encoder}
     * @param {{fatal: boolean}} options
     */
    function UTF8Encoder(options) {
      options.fatal;
      /**
       * @param {Stream} stream Input stream.
       * @param {number} code_point Next code point read from the stream.
       * @return {(number|!Array.<number>)} Byte(s) to emit.
       */
      this.handler = function(stream, code_point) {
        // 1. If code point is end-of-stream, return finished.
        if (code_point === end_of_stream)
          return finished;

        // 2. If code point is in the range U+0000 to U+007F, return a
        // byte whose value is code point.
        if (inRange(code_point, 0x0000, 0x007f))
          return code_point;

        // 3. Set count and offset based on the range code point is in:
        var count, offset;
        // U+0080 to U+07FF:    1 and 0xC0
        if (inRange(code_point, 0x0080, 0x07FF)) {
          count = 1;
          offset = 0xC0;
        }
        // U+0800 to U+FFFF:    2 and 0xE0
        else if (inRange(code_point, 0x0800, 0xFFFF)) {
          count = 2;
          offset = 0xE0;
        }
        // U+10000 to U+10FFFF: 3 and 0xF0
        else if (inRange(code_point, 0x10000, 0x10FFFF)) {
          count = 3;
          offset = 0xF0;
        }

        // 4.Let bytes be a byte sequence whose first byte is (code
        // point >> (6 × count)) + offset.
        var bytes = [(code_point >> (6 * count)) + offset];

        // 5. Run these substeps while count is greater than 0:
        while (count > 0) {

          // 1. Set temp to code point >> (6 × (count − 1)).
          var temp = code_point >> (6 * (count - 1));

          // 2. Append to bytes 0x80 | (temp & 0x3F).
          bytes.push(0x80 | (temp & 0x3F));

          // 3. Decrease count by one.
          count -= 1;
        }

        // 6. Return bytes bytes, in order.
        return bytes;
      };
    }

    var encoding_lib = /*#__PURE__*/Object.freeze({
        __proto__: null,
        TextEncoder: TextEncoder$1,
        TextDecoder: TextDecoder$1
    });

    var require$$2 = /*@__PURE__*/getAugmentedNamespace(encoding_lib);

    var lib$3 = createCommonjsModule(function (module, exports) {
    var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __decorate = (commonjsGlobal$1 && commonjsGlobal$1.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __importStar = (commonjsGlobal$1 && commonjsGlobal$1.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    var __importDefault = (commonjsGlobal$1 && commonjsGlobal$1.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;
    const bn_js_1 = __importDefault(bn$1);
    const bs58_1 = __importDefault(bs58);
    // TODO: Make sure this polyfill not included when not required
    const encoding = __importStar(require$$2);
    const TextDecoder = (typeof commonjsGlobal$1.TextDecoder !== 'function') ? encoding.TextDecoder : commonjsGlobal$1.TextDecoder;
    const textDecoder = new TextDecoder('utf-8', { fatal: true });
    function baseEncode(value) {
        if (typeof (value) === 'string') {
            value = Buffer.from(value, 'utf8');
        }
        return bs58_1.default.encode(Buffer.from(value));
    }
    exports.baseEncode = baseEncode;
    function baseDecode(value) {
        return Buffer.from(bs58_1.default.decode(value));
    }
    exports.baseDecode = baseDecode;
    const INITIAL_LENGTH = 1024;
    class BorshError extends Error {
        constructor(message) {
            super(message);
            this.fieldPath = [];
            this.originalMessage = message;
        }
        addToFieldPath(fieldName) {
            this.fieldPath.splice(0, 0, fieldName);
            // NOTE: Modifying message directly as jest doesn't use .toString()
            this.message = this.originalMessage + ': ' + this.fieldPath.join('.');
        }
    }
    exports.BorshError = BorshError;
    /// Binary encoder.
    class BinaryWriter {
        constructor() {
            this.buf = Buffer.alloc(INITIAL_LENGTH);
            this.length = 0;
        }
        maybeResize() {
            if (this.buf.length < 16 + this.length) {
                this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);
            }
        }
        writeU8(value) {
            this.maybeResize();
            this.buf.writeUInt8(value, this.length);
            this.length += 1;
        }
        writeU16(value) {
            this.maybeResize();
            this.buf.writeUInt16LE(value, this.length);
            this.length += 2;
        }
        writeU32(value) {
            this.maybeResize();
            this.buf.writeUInt32LE(value, this.length);
            this.length += 4;
        }
        writeU64(value) {
            this.maybeResize();
            this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray('le', 8)));
        }
        writeU128(value) {
            this.maybeResize();
            this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray('le', 16)));
        }
        writeU256(value) {
            this.maybeResize();
            this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray('le', 32)));
        }
        writeU512(value) {
            this.maybeResize();
            this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray('le', 64)));
        }
        writeBuffer(buffer) {
            // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser
            this.buf = Buffer.concat([Buffer.from(this.buf.subarray(0, this.length)), buffer, Buffer.alloc(INITIAL_LENGTH)]);
            this.length += buffer.length;
        }
        writeString(str) {
            this.maybeResize();
            const b = Buffer.from(str, 'utf8');
            this.writeU32(b.length);
            this.writeBuffer(b);
        }
        writeFixedArray(array) {
            this.writeBuffer(Buffer.from(array));
        }
        writeArray(array, fn) {
            this.maybeResize();
            this.writeU32(array.length);
            for (const elem of array) {
                this.maybeResize();
                fn(elem);
            }
        }
        toArray() {
            return this.buf.subarray(0, this.length);
        }
    }
    exports.BinaryWriter = BinaryWriter;
    function handlingRangeError(target, propertyKey, propertyDescriptor) {
        const originalMethod = propertyDescriptor.value;
        propertyDescriptor.value = function (...args) {
            try {
                return originalMethod.apply(this, args);
            }
            catch (e) {
                if (e instanceof RangeError) {
                    const code = e.code;
                    if (['ERR_BUFFER_OUT_OF_BOUNDS', 'ERR_OUT_OF_RANGE'].indexOf(code) >= 0) {
                        throw new BorshError('Reached the end of buffer when deserializing');
                    }
                }
                throw e;
            }
        };
    }
    class BinaryReader {
        constructor(buf) {
            this.buf = buf;
            this.offset = 0;
        }
        readU8() {
            const value = this.buf.readUInt8(this.offset);
            this.offset += 1;
            return value;
        }
        readU16() {
            const value = this.buf.readUInt16LE(this.offset);
            this.offset += 2;
            return value;
        }
        readU32() {
            const value = this.buf.readUInt32LE(this.offset);
            this.offset += 4;
            return value;
        }
        readU64() {
            const buf = this.readBuffer(8);
            return new bn_js_1.default(buf, 'le');
        }
        readU128() {
            const buf = this.readBuffer(16);
            return new bn_js_1.default(buf, 'le');
        }
        readU256() {
            const buf = this.readBuffer(32);
            return new bn_js_1.default(buf, 'le');
        }
        readU512() {
            const buf = this.readBuffer(64);
            return new bn_js_1.default(buf, 'le');
        }
        readBuffer(len) {
            if ((this.offset + len) > this.buf.length) {
                throw new BorshError(`Expected buffer length ${len} isn't within bounds`);
            }
            const result = this.buf.slice(this.offset, this.offset + len);
            this.offset += len;
            return result;
        }
        readString() {
            const len = this.readU32();
            const buf = this.readBuffer(len);
            try {
                // NOTE: Using TextDecoder to fail on invalid UTF-8
                return textDecoder.decode(buf);
            }
            catch (e) {
                throw new BorshError(`Error decoding UTF-8 string: ${e}`);
            }
        }
        readFixedArray(len) {
            return new Uint8Array(this.readBuffer(len));
        }
        readArray(fn) {
            const len = this.readU32();
            const result = Array();
            for (let i = 0; i < len; ++i) {
                result.push(fn());
            }
            return result;
        }
    }
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU8", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU16", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU32", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU64", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU128", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU256", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU512", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readString", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readFixedArray", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readArray", null);
    exports.BinaryReader = BinaryReader;
    function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
    function serializeField(schema, fieldName, value, fieldType, writer) {
        try {
            // TODO: Handle missing values properly (make sure they never result in just skipped write)
            if (typeof fieldType === 'string') {
                writer[`write${capitalizeFirstLetter(fieldType)}`](value);
            }
            else if (fieldType instanceof Array) {
                if (typeof fieldType[0] === 'number') {
                    if (value.length !== fieldType[0]) {
                        throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);
                    }
                    writer.writeFixedArray(value);
                }
                else {
                    writer.writeArray(value, (item) => { serializeField(schema, fieldName, item, fieldType[0], writer); });
                }
            }
            else if (fieldType.kind !== undefined) {
                switch (fieldType.kind) {
                    case 'option': {
                        if (value === null || value === undefined) {
                            writer.writeU8(0);
                        }
                        else {
                            writer.writeU8(1);
                            serializeField(schema, fieldName, value, fieldType.type, writer);
                        }
                        break;
                    }
                    default: throw new BorshError(`FieldType ${fieldType} unrecognized`);
                }
            }
            else {
                serializeStruct(schema, value, writer);
            }
        }
        catch (error) {
            if (error instanceof BorshError) {
                error.addToFieldPath(fieldName);
            }
            throw error;
        }
    }
    function serializeStruct(schema, obj, writer) {
        const structSchema = schema.get(obj.constructor);
        if (!structSchema) {
            throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);
        }
        if (structSchema.kind === 'struct') {
            structSchema.fields.map(([fieldName, fieldType]) => {
                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
            });
        }
        else if (structSchema.kind === 'enum') {
            const name = obj[structSchema.field];
            for (let idx = 0; idx < structSchema.values.length; ++idx) {
                const [fieldName, fieldType] = structSchema.values[idx];
                if (fieldName === name) {
                    writer.writeU8(idx);
                    serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
                    break;
                }
            }
        }
        else {
            throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);
        }
    }
    /// Serialize given object using schema of the form:
    /// { class_name -> [ [field_name, field_type], .. ], .. }
    function serialize(schema, obj) {
        const writer = new BinaryWriter();
        serializeStruct(schema, obj, writer);
        return writer.toArray();
    }
    exports.serialize = serialize;
    function deserializeField(schema, fieldName, fieldType, reader) {
        try {
            if (typeof fieldType === 'string') {
                return reader[`read${capitalizeFirstLetter(fieldType)}`]();
            }
            if (fieldType instanceof Array) {
                if (typeof fieldType[0] === 'number') {
                    return reader.readFixedArray(fieldType[0]);
                }
                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));
            }
            if (fieldType.kind === 'option') {
                const option = reader.readU8();
                if (option) {
                    return deserializeField(schema, fieldName, fieldType.type, reader);
                }
                return undefined;
            }
            return deserializeStruct(schema, fieldType, reader);
        }
        catch (error) {
            if (error instanceof BorshError) {
                error.addToFieldPath(fieldName);
            }
            throw error;
        }
    }
    function deserializeStruct(schema, classType, reader) {
        const structSchema = schema.get(classType);
        if (!structSchema) {
            throw new BorshError(`Class ${classType.name} is missing in schema`);
        }
        if (structSchema.kind === 'struct') {
            const result = {};
            for (const [fieldName, fieldType] of schema.get(classType).fields) {
                result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);
            }
            return new classType(result);
        }
        if (structSchema.kind === 'enum') {
            const idx = reader.readU8();
            if (idx >= structSchema.values.length) {
                throw new BorshError(`Enum index: ${idx} is out of range`);
            }
            const [fieldName, fieldType] = structSchema.values[idx];
            const fieldValue = deserializeField(schema, fieldName, fieldType, reader);
            return new classType({ [fieldName]: fieldValue });
        }
        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);
    }
    /// Deserializes object from bytes using schema.
    function deserialize(schema, classType, buffer) {
        const reader = new BinaryReader(buffer);
        const result = deserializeStruct(schema, classType, reader);
        if (reader.offset < buffer.length) {
            throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);
        }
        return result;
    }
    exports.deserialize = deserialize;
    /// Deserializes object from bytes using schema, without checking the length read
    function deserializeUnchecked(schema, classType, buffer) {
        const reader = new BinaryReader(buffer);
        return deserializeStruct(schema, classType, reader);
    }
    exports.deserializeUnchecked = deserializeUnchecked;
    });

    var Layout_1$1 = createCommonjsModule(function (module, exports) {
    var __extends = (commonjsGlobal$1 && commonjsGlobal$1.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    exports.__esModule = true;
    exports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;
    exports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;

    /* Check if a value is a Uint8Array.
     *
     * @ignore */
    function checkUint8Array(b) {
        if (!(b instanceof Uint8Array)) {
            throw new TypeError('b must be a Uint8Array');
        }
    }
    exports.checkUint8Array = checkUint8Array;
    /* Create a Buffer instance from a Uint8Array.
     *
     * @ignore */
    function uint8ArrayToBuffer(b) {
        checkUint8Array(b);
        return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);
    }
    exports.uint8ArrayToBuffer = uint8ArrayToBuffer;
    /**
     * Base class for layout objects.
     *
     * **NOTE** This is an abstract base class; you can create instances
     * if it amuses you, but they won't support the {@link
     * Layout#encode|encode} or {@link Layout#decode|decode} functions.
     *
     * @param {Number} span - Initializer for {@link Layout#span|span}.  The
     * parameter must be an integer; a negative value signifies that the
     * span is {@link Layout#getSpan|value-specific}.
     *
     * @param {string} [property] - Initializer for {@link
     * Layout#property|property}.
     *
     * @abstract
     */
    var Layout = /** @class */ (function () {
        function Layout(span, property) {
            if (!Number.isInteger(span)) {
                throw new TypeError('span must be an integer');
            }
            /** The span of the layout in bytes.
             *
             * Positive values are generally expected.
             *
             * Zero will only appear in {@link Constant}s and in {@link
             * Sequence}s where the {@link Sequence#count|count} is zero.
             *
             * A negative value indicates that the span is value-specific, and
             * must be obtained using {@link Layout#getSpan|getSpan}. */
            this.span = span;
            /** The property name used when this layout is represented in an
             * Object.
             *
             * Used only for layouts that {@link Layout#decode|decode} to Object
             * instances.  If left undefined the span of the unnamed layout will
             * be treated as padding: it will not be mutated by {@link
             * Layout#encode|encode} nor represented as a property in the
             * decoded Object. */
            this.property = property;
        }
        /** Function to create an Object into which decoded properties will
         * be written.
         *
         * Used only for layouts that {@link Layout#decode|decode} to Object
         * instances, which means:
         * * {@link Structure}
         * * {@link Union}
         * * {@link VariantLayout}
         * * {@link BitStructure}
         *
         * If left undefined the JavaScript representation of these layouts
         * will be Object instances.
         *
         * See {@link bindConstructorLayout}.
         */
        Layout.prototype.makeDestinationObject = function () {
            return {};
        };
        /**
         * Decode from a Uint8Array into a JavaScript value.
         *
         * @param {Uint8Array} b - the buffer from which encoded data is read.
         *
         * @param {Number} [offset] - the offset at which the encoded data
         * starts.  If absent a zero offset is inferred.
         *
         * @returns {(Number|Array|Object)} - the value of the decoded data.
         *
         * @abstract
         */
        Layout.prototype.decode = function (b, offset) {
            throw new Error('Layout is abstract');
        };
        /**
         * Encode a JavaScript value into a Uint8Array.
         *
         * @param {(Number|Array|Object)} src - the value to be encoded into
         * the buffer.  The type accepted depends on the (sub-)type of {@link
         * Layout}.
         *
         * @param {Uint8Array} b - the buffer into which encoded data will be
         * written.
         *
         * @param {Number} [offset] - the offset at which the encoded data
         * starts.  If absent a zero offset is inferred.
         *
         * @returns {Number} - the number of bytes encoded, including the
         * space skipped for internal padding, but excluding data such as
         * {@link Sequence#count|lengths} when stored {@link
         * ExternalLayout|externally}.  This is the adjustment to `offset`
         * producing the offset where data for the next layout would be
         * written.
         *
         * @abstract
         */
        Layout.prototype.encode = function (src, b, offset) {
            throw new Error('Layout is abstract');
        };
        /**
         * Calculate the span of a specific instance of a layout.
         *
         * @param {Uint8Array} b - the buffer that contains an encoded instance.
         *
         * @param {Number} [offset] - the offset at which the encoded instance
         * starts.  If absent a zero offset is inferred.
         *
         * @return {Number} - the number of bytes covered by the layout
         * instance.  If this method is not overridden in a subclass the
         * definition-time constant {@link Layout#span|span} will be
         * returned.
         *
         * @throws {RangeError} - if the length of the value cannot be
         * determined.
         */
        Layout.prototype.getSpan = function (b, offset) {
            if (0 > this.span) {
                throw new RangeError('indeterminate span');
            }
            return this.span;
        };
        /**
         * Replicate the layout using a new property.
         *
         * This function must be used to get a structurally-equivalent layout
         * with a different name since all {@link Layout} instances are
         * immutable.
         *
         * **NOTE** This is a shallow copy.  All fields except {@link
         * Layout#property|property} are strictly equal to the origin layout.
         *
         * @param {String} property - the value for {@link
         * Layout#property|property} in the replica.
         *
         * @returns {Layout} - the copy with {@link Layout#property|property}
         * set to `property`.
         */
        Layout.prototype.replicate = function (property) {
            var rv = Object.create(this.constructor.prototype);
            Object.assign(rv, this);
            rv.property = property;
            return rv;
        };
        /**
         * Create an object from layout properties and an array of values.
         *
         * **NOTE** This function returns `undefined` if invoked on a layout
         * that does not return its value as an Object.  Objects are
         * returned for things that are a {@link Structure}, which includes
         * {@link VariantLayout|variant layouts} if they are structures, and
         * excludes {@link Union}s.  If you want this feature for a union
         * you must use {@link Union.getVariant|getVariant} to select the
         * desired layout.
         *
         * @param {Array} values - an array of values that correspond to the
         * default order for properties.  As with {@link Layout#decode|decode}
         * layout elements that have no property name are skipped when
         * iterating over the array values.  Only the top-level properties are
         * assigned; arguments are not assigned to properties of contained
         * layouts.  Any unused values are ignored.
         *
         * @return {(Object|undefined)}
         */
        Layout.prototype.fromArray = function (values) {
            return undefined;
        };
        return Layout;
    }());
    exports.Layout = Layout;
    /* Provide text that carries a name (such as for a function that will
     * be throwing an error) annotated with the property of a given layout
     * (such as one for which the value was unacceptable).
     *
     * @ignore */
    function nameWithProperty(name, lo) {
        if (lo.property) {
            return name + '[' + lo.property + ']';
        }
        return name;
    }
    exports.nameWithProperty = nameWithProperty;
    /**
     * Augment a class so that instances can be encoded/decoded using a
     * given layout.
     *
     * Calling this function couples `Class` with `layout` in several ways:
     *
     * * `Class.layout_` becomes a static member property equal to `layout`;
     * * `layout.boundConstructor_` becomes a static member property equal
     *    to `Class`;
     * * The {@link Layout#makeDestinationObject|makeDestinationObject()}
     *   property of `layout` is set to a function that returns a `new
     *   Class()`;
     * * `Class.decode(b, offset)` becomes a static member function that
     *   delegates to {@link Layout#decode|layout.decode}.  The
     *   synthesized function may be captured and extended.
     * * `Class.prototype.encode(b, offset)` provides an instance member
     *   function that delegates to {@link Layout#encode|layout.encode}
     *   with `src` set to `this`.  The synthesized function may be
     *   captured and extended, but when the extension is invoked `this`
     *   must be explicitly bound to the instance.
     *
     * @param {class} Class - a JavaScript class with a nullary
     * constructor.
     *
     * @param {Layout} layout - the {@link Layout} instance used to encode
     * instances of `Class`.
     */
    function bindConstructorLayout(Class, layout) {
        if ('function' !== typeof Class) {
            throw new TypeError('Class must be constructor');
        }
        if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {
            throw new Error('Class is already bound to a layout');
        }
        if (!(layout && (layout instanceof Layout))) {
            throw new TypeError('layout must be a Layout');
        }
        if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {
            throw new Error('layout is already bound to a constructor');
        }
        Class.layout_ = layout;
        layout.boundConstructor_ = Class;
        layout.makeDestinationObject = (function () { return new Class(); });
        Object.defineProperty(Class.prototype, 'encode', {
            value: function (b, offset) {
                return layout.encode(this, b, offset);
            },
            writable: true
        });
        Object.defineProperty(Class, 'decode', {
            value: function (b, offset) {
                return layout.decode(b, offset);
            },
            writable: true
        });
    }
    exports.bindConstructorLayout = bindConstructorLayout;
    /**
     * An object that behaves like a layout but does not consume space
     * within its containing layout.
     *
     * This is primarily used to obtain metadata about a member, such as a
     * {@link OffsetLayout} that can provide data about a {@link
     * Layout#getSpan|value-specific span}.
     *
     * **NOTE** This is an abstract base class; you can create instances
     * if it amuses you, but they won't support {@link
     * ExternalLayout#isCount|isCount} or other {@link Layout} functions.
     *
     * @param {Number} span - initializer for {@link Layout#span|span}.
     * The parameter can range from 1 through 6.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @abstract
     * @augments {Layout}
     */
    var ExternalLayout = /** @class */ (function (_super) {
        __extends(ExternalLayout, _super);
        function ExternalLayout() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Return `true` iff the external layout decodes to an unsigned
         * integer layout.
         *
         * In that case it can be used as the source of {@link
         * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},
         * or as {@link UnionLayoutDiscriminator#layout|external union
         * discriminators}.
         *
         * @abstract
         */
        ExternalLayout.prototype.isCount = function () {
            throw new Error('ExternalLayout is abstract');
        };
        return ExternalLayout;
    }(Layout));
    exports.ExternalLayout = ExternalLayout;
    /**
     * An {@link ExternalLayout} that determines its {@link
     * Layout#decode|value} based on offset into and length of the buffer
     * on which it is invoked.
     *
     * *Factory*: {@link module:Layout.greedy|greedy}
     *
     * @param {Number} [elementSpan] - initializer for {@link
     * GreedyCount#elementSpan|elementSpan}.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {ExternalLayout}
     */
    var GreedyCount = /** @class */ (function (_super) {
        __extends(GreedyCount, _super);
        function GreedyCount(elementSpan, property) {
            var _this = this;
            if (undefined === elementSpan) {
                elementSpan = 1;
            }
            if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {
                throw new TypeError('elementSpan must be a (positive) integer');
            }
            _this = _super.call(this, -1, property) || this;
            /** The layout for individual elements of the sequence.  The value
             * must be a positive integer.  If not provided, the value will be
             * 1. */
            _this.elementSpan = elementSpan;
            return _this;
        }
        /** @override */
        GreedyCount.prototype.isCount = function () {
            return true;
        };
        /** @override */
        GreedyCount.prototype.decode = function (b, offset) {
            checkUint8Array(b);
            if (undefined === offset) {
                offset = 0;
            }
            var rem = b.length - offset;
            return Math.floor(rem / this.elementSpan);
        };
        /** @override */
        GreedyCount.prototype.encode = function (src, b, offset) {
            return 0;
        };
        return GreedyCount;
    }(ExternalLayout));
    exports.GreedyCount = GreedyCount;
    /**
     * An {@link ExternalLayout} that supports accessing a {@link Layout}
     * at a fixed offset from the start of another Layout.  The offset may
     * be before, within, or after the base layout.
     *
     * *Factory*: {@link module:Layout.offset|offset}
     *
     * @param {Layout} layout - initializer for {@link
     * OffsetLayout#layout|layout}, modulo `property`.
     *
     * @param {Number} [offset] - Initializes {@link
     * OffsetLayout#offset|offset}.  Defaults to zero.
     *
     * @param {string} [property] - Optional new property name for a
     * {@link Layout#replicate| replica} of `layout` to be used as {@link
     * OffsetLayout#layout|layout}.  If not provided the `layout` is used
     * unchanged.
     *
     * @augments {Layout}
     */
    var OffsetLayout = /** @class */ (function (_super) {
        __extends(OffsetLayout, _super);
        function OffsetLayout(layout, offset, property) {
            var _this = this;
            if (!(layout instanceof Layout)) {
                throw new TypeError('layout must be a Layout');
            }
            if (undefined === offset) {
                offset = 0;
            }
            else if (!Number.isInteger(offset)) {
                throw new TypeError('offset must be integer or undefined');
            }
            _this = _super.call(this, layout.span, property || layout.property) || this;
            /** The subordinated layout. */
            _this.layout = layout;
            /** The location of {@link OffsetLayout#layout} relative to the
             * start of another layout.
             *
             * The value may be positive or negative, but an error will thrown
             * if at the point of use it goes outside the span of the Uint8Array
             * being accessed.  */
            _this.offset = offset;
            return _this;
        }
        /** @override */
        OffsetLayout.prototype.isCount = function () {
            return ((this.layout instanceof UInt)
                || (this.layout instanceof UIntBE));
        };
        /** @override */
        OffsetLayout.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            return this.layout.decode(b, offset + this.offset);
        };
        /** @override */
        OffsetLayout.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            return this.layout.encode(src, b, offset + this.offset);
        };
        return OffsetLayout;
    }(ExternalLayout));
    exports.OffsetLayout = OffsetLayout;
    /**
     * Represent an unsigned integer in little-endian format.
     *
     * *Factory*: {@link module:Layout.u8|u8}, {@link
     *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link
     *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link
     *  module:Layout.u48|u48}
     *
     * @param {Number} span - initializer for {@link Layout#span|span}.
     * The parameter can range from 1 through 6.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var UInt = /** @class */ (function (_super) {
        __extends(UInt, _super);
        function UInt(span, property) {
            var _this = _super.call(this, span, property) || this;
            if (6 < _this.span) {
                throw new RangeError('span must not exceed 6 bytes');
            }
            return _this;
        }
        /** @override */
        UInt.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);
        };
        /** @override */
        UInt.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);
            return this.span;
        };
        return UInt;
    }(Layout));
    exports.UInt = UInt;
    /**
     * Represent an unsigned integer in big-endian format.
     *
     * *Factory*: {@link module:Layout.u8be|u8be}, {@link
     * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},
     * {@link module:Layout.u32be|u32be}, {@link
     * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}
     *
     * @param {Number} span - initializer for {@link Layout#span|span}.
     * The parameter can range from 1 through 6.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var UIntBE = /** @class */ (function (_super) {
        __extends(UIntBE, _super);
        function UIntBE(span, property) {
            var _this = _super.call(this, span, property) || this;
            if (6 < _this.span) {
                throw new RangeError('span must not exceed 6 bytes');
            }
            return _this;
        }
        /** @override */
        UIntBE.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);
        };
        /** @override */
        UIntBE.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);
            return this.span;
        };
        return UIntBE;
    }(Layout));
    exports.UIntBE = UIntBE;
    /**
     * Represent a signed integer in little-endian format.
     *
     * *Factory*: {@link module:Layout.s8|s8}, {@link
     *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link
     *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link
     *  module:Layout.s48|s48}
     *
     * @param {Number} span - initializer for {@link Layout#span|span}.
     * The parameter can range from 1 through 6.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var Int = /** @class */ (function (_super) {
        __extends(Int, _super);
        function Int(span, property) {
            var _this = _super.call(this, span, property) || this;
            if (6 < _this.span) {
                throw new RangeError('span must not exceed 6 bytes');
            }
            return _this;
        }
        /** @override */
        Int.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            return uint8ArrayToBuffer(b).readIntLE(offset, this.span);
        };
        /** @override */
        Int.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);
            return this.span;
        };
        return Int;
    }(Layout));
    exports.Int = Int;
    /**
     * Represent a signed integer in big-endian format.
     *
     * *Factory*: {@link module:Layout.s8be|s8be}, {@link
     * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},
     * {@link module:Layout.s32be|s32be}, {@link
     * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}
     *
     * @param {Number} span - initializer for {@link Layout#span|span}.
     * The parameter can range from 1 through 6.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var IntBE = /** @class */ (function (_super) {
        __extends(IntBE, _super);
        function IntBE(span, property) {
            var _this = _super.call(this, span, property) || this;
            if (6 < _this.span) {
                throw new RangeError('span must not exceed 6 bytes');
            }
            return _this;
        }
        /** @override */
        IntBE.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            return uint8ArrayToBuffer(b).readIntBE(offset, this.span);
        };
        /** @override */
        IntBE.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);
            return this.span;
        };
        return IntBE;
    }(Layout));
    exports.IntBE = IntBE;
    var V2E32 = Math.pow(2, 32);
    /* True modulus high and low 32-bit words, where low word is always
     * non-negative. */
    function divmodInt64(src) {
        var hi32 = Math.floor(src / V2E32);
        var lo32 = src - (hi32 * V2E32);
        return { hi32: hi32, lo32: lo32 };
    }
    /* Reconstruct Number from quotient and non-negative remainder */
    function roundedInt64(hi32, lo32) {
        return hi32 * V2E32 + lo32;
    }
    /**
     * Represent an unsigned 64-bit integer in little-endian format when
     * encoded and as a near integral JavaScript Number when decoded.
     *
     * *Factory*: {@link module:Layout.nu64|nu64}
     *
     * **NOTE** Values with magnitude greater than 2^52 may not decode to
     * the exact value of the encoded representation.
     *
     * @augments {Layout}
     */
    var NearUInt64 = /** @class */ (function (_super) {
        __extends(NearUInt64, _super);
        function NearUInt64(property) {
            return _super.call(this, 8, property) || this;
        }
        /** @override */
        NearUInt64.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var buffer = uint8ArrayToBuffer(b);
            var lo32 = buffer.readUInt32LE(offset);
            var hi32 = buffer.readUInt32LE(offset + 4);
            return roundedInt64(hi32, lo32);
        };
        /** @override */
        NearUInt64.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var split = divmodInt64(src);
            var buffer = uint8ArrayToBuffer(b);
            buffer.writeUInt32LE(split.lo32, offset);
            buffer.writeUInt32LE(split.hi32, offset + 4);
            return 8;
        };
        return NearUInt64;
    }(Layout));
    exports.NearUInt64 = NearUInt64;
    /**
     * Represent an unsigned 64-bit integer in big-endian format when
     * encoded and as a near integral JavaScript Number when decoded.
     *
     * *Factory*: {@link module:Layout.nu64be|nu64be}
     *
     * **NOTE** Values with magnitude greater than 2^52 may not decode to
     * the exact value of the encoded representation.
     *
     * @augments {Layout}
     */
    var NearUInt64BE = /** @class */ (function (_super) {
        __extends(NearUInt64BE, _super);
        function NearUInt64BE(property) {
            return _super.call(this, 8, property) || this;
        }
        /** @override */
        NearUInt64BE.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var buffer = uint8ArrayToBuffer(b);
            var hi32 = buffer.readUInt32BE(offset);
            var lo32 = buffer.readUInt32BE(offset + 4);
            return roundedInt64(hi32, lo32);
        };
        /** @override */
        NearUInt64BE.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var split = divmodInt64(src);
            var buffer = uint8ArrayToBuffer(b);
            buffer.writeUInt32BE(split.hi32, offset);
            buffer.writeUInt32BE(split.lo32, offset + 4);
            return 8;
        };
        return NearUInt64BE;
    }(Layout));
    exports.NearUInt64BE = NearUInt64BE;
    /**
     * Represent a signed 64-bit integer in little-endian format when
     * encoded and as a near integral JavaScript Number when decoded.
     *
     * *Factory*: {@link module:Layout.ns64|ns64}
     *
     * **NOTE** Values with magnitude greater than 2^52 may not decode to
     * the exact value of the encoded representation.
     *
     * @augments {Layout}
     */
    var NearInt64 = /** @class */ (function (_super) {
        __extends(NearInt64, _super);
        function NearInt64(property) {
            return _super.call(this, 8, property) || this;
        }
        /** @override */
        NearInt64.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var buffer = uint8ArrayToBuffer(b);
            var lo32 = buffer.readUInt32LE(offset);
            var hi32 = buffer.readInt32LE(offset + 4);
            return roundedInt64(hi32, lo32);
        };
        /** @override */
        NearInt64.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var split = divmodInt64(src);
            var buffer = uint8ArrayToBuffer(b);
            buffer.writeUInt32LE(split.lo32, offset);
            buffer.writeInt32LE(split.hi32, offset + 4);
            return 8;
        };
        return NearInt64;
    }(Layout));
    exports.NearInt64 = NearInt64;
    /**
     * Represent a signed 64-bit integer in big-endian format when
     * encoded and as a near integral JavaScript Number when decoded.
     *
     * *Factory*: {@link module:Layout.ns64be|ns64be}
     *
     * **NOTE** Values with magnitude greater than 2^52 may not decode to
     * the exact value of the encoded representation.
     *
     * @augments {Layout}
     */
    var NearInt64BE = /** @class */ (function (_super) {
        __extends(NearInt64BE, _super);
        function NearInt64BE(property) {
            return _super.call(this, 8, property) || this;
        }
        /** @override */
        NearInt64BE.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var buffer = uint8ArrayToBuffer(b);
            var hi32 = buffer.readInt32BE(offset);
            var lo32 = buffer.readUInt32BE(offset + 4);
            return roundedInt64(hi32, lo32);
        };
        /** @override */
        NearInt64BE.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var split = divmodInt64(src);
            var buffer = uint8ArrayToBuffer(b);
            buffer.writeInt32BE(split.hi32, offset);
            buffer.writeUInt32BE(split.lo32, offset + 4);
            return 8;
        };
        return NearInt64BE;
    }(Layout));
    exports.NearInt64BE = NearInt64BE;
    /**
     * Represent a 32-bit floating point number in little-endian format.
     *
     * *Factory*: {@link module:Layout.f32|f32}
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var Float = /** @class */ (function (_super) {
        __extends(Float, _super);
        function Float(property) {
            return _super.call(this, 4, property) || this;
        }
        /** @override */
        Float.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            return uint8ArrayToBuffer(b).readFloatLE(offset);
        };
        /** @override */
        Float.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            uint8ArrayToBuffer(b).writeFloatLE(src, offset);
            return 4;
        };
        return Float;
    }(Layout));
    exports.Float = Float;
    /**
     * Represent a 32-bit floating point number in big-endian format.
     *
     * *Factory*: {@link module:Layout.f32be|f32be}
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var FloatBE = /** @class */ (function (_super) {
        __extends(FloatBE, _super);
        function FloatBE(property) {
            return _super.call(this, 4, property) || this;
        }
        /** @override */
        FloatBE.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            return uint8ArrayToBuffer(b).readFloatBE(offset);
        };
        /** @override */
        FloatBE.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            uint8ArrayToBuffer(b).writeFloatBE(src, offset);
            return 4;
        };
        return FloatBE;
    }(Layout));
    exports.FloatBE = FloatBE;
    /**
     * Represent a 64-bit floating point number in little-endian format.
     *
     * *Factory*: {@link module:Layout.f64|f64}
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var Double = /** @class */ (function (_super) {
        __extends(Double, _super);
        function Double(property) {
            return _super.call(this, 8, property) || this;
        }
        /** @override */
        Double.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            return uint8ArrayToBuffer(b).readDoubleLE(offset);
        };
        /** @override */
        Double.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            uint8ArrayToBuffer(b).writeDoubleLE(src, offset);
            return 8;
        };
        return Double;
    }(Layout));
    exports.Double = Double;
    /**
     * Represent a 64-bit floating point number in big-endian format.
     *
     * *Factory*: {@link module:Layout.f64be|f64be}
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var DoubleBE = /** @class */ (function (_super) {
        __extends(DoubleBE, _super);
        function DoubleBE(property) {
            return _super.call(this, 8, property) || this;
        }
        /** @override */
        DoubleBE.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            return uint8ArrayToBuffer(b).readDoubleBE(offset);
        };
        /** @override */
        DoubleBE.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            uint8ArrayToBuffer(b).writeDoubleBE(src, offset);
            return 8;
        };
        return DoubleBE;
    }(Layout));
    exports.DoubleBE = DoubleBE;
    /**
     * Represent a contiguous sequence of a specific layout as an Array.
     *
     * *Factory*: {@link module:Layout.seq|seq}
     *
     * @param {Layout} elementLayout - initializer for {@link
     * Sequence#elementLayout|elementLayout}.
     *
     * @param {(Number|ExternalLayout)} count - initializer for {@link
     * Sequence#count|count}.  The parameter must be either a positive
     * integer or an instance of {@link ExternalLayout}.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var Sequence = /** @class */ (function (_super) {
        __extends(Sequence, _super);
        function Sequence(elementLayout, count, property) {
            var _this = this;
            if (!(elementLayout instanceof Layout)) {
                throw new TypeError('elementLayout must be a Layout');
            }
            if (!(((count instanceof ExternalLayout) && count.isCount())
                || (Number.isInteger(count) && (0 <= count)))) {
                throw new TypeError('count must be non-negative integer '
                    + 'or an unsigned integer ExternalLayout');
            }
            var span = -1;
            if ((!(count instanceof ExternalLayout))
                && (0 < elementLayout.span)) {
                span = count * elementLayout.span;
            }
            _this = _super.call(this, span, property) || this;
            /** The layout for individual elements of the sequence. */
            _this.elementLayout = elementLayout;
            /** The number of elements in the sequence.
             *
             * This will be either a non-negative integer or an instance of
             * {@link ExternalLayout} for which {@link
             * ExternalLayout#isCount|isCount()} is `true`. */
            _this.count = count;
            return _this;
        }
        /** @override */
        Sequence.prototype.getSpan = function (b, offset) {
            if (0 <= this.span) {
                return this.span;
            }
            if (undefined === offset) {
                offset = 0;
            }
            var span = 0;
            var count = this.count;
            if (count instanceof ExternalLayout) {
                count = count.decode(b, offset);
            }
            if (0 < this.elementLayout.span) {
                span = count * this.elementLayout.span;
            }
            else {
                var idx = 0;
                while (idx < count) {
                    span += this.elementLayout.getSpan(b, offset + span);
                    ++idx;
                }
            }
            return span;
        };
        /** @override */
        Sequence.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var rv = [];
            var i = 0;
            var count = this.count;
            if (count instanceof ExternalLayout) {
                count = count.decode(b, offset);
            }
            while (i < count) {
                rv.push(this.elementLayout.decode(b, offset));
                offset += this.elementLayout.getSpan(b, offset);
                i += 1;
            }
            return rv;
        };
        /** Implement {@link Layout#encode|encode} for {@link Sequence}.
         *
         * **NOTE** If `src` is shorter than {@link Sequence#count|count} then
         * the unused space in the buffer is left unchanged.  If `src` is
         * longer than {@link Sequence#count|count} the unneeded elements are
         * ignored.
         *
         * **NOTE** If {@link Layout#count|count} is an instance of {@link
         * ExternalLayout} then the length of `src` will be encoded as the
         * count after `src` is encoded. */
        Sequence.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var elo = this.elementLayout;
            var span = src.reduce(function (span, v) {
                return span + elo.encode(v, b, offset + span);
            }, 0);
            if (this.count instanceof ExternalLayout) {
                this.count.encode(src.length, b, offset);
            }
            return span;
        };
        return Sequence;
    }(Layout));
    exports.Sequence = Sequence;
    /**
     * Represent a contiguous sequence of arbitrary layout elements as an
     * Object.
     *
     * *Factory*: {@link module:Layout.struct|struct}
     *
     * **NOTE** The {@link Layout#span|span} of the structure is variable
     * if any layout in {@link Structure#fields|fields} has a variable
     * span.  When {@link Layout#encode|encoding} we must have a value for
     * all variable-length fields, or we wouldn't be able to figure out
     * how much space to use for storage.  We can only identify the value
     * for a field when it has a {@link Layout#property|property}.  As
     * such, although a structure may contain both unnamed fields and
     * variable-length fields, it cannot contain an unnamed
     * variable-length field.
     *
     * @param {Layout[]} fields - initializer for {@link
     * Structure#fields|fields}.  An error is raised if this contains a
     * variable-length field for which a {@link Layout#property|property}
     * is not defined.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @param {Boolean} [decodePrefixes] - initializer for {@link
     * Structure#decodePrefixes|property}.
     *
     * @throws {Error} - if `fields` contains an unnamed variable-length
     * layout.
     *
     * @augments {Layout}
     */
    var Structure = /** @class */ (function (_super) {
        __extends(Structure, _super);
        function Structure(fields, property, decodePrefixes) {
            var _this = this;
            if (!(Array.isArray(fields)
                && fields.reduce(function (acc, v) { return acc && (v instanceof Layout); }, true))) {
                throw new TypeError('fields must be array of Layout instances');
            }
            if (('boolean' === typeof property)
                && (undefined === decodePrefixes)) {
                decodePrefixes = property;
                property = undefined;
            }
            /* Verify absence of unnamed variable-length fields. */
            for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {
                var fd = fields_1[_i];
                if ((0 > fd.span)
                    && (undefined === fd.property)) {
                    throw new Error('fields cannot contain unnamed variable-length layout');
                }
            }
            var span = -1;
            try {
                span = fields.reduce(function (span, fd) { return span + fd.getSpan(); }, 0);
            }
            catch (e) {
                // ignore error
            }
            _this = _super.call(this, span, property) || this;
            /** The sequence of {@link Layout} values that comprise the
             * structure.
             *
             * The individual elements need not be the same type, and may be
             * either scalar or aggregate layouts.  If a member layout leaves
             * its {@link Layout#property|property} undefined the
             * corresponding region of the buffer associated with the element
             * will not be mutated.
             *
             * @type {Layout[]} */
            _this.fields = fields;
            /** Control behavior of {@link Layout#decode|decode()} given short
             * buffers.
             *
             * In some situations a structure many be extended with additional
             * fields over time, with older installations providing only a
             * prefix of the full structure.  If this property is `true`
             * decoding will accept those buffers and leave subsequent fields
             * undefined, as long as the buffer ends at a field boundary.
             * Defaults to `false`. */
            _this.decodePrefixes = !!decodePrefixes;
            return _this;
        }
        /** @override */
        Structure.prototype.getSpan = function (b, offset) {
            if (0 <= this.span) {
                return this.span;
            }
            if (undefined === offset) {
                offset = 0;
            }
            var span = 0;
            try {
                span = this.fields.reduce(function (span, fd) {
                    var fsp = fd.getSpan(b, offset);
                    offset += fsp;
                    return span + fsp;
                }, 0);
            }
            catch (e) {
                throw new RangeError('indeterminate span');
            }
            return span;
        };
        /** @override */
        Structure.prototype.decode = function (b, offset) {
            checkUint8Array(b);
            if (undefined === offset) {
                offset = 0;
            }
            var dest = this.makeDestinationObject();
            for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {
                var fd = _a[_i];
                if (undefined !== fd.property) {
                    dest[fd.property] = fd.decode(b, offset);
                }
                offset += fd.getSpan(b, offset);
                if (this.decodePrefixes
                    && (b.length === offset)) {
                    break;
                }
            }
            return dest;
        };
        /** Implement {@link Layout#encode|encode} for {@link Structure}.
         *
         * If `src` is missing a property for a member with a defined {@link
         * Layout#property|property} the corresponding region of the buffer is
         * left unmodified. */
        Structure.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var firstOffset = offset;
            var lastOffset = 0;
            var lastWrote = 0;
            for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {
                var fd = _a[_i];
                var span = fd.span;
                lastWrote = (0 < span) ? span : 0;
                if (undefined !== fd.property) {
                    var fv = src[fd.property];
                    if (undefined !== fv) {
                        lastWrote = fd.encode(fv, b, offset);
                        if (0 > span) {
                            /* Read the as-encoded span, which is not necessarily the
                             * same as what we wrote. */
                            span = fd.getSpan(b, offset);
                        }
                    }
                }
                lastOffset = offset;
                offset += span;
            }
            /* Use (lastOffset + lastWrote) instead of offset because the last
             * item may have had a dynamic length and we don't want to include
             * the padding between it and the end of the space reserved for
             * it. */
            return (lastOffset + lastWrote) - firstOffset;
        };
        /** @override */
        Structure.prototype.fromArray = function (values) {
            var dest = this.makeDestinationObject();
            for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {
                var fd = _a[_i];
                if ((undefined !== fd.property)
                    && (0 < values.length)) {
                    dest[fd.property] = values.shift();
                }
            }
            return dest;
        };
        /**
         * Get access to the layout of a given property.
         *
         * @param {String} property - the structure member of interest.
         *
         * @return {Layout} - the layout associated with `property`, or
         * undefined if there is no such property.
         */
        Structure.prototype.layoutFor = function (property) {
            if ('string' !== typeof property) {
                throw new TypeError('property must be string');
            }
            for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {
                var fd = _a[_i];
                if (fd.property === property) {
                    return fd;
                }
            }
            return undefined;
        };
        /**
         * Get the offset of a structure member.
         *
         * @param {String} property - the structure member of interest.
         *
         * @return {Number} - the offset in bytes to the start of `property`
         * within the structure, or undefined if `property` is not a field
         * within the structure.  If the property is a member but follows a
         * variable-length structure member a negative number will be
         * returned.
         */
        Structure.prototype.offsetOf = function (property) {
            if ('string' !== typeof property) {
                throw new TypeError('property must be string');
            }
            var offset = 0;
            for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {
                var fd = _a[_i];
                if (fd.property === property) {
                    return offset;
                }
                if (0 > fd.span) {
                    offset = -1;
                }
                else if (0 <= offset) {
                    offset += fd.span;
                }
            }
            return undefined;
        };
        return Structure;
    }(Layout));
    exports.Structure = Structure;
    /**
     * An object that can provide a {@link
     * Union#discriminator|discriminator} API for {@link Union}.
     *
     * **NOTE** This is an abstract base class; you can create instances
     * if it amuses you, but they won't support the {@link
     * UnionDiscriminator#encode|encode} or {@link
     * UnionDiscriminator#decode|decode} functions.
     *
     * @param {string} [property] - Default for {@link
     * UnionDiscriminator#property|property}.
     *
     * @abstract
     */
    var UnionDiscriminator = /** @class */ (function () {
        function UnionDiscriminator(property) {
            /** The {@link Layout#property|property} to be used when the
             * discriminator is referenced in isolation (generally when {@link
             * Union#decode|Union decode} cannot delegate to a specific
             * variant). */
            this.property = property;
        }
        /** Analog to {@link Layout#decode|Layout decode} for union discriminators.
         *
         * The implementation of this method need not reference the buffer if
         * variant information is available through other means. */
        UnionDiscriminator.prototype.decode = function (b, offset) {
            throw new Error('UnionDiscriminator is abstract');
        };
        /** Analog to {@link Layout#decode|Layout encode} for union discriminators.
         *
         * The implementation of this method need not store the value if
         * variant information is maintained through other means. */
        UnionDiscriminator.prototype.encode = function (src, b, offset) {
            throw new Error('UnionDiscriminator is abstract');
        };
        return UnionDiscriminator;
    }());
    exports.UnionDiscriminator = UnionDiscriminator;
    /**
     * An object that can provide a {@link
     * UnionDiscriminator|discriminator API} for {@link Union} using an
     * unsigned integral {@link Layout} instance located either inside or
     * outside the union.
     *
     * @param {ExternalLayout} layout - initializes {@link
     * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link
     * ExternalLayout#isCount|isCount()}.
     *
     * @param {string} [property] - Default for {@link
     * UnionDiscriminator#property|property}, superseding the property
     * from `layout`, but defaulting to `variant` if neither `property`
     * nor layout provide a property name.
     *
     * @augments {UnionDiscriminator}
     */
    var UnionLayoutDiscriminator = /** @class */ (function (_super) {
        __extends(UnionLayoutDiscriminator, _super);
        function UnionLayoutDiscriminator(layout, property) {
            var _this = this;
            if (!((layout instanceof ExternalLayout)
                && layout.isCount())) {
                throw new TypeError('layout must be an unsigned integer ExternalLayout');
            }
            _this = _super.call(this, property || layout.property || 'variant') || this;
            /** The {@link ExternalLayout} used to access the discriminator
             * value. */
            _this.layout = layout;
            return _this;
        }
        /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */
        UnionLayoutDiscriminator.prototype.decode = function (b, offset) {
            return this.layout.decode(b, offset);
        };
        /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */
        UnionLayoutDiscriminator.prototype.encode = function (src, b, offset) {
            return this.layout.encode(src, b, offset);
        };
        return UnionLayoutDiscriminator;
    }(UnionDiscriminator));
    exports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;
    /**
     * Represent any number of span-compatible layouts.
     *
     * *Factory*: {@link module:Layout.union|union}
     *
     * If the union has a {@link Union#defaultLayout|default layout} that
     * layout must have a non-negative {@link Layout#span|span}.  The span
     * of a fixed-span union includes its {@link
     * Union#discriminator|discriminator} if the variant is a {@link
     * Union#usesPrefixDiscriminator|prefix of the union}, plus the span
     * of its {@link Union#defaultLayout|default layout}.
     *
     * If the union does not have a default layout then the encoded span
     * of the union depends on the encoded span of its variant (which may
     * be fixed or variable).
     *
     * {@link VariantLayout#layout|Variant layout}s are added through
     * {@link Union#addVariant|addVariant}.  If the union has a default
     * layout, the span of the {@link VariantLayout#layout|layout
     * contained by the variant} must not exceed the span of the {@link
     * Union#defaultLayout|default layout} (minus the span of a {@link
     * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The
     * span of the variant will equal the span of the union itself.
     *
     * The variant for a buffer can only be identified from the {@link
     * Union#discriminator|discriminator} {@link
     * UnionDiscriminator#property|property} (in the case of the {@link
     * Union#defaultLayout|default layout}), or by using {@link
     * Union#getVariant|getVariant} and examining the resulting {@link
     * VariantLayout} instance.
     *
     * A variant compatible with a JavaScript object can be identified
     * using {@link Union#getSourceVariant|getSourceVariant}.
     *
     * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to
     * identify the layout used to interpret the union contents.  The
     * parameter must be an instance of {@link UnionDiscriminator}, an
     * {@link ExternalLayout} that satisfies {@link
     * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link
     * UIntBE}).  When a non-external layout element is passed the layout
     * appears at the start of the union.  In all cases the (synthesized)
     * {@link UnionDiscriminator} instance is recorded as {@link
     * Union#discriminator|discriminator}.
     *
     * @param {(Layout|null)} defaultLayout - initializer for {@link
     * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.
     * If `null` there is no default layout: the union has data-dependent
     * length and attempts to decode or encode unrecognized variants will
     * throw an exception.  A {@link Layout} instance must have a
     * non-negative {@link Layout#span|span}, and if it lacks a {@link
     * Layout#property|property} the {@link
     * Union#defaultLayout|defaultLayout} will be a {@link
     * Layout#replicate|replica} with property `content`.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var Union = /** @class */ (function (_super) {
        __extends(Union, _super);
        function Union(discr, defaultLayout, property) {
            var _this = this;
            var upv = ((discr instanceof UInt)
                || (discr instanceof UIntBE));
            var discriminator;
            if (upv) {
                discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));
            }
            else if ((discr instanceof ExternalLayout)
                && discr.isCount()) {
                discriminator = new UnionLayoutDiscriminator(discr);
            }
            else if (!(discr instanceof UnionDiscriminator)) {
                throw new TypeError('discr must be a UnionDiscriminator '
                    + 'or an unsigned integer layout');
            }
            else {
                discriminator = discr;
            }
            if (undefined === defaultLayout) {
                defaultLayout = null;
            }
            if (!((null === defaultLayout)
                || (defaultLayout instanceof Layout))) {
                throw new TypeError('defaultLayout must be null or a Layout');
            }
            if (null !== defaultLayout) {
                if (0 > defaultLayout.span) {
                    throw new Error('defaultLayout must have constant span');
                }
                if (undefined === defaultLayout.property) {
                    defaultLayout = defaultLayout.replicate('content');
                }
            }
            /* The union span can be estimated only if there's a default
             * layout.  The union spans its default layout, plus any prefix
             * variant layout.  By construction both layouts, if present, have
             * non-negative span. */
            var span = -1;
            if (defaultLayout) {
                span = defaultLayout.span;
                if ((0 <= span) && upv) {
                    span += discriminator.layout.span;
                }
            }
            _this = _super.call(this, span, property) || this;
            /** The interface for the discriminator value in isolation.
             *
             * This a {@link UnionDiscriminator} either passed to the
             * constructor or synthesized from the `discr` constructor
             * argument.  {@link
             * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be
             * `true` iff the `discr` parameter was a non-offset {@link
             * Layout} instance. */
            _this.discriminator = discriminator;
            /** `true` if the {@link Union#discriminator|discriminator} is the
             * first field in the union.
             *
             * If `false` the discriminator is obtained from somewhere
             * else. */
            _this.usesPrefixDiscriminator = upv;
            /** The layout for non-discriminator content when the value of the
             * discriminator is not recognized.
             *
             * This is the value passed to the constructor.  It is
             * structurally equivalent to the second component of {@link
             * Union#layout|layout} but may have a different property
             * name. */
            _this.defaultLayout = defaultLayout;
            /** A registry of allowed variants.
             *
             * The keys are unsigned integers which should be compatible with
             * {@link Union.discriminator|discriminator}.  The property value
             * is the corresponding {@link VariantLayout} instances assigned
             * to this union by {@link Union#addVariant|addVariant}.
             *
             * **NOTE** The registry remains mutable so that variants can be
             * {@link Union#addVariant|added} at any time.  Users should not
             * manipulate the content of this property. */
            _this.registry = {};
            /* Private variable used when invoking getSourceVariant */
            var boundGetSourceVariant = _this.defaultGetSourceVariant.bind(_this);
            /** Function to infer the variant selected by a source object.
             *
             * Defaults to {@link
             * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may
             * be overridden using {@link
             * Union#configGetSourceVariant|configGetSourceVariant}.
             *
             * @param {Object} src - as with {@link
             * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
             *
             * @returns {(undefined|VariantLayout)} The default variant
             * (`undefined`) or first registered variant that uses a property
             * available in `src`. */
            _this.getSourceVariant = function (src) {
                return boundGetSourceVariant(src);
            };
            /** Function to override the implementation of {@link
             * Union#getSourceVariant|getSourceVariant}.
             *
             * Use this if the desired variant cannot be identified using the
             * algorithm of {@link
             * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
             *
             * **NOTE** The provided function will be invoked bound to this
             * Union instance, providing local access to {@link
             * Union#registry|registry}.
             *
             * @param {Function} gsv - a function that follows the API of
             * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */
            _this.configGetSourceVariant = function (gsv) {
                boundGetSourceVariant = gsv.bind(this);
            };
            return _this;
        }
        /** @override */
        Union.prototype.getSpan = function (b, offset) {
            if (0 <= this.span) {
                return this.span;
            }
            if (undefined === offset) {
                offset = 0;
            }
            /* Default layouts always have non-negative span, so we don't have
             * one and we have to recognize the variant which will in turn
             * determine the span. */
            var vlo = this.getVariant(b, offset);
            if (!vlo) {
                throw new Error('unable to determine span for unrecognized variant');
            }
            return vlo.getSpan(b, offset);
        };
        /**
         * Method to infer a registered Union variant compatible with `src`.
         *
         * The first satisfied rule in the following sequence defines the
         * return value:
         * * If `src` has properties matching the Union discriminator and
         *   the default layout, `undefined` is returned regardless of the
         *   value of the discriminator property (this ensures the default
         *   layout will be used);
         * * If `src` has a property matching the Union discriminator, the
         *   value of the discriminator identifies a registered variant, and
         *   either (a) the variant has no layout, or (b) `src` has the
         *   variant's property, then the variant is returned (because the
         *   source satisfies the constraints of the variant it identifies);
         * * If `src` does not have a property matching the Union
         *   discriminator, but does have a property matching a registered
         *   variant, then the variant is returned (because the source
         *   matches a variant without an explicit conflict);
         * * An error is thrown (because we either can't identify a variant,
         *   or we were explicitly told the variant but can't satisfy it).
         *
         * @param {Object} src - an object presumed to be compatible with
         * the content of the Union.
         *
         * @return {(undefined|VariantLayout)} - as described above.
         *
         * @throws {Error} - if `src` cannot be associated with a default or
         * registered variant.
         */
        Union.prototype.defaultGetSourceVariant = function (src) {
            if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {
                if (this.defaultLayout && this.defaultLayout.property
                    && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {
                    return undefined;
                }
                var vlo = this.registry[src[this.discriminator.property]];
                if (vlo
                    && ((!vlo.layout)
                        || (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)))) {
                    return vlo;
                }
            }
            else {
                for (var tag in this.registry) {
                    var vlo = this.registry[tag];
                    if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {
                        return vlo;
                    }
                }
            }
            throw new Error('unable to infer src variant');
        };
        /** Implement {@link Layout#decode|decode} for {@link Union}.
         *
         * If the variant is {@link Union#addVariant|registered} the return
         * value is an instance of that variant, with no explicit
         * discriminator.  Otherwise the {@link Union#defaultLayout|default
         * layout} is used to decode the content. */
        Union.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var dest;
            var dlo = this.discriminator;
            var discr = dlo.decode(b, offset);
            var clo = this.registry[discr];
            if (undefined === clo) {
                var defaultLayout = this.defaultLayout;
                var contentOffset = 0;
                if (this.usesPrefixDiscriminator) {
                    contentOffset = dlo.layout.span;
                }
                dest = this.makeDestinationObject();
                dest[dlo.property] = discr;
                dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);
            }
            else {
                dest = clo.decode(b, offset);
            }
            return dest;
        };
        /** Implement {@link Layout#encode|encode} for {@link Union}.
         *
         * This API assumes the `src` object is consistent with the union's
         * {@link Union#defaultLayout|default layout}.  To encode variants
         * use the appropriate variant-specific {@link VariantLayout#encode}
         * method. */
        Union.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var vlo = this.getSourceVariant(src);
            if (undefined === vlo) {
                var dlo = this.discriminator;
                // this.defaultLayout is not undefined when vlo is undefined
                var clo = this.defaultLayout;
                var contentOffset = 0;
                if (this.usesPrefixDiscriminator) {
                    contentOffset = dlo.layout.span;
                }
                dlo.encode(src[dlo.property], b, offset);
                // clo.property is not undefined when vlo is undefined
                return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);
            }
            return vlo.encode(src, b, offset);
        };
        /** Register a new variant structure within a union.  The newly
         * created variant is returned.
         *
         * @param {Number} variant - initializer for {@link
         * VariantLayout#variant|variant}.
         *
         * @param {Layout} layout - initializer for {@link
         * VariantLayout#layout|layout}.
         *
         * @param {String} property - initializer for {@link
         * Layout#property|property}.
         *
         * @return {VariantLayout} */
        Union.prototype.addVariant = function (variant, layout, property) {
            var rv = new VariantLayout(this, variant, layout, property);
            this.registry[variant] = rv;
            return rv;
        };
        /**
         * Get the layout associated with a registered variant.
         *
         * If `vb` does not produce a registered variant the function returns
         * `undefined`.
         *
         * @param {(Number|Uint8Array)} vb - either the variant number, or a
         * buffer from which the discriminator is to be read.
         *
         * @param {Number} offset - offset into `vb` for the start of the
         * union.  Used only when `vb` is an instance of {Uint8Array}.
         *
         * @return {({VariantLayout}|undefined)}
         */
        Union.prototype.getVariant = function (vb, offset) {
            var variant;
            if (vb instanceof Uint8Array) {
                if (undefined === offset) {
                    offset = 0;
                }
                variant = this.discriminator.decode(vb, offset);
            }
            else {
                variant = vb;
            }
            return this.registry[variant];
        };
        return Union;
    }(Layout));
    exports.Union = Union;
    /**
     * Represent a specific variant within a containing union.
     *
     * **NOTE** The {@link Layout#span|span} of the variant may include
     * the span of the {@link Union#discriminator|discriminator} used to
     * identify it, but values read and written using the variant strictly
     * conform to the content of {@link VariantLayout#layout|layout}.
     *
     * **NOTE** User code should not invoke this constructor directly.  Use
     * the union {@link Union#addVariant|addVariant} helper method.
     *
     * @param {Union} union - initializer for {@link
     * VariantLayout#union|union}.
     *
     * @param {Number} variant - initializer for {@link
     * VariantLayout#variant|variant}.
     *
     * @param {Layout} [layout] - initializer for {@link
     * VariantLayout#layout|layout}.  If absent the variant carries no
     * data.
     *
     * @param {String} [property] - initializer for {@link
     * Layout#property|property}.  Unlike many other layouts, variant
     * layouts normally include a property name so they can be identified
     * within their containing {@link Union}.  The property identifier may
     * be absent only if `layout` is is absent.
     *
     * @augments {Layout}
     */
    var VariantLayout = /** @class */ (function (_super) {
        __extends(VariantLayout, _super);
        function VariantLayout(union, variant, layout, property) {
            var _this = this;
            if (!(union instanceof Union)) {
                throw new TypeError('union must be a Union');
            }
            if ((!Number.isInteger(variant)) || (0 > variant)) {
                throw new TypeError('variant must be a (non-negative) integer');
            }
            if (('string' === typeof layout)
                && (undefined === property)) {
                property = layout;
                layout = null;
            }
            if (layout) {
                if (!(layout instanceof Layout)) {
                    throw new TypeError('layout must be a Layout');
                }
                if ((null !== union.defaultLayout)
                    && (0 <= layout.span)
                    && (layout.span > union.defaultLayout.span)) {
                    throw new Error('variant span exceeds span of containing union');
                }
                if ('string' !== typeof property) {
                    throw new TypeError('variant must have a String property');
                }
            }
            var span = union.span;
            if (0 > union.span) {
                span = layout ? layout.span : 0;
                if ((0 <= span) && union.usesPrefixDiscriminator) {
                    span += union.discriminator.layout.span;
                }
            }
            _this = _super.call(this, span, property) || this;
            /** The {@link Union} to which this variant belongs. */
            _this.union = union;
            /** The unsigned integral value identifying this variant within
             * the {@link Union#discriminator|discriminator} of the containing
             * union. */
            _this.variant = variant;
            /** The {@link Layout} to be used when reading/writing the
             * non-discriminator part of the {@link
             * VariantLayout#union|union}.  If `null` the variant carries no
             * data. */
            _this.layout = layout || null;
            return _this;
        }
        /** @override */
        VariantLayout.prototype.getSpan = function (b, offset) {
            if (0 <= this.span) {
                /* Will be equal to the containing union span if that is not
                 * variable. */
                return this.span;
            }
            if (undefined === offset) {
                offset = 0;
            }
            var contentOffset = 0;
            if (this.union.usesPrefixDiscriminator) {
                contentOffset = this.union.discriminator.layout.span;
            }
            /* Span is defined solely by the variant (and prefix discriminator) */
            var span = 0;
            if (this.layout) {
                span = this.layout.getSpan(b, offset + contentOffset);
            }
            return contentOffset + span;
        };
        /** @override */
        VariantLayout.prototype.decode = function (b, offset) {
            var dest = this.makeDestinationObject();
            if (undefined === offset) {
                offset = 0;
            }
            if (this !== this.union.getVariant(b, offset)) {
                throw new Error('variant mismatch');
            }
            var contentOffset = 0;
            if (this.union.usesPrefixDiscriminator) {
                contentOffset = this.union.discriminator.layout.span;
            }
            // VariantLayout property is never undefined
            var property = this.property;
            if (this.layout) {
                dest[property] = this.layout.decode(b, offset + contentOffset);
            }
            else if (property) {
                dest[property] = true;
            }
            else if (this.union.usesPrefixDiscriminator) {
                dest[this.union.discriminator.property] = this.variant;
            }
            return dest;
        };
        /** @override */
        VariantLayout.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var contentOffset = 0;
            if (this.union.usesPrefixDiscriminator) {
                contentOffset = this.union.discriminator.layout.span;
            }
            // VariantLayout property is never undefined
            var property = this.property;
            if (this.layout
                && (!Object.prototype.hasOwnProperty.call(src, property))) {
                throw new TypeError('variant lacks property ' + property);
            }
            this.union.discriminator.encode(this.variant, b, offset);
            var span = contentOffset;
            if (this.layout) {
                this.layout.encode(src[property], b, offset + contentOffset);
                span += this.layout.getSpan(b, offset + contentOffset);
                if ((0 <= this.union.span)
                    && (span > this.union.span)) {
                    throw new Error('encoded variant overruns containing union');
                }
            }
            return span;
        };
        /** Delegate {@link Layout#fromArray|fromArray} to {@link
         * VariantLayout#layout|layout}. */
        VariantLayout.prototype.fromArray = function (values) {
            if (this.layout) {
                return this.layout.fromArray(values);
            }
            return undefined;
        };
        return VariantLayout;
    }(Layout));
    exports.VariantLayout = VariantLayout;
    /** JavaScript chose to define bitwise operations as operating on
     * signed 32-bit values in 2's complement form, meaning any integer
     * with bit 31 set is going to look negative.  For right shifts that's
     * not a problem, because `>>>` is a logical shift, but for every
     * other bitwise operator we have to compensate for possible negative
     * results. */
    function fixBitwiseResult(v) {
        if (0 > v) {
            v += 0x100000000;
        }
        return v;
    }
    /**
     * Contain a sequence of bit fields as an unsigned integer.
     *
     * *Factory*: {@link module:Layout.bits|bits}
     *
     * This is a container element; within it there are {@link BitField}
     * instances that provide the extracted properties.  The container
     * simply defines the aggregate representation and its bit ordering.
     * The representation is an object containing properties with numeric
     * or {@link Boolean} values.
     *
     * {@link BitField}s are added with the {@link
     * BitStructure#addField|addField} and {@link
     * BitStructure#addBoolean|addBoolean} methods.

     * @param {Layout} word - initializer for {@link
     * BitStructure#word|word}.  The parameter must be an instance of
     * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.
     *
     * @param {bool} [msb] - `true` if the bit numbering starts at the
     * most significant bit of the containing word; `false` (default) if
     * it starts at the least significant bit of the containing word.  If
     * the parameter at this position is a string and `property` is
     * `undefined` the value of this argument will instead be used as the
     * value of `property`.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var BitStructure = /** @class */ (function (_super) {
        __extends(BitStructure, _super);
        function BitStructure(word, msb, property) {
            var _this = this;
            if (!((word instanceof UInt)
                || (word instanceof UIntBE))) {
                throw new TypeError('word must be a UInt or UIntBE layout');
            }
            if (('string' === typeof msb)
                && (undefined === property)) {
                property = msb;
                msb = false;
            }
            if (4 < word.span) {
                throw new RangeError('word cannot exceed 32 bits');
            }
            _this = _super.call(this, word.span, property) || this;
            /** The layout used for the packed value.  {@link BitField}
             * instances are packed sequentially depending on {@link
             * BitStructure#msb|msb}. */
            _this.word = word;
            /** Whether the bit sequences are packed starting at the most
             * significant bit growing down (`true`), or the least significant
             * bit growing up (`false`).
             *
             * **NOTE** Regardless of this value, the least significant bit of
             * any {@link BitField} value is the least significant bit of the
             * corresponding section of the packed value. */
            _this.msb = !!msb;
            /** The sequence of {@link BitField} layouts that comprise the
             * packed structure.
             *
             * **NOTE** The array remains mutable to allow fields to be {@link
             * BitStructure#addField|added} after construction.  Users should
             * not manipulate the content of this property.*/
            _this.fields = [];
            /* Storage for the value.  Capture a variable instead of using an
             * instance property because we don't want anything to change the
             * value without going through the mutator. */
            var value = 0;
            _this._packedSetValue = function (v) {
                value = fixBitwiseResult(v);
                return this;
            };
            _this._packedGetValue = function () {
                return value;
            };
            return _this;
        }
        /** @override */
        BitStructure.prototype.decode = function (b, offset) {
            var dest = this.makeDestinationObject();
            if (undefined === offset) {
                offset = 0;
            }
            var value = this.word.decode(b, offset);
            this._packedSetValue(value);
            for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {
                var fd = _a[_i];
                if (undefined !== fd.property) {
                    dest[fd.property] = fd.decode(value);
                }
            }
            return dest;
        };
        /** Implement {@link Layout#encode|encode} for {@link BitStructure}.
         *
         * If `src` is missing a property for a member with a defined {@link
         * Layout#property|property} the corresponding region of the packed
         * value is left unmodified.  Unused bits are also left unmodified. */
        BitStructure.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var value = this.word.decode(b, offset);
            this._packedSetValue(value);
            for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {
                var fd = _a[_i];
                if (undefined !== fd.property) {
                    var fv = src[fd.property];
                    if (undefined !== fv) {
                        fd.encode(fv);
                    }
                }
            }
            return this.word.encode(this._packedGetValue(), b, offset);
        };
        /** Register a new bitfield with a containing bit structure.  The
         * resulting bitfield is returned.
         *
         * @param {Number} bits - initializer for {@link BitField#bits|bits}.
         *
         * @param {string} property - initializer for {@link
         * Layout#property|property}.
         *
         * @return {BitField} */
        BitStructure.prototype.addField = function (bits, property) {
            var bf = new BitField(this, bits, property);
            this.fields.push(bf);
            return bf;
        };
        /** As with {@link BitStructure#addField|addField} for single-bit
         * fields with `boolean` value representation.
         *
         * @param {string} property - initializer for {@link
         * Layout#property|property}.
         *
         * @return {Boolean} */
        BitStructure.prototype.addBoolean = function (property) {
            // This is my Boolean, not the Javascript one.
            // eslint-disable-next-line no-new-wrappers
            var bf = new Boolean(this, property);
            this.fields.push(bf);
            return bf;
        };
        /**
         * Get access to the bit field for a given property.
         *
         * @param {String} property - the bit field of interest.
         *
         * @return {BitField} - the field associated with `property`, or
         * undefined if there is no such property.
         */
        BitStructure.prototype.fieldFor = function (property) {
            if ('string' !== typeof property) {
                throw new TypeError('property must be string');
            }
            for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {
                var fd = _a[_i];
                if (fd.property === property) {
                    return fd;
                }
            }
            return undefined;
        };
        return BitStructure;
    }(Layout));
    exports.BitStructure = BitStructure;
    /**
     * Represent a sequence of bits within a {@link BitStructure}.
     *
     * All bit field values are represented as unsigned integers.
     *
     * **NOTE** User code should not invoke this constructor directly.
     * Use the container {@link BitStructure#addField|addField} helper
     * method.
     *
     * **NOTE** BitField instances are not instances of {@link Layout}
     * since {@link Layout#span|span} measures 8-bit units.
     *
     * @param {BitStructure} container - initializer for {@link
     * BitField#container|container}.
     *
     * @param {Number} bits - initializer for {@link BitField#bits|bits}.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     */
    var BitField = /** @class */ (function () {
        function BitField(container, bits, property) {
            if (!(container instanceof BitStructure)) {
                throw new TypeError('container must be a BitStructure');
            }
            if ((!Number.isInteger(bits)) || (0 >= bits)) {
                throw new TypeError('bits must be positive integer');
            }
            var totalBits = 8 * container.span;
            var usedBits = container.fields.reduce(function (sum, fd) { return sum + fd.bits; }, 0);
            if ((bits + usedBits) > totalBits) {
                throw new Error('bits too long for span remainder ('
                    + (totalBits - usedBits) + ' of '
                    + totalBits + ' remain)');
            }
            /** The {@link BitStructure} instance to which this bit field
             * belongs. */
            this.container = container;
            /** The span of this value in bits. */
            this.bits = bits;
            /** A mask of {@link BitField#bits|bits} bits isolating value bits
             * that fit within the field.
             *
             * That is, it masks a value that has not yet been shifted into
             * position within its containing packed integer. */
            this.valueMask = (1 << bits) - 1;
            if (32 === bits) { // shifted value out of range
                this.valueMask = 0xFFFFFFFF;
            }
            /** The offset of the value within the containing packed unsigned
             * integer.  The least significant bit of the packed value is at
             * offset zero, regardless of bit ordering used. */
            this.start = usedBits;
            if (this.container.msb) {
                this.start = totalBits - usedBits - bits;
            }
            /** A mask of {@link BitField#bits|bits} isolating the field value
             * within the containing packed unsigned integer. */
            this.wordMask = fixBitwiseResult(this.valueMask << this.start);
            /** The property name used when this bitfield is represented in an
             * Object.
             *
             * Intended to be functionally equivalent to {@link
             * Layout#property}.
             *
             * If left undefined the corresponding span of bits will be
             * treated as padding: it will not be mutated by {@link
             * Layout#encode|encode} nor represented as a property in the
             * decoded Object. */
            this.property = property;
        }
        /** Store a value into the corresponding subsequence of the containing
         * bit field. */
        BitField.prototype.decode = function (b, offset) {
            var word = this.container._packedGetValue();
            var wordValue = fixBitwiseResult(word & this.wordMask);
            var value = wordValue >>> this.start;
            return value;
        };
        /** Store a value into the corresponding subsequence of the containing
         * bit field.
         *
         * **NOTE** This is not a specialization of {@link
         * Layout#encode|Layout.encode} and there is no return value. */
        BitField.prototype.encode = function (value) {
            if ((!Number.isInteger(value))
                || (value !== fixBitwiseResult(value & this.valueMask))) {
                throw new TypeError(nameWithProperty('BitField.encode', this)
                    + ' value must be integer not exceeding ' + this.valueMask);
            }
            var word = this.container._packedGetValue();
            var wordValue = fixBitwiseResult(value << this.start);
            this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)
                | wordValue);
        };
        return BitField;
    }());
    exports.BitField = BitField;
    /**
     * Represent a single bit within a {@link BitStructure} as a
     * JavaScript boolean.
     *
     * **NOTE** User code should not invoke this constructor directly.
     * Use the container {@link BitStructure#addBoolean|addBoolean} helper
     * method.
     *
     * @param {BitStructure} container - initializer for {@link
     * BitField#container|container}.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {BitField}
     */
    /* eslint-disable no-extend-native */
    var Boolean = /** @class */ (function (_super) {
        __extends(Boolean, _super);
        function Boolean(container, property) {
            return _super.call(this, container, 1, property) || this;
        }
        /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.
         *
         * @returns {boolean} */
        Boolean.prototype.decode = function (b, offset) {
            return !!BitField.prototype.decode.call(this, b, offset);
        };
        /** @override */
        Boolean.prototype.encode = function (value) {
            if ('boolean' === typeof value) {
                // BitField requires integer values
                value = +value;
            }
            return BitField.prototype.encode.call(this, value);
        };
        return Boolean;
    }(BitField));
    exports.Boolean = Boolean;
    /* eslint-enable no-extend-native */
    /**
     * Contain a fixed-length block of arbitrary data, represented as a
     * Uint8Array.
     *
     * *Factory*: {@link module:Layout.blob|blob}
     *
     * @param {(Number|ExternalLayout)} length - initializes {@link
     * Blob#length|length}.
     *
     * @param {String} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var Blob = /** @class */ (function (_super) {
        __extends(Blob, _super);
        function Blob(length, property) {
            var _this = this;
            if (!(((length instanceof ExternalLayout) && length.isCount())
                || (Number.isInteger(length) && (0 <= length)))) {
                throw new TypeError('length must be positive integer '
                    + 'or an unsigned integer ExternalLayout');
            }
            var span = -1;
            if (!(length instanceof ExternalLayout)) {
                span = length;
            }
            _this = _super.call(this, span, property) || this;
            /** The number of bytes in the blob.
             *
             * This may be a non-negative integer, or an instance of {@link
             * ExternalLayout} that satisfies {@link
             * ExternalLayout#isCount|isCount()}. */
            _this.length = length;
            return _this;
        }
        /** @override */
        Blob.prototype.getSpan = function (b, offset) {
            var span = this.span;
            if (0 > span) {
                span = this.length.decode(b, offset);
            }
            return span;
        };
        /** @override */
        Blob.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var span = this.span;
            if (0 > span) {
                span = this.length.decode(b, offset);
            }
            return uint8ArrayToBuffer(b).slice(offset, offset + span);
        };
        /** Implement {@link Layout#encode|encode} for {@link Blob}.
         *
         * **NOTE** If {@link Layout#count|count} is an instance of {@link
         * ExternalLayout} then the length of `src` will be encoded as the
         * count after `src` is encoded. */
        Blob.prototype.encode = function (src, b, offset) {
            var span = this.length;
            if (this.length instanceof ExternalLayout) {
                span = src.length;
            }
            if (!(src instanceof Uint8Array && span === src.length)) {
                throw new TypeError(nameWithProperty('Blob.encode', this)
                    + ' requires (length ' + span + ') Uint8Array as src');
            }
            if ((offset + span) > b.length) {
                throw new RangeError('encoding overruns Uint8Array');
            }
            var srcBuffer = uint8ArrayToBuffer(src);
            uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');
            if (this.length instanceof ExternalLayout) {
                this.length.encode(span, b, offset);
            }
            return span;
        };
        return Blob;
    }(Layout));
    exports.Blob = Blob;
    /**
     * Contain a `NUL`-terminated UTF8 string.
     *
     * *Factory*: {@link module:Layout.cstr|cstr}
     *
     * **NOTE** Any UTF8 string that incorporates a zero-valued byte will
     * not be correctly decoded by this layout.
     *
     * @param {String} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var CString = /** @class */ (function (_super) {
        __extends(CString, _super);
        function CString(property) {
            return _super.call(this, -1, property) || this;
        }
        /** @override */
        CString.prototype.getSpan = function (b, offset) {
            checkUint8Array(b);
            if (undefined === offset) {
                offset = 0;
            }
            var idx = offset;
            while ((idx < b.length) && (0 !== b[idx])) {
                idx += 1;
            }
            return 1 + idx - offset;
        };
        /** @override */
        CString.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var span = this.getSpan(b, offset);
            return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');
        };
        /** @override */
        CString.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            /* Must force this to a string, lest it be a number and the
             * "utf8-encoding" below actually allocate a buffer of length
             * src */
            if ('string' !== typeof src) {
                src = src.toString();
            }
            var srcb = buffer_1.Buffer.from(src, 'utf8');
            var span = srcb.length;
            if ((offset + span) > b.length) {
                throw new RangeError('encoding overruns Buffer');
            }
            var buffer = uint8ArrayToBuffer(b);
            srcb.copy(buffer, offset);
            buffer[offset + span] = 0;
            return span + 1;
        };
        return CString;
    }(Layout));
    exports.CString = CString;
    /**
     * Contain a UTF8 string with implicit length.
     *
     * *Factory*: {@link module:Layout.utf8|utf8}
     *
     * **NOTE** Because the length is implicit in the size of the buffer
     * this layout should be used only in isolation, or in a situation
     * where the length can be expressed by operating on a slice of the
     * containing buffer.
     *
     * @param {Number} [maxSpan] - the maximum length allowed for encoded
     * string content.  If not provided there is no bound on the allowed
     * content.
     *
     * @param {String} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var UTF8 = /** @class */ (function (_super) {
        __extends(UTF8, _super);
        function UTF8(maxSpan, property) {
            var _this = this;
            if (('string' === typeof maxSpan) && (undefined === property)) {
                property = maxSpan;
                maxSpan = undefined;
            }
            if (undefined === maxSpan) {
                maxSpan = -1;
            }
            else if (!Number.isInteger(maxSpan)) {
                throw new TypeError('maxSpan must be an integer');
            }
            _this = _super.call(this, -1, property) || this;
            /** The maximum span of the layout in bytes.
             *
             * Positive values are generally expected.  Zero is abnormal.
             * Attempts to encode or decode a value that exceeds this length
             * will throw a `RangeError`.
             *
             * A negative value indicates that there is no bound on the length
             * of the content. */
            _this.maxSpan = maxSpan;
            return _this;
        }
        /** @override */
        UTF8.prototype.getSpan = function (b, offset) {
            checkUint8Array(b);
            if (undefined === offset) {
                offset = 0;
            }
            return b.length - offset;
        };
        /** @override */
        UTF8.prototype.decode = function (b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            var span = this.getSpan(b, offset);
            if ((0 <= this.maxSpan)
                && (this.maxSpan < span)) {
                throw new RangeError('text length exceeds maxSpan');
            }
            return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');
        };
        /** @override */
        UTF8.prototype.encode = function (src, b, offset) {
            if (undefined === offset) {
                offset = 0;
            }
            /* Must force this to a string, lest it be a number and the
             * "utf8-encoding" below actually allocate a buffer of length
             * src */
            if ('string' !== typeof src) {
                src = src.toString();
            }
            var srcb = buffer_1.Buffer.from(src, 'utf8');
            var span = srcb.length;
            if ((0 <= this.maxSpan)
                && (this.maxSpan < span)) {
                throw new RangeError('text length exceeds maxSpan');
            }
            if ((offset + span) > b.length) {
                throw new RangeError('encoding overruns Buffer');
            }
            srcb.copy(uint8ArrayToBuffer(b), offset);
            return span;
        };
        return UTF8;
    }(Layout));
    exports.UTF8 = UTF8;
    /**
     * Contain a constant value.
     *
     * This layout may be used in cases where a JavaScript value can be
     * inferred without an expression in the binary encoding.  An example
     * would be a {@link VariantLayout|variant layout} where the content
     * is implied by the union {@link Union#discriminator|discriminator}.
     *
     * @param {Object|Number|String} value - initializer for {@link
     * Constant#value|value}.  If the value is an object (or array) and
     * the application intends the object to remain unchanged regardless
     * of what is done to values decoded by this layout, the value should
     * be frozen prior passing it to this constructor.
     *
     * @param {String} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    var Constant = /** @class */ (function (_super) {
        __extends(Constant, _super);
        function Constant(value, property) {
            var _this = _super.call(this, 0, property) || this;
            /** The value produced by this constant when the layout is {@link
             * Constant#decode|decoded}.
             *
             * Any JavaScript value including `null` and `undefined` is
             * permitted.
             *
             * **WARNING** If `value` passed in the constructor was not
             * frozen, it is possible for users of decoded values to change
             * the content of the value. */
            _this.value = value;
            return _this;
        }
        /** @override */
        Constant.prototype.decode = function (b, offset) {
            return this.value;
        };
        /** @override */
        Constant.prototype.encode = function (src, b, offset) {
            /* Constants take no space */
            return 0;
        };
        return Constant;
    }(Layout));
    exports.Constant = Constant;
    /** Factory for {@link GreedyCount}. */
    exports.greedy = (function (elementSpan, property) { return new GreedyCount(elementSpan, property); });
    /** Factory for {@link OffsetLayout}. */
    exports.offset = (function (layout, offset, property) { return new OffsetLayout(layout, offset, property); });
    /** Factory for {@link UInt|unsigned int layouts} spanning one
     * byte. */
    exports.u8 = (function (property) { return new UInt(1, property); });
    /** Factory for {@link UInt|little-endian unsigned int layouts}
     * spanning two bytes. */
    exports.u16 = (function (property) { return new UInt(2, property); });
    /** Factory for {@link UInt|little-endian unsigned int layouts}
     * spanning three bytes. */
    exports.u24 = (function (property) { return new UInt(3, property); });
    /** Factory for {@link UInt|little-endian unsigned int layouts}
     * spanning four bytes. */
    exports.u32 = (function (property) { return new UInt(4, property); });
    /** Factory for {@link UInt|little-endian unsigned int layouts}
     * spanning five bytes. */
    exports.u40 = (function (property) { return new UInt(5, property); });
    /** Factory for {@link UInt|little-endian unsigned int layouts}
     * spanning six bytes. */
    exports.u48 = (function (property) { return new UInt(6, property); });
    /** Factory for {@link NearUInt64|little-endian unsigned int
     * layouts} interpreted as Numbers. */
    exports.nu64 = (function (property) { return new NearUInt64(property); });
    /** Factory for {@link UInt|big-endian unsigned int layouts}
     * spanning two bytes. */
    exports.u16be = (function (property) { return new UIntBE(2, property); });
    /** Factory for {@link UInt|big-endian unsigned int layouts}
     * spanning three bytes. */
    exports.u24be = (function (property) { return new UIntBE(3, property); });
    /** Factory for {@link UInt|big-endian unsigned int layouts}
     * spanning four bytes. */
    exports.u32be = (function (property) { return new UIntBE(4, property); });
    /** Factory for {@link UInt|big-endian unsigned int layouts}
     * spanning five bytes. */
    exports.u40be = (function (property) { return new UIntBE(5, property); });
    /** Factory for {@link UInt|big-endian unsigned int layouts}
     * spanning six bytes. */
    exports.u48be = (function (property) { return new UIntBE(6, property); });
    /** Factory for {@link NearUInt64BE|big-endian unsigned int
     * layouts} interpreted as Numbers. */
    exports.nu64be = (function (property) { return new NearUInt64BE(property); });
    /** Factory for {@link Int|signed int layouts} spanning one
     * byte. */
    exports.s8 = (function (property) { return new Int(1, property); });
    /** Factory for {@link Int|little-endian signed int layouts}
     * spanning two bytes. */
    exports.s16 = (function (property) { return new Int(2, property); });
    /** Factory for {@link Int|little-endian signed int layouts}
     * spanning three bytes. */
    exports.s24 = (function (property) { return new Int(3, property); });
    /** Factory for {@link Int|little-endian signed int layouts}
     * spanning four bytes. */
    exports.s32 = (function (property) { return new Int(4, property); });
    /** Factory for {@link Int|little-endian signed int layouts}
     * spanning five bytes. */
    exports.s40 = (function (property) { return new Int(5, property); });
    /** Factory for {@link Int|little-endian signed int layouts}
     * spanning six bytes. */
    exports.s48 = (function (property) { return new Int(6, property); });
    /** Factory for {@link NearInt64|little-endian signed int layouts}
     * interpreted as Numbers. */
    exports.ns64 = (function (property) { return new NearInt64(property); });
    /** Factory for {@link Int|big-endian signed int layouts}
     * spanning two bytes. */
    exports.s16be = (function (property) { return new IntBE(2, property); });
    /** Factory for {@link Int|big-endian signed int layouts}
     * spanning three bytes. */
    exports.s24be = (function (property) { return new IntBE(3, property); });
    /** Factory for {@link Int|big-endian signed int layouts}
     * spanning four bytes. */
    exports.s32be = (function (property) { return new IntBE(4, property); });
    /** Factory for {@link Int|big-endian signed int layouts}
     * spanning five bytes. */
    exports.s40be = (function (property) { return new IntBE(5, property); });
    /** Factory for {@link Int|big-endian signed int layouts}
     * spanning six bytes. */
    exports.s48be = (function (property) { return new IntBE(6, property); });
    /** Factory for {@link NearInt64BE|big-endian signed int layouts}
     * interpreted as Numbers. */
    exports.ns64be = (function (property) { return new NearInt64BE(property); });
    /** Factory for {@link Float|little-endian 32-bit floating point} values. */
    exports.f32 = (function (property) { return new Float(property); });
    /** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */
    exports.f32be = (function (property) { return new FloatBE(property); });
    /** Factory for {@link Double|little-endian 64-bit floating point} values. */
    exports.f64 = (function (property) { return new Double(property); });
    /** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */
    exports.f64be = (function (property) { return new DoubleBE(property); });
    /** Factory for {@link Structure} values. */
    exports.struct = (function (fields, property, decodePrefixes) {
        return new Structure(fields, property, decodePrefixes);
    });
    /** Factory for {@link BitStructure} values. */
    exports.bits = (function (word, msb, property) { return new BitStructure(word, msb, property); });
    /** Factory for {@link Sequence} values. */
    exports.seq = (function (elementLayout, count, property) {
        return new Sequence(elementLayout, count, property);
    });
    /** Factory for {@link Union} values. */
    exports.union = (function (discr, defaultLayout, property) {
        return new Union(discr, defaultLayout, property);
    });
    /** Factory for {@link UnionLayoutDiscriminator} values. */
    exports.unionLayoutDiscriminator = (function (layout, property) { return new UnionLayoutDiscriminator(layout, property); });
    /** Factory for {@link Blob} values. */
    exports.blob = (function (length, property) { return new Blob(length, property); });
    /** Factory for {@link CString} values. */
    exports.cstr = (function (property) { return new CString(property); });
    /** Factory for {@link UTF8} values. */
    exports.utf8 = (function (maxSpan, property) { return new UTF8(maxSpan, property); });
    /** Factory for {@link Constant} values. */
    exports.constant = (function (value, property) { return new Constant(value, property); });

    });

    /**
     * A `StructFailure` represents a single specific failure in validation.
     */

    /**
     * `StructError` objects are thrown (or returned) when validation fails.
     *
     * Validation logic is design to exit early for maximum performance. The error
     * represents the first error encountered during validation. For more detail,
     * the `error.failures` property is a generator function that can be run to
     * continue validation and receive all the failures in the data.
     */
    class StructError extends TypeError {
      constructor(failure, failures) {
        let cached;
        const {
          message,
          ...rest
        } = failure;
        const {
          path
        } = failure;
        const msg = path.length === 0 ? message : "At path: " + path.join('.') + " -- " + message;
        super(msg);
        Object.assign(this, rest);
        this.name = this.constructor.name;

        this.failures = () => {
          var _cached;

          return (_cached = cached) != null ? _cached : cached = [failure, ...failures()];
        };
      }

    }

    /**
     * Check if a value is an iterator.
     */
    function isIterable(x) {
      return isObject$2(x) && typeof x[Symbol.iterator] === 'function';
    }
    /**
     * Check if a value is a plain object.
     */


    function isObject$2(x) {
      return typeof x === 'object' && x != null;
    }
    /**
     * Return a value as a printable string.
     */

    function print(value) {
      return typeof value === 'string' ? JSON.stringify(value) : "" + value;
    }
    /**
     * Shifts (removes and returns) the first value from the `input` iterator.
     * Like `Array.prototype.shift()` but for an `Iterator`.
     */

    function shiftIterator(input) {
      const {
        done,
        value
      } = input.next();
      return done ? undefined : value;
    }
    /**
     * Convert a single validation result to a failure.
     */

    function toFailure(result, context, struct, value) {
      if (result === true) {
        return;
      } else if (result === false) {
        result = {};
      } else if (typeof result === 'string') {
        result = {
          message: result
        };
      }

      const {
        path,
        branch
      } = context;
      const {
        type
      } = struct;
      const {
        refinement,
        message = "Expected a value of type `" + type + "`" + (refinement ? " with refinement `" + refinement + "`" : '') + ", but received: `" + print(value) + "`"
      } = result;
      return {
        value,
        type,
        refinement,
        key: path[path.length - 1],
        path,
        branch,
        ...result,
        message
      };
    }
    /**
     * Convert a validation result to an iterable of failures.
     */

    function* toFailures(result, context, struct, value) {
      if (!isIterable(result)) {
        result = [result];
      }

      for (const r of result) {
        const failure = toFailure(r, context, struct, value);

        if (failure) {
          yield failure;
        }
      }
    }
    /**
     * Check a value against a struct, traversing deeply into nested values, and
     * returning an iterator of failures or success.
     */

    function* run(value, struct, options = {}) {
      const {
        path = [],
        branch = [value],
        coerce = false,
        mask = false
      } = options;
      const ctx = {
        path,
        branch
      };

      if (coerce) {
        value = struct.coercer(value, ctx);

        if (mask && struct.type !== 'type' && isObject$2(struct.schema) && isObject$2(value) && !Array.isArray(value)) {
          for (const key in value) {
            if (struct.schema[key] === undefined) {
              delete value[key];
            }
          }
        }
      }

      let valid = true;

      for (const failure of struct.validator(value, ctx)) {
        valid = false;
        yield [failure, undefined];
      }

      for (let [k, v, s] of struct.entries(value, ctx)) {
        const ts = run(v, s, {
          path: k === undefined ? path : [...path, k],
          branch: k === undefined ? branch : [...branch, v],
          coerce,
          mask
        });

        for (const t of ts) {
          if (t[0]) {
            valid = false;
            yield [t[0], undefined];
          } else if (coerce) {
            v = t[1];

            if (k === undefined) {
              value = v;
            } else if (value instanceof Map) {
              value.set(k, v);
            } else if (value instanceof Set) {
              value.add(v);
            } else if (isObject$2(value)) {
              value[k] = v;
            }
          }
        }
      }

      if (valid) {
        for (const failure of struct.refiner(value, ctx)) {
          valid = false;
          yield [failure, undefined];
        }
      }

      if (valid) {
        yield [undefined, value];
      }
    }

    /**
     * `Struct` objects encapsulate the validation logic for a specific type of
     * values. Once constructed, you use the `assert`, `is` or `validate` helpers to
     * validate unknown input data against the struct.
     */

    class Struct$1 {
      constructor(props) {
        const {
          type,
          schema,
          validator,
          refiner,
          coercer = value => value,
          entries = function* () {}
        } = props;
        this.type = type;
        this.schema = schema;
        this.entries = entries;
        this.coercer = coercer;

        if (validator) {
          this.validator = (value, context) => {
            const result = validator(value, context);
            return toFailures(result, context, this, value);
          };
        } else {
          this.validator = () => [];
        }

        if (refiner) {
          this.refiner = (value, context) => {
            const result = refiner(value, context);
            return toFailures(result, context, this, value);
          };
        } else {
          this.refiner = () => [];
        }
      }
      /**
       * Assert that a value passes the struct's validation, throwing if it doesn't.
       */


      assert(value) {
        return assert$j(value, this);
      }
      /**
       * Create a value with the struct's coercion logic, then validate it.
       */


      create(value) {
        return create(value, this);
      }
      /**
       * Check if a value passes the struct's validation.
       */


      is(value) {
        return is(value, this);
      }
      /**
       * Mask a value, coercing and validating it, but returning only the subset of
       * properties defined by the struct's schema.
       */


      mask(value) {
        return mask(value, this);
      }
      /**
       * Validate a value with the struct's validation logic, returning a tuple
       * representing the result.
       *
       * You may optionally pass `true` for the `withCoercion` argument to coerce
       * the value before attempting to validate it. If you do, the result will
       * contain the coerced result when successful.
       */


      validate(value, options = {}) {
        return validate(value, this, options);
      }

    }
    /**
     * Assert that a value passes a struct, throwing if it doesn't.
     */

    function assert$j(value, struct) {
      const result = validate(value, struct);

      if (result[0]) {
        throw result[0];
      }
    }
    /**
     * Create a value with the coercion logic of struct and validate it.
     */

    function create(value, struct) {
      const result = validate(value, struct, {
        coerce: true
      });

      if (result[0]) {
        throw result[0];
      } else {
        return result[1];
      }
    }
    /**
     * Mask a value, returning only the subset of properties defined by a struct.
     */

    function mask(value, struct) {
      const result = validate(value, struct, {
        coerce: true,
        mask: true
      });

      if (result[0]) {
        throw result[0];
      } else {
        return result[1];
      }
    }
    /**
     * Check if a value passes a struct.
     */

    function is(value, struct) {
      const result = validate(value, struct);
      return !result[0];
    }
    /**
     * Validate a value against a struct, returning an error if invalid, or the
     * value (with potential coercion) if valid.
     */

    function validate(value, struct, options = {}) {
      const tuples = run(value, struct, options);
      const tuple = shiftIterator(tuples);

      if (tuple[0]) {
        const error = new StructError(tuple[0], function* () {
          for (const t of tuples) {
            if (t[0]) {
              yield t[0];
            }
          }
        });
        return [error, undefined];
      } else {
        const v = tuple[1];
        return [undefined, v];
      }
    }
    /**
     * Define a new struct type with a custom validation function.
     */

    function define(name, validator) {
      return new Struct$1({
        type: name,
        schema: null,
        validator
      });
    }

    /**
     * Ensure that any value passes validation.
     */

    function any() {
      return define('any', () => true);
    }
    function array(Element) {
      return new Struct$1({
        type: 'array',
        schema: Element,

        *entries(value) {
          if (Element && Array.isArray(value)) {
            for (const [i, v] of value.entries()) {
              yield [i, v, Element];
            }
          }
        },

        coercer(value) {
          return Array.isArray(value) ? value.slice() : value;
        },

        validator(value) {
          return Array.isArray(value) || "Expected an array value, but received: " + print(value);
        }

      });
    }
    /**
     * Ensure that a value is a boolean.
     */

    function boolean() {
      return define('boolean', value => {
        return typeof value === 'boolean';
      });
    }
    /**
     * Ensure that a value is an instance of a specific class.
     */

    function instance$B(Class) {
      return define('instance', value => {
        return value instanceof Class || "Expected a `" + Class.name + "` instance, but received: " + print(value);
      });
    }
    function literal(constant) {
      const description = print(constant);
      const t = typeof constant;
      return new Struct$1({
        type: 'literal',
        schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,

        validator(value) {
          return value === constant || "Expected the literal `" + description + "`, but received: " + print(value);
        }

      });
    }
    /**
     * Ensure that no value ever passes validation.
     */

    function never() {
      return define('never', () => false);
    }
    /**
     * Augment an existing struct to allow `null` values.
     */

    function nullable(struct) {
      return new Struct$1({ ...struct,
        validator: (value, ctx) => value === null || struct.validator(value, ctx),
        refiner: (value, ctx) => value === null || struct.refiner(value, ctx)
      });
    }
    /**
     * Ensure that a value is a number.
     */

    function number() {
      return define('number', value => {
        return typeof value === 'number' && !isNaN(value) || "Expected a number, but received: " + print(value);
      });
    }
    /**
     * Augment a struct to allow `undefined` values.
     */

    function optional(struct) {
      return new Struct$1({ ...struct,
        validator: (value, ctx) => value === undefined || struct.validator(value, ctx),
        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx)
      });
    }
    /**
     * Ensure that a value is an object with keys and values of specific types, but
     * without ensuring any specific shape of properties.
     *
     * Like TypeScript's `Record` utility.
     */

    function record(Key, Value) {
      return new Struct$1({
        type: 'record',
        schema: null,

        *entries(value) {
          if (isObject$2(value)) {
            for (const k in value) {
              const v = value[k];
              yield [k, k, Key];
              yield [k, v, Value];
            }
          }
        },

        validator(value) {
          return isObject$2(value) || "Expected an object, but received: " + print(value);
        }

      });
    }
    /**
     * Ensure that a value is a string.
     */

    function string() {
      return define('string', value => {
        return typeof value === 'string' || "Expected a string, but received: " + print(value);
      });
    }
    function tuple(Elements) {
      const Never = never();
      return new Struct$1({
        type: 'tuple',
        schema: null,

        *entries(value) {
          if (Array.isArray(value)) {
            const length = Math.max(Elements.length, value.length);

            for (let i = 0; i < length; i++) {
              yield [i, value[i], Elements[i] || Never];
            }
          }
        },

        validator(value) {
          return Array.isArray(value) || "Expected an array, but received: " + print(value);
        }

      });
    }
    /**
     * Ensure that a value has a set of known properties of specific types.
     *
     * Note: Unrecognized properties are allowed and untouched. This is similar to
     * how TypeScript's structural typing works.
     */

    function type(schema) {
      const keys = Object.keys(schema);
      return new Struct$1({
        type: 'type',
        schema,

        *entries(value) {
          if (isObject$2(value)) {
            for (const k of keys) {
              yield [k, value[k], schema[k]];
            }
          }
        },

        validator(value) {
          return isObject$2(value) || "Expected an object, but received: " + print(value);
        }

      });
    }
    function union$1(Structs) {
      const description = Structs.map(s => s.type).join(' | ');
      return new Struct$1({
        type: 'union',
        schema: null,

        validator(value, ctx) {
          const failures = [];

          for (const S of Structs) {
            const [...tuples] = run(value, S, ctx);
            const [first] = tuples;

            if (!first[0]) {
              return [];
            } else {
              for (const [failure] of tuples) {
                if (failure) {
                  failures.push(failure);
                }
              }
            }
          }

          return ["Expected the value to satisfy a union of `" + description + "`, but received: " + print(value), ...failures];
        }

      });
    }
    /**
     * Ensure that any value passes validation, without widening its type to `any`.
     */

    function unknown() {
      return define('unknown', () => true);
    }

    /**
     * Augment a `Struct` to add an additional coercion step to its input.
     *
     * This allows you to transform input data before validating it, to increase the
     * likelihood that it passes validation—for example for default values, parsing
     * different formats, etc.
     *
     * Note: You must use `create(value, Struct)` on the value to have the coercion
     * take effect! Using simply `assert()` or `is()` will not use coercion.
     */

    function coerce(struct, condition, coercer) {
      return new Struct$1({ ...struct,
        coercer: (value, ctx) => {
          return is(value, condition) ? struct.coercer(coercer(value, ctx), ctx) : struct.coercer(value, ctx);
        }
      });
    }

    var interopRequireDefault = createCommonjsModule(function (module) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    module.exports = _interopRequireDefault;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    });

    var classCallCheck = createCommonjsModule(function (module) {
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    module.exports = _classCallCheck;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    });

    var setPrototypeOf = createCommonjsModule(function (module) {
    function _setPrototypeOf(o, p) {
      module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      module.exports["default"] = module.exports, module.exports.__esModule = true;
      return _setPrototypeOf(o, p);
    }

    module.exports = _setPrototypeOf;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    });

    var inherits$3 = createCommonjsModule(function (module) {
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) setPrototypeOf(subClass, superClass);
    }

    module.exports = _inherits;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    });

    var _typeof_1 = createCommonjsModule(function (module) {
    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        module.exports = _typeof = function _typeof(obj) {
          return typeof obj;
        };

        module.exports["default"] = module.exports, module.exports.__esModule = true;
      } else {
        module.exports = _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };

        module.exports["default"] = module.exports, module.exports.__esModule = true;
      }

      return _typeof(obj);
    }

    module.exports = _typeof;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    });

    var assertThisInitialized = createCommonjsModule(function (module) {
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    module.exports = _assertThisInitialized;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    });

    var possibleConstructorReturn = createCommonjsModule(function (module) {
    var _typeof = _typeof_1["default"];



    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return assertThisInitialized(self);
    }

    module.exports = _possibleConstructorReturn;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    });

    var getPrototypeOf$2 = createCommonjsModule(function (module) {
    function _getPrototypeOf(o) {
      module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      module.exports["default"] = module.exports, module.exports.__esModule = true;
      return _getPrototypeOf(o);
    }

    module.exports = _getPrototypeOf;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    });

    var createClass = createCommonjsModule(function (module) {
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    module.exports = _createClass;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    });

    var eventemitter3 = createCommonjsModule(function (module) {

    var has = Object.prototype.hasOwnProperty
      , prefix = '~';

    /**
     * Constructor to create a storage for our `EE` objects.
     * An `Events` instance is a plain object whose properties are event names.
     *
     * @constructor
     * @private
     */
    function Events() {}

    //
    // We try to not inherit from `Object.prototype`. In some engines creating an
    // instance in this way is faster than calling `Object.create(null)` directly.
    // If `Object.create(null)` is not supported we prefix the event names with a
    // character to make sure that the built-in object properties are not
    // overridden or used as an attack vector.
    //
    if (Object.create) {
      Events.prototype = Object.create(null);

      //
      // This hack is needed because the `__proto__` property is still inherited in
      // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
      //
      if (!new Events().__proto__) prefix = false;
    }

    /**
     * Representation of a single event listener.
     *
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
     * @constructor
     * @private
     */
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }

    /**
     * Add a listener for a given event.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} once Specify if the listener is a one-time listener.
     * @returns {EventEmitter}
     * @private
     */
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function');
      }

      var listener = new EE(fn, context || emitter, once)
        , evt = prefix ? prefix + event : event;

      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];

      return emitter;
    }

    /**
     * Clear event by name.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} evt The Event name.
     * @private
     */
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }

    /**
     * Minimal `EventEmitter` interface that is molded against the Node.js
     * `EventEmitter` interface.
     *
     * @constructor
     * @public
     */
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }

    /**
     * Return an array listing the events for which the emitter has registered
     * listeners.
     *
     * @returns {Array}
     * @public
     */
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = []
        , events
        , name;

      if (this._eventsCount === 0) return names;

      for (name in (events = this._events)) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }

      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }

      return names;
    };

    /**
     * Return the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Array} The registered listeners.
     * @public
     */
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event
        , handlers = this._events[evt];

      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];

      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }

      return ee;
    };

    /**
     * Return the number of listeners listening to a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Number} The number of listeners.
     * @public
     */
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event
        , listeners = this._events[evt];

      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };

    /**
     * Calls each of the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Boolean} `true` if the event had listeners, else `false`.
     * @public
     */
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return false;

      var listeners = this._events[evt]
        , len = arguments.length
        , args
        , i;

      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

        switch (len) {
          case 1: return listeners.fn.call(listeners.context), true;
          case 2: return listeners.fn.call(listeners.context, a1), true;
          case 3: return listeners.fn.call(listeners.context, a1, a2), true;
          case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }

        for (i = 1, args = new Array(len -1); i < len; i++) {
          args[i - 1] = arguments[i];
        }

        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length
          , j;

        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

          switch (len) {
            case 1: listeners[i].fn.call(listeners[i].context); break;
            case 2: listeners[i].fn.call(listeners[i].context, a1); break;
            case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
            case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
            default:
              if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
                args[j - 1] = arguments[j];
              }

              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }

      return true;
    };

    /**
     * Add a listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };

    /**
     * Add a one-time listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };

    /**
     * Remove the listeners of a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn Only remove the listeners that match this function.
     * @param {*} context Only remove the listeners that have this context.
     * @param {Boolean} once Only remove one-time listeners.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }

      var listeners = this._events[evt];

      if (listeners.fn) {
        if (
          listeners.fn === fn &&
          (!once || listeners.once) &&
          (!context || listeners.context === context)
        ) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (
            listeners[i].fn !== fn ||
            (once && !listeners[i].once) ||
            (context && listeners[i].context !== context)
          ) {
            events.push(listeners[i]);
          }
        }

        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }

      return this;
    };

    /**
     * Remove all listeners, or those of the specified event.
     *
     * @param {(String|Symbol)} [event] The event name.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;

      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }

      return this;
    };

    //
    // Alias methods names because people roll like that.
    //
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    //
    // Expose the prefix.
    //
    EventEmitter.prefixed = prefix;

    //
    // Allow `EventEmitter` to be imported as module namespace.
    //
    EventEmitter.EventEmitter = EventEmitter;

    //
    // Expose the module.
    //
    {
      module.exports = EventEmitter;
    }
    });

    var websocket_browser = createCommonjsModule(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = _default;

    var _classCallCheck2 = interopRequireDefault(classCallCheck);

    var _createClass2 = interopRequireDefault(createClass);

    var _inherits2 = interopRequireDefault(inherits$3);

    var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

    var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf$2);



    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    var WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {
      (0, _inherits2["default"])(WebSocketBrowserImpl, _EventEmitter);

      var _super = _createSuper(WebSocketBrowserImpl);

      /** Instantiate a WebSocket class
       * @constructor
       * @param {String} address - url to a websocket server
       * @param {(Object)} options - websocket options
       * @param {(String|Array)} protocols - a list of protocols
       * @return {WebSocketBrowserImpl} - returns a WebSocket instance
       */
      function WebSocketBrowserImpl(address, options, protocols) {
        var _this;

        (0, _classCallCheck2["default"])(this, WebSocketBrowserImpl);
        _this = _super.call(this);
        _this.socket = new window.WebSocket(address, protocols);

        _this.socket.onopen = function () {
          return _this.emit("open");
        };

        _this.socket.onmessage = function (event) {
          return _this.emit("message", event.data);
        };

        _this.socket.onerror = function (error) {
          return _this.emit("error", error);
        };

        _this.socket.onclose = function (event) {
          _this.emit("close", event.code, event.reason);
        };

        return _this;
      }
      /**
       * Sends data through a websocket connection
       * @method
       * @param {(String|Object)} data - data to be sent via websocket
       * @param {Object} optionsOrCallback - ws options
       * @param {Function} callback - a callback called once the data is sent
       * @return {Undefined}
       */


      (0, _createClass2["default"])(WebSocketBrowserImpl, [{
        key: "send",
        value: function send(data, optionsOrCallback, callback) {
          var cb = callback || optionsOrCallback;

          try {
            this.socket.send(data);
            cb();
          } catch (error) {
            cb(error);
          }
        }
        /**
         * Closes an underlying socket
         * @method
         * @param {Number} code - status code explaining why the connection is being closed
         * @param {String} reason - a description why the connection is closing
         * @return {Undefined}
         * @throws {Error}
         */

      }, {
        key: "close",
        value: function close(code, reason) {
          this.socket.close(code, reason);
        }
      }, {
        key: "addEventListener",
        value: function addEventListener(type, listener, options) {
          this.socket.addEventListener(type, listener, options);
        }
      }]);
      return WebSocketBrowserImpl;
    }(eventemitter3.EventEmitter);
    /**
     * factory method for common WebSocket instance
     * @method
     * @param {String} address - url to a websocket server
     * @param {(Object)} options - websocket options
     * @return {Undefined}
     */


    function _default(address, options) {
      return new WebSocketBrowserImpl(address, options);
    }
    });

    var runtime_1 = createCommonjsModule(function (module) {
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var runtime = (function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }
      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);

        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);

        return generator;
      }
      exports.wrap = wrap;

      // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.
      function tryCatch(fn, obj, arg) {
        try {
          return { type: "normal", arg: fn.call(obj, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";

      // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.
      var ContinueSentinel = {};

      // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}

      // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.
      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype &&
          NativeIteratorPrototype !== Op &&
          hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype =
        Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define(Gp, "constructor", GeneratorFunctionPrototype);
      define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define(
        GeneratorFunctionPrototype,
        toStringTagSymbol,
        "GeneratorFunction"
      );

      // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor
          ? ctor === GeneratorFunction ||
            // For the native GeneratorFunction constructor, the best we can
            // do is to check its .name property.
            (ctor.displayName || ctor.name) === "GeneratorFunction"
          : false;
      };

      exports.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };

      // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.
      exports.awrap = function(arg) {
        return { __await: arg };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value &&
                typeof value === "object" &&
                hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function(value) {
                invoke("next", value, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function(unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function(error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise =
            // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(
              callInvokeWithMethodAndArg,
              // Avoid propagating failures to Promises returned by later
              // invocations of the iterator.
              callInvokeWithMethodAndArg
            ) : callInvokeWithMethodAndArg();
        }

        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      });
      exports.AsyncIterator = AsyncIterator;

      // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.
      exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;

        var iter = new AsyncIterator(
          wrap(innerFn, outerFn, self, tryLocsList),
          PromiseImpl
        );

        return exports.isGeneratorFunction(outerFn)
          ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function(result) {
              return result.done ? result.value : iter.next();
            });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;

        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }

            // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;

            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);

            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;

            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done
                ? GenStateCompleted
                : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };

            } else if (record.type === "throw") {
              state = GenStateCompleted;
              // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }

      // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.
      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError(
              "The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (! info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value;

          // Resume execution at the desired location (see delegateYield).
          context.next = delegate.nextLoc;

          // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }

        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        }

        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
      }

      // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.
      defineIteratorMethods(Gp);

      define(Gp, toStringTagSymbol, "Generator");

      // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.
      define(Gp, iteratorSymbol, function() {
        return this;
      });

      define(Gp, "toString", function() {
        return "[object Generator]";
      });

      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();

        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
          while (keys.length) {
            var key = keys.pop();
            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }

          // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.
          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1, next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;

              return next;
            };

            return next.next = next;
          }
        }

        // Return an iterator with no values.
        return { next: doneResult };
      }
      exports.values = values;

      function doneResult() {
        return { value: undefined$1, done: true };
      }

      Context.prototype = {
        constructor: Context,

        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.
          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;

          this.method = "next";
          this.arg = undefined$1;

          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" &&
                  hasOwn.call(this, name) &&
                  !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },

        stop: function() {
          this.done = true;

          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },

        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !! caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }

              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },

        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev &&
                hasOwn.call(entry, "finallyLoc") &&
                this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry &&
              (type === "break" ||
               type === "continue") &&
              finallyEntry.tryLoc <= arg &&
              arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },

        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" ||
              record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },

        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },

        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }

          // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.
          throw new Error("illegal catch attempt");
        },

        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      };

      // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.
      return exports;

    }(
      // If this script is executing as a CommonJS module, use module.exports
      // as the regeneratorRuntime namespace. Otherwise create a new empty
      // object. Either way, the resulting object will be used to initialize
      // the regeneratorRuntime variable at the top of this file.
      module.exports 
    ));

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, in modern engines
      // we can explicitly access globalThis. In older engines we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
    });

    var regenerator = runtime_1;

    var asyncToGenerator = createCommonjsModule(function (module) {
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    module.exports = _asyncToGenerator;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    });

    /*!
    Copyright (C) 2013-2017 by Andrea Giammarchi - @WebReflection

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

    */
    var
      // should be a not so common char
      // possibly one JSON does not encode
      // possibly one encodeURIComponent does not encode
      // right now this char is '~' but this might change in the future
      specialChar = '~',
      safeSpecialChar = '\\x' + (
        '0' + specialChar.charCodeAt(0).toString(16)
      ).slice(-2),
      escapedSafeSpecialChar = '\\' + safeSpecialChar,
      specialCharRG = new RegExp(safeSpecialChar, 'g'),
      safeSpecialCharRG = new RegExp(escapedSafeSpecialChar, 'g'),

      safeStartWithSpecialCharRG = new RegExp('(?:^|([^\\\\]))' + escapedSafeSpecialChar),

      indexOf = [].indexOf || function(v){
        for(var i=this.length;i--&&this[i]!==v;);
        return i;
      },
      $String = String  // there's no way to drop warnings in JSHint
                        // about new String ... well, I need that here!
                        // faked, and happy linter!
    ;

    function generateReplacer(value, replacer, resolve) {
      var
        doNotIgnore = false,
        inspect = !!replacer,
        path = [],
        all  = [value],
        seen = [value],
        mapp = [resolve ? specialChar : '[Circular]'],
        last = value,
        lvl  = 1,
        i, fn
      ;
      if (inspect) {
        fn = typeof replacer === 'object' ?
          function (key, value) {
            return key !== '' && replacer.indexOf(key) < 0 ? void 0 : value;
          } :
          replacer;
      }
      return function(key, value) {
        // the replacer has rights to decide
        // if a new object should be returned
        // or if there's some key to drop
        // let's call it here rather than "too late"
        if (inspect) value = fn.call(this, key, value);

        // first pass should be ignored, since it's just the initial object
        if (doNotIgnore) {
          if (last !== this) {
            i = lvl - indexOf.call(all, this) - 1;
            lvl -= i;
            all.splice(lvl, all.length);
            path.splice(lvl - 1, path.length);
            last = this;
          }
          // console.log(lvl, key, path);
          if (typeof value === 'object' && value) {
        	// if object isn't referring to parent object, add to the
            // object path stack. Otherwise it is already there.
            if (indexOf.call(all, value) < 0) {
              all.push(last = value);
            }
            lvl = all.length;
            i = indexOf.call(seen, value);
            if (i < 0) {
              i = seen.push(value) - 1;
              if (resolve) {
                // key cannot contain specialChar but could be not a string
                path.push(('' + key).replace(specialCharRG, safeSpecialChar));
                mapp[i] = specialChar + path.join(specialChar);
              } else {
                mapp[i] = mapp[0];
              }
            } else {
              value = mapp[i];
            }
          } else {
            if (typeof value === 'string' && resolve) {
              // ensure no special char involved on deserialization
              // in this case only first char is important
              // no need to replace all value (better performance)
              value = value .replace(safeSpecialChar, escapedSafeSpecialChar)
                            .replace(specialChar, safeSpecialChar);
            }
          }
        } else {
          doNotIgnore = true;
        }
        return value;
      };
    }

    function retrieveFromPath(current, keys) {
      for(var i = 0, length = keys.length; i < length; current = current[
        // keys should be normalized back here
        keys[i++].replace(safeSpecialCharRG, specialChar)
      ]);
      return current;
    }

    function generateReviver(reviver) {
      return function(key, value) {
        var isString = typeof value === 'string';
        if (isString && value.charAt(0) === specialChar) {
          return new $String(value.slice(1));
        }
        if (key === '') value = regenerate(value, value, {});
        // again, only one needed, do not use the RegExp for this replacement
        // only keys need the RegExp
        if (isString) value = value .replace(safeStartWithSpecialCharRG, '$1' + specialChar)
                                    .replace(escapedSafeSpecialChar, safeSpecialChar);
        return reviver ? reviver.call(this, key, value) : value;
      };
    }

    function regenerateArray(root, current, retrieve) {
      for (var i = 0, length = current.length; i < length; i++) {
        current[i] = regenerate(root, current[i], retrieve);
      }
      return current;
    }

    function regenerateObject(root, current, retrieve) {
      for (var key in current) {
        if (current.hasOwnProperty(key)) {
          current[key] = regenerate(root, current[key], retrieve);
        }
      }
      return current;
    }

    function regenerate(root, current, retrieve) {
      return current instanceof Array ?
        // fast Array reconstruction
        regenerateArray(root, current, retrieve) :
        (
          current instanceof $String ?
            (
              // root is an empty string
              current.length ?
                (
                  retrieve.hasOwnProperty(current) ?
                    retrieve[current] :
                    retrieve[current] = retrieveFromPath(
                      root, current.split(specialChar)
                    )
                ) :
                root
            ) :
            (
              current instanceof Object ?
                // dedicated Object parser
                regenerateObject(root, current, retrieve) :
                // value as it is
                current
            )
        )
      ;
    }

    var CircularJSON = {
      stringify: function stringify(value, replacer, space, doNotResolve) {
        return CircularJSON.parser.stringify(
          value,
          generateReplacer(value, replacer, !doNotResolve),
          space
        );
      },
      parse: function parse(text, reviver) {
        return CircularJSON.parser.parse(
          text,
          generateReviver(reviver)
        );
      },
      // A parser should be an API 1:1 compatible with JSON
      // it should expose stringify and parse methods.
      // The default parser is the native JSON.
      parser: JSON
    };

    var circularJson_node = CircularJSON;

    var client = createCommonjsModule(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _regenerator = interopRequireDefault(regenerator);

    var _asyncToGenerator2 = interopRequireDefault(asyncToGenerator);

    var _typeof2 = interopRequireDefault(_typeof_1);

    var _classCallCheck2 = interopRequireDefault(classCallCheck);

    var _createClass2 = interopRequireDefault(createClass);

    var _inherits2 = interopRequireDefault(inherits$3);

    var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

    var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf$2);



    var _circularJson = interopRequireDefault(circularJson_node);

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    var __rest = function (s, e) {
      var t = {};

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
      }

      if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
      }
      return t;
    }; // @ts-ignore


    var CommonClient = /*#__PURE__*/function (_EventEmitter) {
      (0, _inherits2["default"])(CommonClient, _EventEmitter);

      var _super = _createSuper(CommonClient);

      /**
       * Instantiate a Client class.
       * @constructor
       * @param {webSocketFactory} webSocketFactory - factory method for WebSocket
       * @param {String} address - url to a websocket server
       * @param {Object} options - ws options object with reconnect parameters
       * @param {Function} generate_request_id - custom generation request Id
       * @return {CommonClient}
       */
      function CommonClient(webSocketFactory) {
        var _this;

        var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "ws://localhost:8080";

        var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;
        (0, _classCallCheck2["default"])(this, CommonClient);

        var _a$autoconnect = _a.autoconnect,
            autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,
            _a$reconnect = _a.reconnect,
            reconnect = _a$reconnect === void 0 ? true : _a$reconnect,
            _a$reconnect_interval = _a.reconnect_interval,
            reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,
            _a$max_reconnects = _a.max_reconnects,
            max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,
            rest_options = __rest(_a, ["autoconnect", "reconnect", "reconnect_interval", "max_reconnects"]);

        _this = _super.call(this);
        _this.webSocketFactory = webSocketFactory;
        _this.queue = {};
        _this.rpc_id = 0;
        _this.address = address;
        _this.autoconnect = autoconnect;
        _this.ready = false;
        _this.reconnect = reconnect;
        _this.reconnect_interval = reconnect_interval;
        _this.max_reconnects = max_reconnects;
        _this.rest_options = rest_options;
        _this.current_reconnects = 0;

        _this.generate_request_id = generate_request_id || function () {
          return ++_this.rpc_id;
        };

        if (_this.autoconnect) _this._connect(_this.address, Object.assign({
          autoconnect: _this.autoconnect,
          reconnect: _this.reconnect,
          reconnect_interval: _this.reconnect_interval,
          max_reconnects: _this.max_reconnects
        }, _this.rest_options));
        return _this;
      }
      /**
       * Connects to a defined server if not connected already.
       * @method
       * @return {Undefined}
       */


      (0, _createClass2["default"])(CommonClient, [{
        key: "connect",
        value: function connect() {
          if (this.socket) return;

          this._connect(this.address, Object.assign({
            autoconnect: this.autoconnect,
            reconnect: this.reconnect,
            reconnect_interval: this.reconnect_interval,
            max_reconnects: this.max_reconnects
          }, this.rest_options));
        }
        /**
         * Calls a registered RPC method on server.
         * @method
         * @param {String} method - RPC method name
         * @param {Object|Array} params - optional method parameters
         * @param {Number} timeout - RPC reply timeout value
         * @param {Object} ws_opts - options passed to ws
         * @return {Promise}
         */

      }, {
        key: "call",
        value: function call(method, params, timeout, ws_opts) {
          var _this2 = this;

          if (!ws_opts && "object" === (0, _typeof2["default"])(timeout)) {
            ws_opts = timeout;
            timeout = null;
          }

          return new Promise(function (resolve, reject) {
            if (!_this2.ready) return reject(new Error("socket not ready"));

            var rpc_id = _this2.generate_request_id(method, params);

            var message = {
              jsonrpc: "2.0",
              method: method,
              params: params || null,
              id: rpc_id
            };

            _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {
              if (error) return reject(error);
              _this2.queue[rpc_id] = {
                promise: [resolve, reject]
              };

              if (timeout) {
                _this2.queue[rpc_id].timeout = setTimeout(function () {
                  delete _this2.queue[rpc_id];
                  reject(new Error("reply timeout"));
                }, timeout);
              }
            });
          });
        }
        /**
         * Logins with the other side of the connection.
         * @method
         * @param {Object} params - Login credentials object
         * @return {Promise}
         */

      }, {
        key: "login",
        value: function () {
          var _login = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(params) {
            var resp;
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return this.call("rpc.login", params);

                  case 2:
                    resp = _context.sent;

                    if (resp) {
                      _context.next = 5;
                      break;
                    }

                    throw new Error("authentication failed");

                  case 5:
                    return _context.abrupt("return", resp);

                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function login(_x) {
            return _login.apply(this, arguments);
          }

          return login;
        }()
        /**
         * Fetches a list of client's methods registered on server.
         * @method
         * @return {Array}
         */

      }, {
        key: "listMethods",
        value: function () {
          var _listMethods = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return this.call("__listMethods");

                  case 2:
                    return _context2.abrupt("return", _context2.sent);

                  case 3:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function listMethods() {
            return _listMethods.apply(this, arguments);
          }

          return listMethods;
        }()
        /**
         * Sends a JSON-RPC 2.0 notification to server.
         * @method
         * @param {String} method - RPC method name
         * @param {Object} params - optional method parameters
         * @return {Promise}
         */

      }, {
        key: "notify",
        value: function notify(method, params) {
          var _this3 = this;

          return new Promise(function (resolve, reject) {
            if (!_this3.ready) return reject(new Error("socket not ready"));
            var message = {
              jsonrpc: "2.0",
              method: method,
              params: params || null
            };

            _this3.socket.send(JSON.stringify(message), function (error) {
              if (error) return reject(error);
              resolve();
            });
          });
        }
        /**
         * Subscribes for a defined event.
         * @method
         * @param {String|Array} event - event name
         * @return {Undefined}
         * @throws {Error}
         */

      }, {
        key: "subscribe",
        value: function () {
          var _subscribe = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(event) {
            var result;
            return _regenerator["default"].wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (typeof event === "string") event = [event];
                    _context3.next = 3;
                    return this.call("rpc.on", event);

                  case 3:
                    result = _context3.sent;

                    if (!(typeof event === "string" && result[event] !== "ok")) {
                      _context3.next = 6;
                      break;
                    }

                    throw new Error("Failed subscribing to an event '" + event + "' with: " + result[event]);

                  case 6:
                    return _context3.abrupt("return", result);

                  case 7:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function subscribe(_x2) {
            return _subscribe.apply(this, arguments);
          }

          return subscribe;
        }()
        /**
         * Unsubscribes from a defined event.
         * @method
         * @param {String|Array} event - event name
         * @return {Undefined}
         * @throws {Error}
         */

      }, {
        key: "unsubscribe",
        value: function () {
          var _unsubscribe = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(event) {
            var result;
            return _regenerator["default"].wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    if (typeof event === "string") event = [event];
                    _context4.next = 3;
                    return this.call("rpc.off", event);

                  case 3:
                    result = _context4.sent;

                    if (!(typeof event === "string" && result[event] !== "ok")) {
                      _context4.next = 6;
                      break;
                    }

                    throw new Error("Failed unsubscribing from an event with: " + result);

                  case 6:
                    return _context4.abrupt("return", result);

                  case 7:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function unsubscribe(_x3) {
            return _unsubscribe.apply(this, arguments);
          }

          return unsubscribe;
        }()
        /**
         * Closes a WebSocket connection gracefully.
         * @method
         * @param {Number} code - socket close code
         * @param {String} data - optional data to be sent before closing
         * @return {Undefined}
         */

      }, {
        key: "close",
        value: function close(code, data) {
          this.socket.close(code || 1000, data);
        }
        /**
         * Connection/Message handler.
         * @method
         * @private
         * @param {String} address - WebSocket API address
         * @param {Object} options - ws options object
         * @return {Undefined}
         */

      }, {
        key: "_connect",
        value: function _connect(address, options) {
          var _this4 = this;

          this.socket = this.webSocketFactory(address, options);
          this.socket.addEventListener("open", function () {
            _this4.ready = true;

            _this4.emit("open");

            _this4.current_reconnects = 0;
          });
          this.socket.addEventListener("message", function (_ref) {
            var message = _ref.data;
            if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();

            try {
              message = _circularJson["default"].parse(message);
            } catch (error) {
              return;
            } // check if any listeners are attached and forward event


            if (message.notification && _this4.listeners(message.notification).length) {
              if (!Object.keys(message.params).length) return _this4.emit(message.notification);
              var args = [message.notification];
              if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better
                for (var i = 0; i < message.params.length; i++) {
                  args.push(message.params[i]);
                } // run as microtask so that pending queue messages are resolved first
              // eslint-disable-next-line prefer-spread

              return Promise.resolve().then(function () {
                _this4.emit.apply(_this4, args);
              });
            }

            if (!_this4.queue[message.id]) {
              // general JSON RPC 2.0 events
              if (message.method && message.params) {
                // run as microtask so that pending queue messages are resolved first
                return Promise.resolve().then(function () {
                  _this4.emit(message.method, message.params);
                });
              }

              return;
            } // reject early since server's response is invalid


            if ("error" in message === "result" in message) _this4.queue[message.id].promise[1](new Error("Server response malformed. Response must include either \"result\"" + " or \"error\", but not both."));
            if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);
            if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);
            delete _this4.queue[message.id];
          });
          this.socket.addEventListener("error", function (error) {
            return _this4.emit("error", error);
          });
          this.socket.addEventListener("close", function (_ref2) {
            var code = _ref2.code,
                reason = _ref2.reason;
            if (_this4.ready) // Delay close event until internal state is updated
              setTimeout(function () {
                return _this4.emit("close", code, reason);
              }, 0);
            _this4.ready = false;
            _this4.socket = undefined;
            if (code === 1000) return;
            _this4.current_reconnects++;
            if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {
              return _this4._connect(address, options);
            }, _this4.reconnect_interval);
          });
        }
      }]);
      return CommonClient;
    }(eventemitter3.EventEmitter);

    exports["default"] = CommonClient;
    });

    var index_browser = createCommonjsModule(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Client = void 0;

    var _classCallCheck2 = interopRequireDefault(classCallCheck);

    var _inherits2 = interopRequireDefault(inherits$3);

    var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

    var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf$2);

    var _websocket = interopRequireDefault(websocket_browser);

    var _client = interopRequireDefault(client);

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    var Client = /*#__PURE__*/function (_CommonClient) {
      (0, _inherits2["default"])(Client, _CommonClient);

      var _super = _createSuper(Client);

      function Client() {
        var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "ws://localhost:8080";

        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref$autoconnect = _ref.autoconnect,
            autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,
            _ref$reconnect = _ref.reconnect,
            reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,
            _ref$reconnect_interv = _ref.reconnect_interval,
            reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,
            _ref$max_reconnects = _ref.max_reconnects,
            max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;

        var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;
        (0, _classCallCheck2["default"])(this, Client);
        return _super.call(this, _websocket["default"], address, {
          autoconnect: autoconnect,
          reconnect: reconnect,
          reconnect_interval: reconnect_interval,
          max_reconnects: max_reconnects
        }, generate_request_id);
      }

      return Client;
    }(_client["default"]);

    exports.Client = Client;
    });

    var rngBrowser = createCommonjsModule(function (module) {
    // Unique ID creation requires a high quality random # generator.  In the
    // browser this is a little complicated due to unknown quality of Math.random()
    // and inconsistent support for the `crypto` API.  We do the best we can via
    // feature-detection

    // getRandomValues needs to be invoked in a context where "this" is a Crypto
    // implementation. Also, find the complete implementation of crypto on IE11.
    var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                          (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

    if (getRandomValues) {
      // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
      var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      // Math.random()-based (RNG)
      //
      // If all else fails, use Math.random().  It's fast, but is of unspecified
      // quality.
      var rnds = new Array(16);

      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
          rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
        }

        return rnds;
      };
    }
    });

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */
    var byteToHex = [];
    for (var i$2 = 0; i$2 < 256; ++i$2) {
      byteToHex[i$2] = (i$2 + 0x100).toString(16).substr(1);
    }

    function bytesToUuid(buf, offset) {
      var i = offset || 0;
      var bth = byteToHex;
      // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
      return ([
        bth[buf[i++]], bth[buf[i++]],
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]],
        bth[buf[i++]], bth[buf[i++]],
        bth[buf[i++]], bth[buf[i++]]
      ]).join('');
    }

    var bytesToUuid_1 = bytesToUuid;

    function v4(options, buf, offset) {
      var i = buf && offset || 0;

      if (typeof(options) == 'string') {
        buf = options === 'binary' ? new Array(16) : null;
        options = null;
      }
      options = options || {};

      var rnds = options.random || (options.rng || rngBrowser)();

      // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
      rnds[6] = (rnds[6] & 0x0f) | 0x40;
      rnds[8] = (rnds[8] & 0x3f) | 0x80;

      // Copy bytes to buffer, if provided
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }

      return buf || bytesToUuid_1(rnds);
    }

    var v4_1 = v4;

    /**
     *  Generates a JSON-RPC 1.0 or 2.0 request
     *  @param {String} method Name of method to call
     *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value
     *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation
     *  @param {Object} [options]
     *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)
     *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it
     *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID
     *  @throws {TypeError} If any of the parameters are invalid
     *  @return {Object} A JSON-RPC 1.0 or 2.0 request
     *  @memberOf Utils
     */
    const generateRequest = function(method, params, id, options) {
      if(typeof method !== 'string') {
        throw new TypeError(method + ' must be a string');
      }

      options = options || {};

      // check valid version provided
      const version = typeof options.version === 'number' ? options.version : 2;
      if (version !== 1 && version !== 2) {
        throw new TypeError(version + ' must be 1 or 2');
      }

      const request = {
        method: method
      };

      if(version === 2) {
        request.jsonrpc = '2.0';
      }

      if(params) {
        // params given, but invalid?
        if(typeof params !== 'object' && !Array.isArray(params)) {
          throw new TypeError(params + ' must be an object, array or omitted');
        }
        request.params = params;
      }

      // if id was left out, generate one (null means explicit notification)
      if(typeof(id) === 'undefined') {
        const generator = typeof options.generator === 'function' ? options.generator : function() { return v4_1(); };
        request.id = generator(request, options);
      } else if (version === 2 && id === null) {
        // we have a version 2 notification
        if (options.notificationIdNull) {
          request.id = null; // id will not be set at all unless option provided
        }
      } else {
        request.id = id;
      }

      return request;
    };

    var generateRequest_1 = generateRequest;

    /**
     * Constructor for a Jayson Browser Client that does not depend any node.js core libraries
     * @class ClientBrowser
     * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback
     * @param {Object} [options]
     * @param {Function} [options.reviver] Reviver function for JSON
     * @param {Function} [options.replacer] Replacer function for JSON
     * @param {Number} [options.version=2] JSON-RPC version to use (1|2)
     * @param {Function} [options.generator] Function to use for generating request IDs
     *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it
     * @return {ClientBrowser}
     */
    const ClientBrowser = function(callServer, options) {
      if(!(this instanceof ClientBrowser)) {
        return new ClientBrowser(callServer, options);
      }

      if (!options) {
        options = {};
      }

      this.options = {
        reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,
        replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,
        generator: typeof options.generator !== 'undefined' ? options.generator : function() { return v4_1(); },
        version: typeof options.version !== 'undefined' ? options.version : 2,
        notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,
      };

      this.callServer = callServer;
    };

    var browser$1 = ClientBrowser;

    /**
     *  Creates a request and dispatches it if given a callback.
     *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String
     *  @param {Array|Object} [params] Parameters for the method
     *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request
     *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.
     *  @throws {TypeError} Invalid parameters
     *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request
     */
    ClientBrowser.prototype.request = function(method, params, id, callback) {
      const self = this;
      let request = null;

      // is this a batch request?
      const isBatch = Array.isArray(method) && typeof params === 'function';

      if (this.options.version === 1 && isBatch) {
        throw new TypeError('JSON-RPC 1.0 does not support batching');
      }

      // is this a raw request?
      const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';

      if(isBatch || isRaw) {
        callback = params;
        request = method;
      } else {
        if(typeof id === 'function') {
          callback = id;
          // specifically undefined because "null" is a notification request
          id = undefined;
        }

        const hasCallback = typeof callback === 'function';

        try {
          request = generateRequest_1(method, params, id, {
            generator: this.options.generator,
            version: this.options.version,
            notificationIdNull: this.options.notificationIdNull,
          });
        } catch(err) {
          if(hasCallback) {
            return callback(err);
          }
          throw err;
        }

        // no callback means we should just return a raw request
        if(!hasCallback) {
          return request;
        }

      }

      let message;
      try {
        message = JSON.stringify(request, this.options.replacer);
      } catch(err) {
        return callback(err);
      }

      this.callServer(message, function(err, response) {
        self._parseResponse(err, response, callback);
      });

      // always return the raw request
      return request;
    };

    /**
     * Parses a response from a server
     * @param {Object} err Error to pass on that is unrelated to the actual response
     * @param {String} responseText JSON-RPC 1.0 or 2.0 response
     * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters
     * @private
     */
    ClientBrowser.prototype._parseResponse = function(err, responseText, callback) {
      if(err) {
        callback(err);
        return;
      }

      if(!responseText) {
        // empty response text, assume that is correct because it could be a
        // notification which jayson does not give any body for
        return callback();
      }

      let response;
      try {
        response = JSON.parse(responseText, this.options.reviver);
      } catch(err) {
        return callback(err);
      }

      if(callback.length === 3) {
        // if callback length is 3, we split callback arguments on error and response

        // is batch response?
        if(Array.isArray(response)) {

          // neccesary to split strictly on validity according to spec here
          const isError = function(res) {
            return typeof res.error !== 'undefined';
          };

          const isNotError = function (res) {
            return !isError(res);
          };

          return callback(null, response.filter(isError), response.filter(isNotError));
        
        } else {

          // split regardless of validity
          return callback(null, response.error, response.result);
        
        }
      
      }

      callback(null, response);
    };

    const errors$1 = {
      IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
      TWEAK_ADD:
        'The tweak was out of range or the resulted private key is invalid',
      TWEAK_MUL: 'The tweak was out of range or equal to zero',
      CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
      SECKEY_INVALID: 'Private Key is invalid',
      PUBKEY_PARSE: 'Public Key could not be parsed',
      PUBKEY_SERIALIZE: 'Public Key serialization error',
      PUBKEY_COMBINE: 'The sum of the public keys is not valid',
      SIG_PARSE: 'Signature could not be parsed',
      SIGN: 'The nonce generation function failed, or the private key was invalid',
      RECOVER: 'Public key could not be recover',
      ECDH: 'Scalar was invalid (zero or overflow)'
    };

    function assert$i (cond, msg) {
      if (!cond) throw new Error(msg)
    }

    function isUint8Array (name, value, length) {
      assert$i(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);

      if (length !== undefined) {
        if (Array.isArray(length)) {
          const numbers = length.join(', ');
          const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
          assert$i(length.includes(value.length), msg);
        } else {
          const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
          assert$i(value.length === length, msg);
        }
      }
    }

    function isCompressed (value) {
      assert$i(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean');
    }

    function getAssertedOutput (output = (len) => new Uint8Array(len), length) {
      if (typeof output === 'function') output = output(length);
      isUint8Array('output', output, length);
      return output
    }

    function toTypeString (value) {
      return Object.prototype.toString.call(value).slice(8, -1)
    }

    var lib$2 = (secp256k1) => {
      return {
        contextRandomize (seed) {
          assert$i(
            seed === null || seed instanceof Uint8Array,
            'Expected seed to be an Uint8Array or null'
          );
          if (seed !== null) isUint8Array('seed', seed, 32);

          switch (secp256k1.contextRandomize(seed)) {
            case 1:
              throw new Error(errors$1.CONTEXT_RANDOMIZE_UNKNOW)
          }
        },

        privateKeyVerify (seckey) {
          isUint8Array('private key', seckey, 32);

          return secp256k1.privateKeyVerify(seckey) === 0
        },

        privateKeyNegate (seckey) {
          isUint8Array('private key', seckey, 32);

          switch (secp256k1.privateKeyNegate(seckey)) {
            case 0:
              return seckey
            case 1:
              throw new Error(errors$1.IMPOSSIBLE_CASE)
          }
        },

        privateKeyTweakAdd (seckey, tweak) {
          isUint8Array('private key', seckey, 32);
          isUint8Array('tweak', tweak, 32);

          switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
            case 0:
              return seckey
            case 1:
              throw new Error(errors$1.TWEAK_ADD)
          }
        },

        privateKeyTweakMul (seckey, tweak) {
          isUint8Array('private key', seckey, 32);
          isUint8Array('tweak', tweak, 32);

          switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
            case 0:
              return seckey
            case 1:
              throw new Error(errors$1.TWEAK_MUL)
          }
        },

        publicKeyVerify (pubkey) {
          isUint8Array('public key', pubkey, [33, 65]);

          return secp256k1.publicKeyVerify(pubkey) === 0
        },

        publicKeyCreate (seckey, compressed = true, output) {
          isUint8Array('private key', seckey, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyCreate(output, seckey)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$1.SECKEY_INVALID)
            case 2:
              throw new Error(errors$1.PUBKEY_SERIALIZE)
          }
        },

        publicKeyConvert (pubkey, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyConvert(output, pubkey)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$1.PUBKEY_PARSE)
            case 2:
              throw new Error(errors$1.PUBKEY_SERIALIZE)
          }
        },

        publicKeyNegate (pubkey, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyNegate(output, pubkey)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$1.PUBKEY_PARSE)
            case 2:
              throw new Error(errors$1.IMPOSSIBLE_CASE)
            case 3:
              throw new Error(errors$1.PUBKEY_SERIALIZE)
          }
        },

        publicKeyCombine (pubkeys, compressed = true, output) {
          assert$i(Array.isArray(pubkeys), 'Expected public keys to be an Array');
          assert$i(pubkeys.length > 0, 'Expected public keys array will have more than zero items');
          for (const pubkey of pubkeys) {
            isUint8Array('public key', pubkey, [33, 65]);
          }
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyCombine(output, pubkeys)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$1.PUBKEY_PARSE)
            case 2:
              throw new Error(errors$1.PUBKEY_COMBINE)
            case 3:
              throw new Error(errors$1.PUBKEY_SERIALIZE)
          }
        },

        publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isUint8Array('tweak', tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$1.PUBKEY_PARSE)
            case 2:
              throw new Error(errors$1.TWEAK_ADD)
          }
        },

        publicKeyTweakMul (pubkey, tweak, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isUint8Array('tweak', tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$1.PUBKEY_PARSE)
            case 2:
              throw new Error(errors$1.TWEAK_MUL)
          }
        },

        signatureNormalize (sig) {
          isUint8Array('signature', sig, 64);

          switch (secp256k1.signatureNormalize(sig)) {
            case 0:
              return sig
            case 1:
              throw new Error(errors$1.SIG_PARSE)
          }
        },

        signatureExport (sig, output) {
          isUint8Array('signature', sig, 64);
          output = getAssertedOutput(output, 72);

          const obj = { output, outputlen: 72 };
          switch (secp256k1.signatureExport(obj, sig)) {
            case 0:
              return output.slice(0, obj.outputlen)
            case 1:
              throw new Error(errors$1.SIG_PARSE)
            case 2:
              throw new Error(errors$1.IMPOSSIBLE_CASE)
          }
        },

        signatureImport (sig, output) {
          isUint8Array('signature', sig);
          output = getAssertedOutput(output, 64);

          switch (secp256k1.signatureImport(output, sig)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$1.SIG_PARSE)
            case 2:
              throw new Error(errors$1.IMPOSSIBLE_CASE)
          }
        },

        ecdsaSign (msg32, seckey, options = {}, output) {
          isUint8Array('message', msg32, 32);
          isUint8Array('private key', seckey, 32);
          assert$i(toTypeString(options) === 'Object', 'Expected options to be an Object');
          if (options.data !== undefined) isUint8Array('options.data', options.data);
          if (options.noncefn !== undefined) assert$i(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function');
          output = getAssertedOutput(output, 64);

          const obj = { signature: output, recid: null };
          switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
            case 0:
              return obj
            case 1:
              throw new Error(errors$1.SIGN)
            case 2:
              throw new Error(errors$1.IMPOSSIBLE_CASE)
          }
        },

        ecdsaVerify (sig, msg32, pubkey) {
          isUint8Array('signature', sig, 64);
          isUint8Array('message', msg32, 32);
          isUint8Array('public key', pubkey, [33, 65]);

          switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
            case 0:
              return true
            case 3:
              return false
            case 1:
              throw new Error(errors$1.SIG_PARSE)
            case 2:
              throw new Error(errors$1.PUBKEY_PARSE)
          }
        },

        ecdsaRecover (sig, recid, msg32, compressed = true, output) {
          isUint8Array('signature', sig, 64);
          assert$i(
            toTypeString(recid) === 'Number' &&
              recid >= 0 &&
              recid <= 3,
            'Expected recovery id to be a Number within interval [0, 3]'
          );
          isUint8Array('message', msg32, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$1.SIG_PARSE)
            case 2:
              throw new Error(errors$1.RECOVER)
            case 3:
              throw new Error(errors$1.IMPOSSIBLE_CASE)
          }
        },

        ecdh (pubkey, seckey, options = {}, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isUint8Array('private key', seckey, 32);
          assert$i(toTypeString(options) === 'Object', 'Expected options to be an Object');
          if (options.data !== undefined) isUint8Array('options.data', options.data);
          if (options.hashfn !== undefined) {
            assert$i(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function');
            if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32);
            if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32);
            isUint8Array('output', output);
          } else {
            output = getAssertedOutput(output, 32);
          }

          switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$1.PUBKEY_PARSE)
            case 2:
              throw new Error(errors$1.ECDH)
          }
        }
      }
    };

    var _from="elliptic@^6.5.2";var _id="elliptic@6.5.4";var _inBundle=false;var _integrity="sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==";var _location="/elliptic";var _phantomChildren={};var _requested={type:"range",registry:true,raw:"elliptic@^6.5.2",name:"elliptic",escapedName:"elliptic",rawSpec:"^6.5.2",saveSpec:null,fetchSpec:"^6.5.2"};var _requiredBy=["/browserify-sign","/create-ecdh","/secp256k1"];var _resolved="https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz";var _shasum="da37cebd31e79a1367e941b592ed1fbebd58abbb";var _spec="elliptic@^6.5.2";var _where="/home/imentus/iMentus-Projects/jet-protocol-dev-master/app/node_modules/secp256k1";var author={name:"Fedor Indutny",email:"fedor@indutny.com"};var bugs={url:"https://github.com/indutny/elliptic/issues"};var bundleDependencies=false;var dependencies={"bn.js":"^4.11.9",brorand:"^1.1.0","hash.js":"^1.0.0","hmac-drbg":"^1.0.1",inherits:"^2.0.4","minimalistic-assert":"^1.0.1","minimalistic-crypto-utils":"^1.0.1"};var deprecated=false;var description="EC cryptography";var devDependencies={brfs:"^2.0.2",coveralls:"^3.1.0",eslint:"^7.6.0",grunt:"^1.2.1","grunt-browserify":"^5.3.0","grunt-cli":"^1.3.2","grunt-contrib-connect":"^3.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.0.0","grunt-mocha-istanbul":"^5.0.2","grunt-saucelabs":"^9.0.1",istanbul:"^0.4.5",mocha:"^8.0.1"};var files=["lib"];var homepage="https://github.com/indutny/elliptic";var keywords=["EC","Elliptic","curve","Cryptography"];var license="MIT";var main="lib/elliptic.js";var name="elliptic";var repository={type:"git",url:"git+ssh://git@github.com/indutny/elliptic.git"};var scripts={lint:"eslint lib test","lint:fix":"npm run lint -- --fix",test:"npm run lint && npm run unit",unit:"istanbul test _mocha --reporter=spec test/index.js",version:"grunt dist && git add dist/"};var version$4="6.5.4";var require$$0$1 = {_from:_from,_id:_id,_inBundle:_inBundle,_integrity:_integrity,_location:_location,_phantomChildren:_phantomChildren,_requested:_requested,_requiredBy:_requiredBy,_resolved:_resolved,_shasum:_shasum,_spec:_spec,_where:_where,author:author,bugs:bugs,bundleDependencies:bundleDependencies,dependencies:dependencies,deprecated:deprecated,description:description,devDependencies:devDependencies,files:files,homepage:homepage,keywords:keywords,license:license,main:main,name:name,repository:repository,scripts:scripts,version:version$4};

    var bn = createCommonjsModule(function (module) {
    (function (module, exports) {

      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require$$0$2.Buffer;
        }
      } catch (e) {
      }

      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [ number & 0x3ffffff ];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [ 0 ];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };

      function parseHex4Bits (string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) {
          return c - 55;
        // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        // '0' - '9'
        } else {
          return (c - 48) & 0xf;
        }
      }

      function parseHexByte (string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex (number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        // 24-bits chunks
        var off = 0;
        var j = 0;

        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this.strip();
      };

      function parseBase (str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            r += c - 49 + 0xa;

          // 'A'
          } else if (c >= 17) {
            r += c - 17 + 0xa;

          // '0' - '9'
          } else {
            r += c;
          }
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [ 0 ];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this.strip();
      };

      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype.strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      BN.prototype.inspect = function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };

      /*

      var zeros = [];
      var groupSizes = [];
      var groupBases = [];

      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }

      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON () {
        return this.toString(16);
      };

      BN.prototype.toBuffer = function toBuffer (endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
      };

      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);

        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          // Assume big-endian
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }

          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[i] = b;
          }

          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }

        return res;
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray (num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this.strip();
      };

      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this.strip();
      };

      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this.strip();
      };

      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this.strip();
      };

      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this.strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this.strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };

      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out.strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out.strip();
      }

      function jumboMulTo (self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }

      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion

      function FFTM (x, y) {
        this.x = x;
        this.y = y;
      }

      FFTM.prototype.makeRBT = function makeRBT (N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }

        return t;
      };

      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin (x, l, N) {
        if (x === 0 || x === N - 1) return x;

        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << (l - i - 1);
          x >>= 1;
        }

        return rb;
      };

      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };

      FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);

        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;

          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);

          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;

            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];

              var ro = rtws[p + j + s];
              var io = itws[p + j + s];

              var rx = rtwdf_ * ro - itwdf_ * io;

              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;

              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;

              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;

              /* jshint maxdepth : false */
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };

      FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }

        return 1 << i + 1 + odd;
      };

      FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
        if (N <= 1) return;

        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];

          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;

          t = iws[i];

          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };

      FFTM.prototype.normalize13b = function normalize13b (ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
            Math.round(ws[2 * i] / N) +
            carry;

          ws[i] = w & 0x3ffffff;

          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }

        return ws;
      };

      FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);

          rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
        }

        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }

        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };

      FFTM.prototype.stub = function stub (N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }

        return ph;
      };

      FFTM.prototype.mulp = function mulp (x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);

        var rbt = this.makeRBT(N);

        var _ = this.stub(N);

        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);

        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);

        var rmws = out.words;
        rmws.length = N;

        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);

        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);

        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }

        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);

        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return this;
      };

      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this.strip();
      };

      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this.strip();
      };

      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this.strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this.strip();
      };

      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs () {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this.strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this.strip();
      };

      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modn = function modn (num) {
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return acc;
      };

      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        return this.strip();
      };

      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this.strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is BN v4 instance
            r.strip();
          } else {
            // r is BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };

      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };

      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont (num) {
        return new Mont(num);
      };

      function Mont (m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal$1);
    });

    var minimalisticAssert$1 = assert$h;

    function assert$h(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert$h.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

    var utils_1$1 = createCommonjsModule(function (module, exports) {

    var utils = exports;

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    utils.zero2 = zero2;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;

    utils.encode = function encode(arr, enc) {
      if (enc === 'hex')
        return toHex(arr);
      else
        return arr;
    };
    });

    var utils_1 = createCommonjsModule(function (module, exports) {

    var utils = exports;




    utils.assert = minimalisticAssert$1;
    utils.toArray = utils_1$1.toArray;
    utils.zero2 = utils_1$1.zero2;
    utils.toHex = utils_1$1.toHex;
    utils.encode = utils_1$1.encode;

    // Represent num in a w-NAF form
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);

      var ws = 1 << (w + 1);
      var k = num.clone();

      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }

        naf[i] = z;
        k.iushrn(1);
      }

      return naf;
    }
    utils.getNAF = getNAF;

    // Represent k1, k2 in a Joint Sparse Form
    function getJSF(k1, k2) {
      var jsf = [
        [],
        [],
      ];

      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        // First phase
        var m14 = (k1.andln(3) + d1) & 3;
        var m24 = (k2.andln(3) + d2) & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = (k1.andln(7) + d1) & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);

        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = (k2.andln(7) + d2) & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);

        // Second phase
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }

      return jsf;
    }
    utils.getJSF = getJSF;

    function cachedProperty(obj, name, computer) {
      var key = '_' + name;
      obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] :
          this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;

    function parseBytes(bytes) {
      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
        bytes;
    }
    utils.parseBytes = parseBytes;

    function intFromLE(bytes) {
      return new bn(bytes, 'hex', 'le');
    }
    utils.intFromLE = intFromLE;
    });

    var r$2;

    var brorand = function rand(len) {
      if (!r$2)
        r$2 = new Rand(null);

      return r$2.generate(len);
    };

    function Rand(rand) {
      this.rand = rand;
    }
    var Rand_1 = Rand;

    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };

    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);

      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };

    if (typeof self === 'object') {
      if (self.crypto && self.crypto.getRandomValues) {
        // Modern browsers
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        // IE
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };

      // Safari's WebWorkers do not have `crypto`
      } else if (typeof window === 'object') {
        // Old junk
        Rand.prototype._rand = function() {
          throw new Error('Not implemented yet');
        };
      }
    } else {
      // Node.js or Web worker with no crypto support
      try {
        var crypto$1 = require$$0$2;
        if (typeof crypto$1.randomBytes !== 'function')
          throw new Error('Not supported');

        Rand.prototype._rand = function _rand(n) {
          return crypto$1.randomBytes(n);
        };
      } catch (e) {
      }
    }
    brorand.Rand = Rand_1;

    var getNAF = utils_1.getNAF;
    var getJSF = utils_1.getJSF;
    var assert$g = utils_1.assert;

    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new bn(conf.p, 16);

      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

      // Useful for many curves
      this.zero = new bn(0).toRed(this.red);
      this.one = new bn(1).toRed(this.red);
      this.two = new bn(2).toRed(this.red);

      // Curve configuration, optional
      this.n = conf.n && new bn(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);

      this._bitLength = this.n ? this.n.bitLength() : 0;

      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    var base = BaseCurve;

    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert$g(p.precomputed);
      var doubles = p._getDoubles();

      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;

      // Translate into more windowed form
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }

      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };

    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;

      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;

      // Get NAF form
      var naf = getNAF(k, w, this._bitLength);

      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);

        if (i < 0)
          break;
        var z = naf[i];
        assert$g(z !== 0);
        if (p.type === 'affine') {
          // J +- P
          if (z > 0)
            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
          else
            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
          // J +- J
          if (z > 0)
            acc = acc.add(wnd[(z - 1) >> 1]);
          else
            acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };

    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
      points,
      coeffs,
      len,
      jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;

      // Fill all arrays
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }

      // Comb small window NAFs
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }

        var comb = [
          points[a], /* 1 */
          null, /* 3 */
          null, /* 5 */
          points[b], /* 7 */
        ];

        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }

        var index = [
          -3, /* -1 -1 */
          -1, /* -1 0 */
          -5, /* -1 1 */
          -7, /* 0 -1 */
          0, /* 0 0 */
          7, /* 0 1 */
          5, /* 1 -1 */
          1, /* 1 0 */
          3,  /* 1 1 */
        ];

        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;

          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }

      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;

        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;

        for (j = 0; j < len; j++) {
          var z = tmp[j];
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][(z - 1) >> 1];
          else if (z < 0)
            p = wnd[j][(-z - 1) >> 1].neg();

          if (p.type === 'affine')
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      // Zeroify references
      for (i = 0; i < len; i++)
        wnd[i] = null;

      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };

    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;

    BasePoint.prototype.eq = function eq(/*other*/) {
      throw new Error('Not implemented');
    };

    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };

    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils_1.toArray(bytes, enc);

      var len = this.p.byteLength();

      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
          bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
          assert$g(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
          assert$g(bytes[bytes.length - 1] % 2 === 1);

        var res =  this.point(bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len));

        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                  bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
      throw new Error('Unknown point format');
    };

    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };

    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);

      if (compact)
        return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

      return [ 0x04 ].concat(x, this.getY().toArray('be', len));
    };

    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils_1.encode(this._encode(compact), enc);
    };

    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;

      var precomputed = {
        doubles: null,
        naf: null,
        beta: null,
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;

      return this;
    };

    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;

      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;

      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };

    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;

      var doubles = [ this ];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles,
      };
    };

    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;

      var res = [ this ];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res,
      };
    };

    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };

    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };

    var inherits_browser$1 = createCommonjsModule(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    });

    var assert$f = utils_1.assert;

    function ShortCurve(conf) {
      base.call(this, 'short', conf);

      this.a = new bn(conf.a, 16).toRed(this.red);
      this.b = new bn(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();

      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits_browser$1(ShortCurve, base);
    var short_1 = ShortCurve;

    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;

      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new bn(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new bn(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$f(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }

      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new bn(vec.a, 16),
            b: new bn(vec.b, 16),
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }

      return {
        beta: beta,
        lambda: lambda,
        basis: basis,
      };
    };

    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : bn.mont(num);
      var tinv = new bn(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();

      var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [ l1, l2 ];
    };

    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new bn(1);
      var y1 = new bn(0);
      var x2 = new bn(0);
      var y2 = new bn(1);

      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;

      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));

        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;

        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;

      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }

      // Normalize signs
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }

      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 },
      ];
    };

    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];

      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);

      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);

      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1: k1, k2: k2 };
    };

    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new bn(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;

      var x = point.x;
      var y = point.y;

      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };

    ShortCurve.prototype._endoWnafMulAdd =
        function _endoWnafMulAdd(points, coeffs, jacobianResult) {
          var npoints = this._endoWnafT1;
          var ncoeffs = this._endoWnafT2;
          for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();

            if (split.k1.negative) {
              split.k1.ineg();
              p = p.neg(true);
            }
            if (split.k2.negative) {
              split.k2.ineg();
              beta = beta.neg(true);
            }

            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
          }
          var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

          // Clean-up references to points and coefficients
          for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
          }
          return res;
        };

    function Point$2(curve, x, y, isRed) {
      base.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new bn(x, 16);
        this.y = new bn(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits_browser$1(Point$2, base.BasePoint);

    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point$2(this, x, y, isRed);
    };

    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point$2.fromJSON(this, obj, red);
    };

    Point$2.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;

      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;

      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul),
          },
        };
      }
      return beta;
    };

    Point$2.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [ this.x, this.y ];

      return [ this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1),
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1),
        },
      } ];
    };

    Point$2.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string')
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;

      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }

      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [ res ].concat(pre.doubles.points.map(obj2point)),
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [ res ].concat(pre.naf.points.map(obj2point)),
        },
      };
      return res;
    };

    Point$2.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };

    Point$2.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };

    Point$2.prototype.add = function add(p) {
      // O + P = P
      if (this.inf)
        return p;

      // P + O = P
      if (p.inf)
        return this;

      // P + P = 2P
      if (this.eq(p))
        return this.dbl();

      // P + (-P) = O
      if (this.neg().eq(p))
        return this.curve.point(null, null);

      // P + Q = O
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);

      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point$2.prototype.dbl = function dbl() {
      if (this.inf)
        return this;

      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);

      var a = this.curve.a;

      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point$2.prototype.getX = function getX() {
      return this.x.fromRed();
    };

    Point$2.prototype.getY = function getY() {
      return this.y.fromRed();
    };

    Point$2.prototype.mul = function mul(k) {
      k = new bn(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([ this ], [ k ]);
      else
        return this.curve._wnafMul(this, k);
    };

    Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };

    Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };

    Point$2.prototype.eq = function eq(p) {
      return this === p ||
             this.inf === p.inf &&
                 (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };

    Point$2.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;

      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate),
          },
        };
      }
      return res;
    };

    Point$2.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);

      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };

    function JPoint(curve, x, y, z) {
      base.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new bn(0);
      } else {
        this.x = new bn(x, 16);
        this.y = new bn(y, 16);
        this.z = new bn(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);

      this.zOne = this.z === this.curve.one;
    }
    inherits_browser$1(JPoint, base.BasePoint);

    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };

    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);

      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);

      return this.curve.point(ax, ay);
    };

    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };

    JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity())
        return p;

      // P + O = P
      if (p.isInfinity())
        return this;

      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity())
        return p.toJ();

      // P + O = P
      if (p.isInfinity())
        return this;

      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();

      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }

      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;

      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      // Reuse results
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);

        jx = nx;
        jz = nz;
        jyd = dny;
      }

      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };

    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };

    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);

        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);

        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();

        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);

        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S

        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;

      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();

      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);

      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);

      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mul = function mul(k, kbase) {
      k = new bn(k, kbase);

      return this.curve._wnafMul(this, k);
    };

    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine')
        return this.eq(p.toJ());

      if (this === p)
        return true;

      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;

      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };

    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) +
          ' y: ' + this.y.toString(16, 2) +
          ' z: ' + this.z.toString(16, 2) + '>';
    };

    JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    function MontCurve(conf) {
      base.call(this, 'mont', conf);

      this.a = new bn(conf.a, 16).toRed(this.red);
      this.b = new bn(conf.b, 16).toRed(this.red);
      this.i4 = new bn(4).toRed(this.red).redInvm();
      this.two = new bn(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits_browser$1(MontCurve, base);
    var mont = MontCurve;

    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();

      return y.redSqr().cmp(rhs) === 0;
    };

    function Point$1(curve, x, z) {
      base.BasePoint.call(this, curve, 'projective');
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new bn(x, 16);
        this.z = new bn(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits_browser$1(Point$1, base.BasePoint);

    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils_1.toArray(bytes, enc), 1);
    };

    MontCurve.prototype.point = function point(x, z) {
      return new Point$1(this, x, z);
    };

    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point$1.fromJSON(this, obj);
    };

    Point$1.prototype.precompute = function precompute() {
      // No-op
    };

    Point$1.prototype._encode = function _encode() {
      return this.getX().toArray('be', this.curve.p.byteLength());
    };

    Point$1.fromJSON = function fromJSON(curve, obj) {
      return new Point$1(curve, obj[0], obj[1] || curve.one);
    };

    Point$1.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point$1.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    Point$1.prototype.dbl = function dbl() {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
      // 2M + 2S + 4A

      // A = X1 + Z1
      var a = this.x.redAdd(this.z);
      // AA = A^2
      var aa = a.redSqr();
      // B = X1 - Z1
      var b = this.x.redSub(this.z);
      // BB = B^2
      var bb = b.redSqr();
      // C = AA - BB
      var c = aa.redSub(bb);
      // X3 = AA * BB
      var nx = aa.redMul(bb);
      // Z3 = C * (BB + A24 * C)
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };

    Point$1.prototype.add = function add() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.diffAdd = function diffAdd(p, diff) {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
      // 4M + 2S + 6A

      // A = X2 + Z2
      var a = this.x.redAdd(this.z);
      // B = X2 - Z2
      var b = this.x.redSub(this.z);
      // C = X3 + Z3
      var c = p.x.redAdd(p.z);
      // D = X3 - Z3
      var d = p.x.redSub(p.z);
      // DA = D * A
      var da = d.redMul(a);
      // CB = C * B
      var cb = c.redMul(b);
      // X5 = Z1 * (DA + CB)^2
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      // Z5 = X1 * (DA - CB)^2
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };

    Point$1.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this; // (N / 2) * Q + Q
      var b = this.curve.point(null, null); // (N / 2) * Q
      var c = this; // Q

      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));

      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
          a = a.diffAdd(b, c);
          // N * Q = 2 * ((N / 2) * Q + Q))
          b = b.dbl();
        } else {
          // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
          b = a.diffAdd(b, c);
          // N * Q + Q = 2 * ((N / 2) * Q + Q)
          a = a.dbl();
        }
      }
      return b;
    };

    Point$1.prototype.mulAdd = function mulAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.jumlAdd = function jumlAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };

    Point$1.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };

    Point$1.prototype.getX = function getX() {
      // Normalize coordinates
      this.normalize();

      return this.x.fromRed();
    };

    var assert$e = utils_1.assert;

    function EdwardsCurve(conf) {
      // NOTE: Important as we are creating point in Base.call()
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;

      base.call(this, 'edwards', conf);

      this.a = new bn(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new bn(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new bn(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);

      assert$e(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits_browser$1(EdwardsCurve, base);
    var edwards = EdwardsCurve;

    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };

    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };

    // Just for compatibility with Short curve
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };

    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new bn(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new bn(y, 16);
      if (!y.red)
        y = y.toRed(this.red);

      // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());

      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error('invalid point');
        else
          return this.point(this.zero, y);
      }

      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity())
        return true;

      // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
      point.normalize();

      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

      return lhs.cmp(rhs) === 0;
    };

    function Point(curve, x, y, z, t) {
      base.BasePoint.call(this, curve, 'projective');
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new bn(x, 16);
        this.y = new bn(y, 16);
        this.z = z ? new bn(z, 16) : this.curve.one;
        this.t = t && new bn(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;

        // Use extended coordinates
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits_browser$1(Point, base.BasePoint);

    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };

    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };

    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.x.cmpn(0) === 0 &&
        (this.y.cmp(this.z) === 0 ||
        (this.zOne && this.y.cmp(this.curve.c) === 0));
    };

    Point.prototype._extDbl = function _extDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #doubling-dbl-2008-hwcd
      // 4M + 4S

      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = 2 * Z1^2
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      // D = a * A
      var d = this.curve._mulA(a);
      // E = (X1 + Y1)^2 - A - B
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      // G = D + B
      var g = d.redAdd(b);
      // F = G - C
      var f = g.redSub(c);
      // H = D - B
      var h = d.redSub(b);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projDbl = function _projDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #doubling-dbl-2008-bbjlp
      //     #doubling-dbl-2007-bl
      // and others
      // Generally 3M + 4S or 2M + 4S

      // B = (X1 + Y1)^2
      var b = this.x.redAdd(this.y).redSqr();
      // C = X1^2
      var c = this.x.redSqr();
      // D = Y1^2
      var d = this.y.redSqr();

      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
          // X3 = (B - C - D) * (F - 2)
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F^2 - 2 * F
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          // H = Z1^2
          h = this.z.redSqr();
          // J = F - 2 * H
          j = f.redSub(h).redISub(h);
          // X3 = (B-C-D)*J
          nx = b.redSub(c).redISub(d).redMul(j);
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F * J
          nz = f.redMul(j);
        }
      } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      // Double in extended coordinates
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };

    Point.prototype._extAdd = function _extAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #addition-add-2008-hwcd-3
      // 8M

      // A = (Y1 - X1) * (Y2 - X2)
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      // B = (Y1 + X1) * (Y2 + X2)
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      // C = T1 * k * T2
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      // D = Z1 * 2 * Z2
      var d = this.z.redMul(p.z.redAdd(p.z));
      // E = B - A
      var e = b.redSub(a);
      // F = D - C
      var f = d.redSub(c);
      // G = D + C
      var g = d.redAdd(c);
      // H = B + A
      var h = b.redAdd(a);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projAdd = function _projAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #addition-add-2008-bbjlp
      //     #addition-add-2007-bl
      // 10M + 1S

      // A = Z1 * Z2
      var a = this.z.redMul(p.z);
      // B = A^2
      var b = a.redSqr();
      // C = X1 * X2
      var c = this.x.redMul(p.x);
      // D = Y1 * Y2
      var d = this.y.redMul(p.y);
      // E = d * C * D
      var e = this.curve.d.redMul(c).redMul(d);
      // F = B - E
      var f = b.redSub(e);
      // G = B + E
      var g = b.redAdd(e);
      // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
      } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;

      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };

    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
    };

    Point.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;

      // Normalize coordinates
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };

    Point.prototype.neg = function neg() {
      return this.curve.point(this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg());
    };

    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };

    Point.prototype.eq = function eq(other) {
      return this === other ||
             this.getX().cmp(other.getX()) === 0 &&
             this.getY().cmp(other.getY()) === 0;
    };

    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    // Compatibility with BaseCurve
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;

    var curve_1 = createCommonjsModule(function (module, exports) {

    var curve = exports;

    curve.base = base;
    curve.short = short_1;
    curve.mont = mont;
    curve.edwards = edwards;
    });

    var inherits_1 = inherits_browser$1;

    function isSurrogatePair$1(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
    }

    function toArray$1(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          // Inspired by stringToUtf8ByteArray() in closure-library by Google
          // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
          // Apache License 2.0
          // https://github.com/google/closure-library/blob/master/LICENSE
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = (c >> 6) | 192;
              res[p++] = (c & 63) | 128;
            } else if (isSurrogatePair$1(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = (c >> 18) | 240;
              res[p++] = ((c >> 12) & 63) | 128;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            } else {
              res[p++] = (c >> 12) | 224;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0)
            msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    var toArray_1 = toArray$1;

    function toHex$1(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2$1(msg[i].toString(16));
      return res;
    }
    var toHex_1 = toHex$1;

    function htonl$1(w) {
      var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
      return res >>> 0;
    }
    var htonl_1 = htonl$1;

    function toHex32$1(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little')
          w = htonl$1(w);
        res += zero8$1(w.toString(16));
      }
      return res;
    }
    var toHex32_1 = toHex32$1;

    function zero2$1(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    var zero2_1 = zero2$1;

    function zero8$1(word) {
      if (word.length === 7)
        return '0' + word;
      else if (word.length === 6)
        return '00' + word;
      else if (word.length === 5)
        return '000' + word;
      else if (word.length === 4)
        return '0000' + word;
      else if (word.length === 3)
        return '00000' + word;
      else if (word.length === 2)
        return '000000' + word;
      else if (word.length === 1)
        return '0000000' + word;
      else
        return word;
    }
    var zero8_1 = zero8$1;

    function join32$1(msg, start, end, endian) {
      var len = end - start;
      minimalisticAssert$1(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big')
          w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
        else
          w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    var join32_1 = join32$1;

    function split32$1(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = (m >>> 16) & 0xff;
          res[k + 2] = (m >>> 8) & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = (m >>> 16) & 0xff;
          res[k + 1] = (m >>> 8) & 0xff;
          res[k] = m & 0xff;
        }
      }
      return res;
    }
    var split32_1 = split32$1;

    function rotr32$3(w, b) {
      return (w >>> b) | (w << (32 - b));
    }
    var rotr32_1 = rotr32$3;

    function rotl32$5(w, b) {
      return (w << b) | (w >>> (32 - b));
    }
    var rotl32_1 = rotl32$5;

    function sum32$7(a, b) {
      return (a + b) >>> 0;
    }
    var sum32_1 = sum32$7;

    function sum32_3$3(a, b, c) {
      return (a + b + c) >>> 0;
    }
    var sum32_3_1 = sum32_3$3;

    function sum32_4$5(a, b, c, d) {
      return (a + b + c + d) >>> 0;
    }
    var sum32_4_1 = sum32_4$5;

    function sum32_5$5(a, b, c, d, e) {
      return (a + b + c + d + e) >>> 0;
    }
    var sum32_5_1 = sum32_5$5;

    function sum64$3(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];

      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    var sum64_1 = sum64$3;

    function sum64_hi$3(ah, al, bh, bl) {
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    var sum64_hi_1 = sum64_hi$3;

    function sum64_lo$3(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    var sum64_lo_1 = sum64_lo$3;

    function sum64_4_hi$3(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;

      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    var sum64_4_hi_1 = sum64_4_hi$3;

    function sum64_4_lo$3(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    var sum64_4_lo_1 = sum64_4_lo$3;

    function sum64_5_hi$3(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = (lo + el) >>> 0;
      carry += lo < el ? 1 : 0;

      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    var sum64_5_hi_1 = sum64_5_hi$3;

    function sum64_5_lo$3(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;

      return lo >>> 0;
    }
    var sum64_5_lo_1 = sum64_5_lo$3;

    function rotr64_hi$3(ah, al, num) {
      var r = (al << (32 - num)) | (ah >>> num);
      return r >>> 0;
    }
    var rotr64_hi_1 = rotr64_hi$3;

    function rotr64_lo$3(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    var rotr64_lo_1 = rotr64_lo$3;

    function shr64_hi$3(ah, al, num) {
      return ah >>> num;
    }
    var shr64_hi_1 = shr64_hi$3;

    function shr64_lo$3(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    var shr64_lo_1 = shr64_lo$3;

    var utils$a = {
    	inherits: inherits_1,
    	toArray: toArray_1,
    	toHex: toHex_1,
    	htonl: htonl_1,
    	toHex32: toHex32_1,
    	zero2: zero2_1,
    	zero8: zero8_1,
    	join32: join32_1,
    	split32: split32_1,
    	rotr32: rotr32_1,
    	rotl32: rotl32_1,
    	sum32: sum32_1,
    	sum32_3: sum32_3_1,
    	sum32_4: sum32_4_1,
    	sum32_5: sum32_5_1,
    	sum64: sum64_1,
    	sum64_hi: sum64_hi_1,
    	sum64_lo: sum64_lo_1,
    	sum64_4_hi: sum64_4_hi_1,
    	sum64_4_lo: sum64_4_lo_1,
    	sum64_5_hi: sum64_5_hi_1,
    	sum64_5_lo: sum64_5_lo_1,
    	rotr64_hi: rotr64_hi_1,
    	rotr64_lo: rotr64_lo_1,
    	shr64_hi: shr64_hi_1,
    	shr64_lo: shr64_lo_1
    };

    function BlockHash$9() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';

      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    var BlockHash_1 = BlockHash$9;

    BlockHash$9.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils$a.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;

      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
        msg = this.pending;

        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;

        msg = utils$a.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }

      return this;
    };

    BlockHash$9.prototype.digest = function digest(enc) {
      this.update(this._pad());
      minimalisticAssert$1(this.pending === null);

      return this._digest(enc);
    };

    BlockHash$9.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - ((len + this.padLength) % bytes);
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++)
        res[i] = 0;

      // Append length
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;

        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;

        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }

      return res;
    };

    var common$8 = {
    	BlockHash: BlockHash_1
    };

    var rotr32$2 = utils$a.rotr32;

    function ft_1$3(s, x, y, z) {
      if (s === 0)
        return ch32$3(x, y, z);
      if (s === 1 || s === 3)
        return p32$1(x, y, z);
      if (s === 2)
        return maj32$3(x, y, z);
    }
    var ft_1_1 = ft_1$3;

    function ch32$3(x, y, z) {
      return (x & y) ^ ((~x) & z);
    }
    var ch32_1 = ch32$3;

    function maj32$3(x, y, z) {
      return (x & y) ^ (x & z) ^ (y & z);
    }
    var maj32_1 = maj32$3;

    function p32$1(x, y, z) {
      return x ^ y ^ z;
    }
    var p32_1 = p32$1;

    function s0_256$3(x) {
      return rotr32$2(x, 2) ^ rotr32$2(x, 13) ^ rotr32$2(x, 22);
    }
    var s0_256_1 = s0_256$3;

    function s1_256$3(x) {
      return rotr32$2(x, 6) ^ rotr32$2(x, 11) ^ rotr32$2(x, 25);
    }
    var s1_256_1 = s1_256$3;

    function g0_256$3(x) {
      return rotr32$2(x, 7) ^ rotr32$2(x, 18) ^ (x >>> 3);
    }
    var g0_256_1 = g0_256$3;

    function g1_256$3(x) {
      return rotr32$2(x, 17) ^ rotr32$2(x, 19) ^ (x >>> 10);
    }
    var g1_256_1 = g1_256$3;

    var common$7 = {
    	ft_1: ft_1_1,
    	ch32: ch32_1,
    	maj32: maj32_1,
    	p32: p32_1,
    	s0_256: s0_256_1,
    	s1_256: s1_256_1,
    	g0_256: g0_256_1,
    	g1_256: g1_256_1
    };

    var rotl32$4 = utils$a.rotl32;
    var sum32$6 = utils$a.sum32;
    var sum32_5$4 = utils$a.sum32_5;
    var ft_1$2 = common$7.ft_1;
    var BlockHash$8 = common$8.BlockHash;

    var sha1_K$1 = [
      0x5A827999, 0x6ED9EBA1,
      0x8F1BBCDC, 0xCA62C1D6
    ];

    function SHA1$1() {
      if (!(this instanceof SHA1$1))
        return new SHA1$1();

      BlockHash$8.call(this);
      this.h = [
        0x67452301, 0xefcdab89, 0x98badcfe,
        0x10325476, 0xc3d2e1f0 ];
      this.W = new Array(80);
    }

    utils$a.inherits(SHA1$1, BlockHash$8);
    var _1$1 = SHA1$1;

    SHA1$1.blockSize = 512;
    SHA1$1.outSize = 160;
    SHA1$1.hmacStrength = 80;
    SHA1$1.padLength = 64;

    SHA1$1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];

      for(; i < W.length; i++)
        W[i] = rotl32$4(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];

      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5$4(rotl32$4(a, 5), ft_1$2(s, b, c, d), e, W[i], sha1_K$1[s]);
        e = d;
        d = c;
        c = rotl32$4(b, 30);
        b = a;
        a = t;
      }

      this.h[0] = sum32$6(this.h[0], a);
      this.h[1] = sum32$6(this.h[1], b);
      this.h[2] = sum32$6(this.h[2], c);
      this.h[3] = sum32$6(this.h[3], d);
      this.h[4] = sum32$6(this.h[4], e);
    };

    SHA1$1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$a.toHex32(this.h, 'big');
      else
        return utils$a.split32(this.h, 'big');
    };

    var sum32$5 = utils$a.sum32;
    var sum32_4$4 = utils$a.sum32_4;
    var sum32_5$3 = utils$a.sum32_5;
    var ch32$2 = common$7.ch32;
    var maj32$2 = common$7.maj32;
    var s0_256$2 = common$7.s0_256;
    var s1_256$2 = common$7.s1_256;
    var g0_256$2 = common$7.g0_256;
    var g1_256$2 = common$7.g1_256;

    var BlockHash$7 = common$8.BlockHash;

    var sha256_K$1 = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
      0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
      0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
      0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
      0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];

    function SHA256$2() {
      if (!(this instanceof SHA256$2))
        return new SHA256$2();

      BlockHash$7.call(this);
      this.h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
      ];
      this.k = sha256_K$1;
      this.W = new Array(64);
    }
    utils$a.inherits(SHA256$2, BlockHash$7);
    var _256$1 = SHA256$2;

    SHA256$2.blockSize = 512;
    SHA256$2.outSize = 256;
    SHA256$2.hmacStrength = 192;
    SHA256$2.padLength = 64;

    SHA256$2.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4$4(g1_256$2(W[i - 2]), W[i - 7], g0_256$2(W[i - 15]), W[i - 16]);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];

      minimalisticAssert$1(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5$3(h, s1_256$2(e), ch32$2(e, f, g), this.k[i], W[i]);
        var T2 = sum32$5(s0_256$2(a), maj32$2(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32$5(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32$5(T1, T2);
      }

      this.h[0] = sum32$5(this.h[0], a);
      this.h[1] = sum32$5(this.h[1], b);
      this.h[2] = sum32$5(this.h[2], c);
      this.h[3] = sum32$5(this.h[3], d);
      this.h[4] = sum32$5(this.h[4], e);
      this.h[5] = sum32$5(this.h[5], f);
      this.h[6] = sum32$5(this.h[6], g);
      this.h[7] = sum32$5(this.h[7], h);
    };

    SHA256$2.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$a.toHex32(this.h, 'big');
      else
        return utils$a.split32(this.h, 'big');
    };

    function SHA224$1() {
      if (!(this instanceof SHA224$1))
        return new SHA224$1();

      _256$1.call(this);
      this.h = [
        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
    }
    utils$a.inherits(SHA224$1, _256$1);
    var _224$1 = SHA224$1;

    SHA224$1.blockSize = 512;
    SHA224$1.outSize = 224;
    SHA224$1.hmacStrength = 192;
    SHA224$1.padLength = 64;

    SHA224$1.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex')
        return utils$a.toHex32(this.h.slice(0, 7), 'big');
      else
        return utils$a.split32(this.h.slice(0, 7), 'big');
    };

    var rotr64_hi$2 = utils$a.rotr64_hi;
    var rotr64_lo$2 = utils$a.rotr64_lo;
    var shr64_hi$2 = utils$a.shr64_hi;
    var shr64_lo$2 = utils$a.shr64_lo;
    var sum64$2 = utils$a.sum64;
    var sum64_hi$2 = utils$a.sum64_hi;
    var sum64_lo$2 = utils$a.sum64_lo;
    var sum64_4_hi$2 = utils$a.sum64_4_hi;
    var sum64_4_lo$2 = utils$a.sum64_4_lo;
    var sum64_5_hi$2 = utils$a.sum64_5_hi;
    var sum64_5_lo$2 = utils$a.sum64_5_lo;

    var BlockHash$6 = common$8.BlockHash;

    var sha512_K$1 = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    function SHA512$2() {
      if (!(this instanceof SHA512$2))
        return new SHA512$2();

      BlockHash$6.call(this);
      this.h = [
        0x6a09e667, 0xf3bcc908,
        0xbb67ae85, 0x84caa73b,
        0x3c6ef372, 0xfe94f82b,
        0xa54ff53a, 0x5f1d36f1,
        0x510e527f, 0xade682d1,
        0x9b05688c, 0x2b3e6c1f,
        0x1f83d9ab, 0xfb41bd6b,
        0x5be0cd19, 0x137e2179 ];
      this.k = sha512_K$1;
      this.W = new Array(160);
    }
    utils$a.inherits(SHA512$2, BlockHash$6);
    var _512$1 = SHA512$2;

    SHA512$2.blockSize = 1024;
    SHA512$2.outSize = 512;
    SHA512$2.hmacStrength = 192;
    SHA512$2.padLength = 128;

    SHA512$2.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;

      // 32 x 32bit words
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi$1(W[i - 4], W[i - 3]);  // i - 2
        var c0_lo = g1_512_lo$1(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];  // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi$1(W[i - 30], W[i - 29]);  // i - 15
        var c2_lo = g0_512_lo$1(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];  // i - 16
        var c3_lo = W[i - 31];

        W[i] = sum64_4_hi$2(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo$2(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
      }
    };

    SHA512$2.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);

      var W = this.W;

      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];

      minimalisticAssert$1(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi$1(eh, el);
        var c1_lo = s1_512_lo$1(eh, el);
        var c2_hi = ch64_hi$1(eh, el, fh, fl, gh);
        var c2_lo = ch64_lo$1(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];

        var T1_hi = sum64_5_hi$2(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
        var T1_lo = sum64_5_lo$2(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);

        c0_hi = s0_512_hi$1(ah, al);
        c0_lo = s0_512_lo$1(ah, al);
        c1_hi = maj64_hi$1(ah, al, bh, bl, ch);
        c1_lo = maj64_lo$1(ah, al, bh, bl, ch, cl);

        var T2_hi = sum64_hi$2(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo$2(c0_hi, c0_lo, c1_hi, c1_lo);

        hh = gh;
        hl = gl;

        gh = fh;
        gl = fl;

        fh = eh;
        fl = el;

        eh = sum64_hi$2(dh, dl, T1_hi, T1_lo);
        el = sum64_lo$2(dl, dl, T1_hi, T1_lo);

        dh = ch;
        dl = cl;

        ch = bh;
        cl = bl;

        bh = ah;
        bl = al;

        ah = sum64_hi$2(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo$2(T1_hi, T1_lo, T2_hi, T2_lo);
      }

      sum64$2(this.h, 0, ah, al);
      sum64$2(this.h, 2, bh, bl);
      sum64$2(this.h, 4, ch, cl);
      sum64$2(this.h, 6, dh, dl);
      sum64$2(this.h, 8, eh, el);
      sum64$2(this.h, 10, fh, fl);
      sum64$2(this.h, 12, gh, gl);
      sum64$2(this.h, 14, hh, hl);
    };

    SHA512$2.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$a.toHex32(this.h, 'big');
      else
        return utils$a.split32(this.h, 'big');
    };

    function ch64_hi$1(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ ((~xh) & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function ch64_lo$1(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ ((~xl) & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_hi$1(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_lo$1(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_hi$1(xh, xl) {
      var c0_hi = rotr64_hi$2(xh, xl, 28);
      var c1_hi = rotr64_hi$2(xl, xh, 2);  // 34
      var c2_hi = rotr64_hi$2(xl, xh, 7);  // 39

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_lo$1(xh, xl) {
      var c0_lo = rotr64_lo$2(xh, xl, 28);
      var c1_lo = rotr64_lo$2(xl, xh, 2);  // 34
      var c2_lo = rotr64_lo$2(xl, xh, 7);  // 39

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_hi$1(xh, xl) {
      var c0_hi = rotr64_hi$2(xh, xl, 14);
      var c1_hi = rotr64_hi$2(xh, xl, 18);
      var c2_hi = rotr64_hi$2(xl, xh, 9);  // 41

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_lo$1(xh, xl) {
      var c0_lo = rotr64_lo$2(xh, xl, 14);
      var c1_lo = rotr64_lo$2(xh, xl, 18);
      var c2_lo = rotr64_lo$2(xl, xh, 9);  // 41

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_hi$1(xh, xl) {
      var c0_hi = rotr64_hi$2(xh, xl, 1);
      var c1_hi = rotr64_hi$2(xh, xl, 8);
      var c2_hi = shr64_hi$2(xh, xl, 7);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_lo$1(xh, xl) {
      var c0_lo = rotr64_lo$2(xh, xl, 1);
      var c1_lo = rotr64_lo$2(xh, xl, 8);
      var c2_lo = shr64_lo$2(xh, xl, 7);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_hi$1(xh, xl) {
      var c0_hi = rotr64_hi$2(xh, xl, 19);
      var c1_hi = rotr64_hi$2(xl, xh, 29);  // 61
      var c2_hi = shr64_hi$2(xh, xl, 6);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_lo$1(xh, xl) {
      var c0_lo = rotr64_lo$2(xh, xl, 19);
      var c1_lo = rotr64_lo$2(xl, xh, 29);  // 61
      var c2_lo = shr64_lo$2(xh, xl, 6);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function SHA384$1() {
      if (!(this instanceof SHA384$1))
        return new SHA384$1();

      _512$1.call(this);
      this.h = [
        0xcbbb9d5d, 0xc1059ed8,
        0x629a292a, 0x367cd507,
        0x9159015a, 0x3070dd17,
        0x152fecd8, 0xf70e5939,
        0x67332667, 0xffc00b31,
        0x8eb44a87, 0x68581511,
        0xdb0c2e0d, 0x64f98fa7,
        0x47b5481d, 0xbefa4fa4 ];
    }
    utils$a.inherits(SHA384$1, _512$1);
    var _384$1 = SHA384$1;

    SHA384$1.blockSize = 1024;
    SHA384$1.outSize = 384;
    SHA384$1.hmacStrength = 192;
    SHA384$1.padLength = 128;

    SHA384$1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$a.toHex32(this.h.slice(0, 12), 'big');
      else
        return utils$a.split32(this.h.slice(0, 12), 'big');
    };

    var sha1 = _1$1;
    var sha224 = _224$1;
    var sha256$2 = _256$1;
    var sha384 = _384$1;
    var sha512 = _512$1;

    var sha$1 = {
    	sha1: sha1,
    	sha224: sha224,
    	sha256: sha256$2,
    	sha384: sha384,
    	sha512: sha512
    };

    var rotl32$3 = utils$a.rotl32;
    var sum32$4 = utils$a.sum32;
    var sum32_3$2 = utils$a.sum32_3;
    var sum32_4$3 = utils$a.sum32_4;
    var BlockHash$5 = common$8.BlockHash;

    function RIPEMD160$1() {
      if (!(this instanceof RIPEMD160$1))
        return new RIPEMD160$1();

      BlockHash$5.call(this);

      this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
      this.endian = 'little';
    }
    utils$a.inherits(RIPEMD160$1, BlockHash$5);
    var ripemd160 = RIPEMD160$1;

    RIPEMD160$1.blockSize = 512;
    RIPEMD160$1.outSize = 160;
    RIPEMD160$1.hmacStrength = 192;
    RIPEMD160$1.padLength = 64;

    RIPEMD160$1.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32$4(
          rotl32$3(
            sum32_4$3(A, f$1(j, B, C, D), msg[r$1[j] + start], K$1(j)),
            s$1[j]),
          E);
        A = E;
        E = D;
        D = rotl32$3(C, 10);
        C = B;
        B = T;
        T = sum32$4(
          rotl32$3(
            sum32_4$3(Ah, f$1(79 - j, Bh, Ch, Dh), msg[rh$1[j] + start], Kh$1(j)),
            sh$1[j]),
          Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32$3(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3$2(this.h[1], C, Dh);
      this.h[1] = sum32_3$2(this.h[2], D, Eh);
      this.h[2] = sum32_3$2(this.h[3], E, Ah);
      this.h[3] = sum32_3$2(this.h[4], A, Bh);
      this.h[4] = sum32_3$2(this.h[0], B, Ch);
      this.h[0] = T;
    };

    RIPEMD160$1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$a.toHex32(this.h, 'little');
      else
        return utils$a.split32(this.h, 'little');
    };

    function f$1(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return (x & y) | ((~x) & z);
      else if (j <= 47)
        return (x | (~y)) ^ z;
      else if (j <= 63)
        return (x & z) | (y & (~z));
      else
        return x ^ (y | (~z));
    }

    function K$1(j) {
      if (j <= 15)
        return 0x00000000;
      else if (j <= 31)
        return 0x5a827999;
      else if (j <= 47)
        return 0x6ed9eba1;
      else if (j <= 63)
        return 0x8f1bbcdc;
      else
        return 0xa953fd4e;
    }

    function Kh$1(j) {
      if (j <= 15)
        return 0x50a28be6;
      else if (j <= 31)
        return 0x5c4dd124;
      else if (j <= 47)
        return 0x6d703ef3;
      else if (j <= 63)
        return 0x7a6d76e9;
      else
        return 0x00000000;
    }

    var r$1 = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];

    var rh$1 = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];

    var s$1 = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];

    var sh$1 = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];

    var ripemd$1 = {
    	ripemd160: ripemd160
    };

    function Hmac$1(hash, key, enc) {
      if (!(this instanceof Hmac$1))
        return new Hmac$1(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;

      this._init(utils$a.toArray(key, enc));
    }
    var hmac$1 = Hmac$1;

    Hmac$1.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      minimalisticAssert$1(key.length <= this.blockSize);

      // Add padding to key
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);

      for (i = 0; i < key.length; i++)
        key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);

      // 0x36 ^ 0x5c = 0x6a
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
    };

    Hmac$1.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };

    Hmac$1.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };

    var hash_1 = createCommonjsModule(function (module, exports) {
    var hash = exports;

    hash.utils = utils$a;
    hash.common = common$8;
    hash.sha = sha$1;
    hash.ripemd = ripemd$1;
    hash.hmac = hmac$1;

    // Proxy hash functions to the main object
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
    });

    var secp256k1 = {
      doubles: {
        step: 4,
        points: [
          [
            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
          ],
          [
            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
          ],
          [
            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
          ],
          [
            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
          ],
          [
            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
          ],
          [
            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
          ],
          [
            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
          ],
          [
            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
          ],
          [
            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
          ],
          [
            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
          ],
          [
            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
          ],
          [
            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
          ],
          [
            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
          ],
          [
            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
          ],
          [
            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
          ],
          [
            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
          ],
          [
            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
          ],
          [
            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
          ],
          [
            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
          ],
          [
            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
          ],
          [
            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
          ],
          [
            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
          ],
          [
            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
          ],
          [
            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
          ],
          [
            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
          ],
          [
            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
          ],
          [
            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
          ],
          [
            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
          ],
          [
            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
          ],
          [
            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
          ],
          [
            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
          ],
          [
            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
          ],
          [
            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
          ],
          [
            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
          ],
          [
            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
          ],
          [
            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
          ],
          [
            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
          ],
          [
            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
          ],
          [
            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
          ],
          [
            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
          ],
          [
            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
          ],
          [
            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
          ],
          [
            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
          ],
          [
            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
          ],
          [
            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
          ],
          [
            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
          ],
          [
            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
          ],
          [
            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
          ],
          [
            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
          ],
          [
            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
          ],
          [
            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
          ],
          [
            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
          ],
          [
            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
          ],
          [
            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
          ],
          [
            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
          ],
          [
            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
          ],
          [
            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
          ],
          [
            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
          ],
          [
            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
          ],
          [
            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
          ],
          [
            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
          ],
          [
            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
          ],
          [
            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
          ],
          [
            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
          ],
          [
            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
          ],
        ],
      },
      naf: {
        wnd: 7,
        points: [
          [
            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
          ],
          [
            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
          ],
          [
            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
          ],
          [
            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
          ],
          [
            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
          ],
          [
            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
          ],
          [
            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
          ],
          [
            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
          ],
          [
            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
          ],
          [
            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
          ],
          [
            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
          ],
          [
            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
          ],
          [
            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
          ],
          [
            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
          ],
          [
            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
          ],
          [
            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
          ],
          [
            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
          ],
          [
            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
          ],
          [
            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
          ],
          [
            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
          ],
          [
            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
          ],
          [
            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
          ],
          [
            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
          ],
          [
            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
          ],
          [
            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
          ],
          [
            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
          ],
          [
            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
          ],
          [
            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
          ],
          [
            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
          ],
          [
            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
          ],
          [
            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
          ],
          [
            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
          ],
          [
            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
          ],
          [
            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
          ],
          [
            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
          ],
          [
            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
          ],
          [
            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
          ],
          [
            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
          ],
          [
            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
          ],
          [
            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
          ],
          [
            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
          ],
          [
            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
          ],
          [
            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
          ],
          [
            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
          ],
          [
            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
          ],
          [
            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
          ],
          [
            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
          ],
          [
            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
          ],
          [
            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
          ],
          [
            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
          ],
          [
            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
          ],
          [
            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
          ],
          [
            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
          ],
          [
            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
          ],
          [
            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
          ],
          [
            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
          ],
          [
            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
          ],
          [
            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
          ],
          [
            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
          ],
          [
            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
          ],
          [
            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
          ],
          [
            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
          ],
          [
            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
          ],
          [
            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
          ],
          [
            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
          ],
          [
            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
          ],
          [
            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
          ],
          [
            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
          ],
          [
            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
          ],
          [
            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
          ],
          [
            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
          ],
          [
            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
          ],
          [
            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
          ],
          [
            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
          ],
          [
            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
          ],
          [
            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
          ],
          [
            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
          ],
          [
            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
          ],
          [
            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
          ],
          [
            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
          ],
          [
            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
          ],
          [
            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
          ],
          [
            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
          ],
          [
            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
          ],
          [
            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
          ],
          [
            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
          ],
          [
            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
          ],
          [
            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
          ],
          [
            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
          ],
          [
            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
          ],
          [
            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
          ],
          [
            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
          ],
          [
            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
          ],
          [
            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
          ],
          [
            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
          ],
          [
            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
          ],
          [
            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
          ],
          [
            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
          ],
          [
            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
          ],
          [
            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
          ],
          [
            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
          ],
          [
            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
          ],
          [
            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
          ],
          [
            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
          ],
          [
            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
          ],
          [
            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
          ],
          [
            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
          ],
          [
            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
          ],
          [
            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
          ],
          [
            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
          ],
          [
            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
          ],
          [
            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
          ],
          [
            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
          ],
          [
            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
          ],
          [
            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
          ],
          [
            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
          ],
          [
            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
          ],
          [
            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
          ],
          [
            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
          ],
          [
            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
          ],
          [
            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
          ],
          [
            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
          ],
          [
            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
          ],
          [
            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
          ],
          [
            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
          ],
          [
            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
          ],
          [
            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
          ],
        ],
      },
    };

    var curves_1 = createCommonjsModule(function (module, exports) {

    var curves = exports;





    var assert = utils_1.assert;

    function PresetCurve(options) {
      if (options.type === 'short')
        this.curve = new curve_1.short(options);
      else if (options.type === 'edwards')
        this.curve = new curve_1.edwards(options);
      else
        this.curve = new curve_1.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;

      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    }
    curves.PresetCurve = PresetCurve;

    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve,
          });
          return curve;
        },
      });
    }

    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
      ],
    });

    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
      ],
    });

    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
      ],
    });

    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
         '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
         'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash_1.sha384,
      gRed: false,
      g: [
        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
        '5502f25d bf55296c 3a545e38 72760ab7',
        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
        '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
      ],
    });

    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
         '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
         '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
         'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash_1.sha512,
      gRed: false,
      g: [
        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
        '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
        'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
        '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
        '3fad0761 353c7086 a272c240 88be9476 9fd16650',
      ],
    });

    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '1',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        '9',
      ],
    });

    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      // -121665 * (121666^(-1)) (mod P)
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658',
      ],
    });

    var pre;
    try {
      pre = secp256k1;
    } catch (e) {
      pre = undefined;
    }

    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash_1.sha256,

      // Precomputed endomorphism
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [
        {
          a: '3086d221a7d46bcde86c90e49284eb15',
          b: '-e4437ed6010e88286f547fa90abfe4c3',
        },
        {
          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
          b: '3086d221a7d46bcde86c90e49284eb15',
        },
      ],

      gRed: false,
      g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre,
      ],
    });
    });

    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;

      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;

      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;

      var entropy = utils_1$1.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils_1$1.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils_1$1.toArray(options.pers, options.persEnc || 'hex');
      minimalisticAssert$1(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
    }
    var hmacDrbg = HmacDRBG;

    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);

      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }

      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000;  // 2^48
    };

    HmacDRBG.prototype._hmac = function hmac() {
      return new hash_1.hmac(this.hash, this.K);
    };

    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac()
                     .update(this.V)
                     .update([ 0x00 ]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;

      this.K = this._hmac()
                   .update(this.V)
                   .update([ 0x01 ])
                   .update(seed)
                   .digest();
      this.V = this._hmac().update(this.V).digest();
    };

    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }

      entropy = utils_1$1.toArray(entropy, entropyEnc);
      add = utils_1$1.toArray(add, addEnc);

      minimalisticAssert$1(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };

    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');

      // Optional encoding
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }

      // Optional additional data
      if (add) {
        add = utils_1$1.toArray(add, addEnc || 'hex');
        this._update(add);
      }

      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }

      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils_1$1.encode(res, enc);
    };

    var assert$d = utils_1.assert;

    function KeyPair$1(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;

      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    var key$1 = KeyPair$1;

    KeyPair$1.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair$1)
        return pub;

      return new KeyPair$1(ec, {
        pub: pub,
        pubEnc: enc,
      });
    };

    KeyPair$1.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair$1)
        return priv;

      return new KeyPair$1(ec, {
        priv: priv,
        privEnc: enc,
      });
    };

    KeyPair$1.prototype.validate = function validate() {
      var pub = this.getPublic();

      if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
      if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };

      return { result: true, reason: null };
    };

    KeyPair$1.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }

      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);

      if (!enc)
        return this.pub;

      return this.pub.encode(enc, compact);
    };

    KeyPair$1.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex')
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };

    KeyPair$1.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new bn(key, enc || 16);

      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
    };

    KeyPair$1.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
          assert$d(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' ||
                   this.ec.curve.type === 'edwards') {
          assert$d(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };

    // ECDH
    KeyPair$1.prototype.derive = function derive(pub) {
      if(!pub.validate()) {
        assert$d(pub.validate(), 'public point not validated');
      }
      return pub.mul(this.priv).getX();
    };

    // ECDSA
    KeyPair$1.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };

    KeyPair$1.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };

    KeyPair$1.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
             ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };

    var assert$c = utils_1.assert;

    function Signature$1(options, enc) {
      if (options instanceof Signature$1)
        return options;

      if (this._importDER(options, enc))
        return;

      assert$c(options.r && options.s, 'Signature without r or s');
      this.r = new bn(options.r, 16);
      this.s = new bn(options.s, 16);
      if (options.recoveryParam === undefined)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    var signature$1 = Signature$1;

    function Position() {
      this.place = 0;
    }

    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
        return initial;
      }
      var octetLen = initial & 0xf;

      // Indefinite length or overflow
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }

      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }

      // Leading zeroes
      if (val <= 0x7f) {
        return false;
      }

      p.place = off;
      return val;
    }

    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }

    Signature$1.prototype._importDER = function _importDER(data, enc) {
      data = utils_1.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if ((len + p.place) !== data.length) {
        return false;
      }
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 0x80) {
          r = r.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 0x80) {
          s = s.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }

      this.r = new bn(r);
      this.s = new bn(s);
      this.recoveryParam = null;

      return true;
    };

    function constructLength(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push((len >>> (octets << 3)) & 0xff);
      }
      arr.push(len);
    }

    Signature$1.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();

      // Pad values
      if (r[0] & 0x80)
        r = [ 0 ].concat(r);
      // Pad values
      if (s[0] & 0x80)
        s = [ 0 ].concat(s);

      r = rmPadding(r);
      s = rmPadding(s);

      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [ 0x02 ];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [ 0x30 ];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils_1.encode(res, enc);
    };

    var assert$b = utils_1.assert;




    function EC$1(options) {
      if (!(this instanceof EC$1))
        return new EC$1(options);

      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === 'string') {
        assert$b(Object.prototype.hasOwnProperty.call(curves_1, options),
          'Unknown curve ' + options);

        options = curves_1[options];
      }

      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof curves_1.PresetCurve)
        options = { curve: options };

      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;

      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);

      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
    }
    var ec$1 = EC$1;

    EC$1.prototype.keyPair = function keyPair(options) {
      return new key$1(this, options);
    };

    EC$1.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return key$1.fromPrivate(this, priv, enc);
    };

    EC$1.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return key$1.fromPublic(this, pub, enc);
    };

    EC$1.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || brorand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray(),
      });

      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new bn(2));
      for (;;) {
        var priv = new bn(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;

        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };

    EC$1.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };

    EC$1.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};

      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new bn(msg, 16));

      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);

      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray('be', bytes);

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
      });

      // Number of bytes to generate
      var ns1 = this.n.sub(new bn(1));

      for (var iter = 0; ; iter++) {
        var k = options.k ?
          options.k(iter) :
          new bn(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;

        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;

        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;

        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;

        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                            (kpX.cmp(r) !== 0 ? 2 : 0);

        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }

        return new signature$1({ r: r, s: s, recoveryParam: recoveryParam });
      }
    };

    EC$1.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new bn(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new signature$1(signature, 'hex');

      // Perform primitive values validation
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;

      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;

      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;

        return p.getX().umod(this.n).cmp(r) === 0;
      }

      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K

      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;

      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
    };

    EC$1.prototype.recoverPubKey = function(msg, signature, j, enc) {
      assert$b((3 & j) === j, 'The recovery param is more than two bits');
      signature = new signature$1(signature, enc);

      var n = this.n;
      var e = new bn(msg);
      var r = signature.r;
      var s = signature.s;

      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');

      // 1.1. Let x = r + jn.
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);

      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);

      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
    };

    EC$1.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
      signature = new signature$1(signature, enc);
      if (signature.recoveryParam !== null)
        return signature.recoveryParam;

      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
          continue;
        }

        if (Qprime.eq(Q))
          return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };

    var assert$a = utils_1.assert;
    var parseBytes$2 = utils_1.parseBytes;
    var cachedProperty$1 = utils_1.cachedProperty;

    /**
    * @param {EDDSA} eddsa - instance
    * @param {Object} params - public/private key parameters
    *
    * @param {Array<Byte>} [params.secret] - secret seed bytes
    * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
    * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
    *
    */
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes$2(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes$2(params.pub);
    }

    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(eddsa, { pub: pub });
    };

    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair)
        return secret;
      return new KeyPair(eddsa, { secret: secret });
    };

    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };

    cachedProperty$1(KeyPair, 'pubBytes', function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });

    cachedProperty$1(KeyPair, 'pub', function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });

    cachedProperty$1(KeyPair, 'privBytes', function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;

      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;

      return a;
    });

    cachedProperty$1(KeyPair, 'priv', function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });

    cachedProperty$1(KeyPair, 'hash', function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });

    cachedProperty$1(KeyPair, 'messagePrefix', function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });

    KeyPair.prototype.sign = function sign(message) {
      assert$a(this._secret, 'KeyPair can only verify');
      return this.eddsa.sign(message, this);
    };

    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };

    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert$a(this._secret, 'KeyPair is public only');
      return utils_1.encode(this.secret(), enc);
    };

    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils_1.encode(this.pubBytes(), enc);
    };

    var key = KeyPair;

    var assert$9 = utils_1.assert;
    var cachedProperty = utils_1.cachedProperty;
    var parseBytes$1 = utils_1.parseBytes;

    /**
    * @param {EDDSA} eddsa - eddsa instance
    * @param {Array<Bytes>|Object} sig -
    * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
    * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
    * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
    * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
    */
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;

      if (typeof sig !== 'object')
        sig = parseBytes$1(sig);

      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength),
        };
      }

      assert$9(sig.R && sig.S, 'Signature without R or S');

      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof bn)
        this._S = sig.S;

      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }

    cachedProperty(Signature, 'S', function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });

    cachedProperty(Signature, 'R', function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });

    cachedProperty(Signature, 'Rencoded', function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });

    cachedProperty(Signature, 'Sencoded', function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });

    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };

    Signature.prototype.toHex = function toHex() {
      return utils_1.encode(this.toBytes(), 'hex').toUpperCase();
    };

    var signature = Signature;

    var assert$8 = utils_1.assert;
    var parseBytes = utils_1.parseBytes;



    function EDDSA(curve) {
      assert$8(curve === 'ed25519', 'only tested with ed25519 so far');

      if (!(this instanceof EDDSA))
        return new EDDSA(curve);

      curve = curves_1[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);

      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash_1.sha512;
    }

    var eddsa = EDDSA;

    /**
    * @param {Array|String} message - message bytes
    * @param {Array|String|KeyPair} secret - secret bytes or a keypair
    * @returns {Signature} - signature
    */
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
        .mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
    };

    /**
    * @param {Array} message - message bytes
    * @param {Array|String|Signature} sig - sig bytes
    * @param {Array|String|Point|KeyPair} pub - public key
    * @returns {Boolean} - true if public key matches sig of message
    */
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };

    EDDSA.prototype.hashInt = function hashInt() {
      var hash = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash.update(arguments[i]);
      return utils_1.intFromLE(hash.digest()).umod(this.curve.n);
    };

    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return key.fromPublic(this, pub);
    };

    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return key.fromSecret(this, secret);
    };

    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof signature)
        return sig;
      return new signature(this, sig);
    };

    /**
    * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
    *
    * EDDSA defines methods for encoding and decoding points and integers. These are
    * helper convenience methods, that pass along to utility functions implied
    * parameters.
    *
    */
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray('le', this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
      return enc;
    };

    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils_1.parseBytes(bytes);

      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
      var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

      var y = utils_1.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };

    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray('le', this.encodingLength);
    };

    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils_1.intFromLE(bytes);
    };

    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };

    var elliptic_1 = createCommonjsModule(function (module, exports) {

    var elliptic = exports;

    elliptic.version = require$$0$1.version;
    elliptic.utils = utils_1;
    elliptic.rand = brorand;
    elliptic.curve = curve_1;
    elliptic.curves = curves_1;

    // Protocols
    elliptic.ec = ec$1;
    elliptic.eddsa = eddsa;
    });

    const EC = elliptic_1.ec;

    const ec = new EC('secp256k1');
    const ecparams = ec.curve;

    // Hack, we can not use bn.js@5, while elliptic uses bn.js@4
    // See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
    const BN = ecparams.n.constructor;

    function loadCompressedPublicKey (first, xbuf) {
      let x = new BN(xbuf);

      // overflow
      if (x.cmp(ecparams.p) >= 0) return null
      x = x.toRed(ecparams.red);

      // compute corresponding Y
      let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
      if ((first === 0x03) !== y.isOdd()) y = y.redNeg();

      return ec.keyPair({ pub: { x: x, y: y } })
    }

    function loadUncompressedPublicKey (first, xbuf, ybuf) {
      let x = new BN(xbuf);
      let y = new BN(ybuf);

      // overflow
      if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

      x = x.toRed(ecparams.red);
      y = y.toRed(ecparams.red);

      // is odd flag
      if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

      // x*x*x + b = y*y
      const x3 = x.redSqr().redIMul(x);
      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

      return ec.keyPair({ pub: { x: x, y: y } })
    }

    function loadPublicKey (pubkey) {
      // length should be validated in interface
      const first = pubkey[0];
      switch (first) {
        case 0x02:
        case 0x03:
          if (pubkey.length !== 33) return null
          return loadCompressedPublicKey(first, pubkey.subarray(1, 33))
        case 0x04:
        case 0x06:
        case 0x07:
          if (pubkey.length !== 65) return null
          return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))
        default:
          return null
      }
    }

    function savePublicKey (output, point) {
      const pubkey = point.encode(null, output.length === 33);
      // Loop should be faster because we do not need create extra Uint8Array
      // output.set(new Uint8Array(pubkey))
      for (let i = 0; i < output.length; ++i) output[i] = pubkey[i];
    }

    var elliptic$1 = {
      contextRandomize () {
        return 0
      },

      privateKeyVerify (seckey) {
        const bn = new BN(seckey);
        return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1
      },

      privateKeyNegate (seckey) {
        const bn = new BN(seckey);
        const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32);
        seckey.set(negate);
        return 0
      },

      privateKeyTweakAdd (seckey, tweak) {
        const bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0) return 1

        bn.iadd(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
        if (bn.isZero()) return 1

        const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
        seckey.set(tweaked);

        return 0
      },

      privateKeyTweakMul (seckey, tweak) {
        let bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

        bn.imul(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);

        const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
        seckey.set(tweaked);

        return 0
      },

      publicKeyVerify (pubkey) {
        const pair = loadPublicKey(pubkey);
        return pair === null ? 1 : 0
      },

      publicKeyCreate (output, seckey) {
        const bn = new BN(seckey);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

        const point = ec.keyFromPrivate(seckey).getPublic();
        savePublicKey(output, point);

        return 0
      },

      publicKeyConvert (output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        const point = pair.getPublic();
        savePublicKey(output, point);

        return 0
      },

      publicKeyNegate (output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        const point = pair.getPublic();
        point.y = point.y.redNeg();
        savePublicKey(output, point);

        return 0
      },

      publicKeyCombine (output, pubkeys) {
        const pairs = new Array(pubkeys.length);
        for (let i = 0; i < pubkeys.length; ++i) {
          pairs[i] = loadPublicKey(pubkeys[i]);
          if (pairs[i] === null) return 1
        }

        let point = pairs[0].getPublic();
        for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub);
        if (point.isInfinity()) return 2

        savePublicKey(output, point);

        return 0
      },

      publicKeyTweakAdd (output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0) return 2

        const point = pair.getPublic().add(ecparams.g.mul(tweak));
        if (point.isInfinity()) return 2

        savePublicKey(output, point);

        return 0
      },

      publicKeyTweakMul (output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2

        const point = pair.getPublic().mul(tweak);
        savePublicKey(output, point);

        return 0
      },

      signatureNormalize (sig) {
        const r = new BN(sig.subarray(0, 32));
        const s = new BN(sig.subarray(32, 64));
        if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1

        if (s.cmp(ec.nh) === 1) {
          sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32);
        }

        return 0
      },

      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureExport (obj, sig) {
        const sigR = sig.subarray(0, 32);
        const sigS = sig.subarray(32, 64);
        if (new BN(sigR).cmp(ecparams.n) >= 0) return 1
        if (new BN(sigS).cmp(ecparams.n) >= 0) return 1

        const { output } = obj;

        // Prepare R
        let r = output.subarray(4, 4 + 33);
        r[0] = 0x00;
        r.set(sigR, 1);

        let lenR = 33;
        let posR = 0;
        for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

        r = r.subarray(posR);
        if (r[0] & 0x80) return 1
        if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1

        // Prepare S
        let s = output.subarray(6 + 33, 6 + 33 + 33);
        s[0] = 0x00;
        s.set(sigS, 1);

        let lenS = 33;
        let posS = 0;
        for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

        s = s.subarray(posS);
        if (s[0] & 0x80) return 1
        if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1

        // Set output length for return
        obj.outputlen = 6 + lenR + lenS;

        // Output in specified format
        // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
        output[0] = 0x30;
        output[1] = obj.outputlen - 2;
        output[2] = 0x02;
        output[3] = r.length;
        output.set(r, 4);
        output[4 + lenR] = 0x02;
        output[5 + lenR] = s.length;
        output.set(s, 6 + lenR);

        return 0
      },

      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureImport (output, sig) {
        if (sig.length < 8) return 1
        if (sig.length > 72) return 1
        if (sig[0] !== 0x30) return 1
        if (sig[1] !== sig.length - 2) return 1
        if (sig[2] !== 0x02) return 1

        const lenR = sig[3];
        if (lenR === 0) return 1
        if (5 + lenR >= sig.length) return 1
        if (sig[4 + lenR] !== 0x02) return 1

        const lenS = sig[5 + lenR];
        if (lenS === 0) return 1
        if ((6 + lenR + lenS) !== sig.length) return 1

        if (sig[4] & 0x80) return 1
        if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1

        if (sig[lenR + 6] & 0x80) return 1
        if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1

        let sigR = sig.subarray(4, 4 + lenR);
        if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1);
        if (sigR.length > 32) return 1

        let sigS = sig.subarray(6 + lenR);
        if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1);
        if (sigS.length > 32) throw new Error('S length is too long')

        let r = new BN(sigR);
        if (r.cmp(ecparams.n) >= 0) r = new BN(0);

        let s = new BN(sig.subarray(6 + lenR));
        if (s.cmp(ecparams.n) >= 0) s = new BN(0);

        output.set(r.toArrayLike(Uint8Array, 'be', 32), 0);
        output.set(s.toArrayLike(Uint8Array, 'be', 32), 32);

        return 0
      },

      ecdsaSign (obj, message, seckey, data, noncefn) {
        if (noncefn) {
          const _noncefn = noncefn;
          noncefn = (counter) => {
            const nonce = _noncefn(message, seckey, null, data, counter);

            const isValid = nonce instanceof Uint8Array && nonce.length === 32;
            if (!isValid) throw new Error('This is the way')

            return new BN(nonce)
          };
        }

        const d = new BN(seckey);
        if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1

        let sig;
        try {
          sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data });
        } catch (err) {
          return 1
        }

        obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0);
        obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32);
        obj.recid = sig.recoveryParam;

        return 0
      },

      ecdsaVerify (sig, msg32, pubkey) {
        const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };

        const sigr = new BN(sigObj.r);
        const sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1
        if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3

        const pair = loadPublicKey(pubkey);
        if (pair === null) return 2

        const point = pair.getPublic();
        const isValid = ec.verify(msg32, sigObj, point);
        return isValid ? 0 : 3
      },

      ecdsaRecover (output, sig, recid, msg32) {
        const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };

        const sigr = new BN(sigObj.r);
        const sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1

        if (sigr.isZero() || sigs.isZero()) return 2

        // Can throw `throw new Error('Unable to find sencond key candinate');`
        let point;
        try {
          point = ec.recoverPubKey(msg32, sigObj, recid);
        } catch (err) {
          return 2
        }

        savePublicKey(output, point);

        return 0
      },

      ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        const scalar = new BN(seckey);
        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2

        const point = pair.getPublic().mul(scalar);

        if (hashfn === undefined) {
          const data = point.encode(null, true);
          const sha256 = ec.hash().update(data).digest();
          for (let i = 0; i < 32; ++i) output[i] = sha256[i];
        } else {
          if (!xbuf) xbuf = new Uint8Array(32);
          const x = point.getX().toArray('be', 32);
          for (let i = 0; i < 32; ++i) xbuf[i] = x[i];

          if (!ybuf) ybuf = new Uint8Array(32);
          const y = point.getY().toArray('be', 32);
          for (let i = 0; i < 32; ++i) ybuf[i] = y[i];

          const hash = hashfn(xbuf, ybuf, data);

          const isValid = hash instanceof Uint8Array && hash.length === output.length;
          if (!isValid) return 2

          output.set(hash);
        }

        return 0
      }
    };

    var elliptic = lib$2(elliptic$1);

    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global$2.setTimeout === 'function') {
        cachedSetTimeout = setTimeout;
    }
    if (typeof global$2.clearTimeout === 'function') {
        cachedClearTimeout = clearTimeout;
    }

    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item$1(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    }
    // v8 likes predictible objects
    function Item$1(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item$1.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title = 'browser';
    var platform = 'browser';
    var browser = true;
    var env = {};
    var argv = [];
    var version$3 = ''; // empty string to avoid regexp issues
    var versions = {};
    var release = {};
    var config = {};

    function noop() {}

    var on = noop;
    var addListener = noop;
    var once = noop;
    var off = noop;
    var removeListener = noop;
    var removeAllListeners = noop;
    var emit = noop;

    function binding(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd () { return '/' }
    function chdir (dir) {
        throw new Error('process.chdir is not supported');
    }function umask() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance = global$2.performance || {};
    var performanceNow =
      performance.now        ||
      performance.mozNow     ||
      performance.msNow      ||
      performance.oNow       ||
      performance.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime(previousTimestamp){
      var clocktime = performanceNow.call(performance)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime = new Date();
    function uptime() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1000;
    }

    var process = {
      nextTick: nextTick,
      title: title,
      browser: browser,
      env: env,
      argv: argv,
      version: version$3,
      versions: versions,
      on: on,
      addListener: addListener,
      once: once,
      off: off,
      removeListener: removeListener,
      removeAllListeners: removeAllListeners,
      emit: emit,
      binding: binding,
      cwd: cwd,
      chdir: chdir,
      umask: umask,
      hrtime: hrtime,
      platform: platform,
      release: release,
      config: config,
      uptime: uptime
    };

    var sha3 = createCommonjsModule(function (module) {
    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.8.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2018
     * @license MIT
     */
    /*jslint bitwise: true */
    (function () {

      var INPUT_ERROR = 'input is invalid type';
      var FINALIZE_ERROR = 'finalize already called';
      var WINDOW = typeof window === 'object';
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === 'object';
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal$1;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
      var HEX_CHARS = '0123456789abcdef'.split('');
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
        0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
        2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
        2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
        2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
      var CSHAKE_BYTEPAD = {
        '128': 168,
        '256': 136
      };

      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function (obj) {
          return Object.prototype.toString.call(obj) === '[object Array]';
        };
      }

      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function (obj) {
          return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }

      var createOutputMethod = function (bits, padding, outputType) {
        return function (message) {
          return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
      };

      var createShakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits) {
          return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
      };

      var createCshakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits, n, s) {
          return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
        };
      };

      var createKmacOutputMethod = function (bits, padding, outputType) {
        return function (key, message, outputBits, s) {
          return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
        };
      };

      var createOutputMethods = function (method, createMethod, bits, padding) {
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createMethod(bits, padding, type);
        }
        return method;
      };

      var createMethod = function (bits, padding) {
        var method = createOutputMethod(bits, padding, 'hex');
        method.create = function () {
          return new Keccak(bits, padding, bits);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits, padding);
      };

      var createShakeMethod = function (bits, padding) {
        var method = createShakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits) {
          return new Keccak(bits, padding, outputBits);
        };
        method.update = function (message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits, padding);
      };

      var createCshakeMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createCshakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits, n, s) {
          if (!n && !s) {
            return methods['shake' + bits].create(outputBits);
          } else {
            return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function (message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
      };

      var createKmacMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createKmacOutputMethod(bits, padding, 'hex');
        method.create = function (key, outputBits, s) {
          return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
        };
        method.update = function (key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits, padding);
      };

      var algorithms = [
        { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
        { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
        { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];

      var methods = {}, methodNames = [];

      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + '_' + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== 'sha3') {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }

      function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = (1600 - (bits << 1)) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;

        for (var i = 0; i < 50; ++i) {
          this.s[i] = 0;
        }
      }

      Keccak.prototype.update = function (message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== 'string') {
          if (type === 'object') {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
          blockCount = this.blockCount, index = 0, s = this.s, i, code;

        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (notString) {
            for (i = this.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          if (i >= byteCount) {
            this.start = i - byteCount;
            this.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i;
          }
        }
        return this;
      };

      Keccak.prototype.encode = function (x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };

      Keccak.prototype.encodeString = function (str) {
        var notString, type = typeof str;
        if (type !== 'string') {
          if (type === 'object') {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i = 0; i < str.length; ++i) {
            var code = str.charCodeAt(i);
            if (code < 0x80) {
              bytes += 1;
            } else if (code < 0x800) {
              bytes += 2;
            } else if (code < 0xd800 || code >= 0xe000) {
              bytes += 3;
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };

      Keccak.prototype.bytepad = function (strs, w) {
        var bytes = this.encode(w);
        for (var i = 0; i < strs.length; ++i) {
          bytes += this.encodeString(strs[i]);
        }
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };

      Keccak.prototype.finalize = function () {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
      };

      Keccak.prototype.toString = Keccak.prototype.hex = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = '', block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
              HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
              HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
              HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        if (extraBytes) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
          if (extraBytes > 1) {
            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
          }
        }
        return hex;
      };

      Keccak.prototype.arrayBuffer = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer((outputBlocks + 1) << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            array[j] = s[i];
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i] = s[i];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };

      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

      Keccak.prototype.digest = Keccak.prototype.array = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            array[offset + 1] = (block >> 8) & 0xFF;
            array[offset + 2] = (block >> 16) & 0xFF;
            array[offset + 3] = (block >> 24) & 0xFF;
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          if (extraBytes > 1) {
            array[offset + 1] = (block >> 8) & 0xFF;
          }
          if (extraBytes > 2) {
            array[offset + 2] = (block >> 16) & 0xFF;
          }
        }
        return array;
      };

      function Kmac(bits, padding, outputBits) {
        Keccak.call(this, bits, padding, outputBits);
      }

      Kmac.prototype = new Keccak();

      Kmac.prototype.finalize = function () {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };

      var f = function (s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
          b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
          b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
          b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

          h = c8 ^ ((c2 << 1) | (c3 >>> 31));
          l = c9 ^ ((c3 << 1) | (c2 >>> 31));
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ ((c4 << 1) | (c5 >>> 31));
          l = c1 ^ ((c5 << 1) | (c4 >>> 31));
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ ((c6 << 1) | (c7 >>> 31));
          l = c3 ^ ((c7 << 1) | (c6 >>> 31));
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ ((c8 << 1) | (c9 >>> 31));
          l = c5 ^ ((c9 << 1) | (c8 >>> 31));
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ ((c0 << 1) | (c1 >>> 31));
          l = c7 ^ ((c1 << 1) | (c0 >>> 31));
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;

          b0 = s[0];
          b1 = s[1];
          b32 = (s[11] << 4) | (s[10] >>> 28);
          b33 = (s[10] << 4) | (s[11] >>> 28);
          b14 = (s[20] << 3) | (s[21] >>> 29);
          b15 = (s[21] << 3) | (s[20] >>> 29);
          b46 = (s[31] << 9) | (s[30] >>> 23);
          b47 = (s[30] << 9) | (s[31] >>> 23);
          b28 = (s[40] << 18) | (s[41] >>> 14);
          b29 = (s[41] << 18) | (s[40] >>> 14);
          b20 = (s[2] << 1) | (s[3] >>> 31);
          b21 = (s[3] << 1) | (s[2] >>> 31);
          b2 = (s[13] << 12) | (s[12] >>> 20);
          b3 = (s[12] << 12) | (s[13] >>> 20);
          b34 = (s[22] << 10) | (s[23] >>> 22);
          b35 = (s[23] << 10) | (s[22] >>> 22);
          b16 = (s[33] << 13) | (s[32] >>> 19);
          b17 = (s[32] << 13) | (s[33] >>> 19);
          b48 = (s[42] << 2) | (s[43] >>> 30);
          b49 = (s[43] << 2) | (s[42] >>> 30);
          b40 = (s[5] << 30) | (s[4] >>> 2);
          b41 = (s[4] << 30) | (s[5] >>> 2);
          b22 = (s[14] << 6) | (s[15] >>> 26);
          b23 = (s[15] << 6) | (s[14] >>> 26);
          b4 = (s[25] << 11) | (s[24] >>> 21);
          b5 = (s[24] << 11) | (s[25] >>> 21);
          b36 = (s[34] << 15) | (s[35] >>> 17);
          b37 = (s[35] << 15) | (s[34] >>> 17);
          b18 = (s[45] << 29) | (s[44] >>> 3);
          b19 = (s[44] << 29) | (s[45] >>> 3);
          b10 = (s[6] << 28) | (s[7] >>> 4);
          b11 = (s[7] << 28) | (s[6] >>> 4);
          b42 = (s[17] << 23) | (s[16] >>> 9);
          b43 = (s[16] << 23) | (s[17] >>> 9);
          b24 = (s[26] << 25) | (s[27] >>> 7);
          b25 = (s[27] << 25) | (s[26] >>> 7);
          b6 = (s[36] << 21) | (s[37] >>> 11);
          b7 = (s[37] << 21) | (s[36] >>> 11);
          b38 = (s[47] << 24) | (s[46] >>> 8);
          b39 = (s[46] << 24) | (s[47] >>> 8);
          b30 = (s[8] << 27) | (s[9] >>> 5);
          b31 = (s[9] << 27) | (s[8] >>> 5);
          b12 = (s[18] << 20) | (s[19] >>> 12);
          b13 = (s[19] << 20) | (s[18] >>> 12);
          b44 = (s[29] << 7) | (s[28] >>> 25);
          b45 = (s[28] << 7) | (s[29] >>> 25);
          b26 = (s[38] << 8) | (s[39] >>> 24);
          b27 = (s[39] << 8) | (s[38] >>> 24);
          b8 = (s[48] << 14) | (s[49] >>> 18);
          b9 = (s[49] << 14) | (s[48] >>> 18);

          s[0] = b0 ^ (~b2 & b4);
          s[1] = b1 ^ (~b3 & b5);
          s[10] = b10 ^ (~b12 & b14);
          s[11] = b11 ^ (~b13 & b15);
          s[20] = b20 ^ (~b22 & b24);
          s[21] = b21 ^ (~b23 & b25);
          s[30] = b30 ^ (~b32 & b34);
          s[31] = b31 ^ (~b33 & b35);
          s[40] = b40 ^ (~b42 & b44);
          s[41] = b41 ^ (~b43 & b45);
          s[2] = b2 ^ (~b4 & b6);
          s[3] = b3 ^ (~b5 & b7);
          s[12] = b12 ^ (~b14 & b16);
          s[13] = b13 ^ (~b15 & b17);
          s[22] = b22 ^ (~b24 & b26);
          s[23] = b23 ^ (~b25 & b27);
          s[32] = b32 ^ (~b34 & b36);
          s[33] = b33 ^ (~b35 & b37);
          s[42] = b42 ^ (~b44 & b46);
          s[43] = b43 ^ (~b45 & b47);
          s[4] = b4 ^ (~b6 & b8);
          s[5] = b5 ^ (~b7 & b9);
          s[14] = b14 ^ (~b16 & b18);
          s[15] = b15 ^ (~b17 & b19);
          s[24] = b24 ^ (~b26 & b28);
          s[25] = b25 ^ (~b27 & b29);
          s[34] = b34 ^ (~b36 & b38);
          s[35] = b35 ^ (~b37 & b39);
          s[44] = b44 ^ (~b46 & b48);
          s[45] = b45 ^ (~b47 & b49);
          s[6] = b6 ^ (~b8 & b0);
          s[7] = b7 ^ (~b9 & b1);
          s[16] = b16 ^ (~b18 & b10);
          s[17] = b17 ^ (~b19 & b11);
          s[26] = b26 ^ (~b28 & b20);
          s[27] = b27 ^ (~b29 & b21);
          s[36] = b36 ^ (~b38 & b30);
          s[37] = b37 ^ (~b39 & b31);
          s[46] = b46 ^ (~b48 & b40);
          s[47] = b47 ^ (~b49 & b41);
          s[8] = b8 ^ (~b0 & b2);
          s[9] = b9 ^ (~b1 & b3);
          s[18] = b18 ^ (~b10 & b12);
          s[19] = b19 ^ (~b11 & b13);
          s[28] = b28 ^ (~b20 & b22);
          s[29] = b29 ^ (~b21 & b23);
          s[38] = b38 ^ (~b30 & b32);
          s[39] = b39 ^ (~b31 & b33);
          s[48] = b48 ^ (~b40 & b42);
          s[49] = b49 ^ (~b41 & b43);

          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };

      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
    });

    const toBuffer$1 = arr => {
      if (Buffer.isBuffer(arr)) {
        return arr;
      } else if (arr instanceof Uint8Array) {
        return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);
      } else {
        return Buffer.from(arr);
      }
    };

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global$2 !== 'undefined' ? global$2 : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    var hash$1 = {};

    var utils$9 = {};

    var minimalisticAssert = assert$6;

    function assert$6(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert$6.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

    var inherits_browser = {exports: {}};

    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      inherits_browser.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      // old school shim for old browsers
      inherits_browser.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }

    var assert$5 = minimalisticAssert;
    var inherits$2 = inherits_browser.exports;

    utils$9.inherits = inherits$2;

    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
    }

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          // Inspired by stringToUtf8ByteArray() in closure-library by Google
          // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
          // Apache License 2.0
          // https://github.com/google/closure-library/blob/master/LICENSE
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = (c >> 6) | 192;
              res[p++] = (c & 63) | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = (c >> 18) | 240;
              res[p++] = ((c >> 12) & 63) | 128;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            } else {
              res[p++] = (c >> 12) | 224;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0)
            msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    utils$9.toArray = toArray;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils$9.toHex = toHex;

    function htonl(w) {
      var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
      return res >>> 0;
    }
    utils$9.htonl = htonl;

    function toHex32(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little')
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    utils$9.toHex32 = toHex32;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    utils$9.zero2 = zero2;

    function zero8(word) {
      if (word.length === 7)
        return '0' + word;
      else if (word.length === 6)
        return '00' + word;
      else if (word.length === 5)
        return '000' + word;
      else if (word.length === 4)
        return '0000' + word;
      else if (word.length === 3)
        return '00000' + word;
      else if (word.length === 2)
        return '000000' + word;
      else if (word.length === 1)
        return '0000000' + word;
      else
        return word;
    }
    utils$9.zero8 = zero8;

    function join32(msg, start, end, endian) {
      var len = end - start;
      assert$5(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big')
          w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
        else
          w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    utils$9.join32 = join32;

    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = (m >>> 16) & 0xff;
          res[k + 2] = (m >>> 8) & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = (m >>> 16) & 0xff;
          res[k + 1] = (m >>> 8) & 0xff;
          res[k] = m & 0xff;
        }
      }
      return res;
    }
    utils$9.split32 = split32;

    function rotr32$1(w, b) {
      return (w >>> b) | (w << (32 - b));
    }
    utils$9.rotr32 = rotr32$1;

    function rotl32$2(w, b) {
      return (w << b) | (w >>> (32 - b));
    }
    utils$9.rotl32 = rotl32$2;

    function sum32$3(a, b) {
      return (a + b) >>> 0;
    }
    utils$9.sum32 = sum32$3;

    function sum32_3$1(a, b, c) {
      return (a + b + c) >>> 0;
    }
    utils$9.sum32_3 = sum32_3$1;

    function sum32_4$2(a, b, c, d) {
      return (a + b + c + d) >>> 0;
    }
    utils$9.sum32_4 = sum32_4$2;

    function sum32_5$2(a, b, c, d, e) {
      return (a + b + c + d + e) >>> 0;
    }
    utils$9.sum32_5 = sum32_5$2;

    function sum64$1(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];

      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    utils$9.sum64 = sum64$1;

    function sum64_hi$1(ah, al, bh, bl) {
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    utils$9.sum64_hi = sum64_hi$1;

    function sum64_lo$1(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    utils$9.sum64_lo = sum64_lo$1;

    function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;

      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    utils$9.sum64_4_hi = sum64_4_hi$1;

    function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    utils$9.sum64_4_lo = sum64_4_lo$1;

    function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = (lo + el) >>> 0;
      carry += lo < el ? 1 : 0;

      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    utils$9.sum64_5_hi = sum64_5_hi$1;

    function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;

      return lo >>> 0;
    }
    utils$9.sum64_5_lo = sum64_5_lo$1;

    function rotr64_hi$1(ah, al, num) {
      var r = (al << (32 - num)) | (ah >>> num);
      return r >>> 0;
    }
    utils$9.rotr64_hi = rotr64_hi$1;

    function rotr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    utils$9.rotr64_lo = rotr64_lo$1;

    function shr64_hi$1(ah, al, num) {
      return ah >>> num;
    }
    utils$9.shr64_hi = shr64_hi$1;

    function shr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    utils$9.shr64_lo = shr64_lo$1;

    var common$5 = {};

    var utils$8 = utils$9;
    var assert$4 = minimalisticAssert;

    function BlockHash$4() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';

      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    common$5.BlockHash = BlockHash$4;

    BlockHash$4.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils$8.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;

      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
        msg = this.pending;

        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;

        msg = utils$8.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }

      return this;
    };

    BlockHash$4.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert$4(this.pending === null);

      return this._digest(enc);
    };

    BlockHash$4.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - ((len + this.padLength) % bytes);
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++)
        res[i] = 0;

      // Append length
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;

        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;

        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }

      return res;
    };

    var sha = {};

    var common$4 = {};

    var utils$7 = utils$9;
    var rotr32 = utils$7.rotr32;

    function ft_1$1(s, x, y, z) {
      if (s === 0)
        return ch32$1(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32$1(x, y, z);
    }
    common$4.ft_1 = ft_1$1;

    function ch32$1(x, y, z) {
      return (x & y) ^ ((~x) & z);
    }
    common$4.ch32 = ch32$1;

    function maj32$1(x, y, z) {
      return (x & y) ^ (x & z) ^ (y & z);
    }
    common$4.maj32 = maj32$1;

    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    common$4.p32 = p32;

    function s0_256$1(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    common$4.s0_256 = s0_256$1;

    function s1_256$1(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    common$4.s1_256 = s1_256$1;

    function g0_256$1(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
    }
    common$4.g0_256 = g0_256$1;

    function g1_256$1(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
    }
    common$4.g1_256 = g1_256$1;

    var utils$6 = utils$9;
    var common$3 = common$5;
    var shaCommon$1 = common$4;

    var rotl32$1 = utils$6.rotl32;
    var sum32$2 = utils$6.sum32;
    var sum32_5$1 = utils$6.sum32_5;
    var ft_1 = shaCommon$1.ft_1;
    var BlockHash$3 = common$3.BlockHash;

    var sha1_K = [
      0x5A827999, 0x6ED9EBA1,
      0x8F1BBCDC, 0xCA62C1D6
    ];

    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();

      BlockHash$3.call(this);
      this.h = [
        0x67452301, 0xefcdab89, 0x98badcfe,
        0x10325476, 0xc3d2e1f0 ];
      this.W = new Array(80);
    }

    utils$6.inherits(SHA1, BlockHash$3);
    var _1 = SHA1;

    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;

    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];

      for(; i < W.length; i++)
        W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];

      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32$1(b, 30);
        b = a;
        a = t;
      }

      this.h[0] = sum32$2(this.h[0], a);
      this.h[1] = sum32$2(this.h[1], b);
      this.h[2] = sum32$2(this.h[2], c);
      this.h[3] = sum32$2(this.h[3], d);
      this.h[4] = sum32$2(this.h[4], e);
    };

    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$6.toHex32(this.h, 'big');
      else
        return utils$6.split32(this.h, 'big');
    };

    var utils$5 = utils$9;
    var common$2 = common$5;
    var shaCommon = common$4;
    var assert$3 = minimalisticAssert;

    var sum32$1 = utils$5.sum32;
    var sum32_4$1 = utils$5.sum32_4;
    var sum32_5 = utils$5.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;

    var BlockHash$2 = common$2.BlockHash;

    var sha256_K = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
      0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
      0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
      0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
      0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];

    function SHA256$1() {
      if (!(this instanceof SHA256$1))
        return new SHA256$1();

      BlockHash$2.call(this);
      this.h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils$5.inherits(SHA256$1, BlockHash$2);
    var _256 = SHA256$1;

    SHA256$1.blockSize = 512;
    SHA256$1.outSize = 256;
    SHA256$1.hmacStrength = 192;
    SHA256$1.padLength = 64;

    SHA256$1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];

      assert$3(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32$1(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32$1(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32$1(T1, T2);
      }

      this.h[0] = sum32$1(this.h[0], a);
      this.h[1] = sum32$1(this.h[1], b);
      this.h[2] = sum32$1(this.h[2], c);
      this.h[3] = sum32$1(this.h[3], d);
      this.h[4] = sum32$1(this.h[4], e);
      this.h[5] = sum32$1(this.h[5], f);
      this.h[6] = sum32$1(this.h[6], g);
      this.h[7] = sum32$1(this.h[7], h);
    };

    SHA256$1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$5.toHex32(this.h, 'big');
      else
        return utils$5.split32(this.h, 'big');
    };

    var utils$4 = utils$9;
    var SHA256 = _256;

    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();

      SHA256.call(this);
      this.h = [
        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
    }
    utils$4.inherits(SHA224, SHA256);
    var _224 = SHA224;

    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;

    SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex')
        return utils$4.toHex32(this.h.slice(0, 7), 'big');
      else
        return utils$4.split32(this.h.slice(0, 7), 'big');
    };

    var utils$3 = utils$9;
    var common$1 = common$5;
    var assert$2 = minimalisticAssert;

    var rotr64_hi = utils$3.rotr64_hi;
    var rotr64_lo = utils$3.rotr64_lo;
    var shr64_hi = utils$3.shr64_hi;
    var shr64_lo = utils$3.shr64_lo;
    var sum64 = utils$3.sum64;
    var sum64_hi = utils$3.sum64_hi;
    var sum64_lo = utils$3.sum64_lo;
    var sum64_4_hi = utils$3.sum64_4_hi;
    var sum64_4_lo = utils$3.sum64_4_lo;
    var sum64_5_hi = utils$3.sum64_5_hi;
    var sum64_5_lo = utils$3.sum64_5_lo;

    var BlockHash$1 = common$1.BlockHash;

    var sha512_K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    function SHA512$1() {
      if (!(this instanceof SHA512$1))
        return new SHA512$1();

      BlockHash$1.call(this);
      this.h = [
        0x6a09e667, 0xf3bcc908,
        0xbb67ae85, 0x84caa73b,
        0x3c6ef372, 0xfe94f82b,
        0xa54ff53a, 0x5f1d36f1,
        0x510e527f, 0xade682d1,
        0x9b05688c, 0x2b3e6c1f,
        0x1f83d9ab, 0xfb41bd6b,
        0x5be0cd19, 0x137e2179 ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils$3.inherits(SHA512$1, BlockHash$1);
    var _512 = SHA512$1;

    SHA512$1.blockSize = 1024;
    SHA512$1.outSize = 512;
    SHA512$1.hmacStrength = 192;
    SHA512$1.padLength = 128;

    SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;

      // 32 x 32bit words
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];  // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];  // i - 16
        var c3_lo = W[i - 31];

        W[i] = sum64_4_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
      }
    };

    SHA512$1.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);

      var W = this.W;

      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];

      assert$2(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];

        var T1_hi = sum64_5_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);

        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

        hh = gh;
        hl = gl;

        gh = fh;
        gl = fl;

        fh = eh;
        fl = el;

        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);

        dh = ch;
        dl = cl;

        ch = bh;
        cl = bl;

        bh = ah;
        bl = al;

        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }

      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };

    SHA512$1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$3.toHex32(this.h, 'big');
      else
        return utils$3.split32(this.h, 'big');
    };

    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ ((~xh) & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ ((~xl) & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);  // 34
      var c2_hi = rotr64_hi(xl, xh, 7);  // 39

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);  // 34
      var c2_lo = rotr64_lo(xl, xh, 7);  // 39

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);  // 41

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);  // 41

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);  // 61
      var c2_hi = shr64_hi(xh, xl, 6);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);  // 61
      var c2_lo = shr64_lo(xh, xl, 6);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    var utils$2 = utils$9;

    var SHA512 = _512;

    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();

      SHA512.call(this);
      this.h = [
        0xcbbb9d5d, 0xc1059ed8,
        0x629a292a, 0x367cd507,
        0x9159015a, 0x3070dd17,
        0x152fecd8, 0xf70e5939,
        0x67332667, 0xffc00b31,
        0x8eb44a87, 0x68581511,
        0xdb0c2e0d, 0x64f98fa7,
        0x47b5481d, 0xbefa4fa4 ];
    }
    utils$2.inherits(SHA384, SHA512);
    var _384 = SHA384;

    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;

    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$2.toHex32(this.h.slice(0, 12), 'big');
      else
        return utils$2.split32(this.h.slice(0, 12), 'big');
    };

    sha.sha1 = _1;
    sha.sha224 = _224;
    sha.sha256 = _256;
    sha.sha384 = _384;
    sha.sha512 = _512;

    var ripemd = {};

    var utils$1 = utils$9;
    var common$6 = common$5;

    var rotl32 = utils$1.rotl32;
    var sum32 = utils$1.sum32;
    var sum32_3 = utils$1.sum32_3;
    var sum32_4 = utils$1.sum32_4;
    var BlockHash = common$6.BlockHash;

    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();

      BlockHash.call(this);

      this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
      this.endian = 'little';
    }
    utils$1.inherits(RIPEMD160, BlockHash);
    ripemd.ripemd160 = RIPEMD160;

    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;

    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
            s[j]),
          E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]),
          Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };

    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$1.toHex32(this.h, 'little');
      else
        return utils$1.split32(this.h, 'little');
    };

    function f(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return (x & y) | ((~x) & z);
      else if (j <= 47)
        return (x | (~y)) ^ z;
      else if (j <= 63)
        return (x & z) | (y & (~z));
      else
        return x ^ (y | (~z));
    }

    function K(j) {
      if (j <= 15)
        return 0x00000000;
      else if (j <= 31)
        return 0x5a827999;
      else if (j <= 47)
        return 0x6ed9eba1;
      else if (j <= 63)
        return 0x8f1bbcdc;
      else
        return 0xa953fd4e;
    }

    function Kh(j) {
      if (j <= 15)
        return 0x50a28be6;
      else if (j <= 31)
        return 0x5c4dd124;
      else if (j <= 47)
        return 0x6d703ef3;
      else if (j <= 63)
        return 0x7a6d76e9;
      else
        return 0x00000000;
    }

    var r = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];

    var rh = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];

    var s = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];

    var sh = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];

    var utils = utils$9;
    var assert$1$1 = minimalisticAssert;

    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;

      this._init(utils.toArray(key, enc));
    }
    var hmac = Hmac;

    Hmac.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert$1$1(key.length <= this.blockSize);

      // Add padding to key
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);

      for (i = 0; i < key.length; i++)
        key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);

      // 0x36 ^ 0x5c = 0x6a
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
    };

    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };

    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };

    (function (exports) {
    var hash = exports;

    hash.utils = utils$9;
    hash.common = common$5;
    hash.sha = sha;
    hash.ripemd = ripemd;
    hash.hmac = hmac;

    // Proxy hash functions to the main object
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
    }(hash$1));

    var hash = hash$1;

    const version$2 = "logger/5.5.0";

    let _permanentCensorErrors = false;
    let _censorErrors = false;
    const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    let _logLevel = LogLevels["default"];
    let _globalLogger = null;
    function _checkNormalize() {
        try {
            const missing = [];
            // Make sure all forms of normalization are supported
            ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
                try {
                    if ("test".normalize(form) !== "test") {
                        throw new Error("bad normalize");
                    }
                    ;
                }
                catch (error) {
                    missing.push(form);
                }
            });
            if (missing.length) {
                throw new Error("missing " + missing.join(", "));
            }
            if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
                throw new Error("broken implementation");
            }
        }
        catch (error) {
            return error.message;
        }
        return null;
    }
    const _normalizeError = _checkNormalize();
    var LogLevel;
    (function (LogLevel) {
        LogLevel["DEBUG"] = "DEBUG";
        LogLevel["INFO"] = "INFO";
        LogLevel["WARNING"] = "WARNING";
        LogLevel["ERROR"] = "ERROR";
        LogLevel["OFF"] = "OFF";
    })(LogLevel || (LogLevel = {}));
    var ErrorCode;
    (function (ErrorCode) {
        ///////////////////
        // Generic Errors
        // Unknown Error
        ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        // Not Implemented
        ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        // Unsupported Operation
        //   - operation
        ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
        //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
        ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
        // Some sort of bad response from the server
        ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
        // Timeout
        ErrorCode["TIMEOUT"] = "TIMEOUT";
        ///////////////////
        // Operational  Errors
        // Buffer Overrun
        ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        // Numeric Fault
        //   - operation: the operation being executed
        //   - fault: the reason this faulted
        ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ///////////////////
        // Argument Errors
        // Missing new operator to an object
        //  - name: The name of the class
        ErrorCode["MISSING_NEW"] = "MISSING_NEW";
        // Invalid argument (e.g. value is incompatible with type) to a function:
        //   - argument: The argument name that was invalid
        //   - value: The value of the argument
        ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        // Missing argument to a function:
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        // Too many arguments
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ///////////////////
        // Blockchain Errors
        // Call exception
        //  - transaction: the transaction
        //  - address?: the contract address
        //  - args?: The arguments passed into the function
        //  - method?: The Solidity method signature
        //  - errorSignature?: The EIP848 error signature
        //  - errorArgs?: The EIP848 error parameters
        //  - reason: The reason (only for EIP848 "Error(string)")
        ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        // Insufficient funds (< value + gasLimit * gasPrice)
        //   - transaction: the transaction attempted
        ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        // Nonce has already been used
        //   - transaction: the transaction attempted
        ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        // The replacement fee for the transaction is too low
        //   - transaction: the transaction attempted
        ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        // The gas limit could not be estimated
        //   - transaction: the transaction passed to estimateGas
        ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        // The transaction was replaced by one with a higher gas price
        //   - reason: "cancelled", "replaced" or "repriced"
        //   - cancelled: true if reason == "cancelled" or reason == "replaced")
        //   - hash: original transaction hash
        //   - replacement: the full TransactionsResponse for the replacement
        //   - receipt: the receipt of the replacement
        ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
    })(ErrorCode || (ErrorCode = {}));
    const HEX = "0123456789abcdef";
    class Logger {
        constructor(version) {
            Object.defineProperty(this, "version", {
                enumerable: true,
                value: version,
                writable: false
            });
        }
        _log(logLevel, args) {
            const level = logLevel.toLowerCase();
            if (LogLevels[level] == null) {
                this.throwArgumentError("invalid log level name", "logLevel", logLevel);
            }
            if (_logLevel > LogLevels[level]) {
                return;
            }
            console.log.apply(console, args);
        }
        debug(...args) {
            this._log(Logger.levels.DEBUG, args);
        }
        info(...args) {
            this._log(Logger.levels.INFO, args);
        }
        warn(...args) {
            this._log(Logger.levels.WARNING, args);
        }
        makeError(message, code, params) {
            // Errors are being censored
            if (_censorErrors) {
                return this.makeError("censored error", code, {});
            }
            if (!code) {
                code = Logger.errors.UNKNOWN_ERROR;
            }
            if (!params) {
                params = {};
            }
            const messageDetails = [];
            Object.keys(params).forEach((key) => {
                const value = params[key];
                try {
                    if (value instanceof Uint8Array) {
                        let hex = "";
                        for (let i = 0; i < value.length; i++) {
                            hex += HEX[value[i] >> 4];
                            hex += HEX[value[i] & 0x0f];
                        }
                        messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                    }
                    else {
                        messageDetails.push(key + "=" + JSON.stringify(value));
                    }
                }
                catch (error) {
                    messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
                }
            });
            messageDetails.push(`code=${code}`);
            messageDetails.push(`version=${this.version}`);
            const reason = message;
            if (messageDetails.length) {
                message += " (" + messageDetails.join(", ") + ")";
            }
            // @TODO: Any??
            const error = new Error(message);
            error.reason = reason;
            error.code = code;
            Object.keys(params).forEach(function (key) {
                error[key] = params[key];
            });
            return error;
        }
        throwError(message, code, params) {
            throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name, value) {
            return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
                argument: name,
                value: value
            });
        }
        assert(condition, message, code, params) {
            if (!!condition) {
                return;
            }
            this.throwError(message, code, params);
        }
        assertArgument(condition, message, name, value) {
            if (!!condition) {
                return;
            }
            this.throwArgumentError(message, name, value);
        }
        checkNormalize(message) {
            if (_normalizeError) {
                this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "String.prototype.normalize", form: _normalizeError
                });
            }
        }
        checkSafeUint53(value, message) {
            if (typeof (value) !== "number") {
                return;
            }
            if (message == null) {
                message = "value not safe";
            }
            if (value < 0 || value >= 0x1fffffffffffff) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "out-of-safe-range",
                    value: value
                });
            }
            if (value % 1) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "non-integer",
                    value: value
                });
            }
        }
        checkArgumentCount(count, expectedCount, message) {
            if (message) {
                message = ": " + message;
            }
            else {
                message = "";
            }
            if (count < expectedCount) {
                this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
            if (count > expectedCount) {
                this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
        }
        checkNew(target, kind) {
            if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        checkAbstract(target, kind) {
            if (target === kind) {
                this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
            }
            else if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        static globalLogger() {
            if (!_globalLogger) {
                _globalLogger = new Logger(version$2);
            }
            return _globalLogger;
        }
        static setCensorship(censorship, permanent) {
            if (!censorship && permanent) {
                this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            if (_permanentCensorErrors) {
                if (!censorship) {
                    return;
                }
                this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            _censorErrors = !!censorship;
            _permanentCensorErrors = !!permanent;
        }
        static setLogLevel(logLevel) {
            const level = LogLevels[logLevel.toLowerCase()];
            if (level == null) {
                Logger.globalLogger().warn("invalid log level - " + logLevel);
                return;
            }
            _logLevel = level;
        }
        static from(version) {
            return new Logger(version);
        }
    }
    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;

    const version$1 = "bytes/5.5.0";

    const logger = new Logger(version$1);
    ///////////////////////////////
    function isHexable(value) {
        return !!(value.toHexString);
    }
    function addSlice(array) {
        if (array.slice) {
            return array;
        }
        array.slice = function () {
            const args = Array.prototype.slice.call(arguments);
            return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
        };
        return array;
    }
    function isInteger(value) {
        return (typeof (value) === "number" && value == value && (value % 1) === 0);
    }
    function isBytes(value) {
        if (value == null) {
            return false;
        }
        if (value.constructor === Uint8Array) {
            return true;
        }
        if (typeof (value) === "string") {
            return false;
        }
        if (!isInteger(value.length) || value.length < 0) {
            return false;
        }
        for (let i = 0; i < value.length; i++) {
            const v = value[i];
            if (!isInteger(v) || v < 0 || v >= 256) {
                return false;
            }
        }
        return true;
    }
    function arrayify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger.checkSafeUint53(value, "invalid arrayify value");
            const result = [];
            while (value) {
                result.unshift(value & 0xff);
                value = parseInt(String(value / 256));
            }
            if (result.length === 0) {
                result.push(0);
            }
            return addSlice(new Uint8Array(result));
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            value = value.toHexString();
        }
        if (isHexString(value)) {
            let hex = value.substring(2);
            if (hex.length % 2) {
                if (options.hexPad === "left") {
                    hex = "0x0" + hex.substring(2);
                }
                else if (options.hexPad === "right") {
                    hex += "0";
                }
                else {
                    logger.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            const result = [];
            for (let i = 0; i < hex.length; i += 2) {
                result.push(parseInt(hex.substring(i, i + 2), 16));
            }
            return addSlice(new Uint8Array(result));
        }
        if (isBytes(value)) {
            return addSlice(new Uint8Array(value));
        }
        return logger.throwArgumentError("invalid arrayify value", "value", value);
    }
    function isHexString(value, length) {
        if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
        }
        if (length && value.length !== 2 + 2 * length) {
            return false;
        }
        return true;
    }

    const version = "sha2/5.5.0";

    new Logger(version);
    function sha256$1(data) {
        return "0x" + (hash.sha256().update(arrayify(data)).digest("hex"));
    }

    class Struct {
      constructor(properties) {
        Object.assign(this, properties);
      }

      encode() {
        return Buffer.from(lib$3.serialize(SOLANA_SCHEMA, this));
      }

      static decode(data) {
        return lib$3.deserialize(SOLANA_SCHEMA, this, data);
      }

      static decodeUnchecked(data) {
        return lib$3.deserializeUnchecked(SOLANA_SCHEMA, this, data);
      }

    } // Class representing a Rust-compatible enum, since enums are only strings or
    // numbers in pure JS

    class Enum extends Struct {
      constructor(properties) {
        super(properties);
        this.enum = '';

        if (Object.keys(properties).length !== 1) {
          throw new Error('Enum can only take single value');
        }

        Object.keys(properties).map(key => {
          this.enum = key;
        });
      }

    }
    const SOLANA_SCHEMA = new Map();

    /**
     * Maximum length of derived pubkey seed
     */

    const MAX_SEED_LENGTH = 32;
    /**
     * Value to be converted into public key
     */

    function isPublicKeyData(value) {
      return value._bn !== undefined;
    }
    /**
     * A public key
     */


    class PublicKey extends Struct {
      /** @internal */

      /**
       * Create a new PublicKey object
       * @param value ed25519 public key as buffer or base-58 encoded string
       */
      constructor(value) {
        super({});
        this._bn = void 0;

        if (isPublicKeyData(value)) {
          this._bn = value._bn;
        } else {
          if (typeof value === 'string') {
            // assume base 58 encoding by default
            const decoded = bs58.decode(value);

            if (decoded.length != 32) {
              throw new Error(`Invalid public key input`);
            }

            this._bn = new bn$1(decoded);
          } else {
            this._bn = new bn$1(value);
          }

          if (this._bn.byteLength() > 32) {
            throw new Error(`Invalid public key input`);
          }
        }
      }
      /**
       * Default public key value. (All zeros)
       */


      /**
       * Checks if two publicKeys are equal
       */
      equals(publicKey) {
        return this._bn.eq(publicKey._bn);
      }
      /**
       * Return the base-58 representation of the public key
       */


      toBase58() {
        return bs58.encode(this.toBytes());
      }
      /**
       * Return the byte array representation of the public key
       */


      toBytes() {
        return this.toBuffer();
      }
      /**
       * Return the Buffer representation of the public key
       */


      toBuffer() {
        const b = this._bn.toArrayLike(Buffer);

        if (b.length === 32) {
          return b;
        }

        const zeroPad = Buffer.alloc(32);
        b.copy(zeroPad, 32 - b.length);
        return zeroPad;
      }
      /**
       * Return the base-58 representation of the public key
       */


      toString() {
        return this.toBase58();
      }
      /**
       * Derive a public key from another key, a seed, and a program ID.
       * The program ID will also serve as the owner of the public key, giving
       * it permission to write data to the account.
       */

      /* eslint-disable require-await */


      static async createWithSeed(fromPublicKey, seed, programId) {
        const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);
        const hash = sha256$1(new Uint8Array(buffer)).slice(2);
        return new PublicKey(Buffer.from(hash, 'hex'));
      }
      /**
       * Derive a program address from seeds and a program ID.
       */

      /* eslint-disable require-await */


      static async createProgramAddress(seeds, programId) {
        let buffer = Buffer.alloc(0);
        seeds.forEach(function (seed) {
          if (seed.length > MAX_SEED_LENGTH) {
            throw new TypeError(`Max seed length exceeded`);
          }

          buffer = Buffer.concat([buffer, toBuffer$1(seed)]);
        });
        buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);
        let hash = sha256$1(new Uint8Array(buffer)).slice(2);
        let publicKeyBytes = new bn$1(hash, 16).toArray(undefined, 32);

        if (is_on_curve(publicKeyBytes)) {
          throw new Error(`Invalid seeds, address must fall off the curve`);
        }

        return new PublicKey(publicKeyBytes);
      }
      /**
       * Find a valid program address
       *
       * Valid program addresses must fall off the ed25519 curve.  This function
       * iterates a nonce until it finds one that when combined with the seeds
       * results in a valid program address.
       */


      static async findProgramAddress(seeds, programId) {
        let nonce = 255;
        let address;

        while (nonce != 0) {
          try {
            const seedsWithNonce = seeds.concat(Buffer.from([nonce]));
            address = await this.createProgramAddress(seedsWithNonce, programId);
          } catch (err) {
            if (err instanceof TypeError) {
              throw err;
            }

            nonce--;
            continue;
          }

          return [address, nonce];
        }

        throw new Error(`Unable to find a viable program address nonce`);
      }
      /**
       * Check that a pubkey is on the ed25519 curve.
       */


      static isOnCurve(pubkey) {
        return is_on_curve(pubkey) == 1;
      }

    }
    PublicKey.default = new PublicKey('11111111111111111111111111111111');
    SOLANA_SCHEMA.set(PublicKey, {
      kind: 'struct',
      fields: [['_bn', 'u256']]
    }); // @ts-ignore

    let naclLowLevel = naclFast.lowlevel; // Check that a pubkey is on the curve.
    // This function and its dependents were sourced from:
    // https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792

    function is_on_curve(p) {
      var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];
      var t = naclLowLevel.gf(),
          chk = naclLowLevel.gf(),
          num = naclLowLevel.gf(),
          den = naclLowLevel.gf(),
          den2 = naclLowLevel.gf(),
          den4 = naclLowLevel.gf(),
          den6 = naclLowLevel.gf();
      naclLowLevel.set25519(r[2], gf1);
      naclLowLevel.unpack25519(r[1], p);
      naclLowLevel.S(num, r[1]);
      naclLowLevel.M(den, num, naclLowLevel.D);
      naclLowLevel.Z(num, num, r[2]);
      naclLowLevel.A(den, r[2], den);
      naclLowLevel.S(den2, den);
      naclLowLevel.S(den4, den2);
      naclLowLevel.M(den6, den4, den2);
      naclLowLevel.M(t, den6, num);
      naclLowLevel.M(t, t, den);
      naclLowLevel.pow2523(t, t);
      naclLowLevel.M(t, t, num);
      naclLowLevel.M(t, t, den);
      naclLowLevel.M(t, t, den);
      naclLowLevel.M(r[0], t, den);
      naclLowLevel.S(chk, r[0]);
      naclLowLevel.M(chk, chk, den);
      if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);
      naclLowLevel.S(chk, r[0]);
      naclLowLevel.M(chk, chk, den);
      if (neq25519(chk, num)) return 0;
      return 1;
    }

    let gf1 = naclLowLevel.gf([1]);
    let I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

    function neq25519(a, b) {
      var c = new Uint8Array(32),
          d = new Uint8Array(32);
      naclLowLevel.pack25519(c, a);
      naclLowLevel.pack25519(d, b);
      return naclLowLevel.crypto_verify_32(c, 0, d, 0);
    }

    /**
     * An account key pair (public and secret keys).
     *
     * @deprecated since v1.10.0, please use {@link Keypair} instead.
     */

    class Account {
      /** @internal */

      /**
       * Create a new Account object
       *
       * If the secretKey parameter is not provided a new key pair is randomly
       * created for the account
       *
       * @param secretKey Secret key for the account
       */
      constructor(secretKey) {
        this._keypair = void 0;

        if (secretKey) {
          this._keypair = naclFast.sign.keyPair.fromSecretKey(toBuffer$1(secretKey));
        } else {
          this._keypair = naclFast.sign.keyPair();
        }
      }
      /**
       * The public key for this account
       */


      get publicKey() {
        return new PublicKey(this._keypair.publicKey);
      }
      /**
       * The **unencrypted** secret key for this account
       */


      get secretKey() {
        return toBuffer$1(this._keypair.secretKey);
      }

    }

    const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');

    /**
     * Layout for a public key
     */

    const publicKey$1 = (property = 'publicKey') => {
      return Layout_1$1.blob(32, property);
    };
    /**
     * Layout for a Rust String type
     */

    const rustString = (property = 'string') => {
      const rsl = Layout_1$1.struct([Layout_1$1.u32('length'), Layout_1$1.u32('lengthPadding'), Layout_1$1.blob(Layout_1$1.offset(Layout_1$1.u32(), -8), 'chars')], property);

      const _decode = rsl.decode.bind(rsl);

      const _encode = rsl.encode.bind(rsl);

      rsl.decode = (buffer, offset) => {
        const data = _decode(buffer, offset);

        return data['chars'].toString('utf8');
      };

      rsl.encode = (str, buffer, offset) => {
        const data = {
          chars: Buffer.from(str, 'utf8')
        };
        return _encode(data, buffer, offset);
      };

      rsl.alloc = str => {
        return Layout_1$1.u32().span + Layout_1$1.u32().span + Buffer.from(str, 'utf8').length;
      };

      return rsl;
    };
    /**
     * Layout for an Authorized object
     */

    const authorized = (property = 'authorized') => {
      return Layout_1$1.struct([publicKey$1('staker'), publicKey$1('withdrawer')], property);
    };
    /**
     * Layout for a Lockup object
     */

    const lockup = (property = 'lockup') => {
      return Layout_1$1.struct([Layout_1$1.ns64('unixTimestamp'), Layout_1$1.ns64('epoch'), publicKey$1('custodian')], property);
    };
    function getAlloc(type, fields) {
      let alloc = 0;
      type.layout.fields.forEach(item => {
        if (item.span >= 0) {
          alloc += item.span;
        } else if (typeof item.alloc === 'function') {
          alloc += item.alloc(fields[item.property]);
        }
      });
      return alloc;
    }

    function decodeLength(bytes) {
      let len = 0;
      let size = 0;

      for (;;) {
        let elem = bytes.shift();
        len |= (elem & 0x7f) << size * 7;
        size += 1;

        if ((elem & 0x80) === 0) {
          break;
        }
      }

      return len;
    }
    function encodeLength(bytes, len) {
      let rem_len = len;

      for (;;) {
        let elem = rem_len & 0x7f;
        rem_len >>= 7;

        if (rem_len == 0) {
          bytes.push(elem);
          break;
        } else {
          elem |= 0x80;
          bytes.push(elem);
        }
      }
    }

    /**
     * The message header, identifying signed and read-only account
     */

    const PUBKEY_LENGTH = 32;
    /**
     * List of instructions to be processed atomically
     */

    class Message {
      constructor(args) {
        this.header = void 0;
        this.accountKeys = void 0;
        this.recentBlockhash = void 0;
        this.instructions = void 0;
        this.indexToProgramIds = new Map();
        this.header = args.header;
        this.accountKeys = args.accountKeys.map(account => new PublicKey(account));
        this.recentBlockhash = args.recentBlockhash;
        this.instructions = args.instructions;
        this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));
      }

      isAccountSigner(index) {
        return index < this.header.numRequiredSignatures;
      }

      isAccountWritable(index) {
        return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;
      }

      isProgramId(index) {
        return this.indexToProgramIds.has(index);
      }

      programIds() {
        return [...this.indexToProgramIds.values()];
      }

      nonProgramIds() {
        return this.accountKeys.filter((_, index) => !this.isProgramId(index));
      }

      serialize() {
        const numKeys = this.accountKeys.length;
        let keyCount = [];
        encodeLength(keyCount, numKeys);
        const instructions = this.instructions.map(instruction => {
          const {
            accounts,
            programIdIndex
          } = instruction;
          const data = bs58.decode(instruction.data);
          let keyIndicesCount = [];
          encodeLength(keyIndicesCount, accounts.length);
          let dataCount = [];
          encodeLength(dataCount, data.length);
          return {
            programIdIndex,
            keyIndicesCount: Buffer.from(keyIndicesCount),
            keyIndices: Buffer.from(accounts),
            dataLength: Buffer.from(dataCount),
            data
          };
        });
        let instructionCount = [];
        encodeLength(instructionCount, instructions.length);
        let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);
        Buffer.from(instructionCount).copy(instructionBuffer);
        let instructionBufferLength = instructionCount.length;
        instructions.forEach(instruction => {
          const instructionLayout = Layout_1$1.struct([Layout_1$1.u8('programIdIndex'), Layout_1$1.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), Layout_1$1.seq(Layout_1$1.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), Layout_1$1.blob(instruction.dataLength.length, 'dataLength'), Layout_1$1.seq(Layout_1$1.u8('userdatum'), instruction.data.length, 'data')]);
          const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);
          instructionBufferLength += length;
        });
        instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);
        const signDataLayout = Layout_1$1.struct([Layout_1$1.blob(1, 'numRequiredSignatures'), Layout_1$1.blob(1, 'numReadonlySignedAccounts'), Layout_1$1.blob(1, 'numReadonlyUnsignedAccounts'), Layout_1$1.blob(keyCount.length, 'keyCount'), Layout_1$1.seq(publicKey$1('key'), numKeys, 'keys'), publicKey$1('recentBlockhash')]);
        const transaction = {
          numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),
          numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),
          numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),
          keyCount: Buffer.from(keyCount),
          keys: this.accountKeys.map(key => toBuffer$1(key.toBytes())),
          recentBlockhash: bs58.decode(this.recentBlockhash)
        };
        let signData = Buffer.alloc(2048);
        const length = signDataLayout.encode(transaction, signData);
        instructionBuffer.copy(signData, length);
        return signData.slice(0, length + instructionBuffer.length);
      }
      /**
       * Decode a compiled message into a Message object.
       */


      static from(buffer) {
        // Slice up wire data
        let byteArray = [...buffer];
        const numRequiredSignatures = byteArray.shift();
        const numReadonlySignedAccounts = byteArray.shift();
        const numReadonlyUnsignedAccounts = byteArray.shift();
        const accountCount = decodeLength(byteArray);
        let accountKeys = [];

        for (let i = 0; i < accountCount; i++) {
          const account = byteArray.slice(0, PUBKEY_LENGTH);
          byteArray = byteArray.slice(PUBKEY_LENGTH);
          accountKeys.push(bs58.encode(Buffer.from(account)));
        }

        const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);
        byteArray = byteArray.slice(PUBKEY_LENGTH);
        const instructionCount = decodeLength(byteArray);
        let instructions = [];

        for (let i = 0; i < instructionCount; i++) {
          const programIdIndex = byteArray.shift();
          const accountCount = decodeLength(byteArray);
          const accounts = byteArray.slice(0, accountCount);
          byteArray = byteArray.slice(accountCount);
          const dataLength = decodeLength(byteArray);
          const dataSlice = byteArray.slice(0, dataLength);
          const data = bs58.encode(Buffer.from(dataSlice));
          byteArray = byteArray.slice(dataLength);
          instructions.push({
            programIdIndex,
            accounts,
            data
          });
        }

        const messageArgs = {
          header: {
            numRequiredSignatures,
            numReadonlySignedAccounts,
            numReadonlyUnsignedAccounts
          },
          recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),
          accountKeys,
          instructions
        };
        return new Message(messageArgs);
      }

    }

    function assert$7 (condition, message) {
      if (!condition) {
        throw new Error(message || 'Assertion failed');
      }
    }

    /**
     * Default (empty) signature
     *
     * Signatures are 64 bytes in length
     */
    const DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);
    /**
     * Maximum over-the-wire size of a Transaction
     *
     * 1280 is IPv6 minimum MTU
     * 40 bytes is the size of the IPv6 header
     * 8 bytes is the size of the fragment header
     */

    const PACKET_DATA_SIZE = 1280 - 40 - 8;
    const SIGNATURE_LENGTH = 64;
    /**
     * Account metadata used to define instructions
     */

    /**
     * Transaction Instruction class
     */
    class TransactionInstruction {
      /**
       * Public keys to include in this transaction
       * Boolean represents whether this pubkey needs to sign the transaction
       */

      /**
       * Program Id to execute
       */

      /**
       * Program input
       */
      constructor(opts) {
        this.keys = void 0;
        this.programId = void 0;
        this.data = Buffer.alloc(0);
        this.programId = opts.programId;
        this.keys = opts.keys;

        if (opts.data) {
          this.data = opts.data;
        }
      }

    }
    /**
     * Pair of signature and corresponding public key
     */

    /**
     * Transaction class
     */
    class Transaction {
      /**
       * Signatures for the transaction.  Typically created by invoking the
       * `sign()` method
       */

      /**
       * The first (payer) Transaction signature
       */
      get signature() {
        if (this.signatures.length > 0) {
          return this.signatures[0].signature;
        }

        return null;
      }
      /**
       * The transaction fee payer
       */


      /**
       * Construct an empty Transaction
       */
      constructor(opts) {
        this.signatures = [];
        this.feePayer = void 0;
        this.instructions = [];
        this.recentBlockhash = void 0;
        this.nonceInfo = void 0;
        opts && Object.assign(this, opts);
      }
      /**
       * Add one or more instructions to this Transaction
       */


      add(...items) {
        if (items.length === 0) {
          throw new Error('No instructions');
        }

        items.forEach(item => {
          if ('instructions' in item) {
            this.instructions = this.instructions.concat(item.instructions);
          } else if ('data' in item && 'programId' in item && 'keys' in item) {
            this.instructions.push(item);
          } else {
            this.instructions.push(new TransactionInstruction(item));
          }
        });
        return this;
      }
      /**
       * Compile transaction data
       */


      compileMessage() {
        const {
          nonceInfo
        } = this;

        if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {
          this.recentBlockhash = nonceInfo.nonce;
          this.instructions.unshift(nonceInfo.nonceInstruction);
        }

        const {
          recentBlockhash
        } = this;

        if (!recentBlockhash) {
          throw new Error('Transaction recentBlockhash required');
        }

        if (this.instructions.length < 1) {
          console.warn('No instructions provided');
        }

        let feePayer;

        if (this.feePayer) {
          feePayer = this.feePayer;
        } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {
          // Use implicit fee payer
          feePayer = this.signatures[0].publicKey;
        } else {
          throw new Error('Transaction fee payer required');
        }

        for (let i = 0; i < this.instructions.length; i++) {
          if (this.instructions[i].programId === undefined) {
            throw new Error(`Transaction instruction index ${i} has undefined program id`);
          }
        }

        const programIds = [];
        const accountMetas = [];
        this.instructions.forEach(instruction => {
          instruction.keys.forEach(accountMeta => {
            accountMetas.push({ ...accountMeta
            });
          });
          const programId = instruction.programId.toString();

          if (!programIds.includes(programId)) {
            programIds.push(programId);
          }
        }); // Append programID account metas

        programIds.forEach(programId => {
          accountMetas.push({
            pubkey: new PublicKey(programId),
            isSigner: false,
            isWritable: false
          });
        }); // Sort. Prioritizing first by signer, then by writable

        accountMetas.sort(function (x, y) {
          const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;
          const checkWritable = x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;
          return checkSigner || checkWritable;
        }); // Cull duplicate account metas

        const uniqueMetas = [];
        accountMetas.forEach(accountMeta => {
          const pubkeyString = accountMeta.pubkey.toString();
          const uniqueIndex = uniqueMetas.findIndex(x => {
            return x.pubkey.toString() === pubkeyString;
          });

          if (uniqueIndex > -1) {
            uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;
          } else {
            uniqueMetas.push(accountMeta);
          }
        }); // Move fee payer to the front

        const feePayerIndex = uniqueMetas.findIndex(x => {
          return x.pubkey.equals(feePayer);
        });

        if (feePayerIndex > -1) {
          const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);
          payerMeta.isSigner = true;
          payerMeta.isWritable = true;
          uniqueMetas.unshift(payerMeta);
        } else {
          uniqueMetas.unshift({
            pubkey: feePayer,
            isSigner: true,
            isWritable: true
          });
        } // Disallow unknown signers


        for (const signature of this.signatures) {
          const uniqueIndex = uniqueMetas.findIndex(x => {
            return x.pubkey.equals(signature.publicKey);
          });

          if (uniqueIndex > -1) {
            if (!uniqueMetas[uniqueIndex].isSigner) {
              uniqueMetas[uniqueIndex].isSigner = true;
              console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');
            }
          } else {
            throw new Error(`unknown signer: ${signature.publicKey.toString()}`);
          }
        }

        let numRequiredSignatures = 0;
        let numReadonlySignedAccounts = 0;
        let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values

        const signedKeys = [];
        const unsignedKeys = [];
        uniqueMetas.forEach(({
          pubkey,
          isSigner,
          isWritable
        }) => {
          if (isSigner) {
            signedKeys.push(pubkey.toString());
            numRequiredSignatures += 1;

            if (!isWritable) {
              numReadonlySignedAccounts += 1;
            }
          } else {
            unsignedKeys.push(pubkey.toString());

            if (!isWritable) {
              numReadonlyUnsignedAccounts += 1;
            }
          }
        });
        const accountKeys = signedKeys.concat(unsignedKeys);
        const instructions = this.instructions.map(instruction => {
          const {
            data,
            programId
          } = instruction;
          return {
            programIdIndex: accountKeys.indexOf(programId.toString()),
            accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),
            data: bs58.encode(data)
          };
        });
        instructions.forEach(instruction => {
          assert$7(instruction.programIdIndex >= 0);
          instruction.accounts.forEach(keyIndex => assert$7(keyIndex >= 0));
        });
        return new Message({
          header: {
            numRequiredSignatures,
            numReadonlySignedAccounts,
            numReadonlyUnsignedAccounts
          },
          accountKeys,
          recentBlockhash,
          instructions
        });
      }
      /**
       * @internal
       */


      _compile() {
        const message = this.compileMessage();
        const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);

        if (this.signatures.length === signedKeys.length) {
          const valid = this.signatures.every((pair, index) => {
            return signedKeys[index].equals(pair.publicKey);
          });
          if (valid) return message;
        }

        this.signatures = signedKeys.map(publicKey => ({
          signature: null,
          publicKey
        }));
        return message;
      }
      /**
       * Get a buffer of the Transaction data that need to be covered by signatures
       */


      serializeMessage() {
        return this._compile().serialize();
      }
      /**
       * Specify the public keys which will be used to sign the Transaction.
       * The first signer will be used as the transaction fee payer account.
       *
       * Signatures can be added with either `partialSign` or `addSignature`
       *
       * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be
       * specified and it can be set in the Transaction constructor or with the
       * `feePayer` property.
       */


      setSigners(...signers) {
        if (signers.length === 0) {
          throw new Error('No signers');
        }

        const seen = new Set();
        this.signatures = signers.filter(publicKey => {
          const key = publicKey.toString();

          if (seen.has(key)) {
            return false;
          } else {
            seen.add(key);
            return true;
          }
        }).map(publicKey => ({
          signature: null,
          publicKey
        }));
      }
      /**
       * Sign the Transaction with the specified signers. Multiple signatures may
       * be applied to a Transaction. The first signature is considered "primary"
       * and is used identify and confirm transactions.
       *
       * If the Transaction `feePayer` is not set, the first signer will be used
       * as the transaction fee payer account.
       *
       * Transaction fields should not be modified after the first call to `sign`,
       * as doing so may invalidate the signature and cause the Transaction to be
       * rejected.
       *
       * The Transaction must be assigned a valid `recentBlockhash` before invoking this method
       */


      sign(...signers) {
        if (signers.length === 0) {
          throw new Error('No signers');
        } // Dedupe signers


        const seen = new Set();
        const uniqueSigners = [];

        for (const signer of signers) {
          const key = signer.publicKey.toString();

          if (seen.has(key)) {
            continue;
          } else {
            seen.add(key);
            uniqueSigners.push(signer);
          }
        }

        this.signatures = uniqueSigners.map(signer => ({
          signature: null,
          publicKey: signer.publicKey
        }));

        const message = this._compile();

        this._partialSign(message, ...uniqueSigners);

        this._verifySignatures(message.serialize(), true);
      }
      /**
       * Partially sign a transaction with the specified accounts. All accounts must
       * correspond to either the fee payer or a signer account in the transaction
       * instructions.
       *
       * All the caveats from the `sign` method apply to `partialSign`
       */


      partialSign(...signers) {
        if (signers.length === 0) {
          throw new Error('No signers');
        } // Dedupe signers


        const seen = new Set();
        const uniqueSigners = [];

        for (const signer of signers) {
          const key = signer.publicKey.toString();

          if (seen.has(key)) {
            continue;
          } else {
            seen.add(key);
            uniqueSigners.push(signer);
          }
        }

        const message = this._compile();

        this._partialSign(message, ...uniqueSigners);
      }
      /**
       * @internal
       */


      _partialSign(message, ...signers) {
        const signData = message.serialize();
        signers.forEach(signer => {
          const signature = naclFast.sign.detached(signData, signer.secretKey);

          this._addSignature(signer.publicKey, toBuffer$1(signature));
        });
      }
      /**
       * Add an externally created signature to a transaction. The public key
       * must correspond to either the fee payer or a signer account in the transaction
       * instructions.
       */


      addSignature(pubkey, signature) {
        this._compile(); // Ensure signatures array is populated


        this._addSignature(pubkey, signature);
      }
      /**
       * @internal
       */


      _addSignature(pubkey, signature) {
        assert$7(signature.length === 64);
        const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));

        if (index < 0) {
          throw new Error(`unknown signer: ${pubkey.toString()}`);
        }

        this.signatures[index].signature = Buffer.from(signature);
      }
      /**
       * Verify signatures of a complete, signed Transaction
       */


      verifySignatures() {
        return this._verifySignatures(this.serializeMessage(), true);
      }
      /**
       * @internal
       */


      _verifySignatures(signData, requireAllSignatures) {
        for (const {
          signature,
          publicKey
        } of this.signatures) {
          if (signature === null) {
            if (requireAllSignatures) {
              return false;
            }
          } else {
            if (!naclFast.sign.detached.verify(signData, signature, publicKey.toBuffer())) {
              return false;
            }
          }
        }

        return true;
      }
      /**
       * Serialize the Transaction in the wire format.
       */


      serialize(config) {
        const {
          requireAllSignatures,
          verifySignatures
        } = Object.assign({
          requireAllSignatures: true,
          verifySignatures: true
        }, config);
        const signData = this.serializeMessage();

        if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {
          throw new Error('Signature verification failed');
        }

        return this._serialize(signData);
      }
      /**
       * @internal
       */


      _serialize(signData) {
        const {
          signatures
        } = this;
        const signatureCount = [];
        encodeLength(signatureCount, signatures.length);
        const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;
        const wireTransaction = Buffer.alloc(transactionLength);
        assert$7(signatures.length < 256);
        Buffer.from(signatureCount).copy(wireTransaction, 0);
        signatures.forEach(({
          signature
        }, index) => {
          if (signature !== null) {
            assert$7(signature.length === 64, `signature has invalid length`);
            Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);
          }
        });
        signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);
        assert$7(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);
        return wireTransaction;
      }
      /**
       * Deprecated method
       * @internal
       */


      get keys() {
        assert$7(this.instructions.length === 1);
        return this.instructions[0].keys.map(keyObj => keyObj.pubkey);
      }
      /**
       * Deprecated method
       * @internal
       */


      get programId() {
        assert$7(this.instructions.length === 1);
        return this.instructions[0].programId;
      }
      /**
       * Deprecated method
       * @internal
       */


      get data() {
        assert$7(this.instructions.length === 1);
        return this.instructions[0].data;
      }
      /**
       * Parse a wire transaction into a Transaction object.
       */


      static from(buffer) {
        // Slice up wire data
        let byteArray = [...buffer];
        const signatureCount = decodeLength(byteArray);
        let signatures = [];

        for (let i = 0; i < signatureCount; i++) {
          const signature = byteArray.slice(0, SIGNATURE_LENGTH);
          byteArray = byteArray.slice(SIGNATURE_LENGTH);
          signatures.push(bs58.encode(Buffer.from(signature)));
        }

        return Transaction.populate(Message.from(byteArray), signatures);
      }
      /**
       * Populate Transaction object from message and signatures
       */


      static populate(message, signatures = []) {
        const transaction = new Transaction();
        transaction.recentBlockhash = message.recentBlockhash;

        if (message.header.numRequiredSignatures > 0) {
          transaction.feePayer = message.accountKeys[0];
        }

        signatures.forEach((signature, index) => {
          const sigPubkeyPair = {
            signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),
            publicKey: message.accountKeys[index]
          };
          transaction.signatures.push(sigPubkeyPair);
        });
        message.instructions.forEach(instruction => {
          const keys = instruction.accounts.map(account => {
            const pubkey = message.accountKeys[account];
            return {
              pubkey,
              isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),
              isWritable: message.isAccountWritable(account)
            };
          });
          transaction.instructions.push(new TransactionInstruction({
            keys,
            programId: message.accountKeys[instruction.programIdIndex],
            data: bs58.decode(instruction.data)
          }));
        });
        return transaction;
      }

    }

    const SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');
    const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');
    const SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');
    const SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');
    const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');
    const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');

    /**
     * Sign, send and confirm a transaction.
     *
     * If `commitment` option is not specified, defaults to 'max' commitment.
     *
     * @param {Connection} connection
     * @param {Transaction} transaction
     * @param {Array<Signer>} signers
     * @param {ConfirmOptions} [options]
     * @returns {Promise<TransactionSignature>}
     */
    async function sendAndConfirmTransaction$1(connection, transaction, signers, options) {
      const sendOptions = options && {
        skipPreflight: options.skipPreflight,
        preflightCommitment: options.preflightCommitment || options.commitment
      };
      const signature = await connection.sendTransaction(transaction, signers, sendOptions);
      const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;

      if (status.err) {
        throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);
      }

      return signature;
    }

    // zzz
    function sleep(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * @internal
     */

    /**
     * Populate a buffer of instruction data using an InstructionType
     * @internal
     */
    function encodeData(type, fields) {
      const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);
      const data = Buffer.alloc(allocLength);
      const layoutFields = Object.assign({
        instruction: type.index
      }, fields);
      type.layout.encode(layoutFields, data);
      return data;
    }
    /**
     * Decode instruction data buffer using an InstructionType
     * @internal
     */

    function decodeData(type, buffer) {
      let data;

      try {
        data = type.layout.decode(buffer);
      } catch (err) {
        throw new Error('invalid instruction; ' + err);
      }

      if (data.instruction !== type.index) {
        throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);
      }

      return data;
    }

    /**
     * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11
     *
     * @internal
     */

    const FeeCalculatorLayout = Layout_1$1.nu64('lamportsPerSignature');
    /**
     * Calculator for transaction fees.
     */

    /**
     * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32
     *
     * @internal
     */

    const NonceAccountLayout = Layout_1$1.struct([Layout_1$1.u32('version'), Layout_1$1.u32('state'), publicKey$1('authorizedPubkey'), publicKey$1('nonce'), Layout_1$1.struct([FeeCalculatorLayout], 'feeCalculator')]);
    const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;

    /**
     * NonceAccount class
     */
    class NonceAccount {
      /**
       * @internal
       */
      constructor(args) {
        this.authorizedPubkey = void 0;
        this.nonce = void 0;
        this.feeCalculator = void 0;
        this.authorizedPubkey = args.authorizedPubkey;
        this.nonce = args.nonce;
        this.feeCalculator = args.feeCalculator;
      }
      /**
       * Deserialize NonceAccount from the account data.
       *
       * @param buffer account data
       * @return NonceAccount
       */


      static fromAccountData(buffer) {
        const nonceAccount = NonceAccountLayout.decode(toBuffer$1(buffer), 0);
        return new NonceAccount({
          authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),
          nonce: new PublicKey(nonceAccount.nonce).toString(),
          feeCalculator: nonceAccount.feeCalculator
        });
      }

    }

    /**
     * Create account system transaction params
     */

    /**
     * System Instruction class
     */
    class SystemInstruction {
      /**
       * @internal
       */
      constructor() {}
      /**
       * Decode a system instruction and retrieve the instruction type.
       */


      static decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        const instructionTypeLayout = Layout_1$1.u32('instruction');
        const typeIndex = instructionTypeLayout.decode(instruction.data);
        let type;

        for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {
          if (layout.index == typeIndex) {
            type = ixType;
            break;
          }
        }

        if (!type) {
          throw new Error('Instruction type incorrect; not a SystemInstruction');
        }

        return type;
      }
      /**
       * Decode a create account system instruction and retrieve the instruction params.
       */


      static decodeCreateAccount(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const {
          lamports,
          space,
          programId
        } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);
        return {
          fromPubkey: instruction.keys[0].pubkey,
          newAccountPubkey: instruction.keys[1].pubkey,
          lamports,
          space,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode a transfer system instruction and retrieve the instruction params.
       */


      static decodeTransfer(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const {
          lamports
        } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);
        return {
          fromPubkey: instruction.keys[0].pubkey,
          toPubkey: instruction.keys[1].pubkey,
          lamports
        };
      }
      /**
       * Decode a transfer with seed system instruction and retrieve the instruction params.
       */


      static decodeTransferWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        const {
          lamports,
          seed,
          programId
        } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);
        return {
          fromPubkey: instruction.keys[0].pubkey,
          basePubkey: instruction.keys[1].pubkey,
          toPubkey: instruction.keys[2].pubkey,
          lamports,
          seed,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode an allocate system instruction and retrieve the instruction params.
       */


      static decodeAllocate(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);
        const {
          space
        } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);
        return {
          accountPubkey: instruction.keys[0].pubkey,
          space
        };
      }
      /**
       * Decode an allocate with seed system instruction and retrieve the instruction params.
       */


      static decodeAllocateWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);
        const {
          base,
          seed,
          space,
          programId
        } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);
        return {
          accountPubkey: instruction.keys[0].pubkey,
          basePubkey: new PublicKey(base),
          seed,
          space,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode an assign system instruction and retrieve the instruction params.
       */


      static decodeAssign(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);
        const {
          programId
        } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);
        return {
          accountPubkey: instruction.keys[0].pubkey,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode an assign with seed system instruction and retrieve the instruction params.
       */


      static decodeAssignWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);
        const {
          base,
          seed,
          programId
        } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);
        return {
          accountPubkey: instruction.keys[0].pubkey,
          basePubkey: new PublicKey(base),
          seed,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode a create account with seed system instruction and retrieve the instruction params.
       */


      static decodeCreateWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const {
          base,
          seed,
          lamports,
          space,
          programId
        } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);
        return {
          fromPubkey: instruction.keys[0].pubkey,
          newAccountPubkey: instruction.keys[1].pubkey,
          basePubkey: new PublicKey(base),
          seed,
          lamports,
          space,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode a nonce initialize system instruction and retrieve the instruction params.
       */


      static decodeNonceInitialize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        const {
          authorized
        } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);
        return {
          noncePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: new PublicKey(authorized)
        };
      }
      /**
       * Decode a nonce advance system instruction and retrieve the instruction params.
       */


      static decodeNonceAdvance(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);
        return {
          noncePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey
        };
      }
      /**
       * Decode a nonce withdraw system instruction and retrieve the instruction params.
       */


      static decodeNonceWithdraw(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 5);
        const {
          lamports
        } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);
        return {
          noncePubkey: instruction.keys[0].pubkey,
          toPubkey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[4].pubkey,
          lamports
        };
      }
      /**
       * Decode a nonce authorize system instruction and retrieve the instruction params.
       */


      static decodeNonceAuthorize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const {
          authorized
        } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);
        return {
          noncePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[1].pubkey,
          newAuthorizedPubkey: new PublicKey(authorized)
        };
      }
      /**
       * @internal
       */


      static checkProgramId(programId) {
        if (!programId.equals(SystemProgram.programId)) {
          throw new Error('invalid instruction; programId is not SystemProgram');
        }
      }
      /**
       * @internal
       */


      static checkKeyLength(keys, expectedLength) {
        if (keys.length < expectedLength) {
          throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);
        }
      }

    }
    /**
     * An enumeration of valid SystemInstructionType's
     */

    /**
     * An enumeration of valid system InstructionType's
     * @internal
     */
    const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({
      Create: {
        index: 0,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), Layout_1$1.ns64('lamports'), Layout_1$1.ns64('space'), publicKey$1('programId')])
      },
      Assign: {
        index: 1,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), publicKey$1('programId')])
      },
      Transfer: {
        index: 2,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), Layout_1$1.ns64('lamports')])
      },
      CreateWithSeed: {
        index: 3,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), publicKey$1('base'), rustString('seed'), Layout_1$1.ns64('lamports'), Layout_1$1.ns64('space'), publicKey$1('programId')])
      },
      AdvanceNonceAccount: {
        index: 4,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction')])
      },
      WithdrawNonceAccount: {
        index: 5,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), Layout_1$1.ns64('lamports')])
      },
      InitializeNonceAccount: {
        index: 6,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), publicKey$1('authorized')])
      },
      AuthorizeNonceAccount: {
        index: 7,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), publicKey$1('authorized')])
      },
      Allocate: {
        index: 8,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), Layout_1$1.ns64('space')])
      },
      AllocateWithSeed: {
        index: 9,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), publicKey$1('base'), rustString('seed'), Layout_1$1.ns64('space'), publicKey$1('programId')])
      },
      AssignWithSeed: {
        index: 10,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), publicKey$1('base'), rustString('seed'), publicKey$1('programId')])
      },
      TransferWithSeed: {
        index: 11,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), Layout_1$1.ns64('lamports'), rustString('seed'), publicKey$1('programId')])
      }
    });
    /**
     * Factory class for transactions to interact with the System program
     */

    class SystemProgram {
      /**
       * @internal
       */
      constructor() {}
      /**
       * Public key that identifies the System program
       */


      /**
       * Generate a transaction instruction that creates a new account
       */
      static createAccount(params) {
        const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;
        const data = encodeData(type, {
          lamports: params.lamports,
          space: params.space,
          programId: toBuffer$1(params.programId.toBuffer())
        });
        return new TransactionInstruction({
          keys: [{
            pubkey: params.fromPubkey,
            isSigner: true,
            isWritable: true
          }, {
            pubkey: params.newAccountPubkey,
            isSigner: true,
            isWritable: true
          }],
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction instruction that transfers lamports from one account to another
       */


      static transfer(params) {
        let data;
        let keys;

        if ('basePubkey' in params) {
          const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;
          data = encodeData(type, {
            lamports: params.lamports,
            seed: params.seed,
            programId: toBuffer$1(params.programId.toBuffer())
          });
          keys = [{
            pubkey: params.fromPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.basePubkey,
            isSigner: true,
            isWritable: false
          }, {
            pubkey: params.toPubkey,
            isSigner: false,
            isWritable: true
          }];
        } else {
          const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;
          data = encodeData(type, {
            lamports: params.lamports
          });
          keys = [{
            pubkey: params.fromPubkey,
            isSigner: true,
            isWritable: true
          }, {
            pubkey: params.toPubkey,
            isSigner: false,
            isWritable: true
          }];
        }

        return new TransactionInstruction({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction instruction that assigns an account to a program
       */


      static assign(params) {
        let data;
        let keys;

        if ('basePubkey' in params) {
          const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;
          data = encodeData(type, {
            base: toBuffer$1(params.basePubkey.toBuffer()),
            seed: params.seed,
            programId: toBuffer$1(params.programId.toBuffer())
          });
          keys = [{
            pubkey: params.accountPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.basePubkey,
            isSigner: true,
            isWritable: false
          }];
        } else {
          const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;
          data = encodeData(type, {
            programId: toBuffer$1(params.programId.toBuffer())
          });
          keys = [{
            pubkey: params.accountPubkey,
            isSigner: true,
            isWritable: true
          }];
        }

        return new TransactionInstruction({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction instruction that creates a new account at
       *   an address generated with `from`, a seed, and programId
       */


      static createAccountWithSeed(params) {
        const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;
        const data = encodeData(type, {
          base: toBuffer$1(params.basePubkey.toBuffer()),
          seed: params.seed,
          lamports: params.lamports,
          space: params.space,
          programId: toBuffer$1(params.programId.toBuffer())
        });
        let keys = [{
          pubkey: params.fromPubkey,
          isSigner: true,
          isWritable: true
        }, {
          pubkey: params.newAccountPubkey,
          isSigner: false,
          isWritable: true
        }];

        if (params.basePubkey != params.fromPubkey) {
          keys.push({
            pubkey: params.basePubkey,
            isSigner: true,
            isWritable: false
          });
        }

        return new TransactionInstruction({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction that creates a new Nonce account
       */


      static createNonceAccount(params) {
        const transaction = new Transaction();

        if ('basePubkey' in params && 'seed' in params) {
          transaction.add(SystemProgram.createAccountWithSeed({
            fromPubkey: params.fromPubkey,
            newAccountPubkey: params.noncePubkey,
            basePubkey: params.basePubkey,
            seed: params.seed,
            lamports: params.lamports,
            space: NONCE_ACCOUNT_LENGTH,
            programId: this.programId
          }));
        } else {
          transaction.add(SystemProgram.createAccount({
            fromPubkey: params.fromPubkey,
            newAccountPubkey: params.noncePubkey,
            lamports: params.lamports,
            space: NONCE_ACCOUNT_LENGTH,
            programId: this.programId
          }));
        }

        const initParams = {
          noncePubkey: params.noncePubkey,
          authorizedPubkey: params.authorizedPubkey
        };
        transaction.add(this.nonceInitialize(initParams));
        return transaction;
      }
      /**
       * Generate an instruction to initialize a Nonce account
       */


      static nonceInitialize(params) {
        const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;
        const data = encodeData(type, {
          authorized: toBuffer$1(params.authorizedPubkey.toBuffer())
        });
        const instructionData = {
          keys: [{
            pubkey: params.noncePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_RENT_PUBKEY,
            isSigner: false,
            isWritable: false
          }],
          programId: this.programId,
          data
        };
        return new TransactionInstruction(instructionData);
      }
      /**
       * Generate an instruction to advance the nonce in a Nonce account
       */


      static nonceAdvance(params) {
        const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;
        const data = encodeData(type);
        const instructionData = {
          keys: [{
            pubkey: params.noncePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: params.authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        };
        return new TransactionInstruction(instructionData);
      }
      /**
       * Generate a transaction instruction that withdraws lamports from a Nonce account
       */


      static nonceWithdraw(params) {
        const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;
        const data = encodeData(type, {
          lamports: params.lamports
        });
        return new TransactionInstruction({
          keys: [{
            pubkey: params.noncePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.toPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_RENT_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: params.authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction instruction that authorizes a new PublicKey as the authority
       * on a Nonce account.
       */


      static nonceAuthorize(params) {
        const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;
        const data = encodeData(type, {
          authorized: toBuffer$1(params.newAuthorizedPubkey.toBuffer())
        });
        return new TransactionInstruction({
          keys: [{
            pubkey: params.noncePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a transaction instruction that allocates space in an account without funding
       */


      static allocate(params) {
        let data;
        let keys;

        if ('basePubkey' in params) {
          const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;
          data = encodeData(type, {
            base: toBuffer$1(params.basePubkey.toBuffer()),
            seed: params.seed,
            space: params.space,
            programId: toBuffer$1(params.programId.toBuffer())
          });
          keys = [{
            pubkey: params.accountPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.basePubkey,
            isSigner: true,
            isWritable: false
          }];
        } else {
          const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;
          data = encodeData(type, {
            space: params.space
          });
          keys = [{
            pubkey: params.accountPubkey,
            isSigner: true,
            isWritable: true
          }];
        }

        return new TransactionInstruction({
          keys,
          programId: this.programId,
          data
        });
      }

    }
    SystemProgram.programId = new PublicKey('11111111111111111111111111111111');

    // rest of the Transaction fields
    //
    // TODO: replace 300 with a proper constant for the size of the other
    // Transaction fields

    const CHUNK_SIZE = PACKET_DATA_SIZE - 300;
    /**
     * Program loader interface
     */

    class Loader$1 {
      /**
       * @internal
       */
      constructor() {}
      /**
       * Amount of program data placed in each load Transaction
       */


      /**
       * Minimum number of signatures required to load a program not including
       * retries
       *
       * Can be used to calculate transaction fees
       */
      static getMinNumSignatures(dataLength) {
        return 2 * ( // Every transaction requires two signatures (payer + program)
        Math.ceil(dataLength / Loader$1.chunkSize) + 1 + // Add one for Create transaction
        1) // Add one for Finalize transaction
        ;
      }
      /**
       * Loads a generic program
       *
       * @param connection The connection to use
       * @param payer System account that pays to load the program
       * @param program Account to load the program into
       * @param programId Public key that identifies the loader
       * @param data Program octets
       * @return true if program was loaded successfully, false if program was already loaded
       */


      static async load(connection, payer, program, programId, data) {
        {
          const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created

          const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');
          let transaction = null;

          if (programInfo !== null) {
            if (programInfo.executable) {
              console.error('Program load failed, account is already executable');
              return false;
            }

            if (programInfo.data.length !== data.length) {
              transaction = transaction || new Transaction();
              transaction.add(SystemProgram.allocate({
                accountPubkey: program.publicKey,
                space: data.length
              }));
            }

            if (!programInfo.owner.equals(programId)) {
              transaction = transaction || new Transaction();
              transaction.add(SystemProgram.assign({
                accountPubkey: program.publicKey,
                programId
              }));
            }

            if (programInfo.lamports < balanceNeeded) {
              transaction = transaction || new Transaction();
              transaction.add(SystemProgram.transfer({
                fromPubkey: payer.publicKey,
                toPubkey: program.publicKey,
                lamports: balanceNeeded - programInfo.lamports
              }));
            }
          } else {
            transaction = new Transaction().add(SystemProgram.createAccount({
              fromPubkey: payer.publicKey,
              newAccountPubkey: program.publicKey,
              lamports: balanceNeeded > 0 ? balanceNeeded : 1,
              space: data.length,
              programId
            }));
          } // If the account is already created correctly, skip this step
          // and proceed directly to loading instructions


          if (transaction !== null) {
            await sendAndConfirmTransaction$1(connection, transaction, [payer, program], {
              commitment: 'confirmed'
            });
          }
        }
        const dataLayout = Layout_1$1.struct([Layout_1$1.u32('instruction'), Layout_1$1.u32('offset'), Layout_1$1.u32('bytesLength'), Layout_1$1.u32('bytesLengthPadding'), Layout_1$1.seq(Layout_1$1.u8('byte'), Layout_1$1.offset(Layout_1$1.u32(), -8), 'bytes')]);
        const chunkSize = Loader$1.chunkSize;
        let offset = 0;
        let array = data;
        let transactions = [];

        while (array.length > 0) {
          const bytes = array.slice(0, chunkSize);
          const data = Buffer.alloc(chunkSize + 16);
          dataLayout.encode({
            instruction: 0,
            // Load instruction
            offset,
            bytes
          }, data);
          const transaction = new Transaction().add({
            keys: [{
              pubkey: program.publicKey,
              isSigner: true,
              isWritable: true
            }],
            programId,
            data
          });
          transactions.push(sendAndConfirmTransaction$1(connection, transaction, [payer, program], {
            commitment: 'confirmed'
          })); // Delay between sends in an attempt to reduce rate limit errors

          if (connection._rpcEndpoint.includes('solana.com')) {
            const REQUESTS_PER_SECOND = 4;
            await sleep(1000 / REQUESTS_PER_SECOND);
          }

          offset += chunkSize;
          array = array.slice(chunkSize);
        }

        await Promise.all(transactions); // Finalize the account loaded with program data for execution

        {
          const dataLayout = Layout_1$1.struct([Layout_1$1.u32('instruction')]);
          const data = Buffer.alloc(dataLayout.span);
          dataLayout.encode({
            instruction: 1 // Finalize instruction

          }, data);
          const transaction = new Transaction().add({
            keys: [{
              pubkey: program.publicKey,
              isSigner: true,
              isWritable: true
            }, {
              pubkey: SYSVAR_RENT_PUBKEY,
              isSigner: false,
              isWritable: false
            }],
            programId,
            data
          });
          await sendAndConfirmTransaction$1(connection, transaction, [payer, program], {
            commitment: 'confirmed'
          });
        } // success

        return true;
      }

    }
    Loader$1.chunkSize = CHUNK_SIZE;

    const BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');
    /**
     * Factory class for transactions to interact with a program loader
     */

    class BpfLoader {
      /**
       * Minimum number of signatures required to load a program not including
       * retries
       *
       * Can be used to calculate transaction fees
       */
      static getMinNumSignatures(dataLength) {
        return Loader$1.getMinNumSignatures(dataLength);
      }
      /**
       * Load a BPF program
       *
       * @param connection The connection to use
       * @param payer Account that will pay program loading fees
       * @param program Account to load the program into
       * @param elf The entire ELF containing the BPF program
       * @param loaderProgramId The program id of the BPF loader to use
       * @return true if program was loaded successfully, false if program was already loaded
       */


      static load(connection, payer, program, elf, loaderProgramId) {
        return Loader$1.load(connection, payer, program, loaderProgramId, elf);
      }

    }

    var browserPonyfill = {exports: {}};

    (function (module, exports) {
    var global = typeof self !== 'undefined' ? self : commonjsGlobal;
    var __self__ = (function () {
    function F() {
    this.fetch = false;
    this.DOMException = global.DOMException;
    }
    F.prototype = global;
    return new F();
    })();
    (function(self) {

    ((function (exports) {

      var support = {
        searchParams: 'URLSearchParams' in self,
        iterable: 'Symbol' in self && 'iterator' in Symbol,
        blob:
          'FileReader' in self &&
          'Blob' in self &&
          (function() {
            try {
              new Blob();
              return true
            } catch (e) {
              return false
            }
          })(),
        formData: 'FormData' in self,
        arrayBuffer: 'ArrayBuffer' in self
      };

      function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj)
      }

      if (support.arrayBuffer) {
        var viewClasses = [
          '[object Int8Array]',
          '[object Uint8Array]',
          '[object Uint8ClampedArray]',
          '[object Int16Array]',
          '[object Uint16Array]',
          '[object Int32Array]',
          '[object Uint32Array]',
          '[object Float32Array]',
          '[object Float64Array]'
        ];

        var isArrayBufferView =
          ArrayBuffer.isView ||
          function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
          };
      }

      function normalizeName(name) {
        if (typeof name !== 'string') {
          name = String(name);
        }
        if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
          throw new TypeError('Invalid character in header field name')
        }
        return name.toLowerCase()
      }

      function normalizeValue(value) {
        if (typeof value !== 'string') {
          value = String(value);
        }
        return value
      }

      // Build a destructive iterator for the value list
      function iteratorFor(items) {
        var iterator = {
          next: function() {
            var value = items.shift();
            return {done: value === undefined, value: value}
          }
        };

        if (support.iterable) {
          iterator[Symbol.iterator] = function() {
            return iterator
          };
        }

        return iterator
      }

      function Headers(headers) {
        this.map = {};

        if (headers instanceof Headers) {
          headers.forEach(function(value, name) {
            this.append(name, value);
          }, this);
        } else if (Array.isArray(headers)) {
          headers.forEach(function(header) {
            this.append(header[0], header[1]);
          }, this);
        } else if (headers) {
          Object.getOwnPropertyNames(headers).forEach(function(name) {
            this.append(name, headers[name]);
          }, this);
        }
      }

      Headers.prototype.append = function(name, value) {
        name = normalizeName(name);
        value = normalizeValue(value);
        var oldValue = this.map[name];
        this.map[name] = oldValue ? oldValue + ', ' + value : value;
      };

      Headers.prototype['delete'] = function(name) {
        delete this.map[normalizeName(name)];
      };

      Headers.prototype.get = function(name) {
        name = normalizeName(name);
        return this.has(name) ? this.map[name] : null
      };

      Headers.prototype.has = function(name) {
        return this.map.hasOwnProperty(normalizeName(name))
      };

      Headers.prototype.set = function(name, value) {
        this.map[normalizeName(name)] = normalizeValue(value);
      };

      Headers.prototype.forEach = function(callback, thisArg) {
        for (var name in this.map) {
          if (this.map.hasOwnProperty(name)) {
            callback.call(thisArg, this.map[name], name, this);
          }
        }
      };

      Headers.prototype.keys = function() {
        var items = [];
        this.forEach(function(value, name) {
          items.push(name);
        });
        return iteratorFor(items)
      };

      Headers.prototype.values = function() {
        var items = [];
        this.forEach(function(value) {
          items.push(value);
        });
        return iteratorFor(items)
      };

      Headers.prototype.entries = function() {
        var items = [];
        this.forEach(function(value, name) {
          items.push([name, value]);
        });
        return iteratorFor(items)
      };

      if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
      }

      function consumed(body) {
        if (body.bodyUsed) {
          return Promise.reject(new TypeError('Already read'))
        }
        body.bodyUsed = true;
      }

      function fileReaderReady(reader) {
        return new Promise(function(resolve, reject) {
          reader.onload = function() {
            resolve(reader.result);
          };
          reader.onerror = function() {
            reject(reader.error);
          };
        })
      }

      function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise
      }

      function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsText(blob);
        return promise
      }

      function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);

        for (var i = 0; i < view.length; i++) {
          chars[i] = String.fromCharCode(view[i]);
        }
        return chars.join('')
      }

      function bufferClone(buf) {
        if (buf.slice) {
          return buf.slice(0)
        } else {
          var view = new Uint8Array(buf.byteLength);
          view.set(new Uint8Array(buf));
          return view.buffer
        }
      }

      function Body() {
        this.bodyUsed = false;

        this._initBody = function(body) {
          this._bodyInit = body;
          if (!body) {
            this._bodyText = '';
          } else if (typeof body === 'string') {
            this._bodyText = body;
          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body;
          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
            this._bodyFormData = body;
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this._bodyText = body.toString();
          } else if (support.arrayBuffer && support.blob && isDataView(body)) {
            this._bodyArrayBuffer = bufferClone(body.buffer);
            // IE 10-11 can't handle a DataView body.
            this._bodyInit = new Blob([this._bodyArrayBuffer]);
          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
            this._bodyArrayBuffer = bufferClone(body);
          } else {
            this._bodyText = body = Object.prototype.toString.call(body);
          }

          if (!this.headers.get('content-type')) {
            if (typeof body === 'string') {
              this.headers.set('content-type', 'text/plain;charset=UTF-8');
            } else if (this._bodyBlob && this._bodyBlob.type) {
              this.headers.set('content-type', this._bodyBlob.type);
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
            }
          }
        };

        if (support.blob) {
          this.blob = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected
            }

            if (this._bodyBlob) {
              return Promise.resolve(this._bodyBlob)
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(new Blob([this._bodyArrayBuffer]))
            } else if (this._bodyFormData) {
              throw new Error('could not read FormData body as blob')
            } else {
              return Promise.resolve(new Blob([this._bodyText]))
            }
          };

          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
            } else {
              return this.blob().then(readBlobAsArrayBuffer)
            }
          };
        }

        this.text = function() {
          var rejected = consumed(this);
          if (rejected) {
            return rejected
          }

          if (this._bodyBlob) {
            return readBlobAsText(this._bodyBlob)
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as text')
          } else {
            return Promise.resolve(this._bodyText)
          }
        };

        if (support.formData) {
          this.formData = function() {
            return this.text().then(decode)
          };
        }

        this.json = function() {
          return this.text().then(JSON.parse)
        };

        return this
      }

      // HTTP methods whose capitalization should be normalized
      var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

      function normalizeMethod(method) {
        var upcased = method.toUpperCase();
        return methods.indexOf(upcased) > -1 ? upcased : method
      }

      function Request(input, options) {
        options = options || {};
        var body = options.body;

        if (input instanceof Request) {
          if (input.bodyUsed) {
            throw new TypeError('Already read')
          }
          this.url = input.url;
          this.credentials = input.credentials;
          if (!options.headers) {
            this.headers = new Headers(input.headers);
          }
          this.method = input.method;
          this.mode = input.mode;
          this.signal = input.signal;
          if (!body && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
          }
        } else {
          this.url = String(input);
        }

        this.credentials = options.credentials || this.credentials || 'same-origin';
        if (options.headers || !this.headers) {
          this.headers = new Headers(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || 'GET');
        this.mode = options.mode || this.mode || null;
        this.signal = options.signal || this.signal;
        this.referrer = null;

        if ((this.method === 'GET' || this.method === 'HEAD') && body) {
          throw new TypeError('Body not allowed for GET or HEAD requests')
        }
        this._initBody(body);
      }

      Request.prototype.clone = function() {
        return new Request(this, {body: this._bodyInit})
      };

      function decode(body) {
        var form = new FormData();
        body
          .trim()
          .split('&')
          .forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split('=');
              var name = split.shift().replace(/\+/g, ' ');
              var value = split.join('=').replace(/\+/g, ' ');
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
        return form
      }

      function parseHeaders(rawHeaders) {
        var headers = new Headers();
        // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
        // https://tools.ietf.org/html/rfc7230#section-3.2
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
        preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
          var parts = line.split(':');
          var key = parts.shift().trim();
          if (key) {
            var value = parts.join(':').trim();
            headers.append(key, value);
          }
        });
        return headers
      }

      Body.call(Request.prototype);

      function Response(bodyInit, options) {
        if (!options) {
          options = {};
        }

        this.type = 'default';
        this.status = options.status === undefined ? 200 : options.status;
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = 'statusText' in options ? options.statusText : 'OK';
        this.headers = new Headers(options.headers);
        this.url = options.url || '';
        this._initBody(bodyInit);
      }

      Body.call(Response.prototype);

      Response.prototype.clone = function() {
        return new Response(this._bodyInit, {
          status: this.status,
          statusText: this.statusText,
          headers: new Headers(this.headers),
          url: this.url
        })
      };

      Response.error = function() {
        var response = new Response(null, {status: 0, statusText: ''});
        response.type = 'error';
        return response
      };

      var redirectStatuses = [301, 302, 303, 307, 308];

      Response.redirect = function(url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
          throw new RangeError('Invalid status code')
        }

        return new Response(null, {status: status, headers: {location: url}})
      };

      exports.DOMException = self.DOMException;
      try {
        new exports.DOMException();
      } catch (err) {
        exports.DOMException = function(message, name) {
          this.message = message;
          this.name = name;
          var error = Error(message);
          this.stack = error.stack;
        };
        exports.DOMException.prototype = Object.create(Error.prototype);
        exports.DOMException.prototype.constructor = exports.DOMException;
      }

      function fetch(input, init) {
        return new Promise(function(resolve, reject) {
          var request = new Request(input, init);

          if (request.signal && request.signal.aborted) {
            return reject(new exports.DOMException('Aborted', 'AbortError'))
          }

          var xhr = new XMLHttpRequest();

          function abortXhr() {
            xhr.abort();
          }

          xhr.onload = function() {
            var options = {
              status: xhr.status,
              statusText: xhr.statusText,
              headers: parseHeaders(xhr.getAllResponseHeaders() || '')
            };
            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
            var body = 'response' in xhr ? xhr.response : xhr.responseText;
            resolve(new Response(body, options));
          };

          xhr.onerror = function() {
            reject(new TypeError('Network request failed'));
          };

          xhr.ontimeout = function() {
            reject(new TypeError('Network request failed'));
          };

          xhr.onabort = function() {
            reject(new exports.DOMException('Aborted', 'AbortError'));
          };

          xhr.open(request.method, request.url, true);

          if (request.credentials === 'include') {
            xhr.withCredentials = true;
          } else if (request.credentials === 'omit') {
            xhr.withCredentials = false;
          }

          if ('responseType' in xhr && support.blob) {
            xhr.responseType = 'blob';
          }

          request.headers.forEach(function(value, name) {
            xhr.setRequestHeader(name, value);
          });

          if (request.signal) {
            request.signal.addEventListener('abort', abortXhr);

            xhr.onreadystatechange = function() {
              // DONE (success or failure)
              if (xhr.readyState === 4) {
                request.signal.removeEventListener('abort', abortXhr);
              }
            };
          }

          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
        })
      }

      fetch.polyfill = true;

      if (!self.fetch) {
        self.fetch = fetch;
        self.Headers = Headers;
        self.Request = Request;
        self.Response = Response;
      }

      exports.Headers = Headers;
      exports.Request = Request;
      exports.Response = Response;
      exports.fetch = fetch;

      Object.defineProperty(exports, '__esModule', { value: true });

      return exports;

    })({}));
    })(__self__);
    __self__.fetch.ponyfill = true;
    // Remove "polyfill" property added by whatwg-fetch
    delete __self__.fetch.polyfill;
    // Choose between native implementation (global) or custom implementation (__self__)
    // var ctx = global.fetch ? global : __self__;
    var ctx = __self__; // this line disable service worker support temporarily
    exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'
    exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.
    exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
    }(browserPonyfill, browserPonyfill.exports));

    var fetch$1 = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfill.exports);

    const MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.

    function trailingZeros(n) {
      let trailingZeros = 0;

      while (n > 1) {
        n /= 2;
        trailingZeros++;
      }

      return trailingZeros;
    } // Returns the smallest power of two greater than or equal to n


    function nextPowerOfTwo(n) {
      if (n === 0) return 1;
      n--;
      n |= n >> 1;
      n |= n >> 2;
      n |= n >> 4;
      n |= n >> 8;
      n |= n >> 16;
      n |= n >> 32;
      return n + 1;
    }
    /**
     * Epoch schedule
     * (see https://docs.solana.com/terminology#epoch)
     * Can be retrieved with the {@link connection.getEpochSchedule} method
     */


    class EpochSchedule {
      /** The maximum number of slots in each epoch */

      /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */

      /** Indicates whether epochs start short and grow */

      /** The first epoch with `slotsPerEpoch` slots */

      /** The first slot of `firstNormalEpoch` */
      constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {
        this.slotsPerEpoch = void 0;
        this.leaderScheduleSlotOffset = void 0;
        this.warmup = void 0;
        this.firstNormalEpoch = void 0;
        this.firstNormalSlot = void 0;
        this.slotsPerEpoch = slotsPerEpoch;
        this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;
        this.warmup = warmup;
        this.firstNormalEpoch = firstNormalEpoch;
        this.firstNormalSlot = firstNormalSlot;
      }

      getEpoch(slot) {
        return this.getEpochAndSlotIndex(slot)[0];
      }

      getEpochAndSlotIndex(slot) {
        if (slot < this.firstNormalSlot) {
          const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;
          const epochLen = this.getSlotsInEpoch(epoch);
          const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);
          return [epoch, slotIndex];
        } else {
          const normalSlotIndex = slot - this.firstNormalSlot;
          const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);
          const epoch = this.firstNormalEpoch + normalEpochIndex;
          const slotIndex = normalSlotIndex % this.slotsPerEpoch;
          return [epoch, slotIndex];
        }
      }

      getFirstSlotInEpoch(epoch) {
        if (epoch <= this.firstNormalEpoch) {
          return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;
        } else {
          return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;
        }
      }

      getLastSlotInEpoch(epoch) {
        return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;
      }

      getSlotsInEpoch(epoch) {
        if (epoch < this.firstNormalEpoch) {
          return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));
        } else {
          return this.slotsPerEpoch;
        }
      }

    }

    class SendTransactionError extends Error {
      constructor(message, logs) {
        super(message);
        this.logs = void 0;
        this.logs = logs;
      }

    }

    // TODO: These constants should be removed in favor of reading them out of a
    // Syscall account

    /**
     * @internal
     */
    const NUM_TICKS_PER_SECOND = 160;
    /**
     * @internal
     */

    const DEFAULT_TICKS_PER_SLOT = 64;
    /**
     * @internal
     */

    const NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;
    /**
     * @internal
     */

    const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;

    function promiseTimeout(promise, timeoutMs) {
      let timeoutId;
      const timeoutPromise = new Promise(resolve => {
        timeoutId = setTimeout(() => resolve(null), timeoutMs);
      });
      return Promise.race([promise, timeoutPromise]).then(result => {
        clearTimeout(timeoutId);
        return result;
      });
    }

    function makeWebsocketUrl(endpoint) {
      let url = new URL(endpoint);
      const useHttps = url.protocol === 'https:';
      url.protocol = useHttps ? 'wss:' : 'ws:';
      url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint
      // is explictly specifying the endpoint port (HTTP-based RPC), assuming
      // we're directly trying to connect to solana-validator's ws listening port.
      // When the endpoint omits the port, we're connecting to the protocol
      // default ports: http(80) or https(443) and it's assumed we're behind a reverse
      // proxy which manages WebSocket upgrade and backend port redirection.

      if (url.port !== '') {
        url.port = String(Number(url.port) + 1);
      }

      return url.toString();
    }

    const PublicKeyFromString = coerce(instance$B(PublicKey), string(), value => new PublicKey(value));
    const RawAccountDataResult = tuple([string(), literal('base64')]);
    const BufferFromRawAccountData = coerce(instance$B(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));
    /**
     * Attempt to use a recent blockhash for up to 30 seconds
     * @internal
     */

    const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;

    /**
     * @internal
     */
    function createRpcResult(result) {
      return union$1([type({
        jsonrpc: literal('2.0'),
        id: string(),
        result
      }), type({
        jsonrpc: literal('2.0'),
        id: string(),
        error: type({
          code: unknown(),
          message: string(),
          data: optional(any())
        })
      })]);
    }

    const UnknownRpcResult = createRpcResult(unknown());
    /**
     * @internal
     */

    function jsonRpcResult(schema) {
      return coerce(createRpcResult(schema), UnknownRpcResult, value => {
        if ('error' in value) {
          return value;
        } else {
          return { ...value,
            result: create(value.result, schema)
          };
        }
      });
    }
    /**
     * @internal
     */


    function jsonRpcResultAndContext(value) {
      return jsonRpcResult(type({
        context: type({
          slot: number()
        }),
        value
      }));
    }
    /**
     * @internal
     */


    function notificationResultAndContext(value) {
      return type({
        context: type({
          slot: number()
        }),
        value
      });
    }
    /**
     * The level of commitment desired when querying state
     * <pre>
     *   'processed': Query the most recent block which has reached 1 confirmation by the connected node
     *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster
     *   'finalized': Query the most recent block which has been finalized by the cluster
     * </pre>
     */


    const GetInflationGovernorResult = type({
      foundation: number(),
      foundationTerm: number(),
      initial: number(),
      taper: number(),
      terminal: number()
    });
    /**
     * The inflation reward for an epoch
     */

    /**
     * Expected JSON RPC response for the "getInflationReward" message
     */
    const GetInflationRewardResult = jsonRpcResult(array(nullable(type({
      epoch: number(),
      effectiveSlot: number(),
      amount: number(),
      postBalance: number()
    }))));
    /**
     * Information about the current epoch
     */

    const GetEpochInfoResult = type({
      epoch: number(),
      slotIndex: number(),
      slotsInEpoch: number(),
      absoluteSlot: number(),
      blockHeight: optional(number()),
      transactionCount: optional(number())
    });
    const GetEpochScheduleResult = type({
      slotsPerEpoch: number(),
      leaderScheduleSlotOffset: number(),
      warmup: boolean(),
      firstNormalEpoch: number(),
      firstNormalSlot: number()
    });
    /**
     * Leader schedule
     * (see https://docs.solana.com/terminology#leader-schedule)
     */

    const GetLeaderScheduleResult = record(string(), array(number()));
    /**
     * Transaction error or null
     */

    const TransactionErrorResult = nullable(union$1([type({}), string()]));
    /**
     * Signature status for a transaction
     */

    const SignatureStatusResult = type({
      err: TransactionErrorResult
    });
    /**
     * Transaction signature received notification
     */

    const SignatureReceivedResult = literal('receivedSignature');
    /**
     * Version info for a node
     */

    const VersionResult = type({
      'solana-core': string(),
      'feature-set': optional(number())
    });
    const SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({
      err: nullable(union$1([type({}), string()])),
      logs: nullable(array(string())),
      accounts: optional(nullable(array(type({
        executable: boolean(),
        owner: string(),
        lamports: number(),
        data: array(string()),
        rentEpoch: optional(number())
      })))),
      unitsConsumed: optional(number())
    }));

    function createRpcClient(url, useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit) {

      let fetchWithMiddleware;

      if (fetchMiddleware) {
        fetchWithMiddleware = (url, options) => {
          return new Promise((resolve, reject) => {
            fetchMiddleware(url, options, async (url, options) => {
              try {
                resolve(await fetch$1(url, options));
              } catch (error) {
                reject(error);
              }
            });
          });
        };
      }

      const clientBrowser = new browser$1(async (request, callback) => {
        const agent = undefined;
        const options = {
          method: 'POST',
          body: request,
          agent,
          headers: Object.assign({
            'Content-Type': 'application/json'
          }, httpHeaders || {})
        };

        try {
          let too_many_requests_retries = 5;
          let res;
          let waitTime = 500;

          for (;;) {
            if (fetchWithMiddleware) {
              res = await fetchWithMiddleware(url, options);
            } else {
              res = await fetch$1(url, options);
            }

            if (res.status !== 429
            /* Too many requests */
            ) {
              break;
            }

            if (disableRetryOnRateLimit === true) {
              break;
            }

            too_many_requests_retries -= 1;

            if (too_many_requests_retries === 0) {
              break;
            }

            console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);
            await sleep(waitTime);
            waitTime *= 2;
          }

          const text = await res.text();

          if (res.ok) {
            callback(null, text);
          } else {
            callback(new Error(`${res.status} ${res.statusText}: ${text}`));
          }
        } catch (err) {
          if (err instanceof Error) callback(err);
        } finally {
        }
      }, {});
      return clientBrowser;
    }

    function createRpcRequest(client) {
      return (method, args) => {
        return new Promise((resolve, reject) => {
          client.request(method, args, (err, response) => {
            if (err) {
              reject(err);
              return;
            }

            resolve(response);
          });
        });
      };
    }

    function createRpcBatchRequest(client) {
      return requests => {
        return new Promise((resolve, reject) => {
          // Do nothing if requests is empty
          if (requests.length === 0) resolve([]);
          const batch = requests.map(params => {
            return client.request(params.methodName, params.args);
          });
          client.request(batch, (err, response) => {
            if (err) {
              reject(err);
              return;
            }

            resolve(response);
          });
        });
      };
    }
    /**
     * Expected JSON RPC response for the "getInflationGovernor" message
     */


    const GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);
    /**
     * Expected JSON RPC response for the "getEpochInfo" message
     */

    const GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);
    /**
     * Expected JSON RPC response for the "getEpochSchedule" message
     */

    const GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);
    /**
     * Expected JSON RPC response for the "getLeaderSchedule" message
     */

    const GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);
    /**
     * Expected JSON RPC response for the "minimumLedgerSlot" and "getFirstAvailableBlock" messages
     */

    const SlotRpcResult = jsonRpcResult(number());
    /**
     * Supply
     */

    /**
     * Expected JSON RPC response for the "getSupply" message
     */
    const GetSupplyRpcResult = jsonRpcResultAndContext(type({
      total: number(),
      circulating: number(),
      nonCirculating: number(),
      nonCirculatingAccounts: array(PublicKeyFromString)
    }));
    /**
     * Token amount object which returns a token amount in different formats
     * for various client use cases.
     */

    /**
     * Expected JSON RPC structure for token amounts
     */
    const TokenAmountResult = type({
      amount: string(),
      uiAmount: nullable(number()),
      decimals: number(),
      uiAmountString: optional(string())
    });
    /**
     * Token address and balance.
     */

    /**
     * Expected JSON RPC response for the "getTokenLargestAccounts" message
     */
    const GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({
      address: PublicKeyFromString,
      amount: string(),
      uiAmount: nullable(number()),
      decimals: number(),
      uiAmountString: optional(string())
    })));
    /**
     * Expected JSON RPC response for the "getTokenAccountsByOwner" message
     */

    const GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({
      pubkey: PublicKeyFromString,
      account: type({
        executable: boolean(),
        owner: PublicKeyFromString,
        lamports: number(),
        data: BufferFromRawAccountData,
        rentEpoch: number()
      })
    })));
    const ParsedAccountDataResult = type({
      program: string(),
      parsed: unknown(),
      space: number()
    });
    /**
     * Expected JSON RPC response for the "getTokenAccountsByOwner" message with parsed data
     */

    const GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({
      pubkey: PublicKeyFromString,
      account: type({
        executable: boolean(),
        owner: PublicKeyFromString,
        lamports: number(),
        data: ParsedAccountDataResult,
        rentEpoch: number()
      })
    })));
    /**
     * Pair of an account address and its balance
     */

    /**
     * Expected JSON RPC response for the "getLargestAccounts" message
     */
    const GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({
      lamports: number(),
      address: PublicKeyFromString
    })));
    /**
     * @internal
     */

    const AccountInfoResult = type({
      executable: boolean(),
      owner: PublicKeyFromString,
      lamports: number(),
      data: BufferFromRawAccountData,
      rentEpoch: number()
    });
    /**
     * @internal
     */

    const KeyedAccountInfoResult = type({
      pubkey: PublicKeyFromString,
      account: AccountInfoResult
    });
    const ParsedOrRawAccountData = coerce(union$1([instance$B(Buffer), ParsedAccountDataResult]), union$1([RawAccountDataResult, ParsedAccountDataResult]), value => {
      if (Array.isArray(value)) {
        return create(value, BufferFromRawAccountData);
      } else {
        return value;
      }
    });
    /**
     * @internal
     */

    const ParsedAccountInfoResult = type({
      executable: boolean(),
      owner: PublicKeyFromString,
      lamports: number(),
      data: ParsedOrRawAccountData,
      rentEpoch: number()
    });
    const KeyedParsedAccountInfoResult = type({
      pubkey: PublicKeyFromString,
      account: ParsedAccountInfoResult
    });
    /**
     * @internal
     */

    const StakeActivationResult = type({
      state: union$1([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),
      active: number(),
      inactive: number()
    });
    /**
     * Expected JSON RPC response for the "getConfirmedSignaturesForAddress2" message
     */

    const GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({
      signature: string(),
      slot: number(),
      err: TransactionErrorResult,
      memo: nullable(string()),
      blockTime: optional(nullable(number()))
    })));
    /**
     * Expected JSON RPC response for the "getSignaturesForAddress" message
     */

    const GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({
      signature: string(),
      slot: number(),
      err: TransactionErrorResult,
      memo: nullable(string()),
      blockTime: optional(nullable(number()))
    })));
    /***
     * Expected JSON RPC response for the "accountNotification" message
     */

    const AccountNotificationResult = type({
      subscription: number(),
      result: notificationResultAndContext(AccountInfoResult)
    });
    /**
     * @internal
     */

    const ProgramAccountInfoResult = type({
      pubkey: PublicKeyFromString,
      account: AccountInfoResult
    });
    /***
     * Expected JSON RPC response for the "programNotification" message
     */

    const ProgramAccountNotificationResult = type({
      subscription: number(),
      result: notificationResultAndContext(ProgramAccountInfoResult)
    });
    /**
     * @internal
     */

    const SlotInfoResult = type({
      parent: number(),
      slot: number(),
      root: number()
    });
    /**
     * Expected JSON RPC response for the "slotNotification" message
     */

    const SlotNotificationResult = type({
      subscription: number(),
      result: SlotInfoResult
    });
    /**
     * Slot updates which can be used for tracking the live progress of a cluster.
     * - `"firstShredReceived"`: connected node received the first shred of a block.
     * Indicates that a new block that is being produced.
     * - `"completed"`: connected node has received all shreds of a block. Indicates
     * a block was recently produced.
     * - `"optimisticConfirmation"`: block was optimistically confirmed by the
     * cluster. It is not guaranteed that an optimistic confirmation notification
     * will be sent for every finalized blocks.
     * - `"root"`: the connected node rooted this block.
     * - `"createdBank"`: the connected node has started validating this block.
     * - `"frozen"`: the connected node has validated this block.
     * - `"dead"`: the connected node failed to validate this block.
     */

    /**
     * @internal
     */
    const SlotUpdateResult = union$1([type({
      type: union$1([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),
      slot: number(),
      timestamp: number()
    }), type({
      type: literal('createdBank'),
      parent: number(),
      slot: number(),
      timestamp: number()
    }), type({
      type: literal('frozen'),
      slot: number(),
      timestamp: number(),
      stats: type({
        numTransactionEntries: number(),
        numSuccessfulTransactions: number(),
        numFailedTransactions: number(),
        maxTransactionsPerEntry: number()
      })
    }), type({
      type: literal('dead'),
      slot: number(),
      timestamp: number(),
      err: string()
    })]);
    /**
     * Expected JSON RPC response for the "slotsUpdatesNotification" message
     */

    const SlotUpdateNotificationResult = type({
      subscription: number(),
      result: SlotUpdateResult
    });
    /**
     * Expected JSON RPC response for the "signatureNotification" message
     */

    const SignatureNotificationResult = type({
      subscription: number(),
      result: notificationResultAndContext(union$1([SignatureStatusResult, SignatureReceivedResult]))
    });
    /**
     * Expected JSON RPC response for the "rootNotification" message
     */

    const RootNotificationResult = type({
      subscription: number(),
      result: number()
    });
    const ContactInfoResult = type({
      pubkey: string(),
      gossip: nullable(string()),
      tpu: nullable(string()),
      rpc: nullable(string()),
      version: nullable(string())
    });
    const VoteAccountInfoResult = type({
      votePubkey: string(),
      nodePubkey: string(),
      activatedStake: number(),
      epochVoteAccount: boolean(),
      epochCredits: array(tuple([number(), number(), number()])),
      commission: number(),
      lastVote: number(),
      rootSlot: nullable(number())
    });
    /**
     * Expected JSON RPC response for the "getVoteAccounts" message
     */

    const GetVoteAccounts = jsonRpcResult(type({
      current: array(VoteAccountInfoResult),
      delinquent: array(VoteAccountInfoResult)
    }));
    const ConfirmationStatus = union$1([literal('processed'), literal('confirmed'), literal('finalized')]);
    const SignatureStatusResponse = type({
      slot: number(),
      confirmations: nullable(number()),
      err: TransactionErrorResult,
      confirmationStatus: optional(ConfirmationStatus)
    });
    /**
     * Expected JSON RPC response for the "getSignatureStatuses" message
     */

    const GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));
    /**
     * Expected JSON RPC response for the "getMinimumBalanceForRentExemption" message
     */

    const GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());
    const ConfirmedTransactionResult = type({
      signatures: array(string()),
      message: type({
        accountKeys: array(string()),
        header: type({
          numRequiredSignatures: number(),
          numReadonlySignedAccounts: number(),
          numReadonlyUnsignedAccounts: number()
        }),
        instructions: array(type({
          accounts: array(number()),
          data: string(),
          programIdIndex: number()
        })),
        recentBlockhash: string()
      })
    });
    const ParsedInstructionResult = type({
      parsed: unknown(),
      program: string(),
      programId: PublicKeyFromString
    });
    const RawInstructionResult = type({
      accounts: array(PublicKeyFromString),
      data: string(),
      programId: PublicKeyFromString
    });
    const InstructionResult = union$1([RawInstructionResult, ParsedInstructionResult]);
    const UnknownInstructionResult = union$1([type({
      parsed: unknown(),
      program: string(),
      programId: string()
    }), type({
      accounts: array(string()),
      data: string(),
      programId: string()
    })]);
    const ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {
      if ('accounts' in value) {
        return create(value, RawInstructionResult);
      } else {
        return create(value, ParsedInstructionResult);
      }
    });
    /**
     * @internal
     */

    const ParsedConfirmedTransactionResult = type({
      signatures: array(string()),
      message: type({
        accountKeys: array(type({
          pubkey: PublicKeyFromString,
          signer: boolean(),
          writable: boolean()
        })),
        instructions: array(ParsedOrRawInstruction),
        recentBlockhash: string()
      })
    });
    const TokenBalanceResult = type({
      accountIndex: number(),
      mint: string(),
      uiTokenAmount: TokenAmountResult
    });
    /**
     * @internal
     */

    const ConfirmedTransactionMetaResult = type({
      err: TransactionErrorResult,
      fee: number(),
      innerInstructions: optional(nullable(array(type({
        index: number(),
        instructions: array(type({
          accounts: array(number()),
          data: string(),
          programIdIndex: number()
        }))
      })))),
      preBalances: array(number()),
      postBalances: array(number()),
      logMessages: optional(nullable(array(string()))),
      preTokenBalances: optional(nullable(array(TokenBalanceResult))),
      postTokenBalances: optional(nullable(array(TokenBalanceResult)))
    });
    /**
     * @internal
     */

    const ParsedConfirmedTransactionMetaResult = type({
      err: TransactionErrorResult,
      fee: number(),
      innerInstructions: optional(nullable(array(type({
        index: number(),
        instructions: array(ParsedOrRawInstruction)
      })))),
      preBalances: array(number()),
      postBalances: array(number()),
      logMessages: optional(nullable(array(string()))),
      preTokenBalances: optional(nullable(array(TokenBalanceResult))),
      postTokenBalances: optional(nullable(array(TokenBalanceResult)))
    });
    /**
     * Expected JSON RPC response for the "getConfirmedBlock" message
     */

    const GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({
      blockhash: string(),
      previousBlockhash: string(),
      parentSlot: number(),
      transactions: array(type({
        transaction: ConfirmedTransactionResult,
        meta: nullable(ConfirmedTransactionMetaResult)
      })),
      rewards: optional(array(type({
        pubkey: string(),
        lamports: number(),
        postBalance: nullable(number()),
        rewardType: nullable(string())
      }))),
      blockTime: nullable(number())
    })));
    /**
     * Expected JSON RPC response for the "getConfirmedBlockSignatures" message
     */

    const GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(nullable(type({
      blockhash: string(),
      previousBlockhash: string(),
      parentSlot: number(),
      signatures: array(string()),
      blockTime: nullable(number())
    })));
    /**
     * Expected JSON RPC response for the "getConfirmedTransaction" message
     */

    const GetConfirmedTransactionRpcResult = jsonRpcResult(nullable(type({
      slot: number(),
      meta: ConfirmedTransactionMetaResult,
      blockTime: optional(nullable(number())),
      transaction: ConfirmedTransactionResult
    })));
    /**
     * Expected JSON RPC response for the "getConfirmedTransaction" message
     */

    const GetParsedConfirmedTransactionRpcResult = jsonRpcResult(nullable(type({
      slot: number(),
      transaction: ParsedConfirmedTransactionResult,
      meta: nullable(ParsedConfirmedTransactionMetaResult),
      blockTime: optional(nullable(number()))
    })));
    /**
     * Expected JSON RPC response for the "getRecentBlockhash" message
     */

    const GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({
      blockhash: string(),
      feeCalculator: type({
        lamportsPerSignature: number()
      })
    }));
    const PerfSampleResult = type({
      slot: number(),
      numTransactions: number(),
      numSlots: number(),
      samplePeriodSecs: number()
    });
    /*
     * Expected JSON RPC response for "getRecentPerformanceSamples" message
     */

    const GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));
    /**
     * Expected JSON RPC response for the "getFeeCalculatorForBlockhash" message
     */

    const GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({
      feeCalculator: type({
        lamportsPerSignature: number()
      })
    })));
    /**
     * Expected JSON RPC response for the "requestAirdrop" message
     */

    const RequestAirdropRpcResult = jsonRpcResult(string());
    /**
     * Expected JSON RPC response for the "sendTransaction" message
     */

    const SendTransactionRpcResult = jsonRpcResult(string());
    /**
     * Information about the latest slot being processed by a node
     */

    /**
     * @internal
     */
    const LogsResult = type({
      err: TransactionErrorResult,
      logs: array(string()),
      signature: string()
    });
    /**
     * Logs result.
     */

    /**
     * Expected JSON RPC response for the "logsNotification" message.
     */
    const LogsNotificationResult = type({
      result: notificationResultAndContext(LogsResult),
      subscription: number()
    });
    /**
     * Filter for log subscriptions.
     */

    /**
     * A connection to a fullnode JSON RPC endpoint
     */
    class Connection {
      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /** @internal */

      /**
       * Establish a JSON RPC connection
       *
       * @param endpoint URL to the fullnode JSON RPC endpoint
       * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object
       */
      constructor(endpoint, commitmentOrConfig) {
        this._commitment = void 0;
        this._confirmTransactionInitialTimeout = void 0;
        this._rpcEndpoint = void 0;
        this._rpcWsEndpoint = void 0;
        this._rpcClient = void 0;
        this._rpcRequest = void 0;
        this._rpcBatchRequest = void 0;
        this._rpcWebSocket = void 0;
        this._rpcWebSocketConnected = false;
        this._rpcWebSocketHeartbeat = null;
        this._rpcWebSocketIdleTimeout = null;
        this._disableBlockhashCaching = false;
        this._pollingBlockhash = false;
        this._blockhashInfo = {
          recentBlockhash: null,
          lastFetch: 0,
          transactionSignatures: [],
          simulatedSignatures: []
        };
        this._accountChangeSubscriptionCounter = 0;
        this._accountChangeSubscriptions = {};
        this._programAccountChangeSubscriptionCounter = 0;
        this._programAccountChangeSubscriptions = {};
        this._rootSubscriptionCounter = 0;
        this._rootSubscriptions = {};
        this._signatureSubscriptionCounter = 0;
        this._signatureSubscriptions = {};
        this._slotSubscriptionCounter = 0;
        this._slotSubscriptions = {};
        this._logsSubscriptionCounter = 0;
        this._logsSubscriptions = {};
        this._slotUpdateSubscriptionCounter = 0;
        this._slotUpdateSubscriptions = {};
        let url = new URL(endpoint);
        const useHttps = url.protocol === 'https:';
        let wsEndpoint;
        let httpHeaders;
        let fetchMiddleware;
        let disableRetryOnRateLimit;

        if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {
          this._commitment = commitmentOrConfig;
        } else if (commitmentOrConfig) {
          this._commitment = commitmentOrConfig.commitment;
          this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;
          wsEndpoint = commitmentOrConfig.wsEndpoint;
          httpHeaders = commitmentOrConfig.httpHeaders;
          fetchMiddleware = commitmentOrConfig.fetchMiddleware;
          disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;
        }

        this._rpcEndpoint = endpoint;
        this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);
        this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit);
        this._rpcRequest = createRpcRequest(this._rpcClient);
        this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);
        this._rpcWebSocket = new index_browser.Client(this._rpcWsEndpoint, {
          autoconnect: false,
          max_reconnects: Infinity
        });

        this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));

        this._rpcWebSocket.on('error', this._wsOnError.bind(this));

        this._rpcWebSocket.on('close', this._wsOnClose.bind(this));

        this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));

        this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));

        this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));

        this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));

        this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));

        this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));

        this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));
      }
      /**
       * The default commitment used for requests
       */


      get commitment() {
        return this._commitment;
      }
      /**
       * Fetch the balance for the specified public key, return with context
       */


      async getBalanceAndContext(publicKey, commitment) {
        const args = this._buildArgs([publicKey.toBase58()], commitment);

        const unsafeRes = await this._rpcRequest('getBalance', args);
        const res = create(unsafeRes, jsonRpcResultAndContext(number()));

        if ('error' in res) {
          throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the balance for the specified public key
       */


      async getBalance(publicKey, commitment) {
        return await this.getBalanceAndContext(publicKey, commitment).then(x => x.value).catch(e => {
          throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);
        });
      }
      /**
       * Fetch the estimated production time of a block
       */


      async getBlockTime(slot) {
        const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);
        const res = create(unsafeRes, jsonRpcResult(nullable(number())));

        if ('error' in res) {
          throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the lowest slot that the node has information about in its ledger.
       * This value may increase over time if the node is configured to purge older ledger data
       */


      async getMinimumLedgerSlot() {
        const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);
        const res = create(unsafeRes, jsonRpcResult(number()));

        if ('error' in res) {
          throw new Error('failed to get minimum ledger slot: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the slot of the lowest confirmed block that has not been purged from the ledger
       */


      async getFirstAvailableBlock() {
        const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);
        const res = create(unsafeRes, SlotRpcResult);

        if ('error' in res) {
          throw new Error('failed to get first available block: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch information about the current supply
       */


      async getSupply(config) {
        let configArg = {};

        if (typeof config === 'string') {
          configArg = {
            commitment: config
          };
        } else if (config) {
          configArg = { ...config,
            commitment: config && config.commitment || this.commitment
          };
        } else {
          configArg = {
            commitment: this.commitment
          };
        }

        const unsafeRes = await this._rpcRequest('getSupply', [configArg]);
        const res = create(unsafeRes, GetSupplyRpcResult);

        if ('error' in res) {
          throw new Error('failed to get supply: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the current supply of a token mint
       */


      async getTokenSupply(tokenMintAddress, commitment) {
        const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);

        const unsafeRes = await this._rpcRequest('getTokenSupply', args);
        const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));

        if ('error' in res) {
          throw new Error('failed to get token supply: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the current balance of a token account
       */


      async getTokenAccountBalance(tokenAddress, commitment) {
        const args = this._buildArgs([tokenAddress.toBase58()], commitment);

        const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);
        const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));

        if ('error' in res) {
          throw new Error('failed to get token account balance: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch all the token accounts owned by the specified account
       *
       * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}
       */


      async getTokenAccountsByOwner(ownerAddress, filter, commitment) {
        let _args = [ownerAddress.toBase58()];

        if ('mint' in filter) {
          _args.push({
            mint: filter.mint.toBase58()
          });
        } else {
          _args.push({
            programId: filter.programId.toBase58()
          });
        }

        const args = this._buildArgs(_args, commitment, 'base64');

        const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);
        const res = create(unsafeRes, GetTokenAccountsByOwner);

        if ('error' in res) {
          throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch parsed token accounts owned by the specified account
       *
       * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}
       */


      async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {
        let _args = [ownerAddress.toBase58()];

        if ('mint' in filter) {
          _args.push({
            mint: filter.mint.toBase58()
          });
        } else {
          _args.push({
            programId: filter.programId.toBase58()
          });
        }

        const args = this._buildArgs(_args, commitment, 'jsonParsed');

        const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);
        const res = create(unsafeRes, GetParsedTokenAccountsByOwner);

        if ('error' in res) {
          throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the 20 largest accounts with their current balances
       */


      async getLargestAccounts(config) {
        const arg = { ...config,
          commitment: config && config.commitment || this.commitment
        };
        const args = arg.filter || arg.commitment ? [arg] : [];
        const unsafeRes = await this._rpcRequest('getLargestAccounts', args);
        const res = create(unsafeRes, GetLargestAccountsRpcResult);

        if ('error' in res) {
          throw new Error('failed to get largest accounts: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the 20 largest token accounts with their current balances
       * for a given mint.
       */


      async getTokenLargestAccounts(mintAddress, commitment) {
        const args = this._buildArgs([mintAddress.toBase58()], commitment);

        const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);
        const res = create(unsafeRes, GetTokenLargestAccountsResult);

        if ('error' in res) {
          throw new Error('failed to get token largest accounts: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch all the account info for the specified public key, return with context
       */


      async getAccountInfoAndContext(publicKey, commitment) {
        const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');

        const unsafeRes = await this._rpcRequest('getAccountInfo', args);
        const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));

        if ('error' in res) {
          throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch parsed account info for the specified public key
       */


      async getParsedAccountInfo(publicKey, commitment) {
        const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');

        const unsafeRes = await this._rpcRequest('getAccountInfo', args);
        const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));

        if ('error' in res) {
          throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch all the account info for the specified public key
       */


      async getAccountInfo(publicKey, commitment) {
        try {
          const res = await this.getAccountInfoAndContext(publicKey, commitment);
          return res.value;
        } catch (e) {
          throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);
        }
      }
      /**
       * Fetch all the account info for multiple accounts specified by an array of public keys
       */


      async getMultipleAccountsInfo(publicKeys, commitment) {
        const keys = publicKeys.map(key => key.toBase58());

        const args = this._buildArgs([keys], commitment, 'base64');

        const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);
        const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));

        if ('error' in res) {
          throw new Error('failed to get info for accounts ' + keys + ': ' + res.error.message);
        }

        return res.result.value;
      }
      /**
       * Returns epoch activation information for a stake account that has been delegated
       */


      async getStakeActivation(publicKey, commitment, epoch) {
        const args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {
          epoch
        } : undefined);

        const unsafeRes = await this._rpcRequest('getStakeActivation', args);
        const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));

        if ('error' in res) {
          throw new Error(`failed to get Stake Activation ${publicKey.toBase58()}: ${res.error.message}`);
        }

        return res.result;
      }
      /**
       * Fetch all the accounts owned by the specified program id
       *
       * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}
       */


      async getProgramAccounts(programId, configOrCommitment) {
        const extra = {};
        let commitment;
        let encoding;

        if (configOrCommitment) {
          if (typeof configOrCommitment === 'string') {
            commitment = configOrCommitment;
          } else {
            commitment = configOrCommitment.commitment;
            encoding = configOrCommitment.encoding;

            if (configOrCommitment.dataSlice) {
              extra.dataSlice = configOrCommitment.dataSlice;
            }

            if (configOrCommitment.filters) {
              extra.filters = configOrCommitment.filters;
            }
          }
        }

        const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', extra);

        const unsafeRes = await this._rpcRequest('getProgramAccounts', args);
        const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));

        if ('error' in res) {
          throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch and parse all the accounts owned by the specified program id
       *
       * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}
       */


      async getParsedProgramAccounts(programId, configOrCommitment) {
        const extra = {};
        let commitment;

        if (configOrCommitment) {
          if (typeof configOrCommitment === 'string') {
            commitment = configOrCommitment;
          } else {
            commitment = configOrCommitment.commitment;

            if (configOrCommitment.filters) {
              extra.filters = configOrCommitment.filters;
            }
          }
        }

        const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', extra);

        const unsafeRes = await this._rpcRequest('getProgramAccounts', args);
        const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));

        if ('error' in res) {
          throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Confirm the transaction identified by the specified signature.
       */


      async confirmTransaction(signature, commitment) {
        let decodedSignature;

        try {
          decodedSignature = bs58.decode(signature);
        } catch (err) {
          throw new Error('signature must be base58 encoded: ' + signature);
        }

        assert$7(decodedSignature.length === 64, 'signature has invalid length');
        const start = Date.now();
        const subscriptionCommitment = commitment || this.commitment;
        let subscriptionId;
        let response = null;
        const confirmPromise = new Promise((resolve, reject) => {
          try {
            subscriptionId = this.onSignature(signature, (result, context) => {
              subscriptionId = undefined;
              response = {
                context,
                value: result
              };
              resolve(null);
            }, subscriptionCommitment);
          } catch (err) {
            reject(err);
          }
        });
        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;

        switch (subscriptionCommitment) {
          case 'processed':
          case 'recent':
          case 'single':
          case 'confirmed':
          case 'singleGossip':
            {
              timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;
              break;
            }
        }

        try {
          await promiseTimeout(confirmPromise, timeoutMs);
        } finally {
          if (subscriptionId) {
            this.removeSignatureListener(subscriptionId);
          }
        }

        if (response === null) {
          const duration = (Date.now() - start) / 1000;
          throw new Error(`Transaction was not confirmed in ${duration.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`);
        }

        return response;
      }
      /**
       * Return the list of nodes that are currently participating in the cluster
       */


      async getClusterNodes() {
        const unsafeRes = await this._rpcRequest('getClusterNodes', []);
        const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));

        if ('error' in res) {
          throw new Error('failed to get cluster nodes: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Return the list of nodes that are currently participating in the cluster
       */


      async getVoteAccounts(commitment) {
        const args = this._buildArgs([], commitment);

        const unsafeRes = await this._rpcRequest('getVoteAccounts', args);
        const res = create(unsafeRes, GetVoteAccounts);

        if ('error' in res) {
          throw new Error('failed to get vote accounts: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the current slot that the node is processing
       */


      async getSlot(commitment) {
        const args = this._buildArgs([], commitment);

        const unsafeRes = await this._rpcRequest('getSlot', args);
        const res = create(unsafeRes, jsonRpcResult(number()));

        if ('error' in res) {
          throw new Error('failed to get slot: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the current slot leader of the cluster
       */


      async getSlotLeader(commitment) {
        const args = this._buildArgs([], commitment);

        const unsafeRes = await this._rpcRequest('getSlotLeader', args);
        const res = create(unsafeRes, jsonRpcResult(string()));

        if ('error' in res) {
          throw new Error('failed to get slot leader: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch `limit` number of slot leaders starting from `startSlot`
       *
       * @param startSlot fetch slot leaders starting from this slot
       * @param limit number of slot leaders to return
       */


      async getSlotLeaders(startSlot, limit) {
        const args = [startSlot, limit];
        const unsafeRes = await this._rpcRequest('getSlotLeaders', args);
        const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));

        if ('error' in res) {
          throw new Error('failed to get slot leaders: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the current status of a signature
       */


      async getSignatureStatus(signature, config) {
        const {
          context,
          value: values
        } = await this.getSignatureStatuses([signature], config);
        assert$7(values.length === 1);
        const value = values[0];
        return {
          context,
          value
        };
      }
      /**
       * Fetch the current statuses of a batch of signatures
       */


      async getSignatureStatuses(signatures, config) {
        const params = [signatures];

        if (config) {
          params.push(config);
        }

        const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);
        const res = create(unsafeRes, GetSignatureStatusesRpcResult);

        if ('error' in res) {
          throw new Error('failed to get signature status: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the current transaction count of the cluster
       */


      async getTransactionCount(commitment) {
        const args = this._buildArgs([], commitment);

        const unsafeRes = await this._rpcRequest('getTransactionCount', args);
        const res = create(unsafeRes, jsonRpcResult(number()));

        if ('error' in res) {
          throw new Error('failed to get transaction count: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the current total currency supply of the cluster in lamports
       *
       * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.
       */


      async getTotalSupply(commitment) {
        const result = await this.getSupply({
          commitment,
          excludeNonCirculatingAccountsList: true
        });
        return result.value.total;
      }
      /**
       * Fetch the cluster InflationGovernor parameters
       */


      async getInflationGovernor(commitment) {
        const args = this._buildArgs([], commitment);

        const unsafeRes = await this._rpcRequest('getInflationGovernor', args);
        const res = create(unsafeRes, GetInflationGovernorRpcResult);

        if ('error' in res) {
          throw new Error('failed to get inflation: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the inflation reward for a list of addresses for an epoch
       */


      async getInflationReward(addresses, epoch, commitment) {
        const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined, {
          epoch
        });

        const unsafeRes = await this._rpcRequest('getInflationReward', args);
        const res = create(unsafeRes, GetInflationRewardResult);

        if ('error' in res) {
          throw new Error('failed to get inflation reward: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the Epoch Info parameters
       */


      async getEpochInfo(commitment) {
        const args = this._buildArgs([], commitment);

        const unsafeRes = await this._rpcRequest('getEpochInfo', args);
        const res = create(unsafeRes, GetEpochInfoRpcResult);

        if ('error' in res) {
          throw new Error('failed to get epoch info: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the Epoch Schedule parameters
       */


      async getEpochSchedule() {
        const unsafeRes = await this._rpcRequest('getEpochSchedule', []);
        const res = create(unsafeRes, GetEpochScheduleRpcResult);

        if ('error' in res) {
          throw new Error('failed to get epoch schedule: ' + res.error.message);
        }

        const epochSchedule = res.result;
        return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);
      }
      /**
       * Fetch the leader schedule for the current epoch
       * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}
       */


      async getLeaderSchedule() {
        const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);
        const res = create(unsafeRes, GetLeaderScheduleRpcResult);

        if ('error' in res) {
          throw new Error('failed to get leader schedule: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the minimum balance needed to exempt an account of `dataLength`
       * size from rent
       */


      async getMinimumBalanceForRentExemption(dataLength, commitment) {
        const args = this._buildArgs([dataLength], commitment);

        const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);
        const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);

        if ('error' in res) {
          console.warn('Unable to fetch minimum balance for rent exemption');
          return 0;
        }

        return res.result;
      }
      /**
       * Fetch a recent blockhash from the cluster, return with context
       * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}
       */


      async getRecentBlockhashAndContext(commitment) {
        const args = this._buildArgs([], commitment);

        const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);
        const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);

        if ('error' in res) {
          throw new Error('failed to get recent blockhash: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch recent performance samples
       * @return {Promise<Array<PerfSample>>}
       */


      async getRecentPerformanceSamples(limit) {
        const args = this._buildArgs(limit ? [limit] : []);

        const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', args);
        const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);

        if ('error' in res) {
          throw new Error('failed to get recent performance samples: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the fee calculator for a recent blockhash from the cluster, return with context
       */


      async getFeeCalculatorForBlockhash(blockhash, commitment) {
        const args = this._buildArgs([blockhash], commitment);

        const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);
        const res = create(unsafeRes, GetFeeCalculatorRpcResult);

        if ('error' in res) {
          throw new Error('failed to get fee calculator: ' + res.error.message);
        }

        const {
          context,
          value
        } = res.result;
        return {
          context,
          value: value !== null ? value.feeCalculator : null
        };
      }
      /**
       * Fetch a recent blockhash from the cluster
       * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}
       */


      async getRecentBlockhash(commitment) {
        try {
          const res = await this.getRecentBlockhashAndContext(commitment);
          return res.value;
        } catch (e) {
          throw new Error('failed to get recent blockhash: ' + e);
        }
      }
      /**
       * Fetch the node version
       */


      async getVersion() {
        const unsafeRes = await this._rpcRequest('getVersion', []);
        const res = create(unsafeRes, jsonRpcResult(VersionResult));

        if ('error' in res) {
          throw new Error('failed to get version: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the genesis hash
       */


      async getGenesisHash() {
        const unsafeRes = await this._rpcRequest('getGenesisHash', []);
        const res = create(unsafeRes, jsonRpcResult(string()));

        if ('error' in res) {
          throw new Error('failed to get genesis hash: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch a processed block from the cluster.
       */


      async getBlock(slot, opts) {
        const args = this._buildArgsAtLeastConfirmed([slot], opts && opts.commitment);

        const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);
        const res = create(unsafeRes, GetConfirmedBlockRpcResult);

        if ('error' in res) {
          throw new Error('failed to get confirmed block: ' + res.error.message);
        }

        const result = res.result;
        if (!result) return result;
        return { ...result,
          transactions: result.transactions.map(({
            transaction,
            meta
          }) => {
            const message = new Message(transaction.message);
            return {
              meta,
              transaction: { ...transaction,
                message
              }
            };
          })
        };
      }
      /**
       * Fetch a processed transaction from the cluster.
       */


      async getTransaction(signature, opts) {
        const args = this._buildArgsAtLeastConfirmed([signature], opts && opts.commitment);

        const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);
        const res = create(unsafeRes, GetConfirmedTransactionRpcResult);

        if ('error' in res) {
          throw new Error('failed to get confirmed transaction: ' + res.error.message);
        }

        const result = res.result;
        if (!result) return result;
        return { ...result,
          transaction: { ...result.transaction,
            message: new Message(result.transaction.message)
          }
        };
      }
      /**
       * Fetch a list of Transactions and transaction statuses from the cluster
       * for a confirmed block.
       *
       * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.
       */


      async getConfirmedBlock(slot, commitment) {
        const result = await this.getBlock(slot, {
          commitment
        });

        if (!result) {
          throw new Error('Confirmed block ' + slot + ' not found');
        }

        return { ...result,
          transactions: result.transactions.map(({
            transaction,
            meta
          }) => {
            return {
              meta,
              transaction: Transaction.populate(transaction.message, transaction.signatures)
            };
          })
        };
      }
      /**
       * Fetch confirmed blocks between two slots
       */


      async getBlocks(startSlot, endSlot, commitment) {
        const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);

        const unsafeRes = await this._rpcRequest('getConfirmedBlocks', args);
        const res = create(unsafeRes, jsonRpcResult(array(number())));

        if ('error' in res) {
          throw new Error('failed to get blocks: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards
       */


      async getConfirmedBlockSignatures(slot, commitment) {
        const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {
          transactionDetails: 'signatures',
          rewards: false
        });

        const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);
        const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);

        if ('error' in res) {
          throw new Error('failed to get confirmed block: ' + res.error.message);
        }

        const result = res.result;

        if (!result) {
          throw new Error('Confirmed block ' + slot + ' not found');
        }

        return result;
      }
      /**
       * Fetch a transaction details for a confirmed transaction
       */


      async getConfirmedTransaction(signature, commitment) {
        const result = await this.getTransaction(signature, {
          commitment
        });
        if (!result) return result;
        const {
          message,
          signatures
        } = result.transaction;
        return { ...result,
          transaction: Transaction.populate(message, signatures)
        };
      }
      /**
       * Fetch parsed transaction details for a confirmed transaction
       */


      async getParsedConfirmedTransaction(signature, commitment) {
        const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');

        const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);
        const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);

        if ('error' in res) {
          throw new Error('failed to get confirmed transaction: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch parsed transaction details for a batch of confirmed transactions
       */


      async getParsedConfirmedTransactions(signatures, commitment) {
        const batch = signatures.map(signature => {
          const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');

          return {
            methodName: 'getConfirmedTransaction',
            args
          };
        });
        const unsafeRes = await this._rpcBatchRequest(batch);
        const res = unsafeRes.map(unsafeRes => {
          const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);

          if ('error' in res) {
            throw new Error('failed to get confirmed transactions: ' + res.error.message);
          }

          return res.result;
        });
        return res;
      }
      /**
       * Fetch a list of all the confirmed signatures for transactions involving an address
       * within a specified slot range. Max range allowed is 10,000 slots.
       *
       * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.
       *
       * @param address queried address
       * @param startSlot start slot, inclusive
       * @param endSlot end slot, inclusive
       */


      async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {
        let options = {};
        let firstAvailableBlock = await this.getFirstAvailableBlock();

        while (!('until' in options)) {
          startSlot--;

          if (startSlot <= 0 || startSlot < firstAvailableBlock) {
            break;
          }

          try {
            const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');

            if (block.signatures.length > 0) {
              options.until = block.signatures[block.signatures.length - 1].toString();
            }
          } catch (err) {
            if (err instanceof Error && err.message.includes('skipped')) {
              continue;
            } else {
              throw err;
            }
          }
        }

        let highestConfirmedRoot = await this.getSlot('finalized');

        while (!('before' in options)) {
          endSlot++;

          if (endSlot > highestConfirmedRoot) {
            break;
          }

          try {
            const block = await this.getConfirmedBlockSignatures(endSlot);

            if (block.signatures.length > 0) {
              options.before = block.signatures[block.signatures.length - 1].toString();
            }
          } catch (err) {
            if (err instanceof Error && err.message.includes('skipped')) {
              continue;
            } else {
              throw err;
            }
          }
        }

        const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);
        return confirmedSignatureInfo.map(info => info.signature);
      }
      /**
       * Returns confirmed signatures for transactions involving an
       * address backwards in time from the provided signature or most recent confirmed block
       *
       *
       * @param address queried address
       * @param options
       */


      async getConfirmedSignaturesForAddress2(address, options, commitment) {
        const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);

        const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);
        const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);

        if ('error' in res) {
          throw new Error('failed to get confirmed signatures for address: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Returns confirmed signatures for transactions involving an
       * address backwards in time from the provided signature or most recent confirmed block
       *
       *
       * @param address queried address
       * @param options
       */


      async getSignaturesForAddress(address, options, commitment) {
        const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);

        const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);
        const res = create(unsafeRes, GetSignaturesForAddressRpcResult);

        if ('error' in res) {
          throw new Error('failed to get signatures for address: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * Fetch the contents of a Nonce account from the cluster, return with context
       */


      async getNonceAndContext(nonceAccount, commitment) {
        const {
          context,
          value: accountInfo
        } = await this.getAccountInfoAndContext(nonceAccount, commitment);
        let value = null;

        if (accountInfo !== null) {
          value = NonceAccount.fromAccountData(accountInfo.data);
        }

        return {
          context,
          value
        };
      }
      /**
       * Fetch the contents of a Nonce account from the cluster
       */


      async getNonce(nonceAccount, commitment) {
        return await this.getNonceAndContext(nonceAccount, commitment).then(x => x.value).catch(e => {
          throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);
        });
      }
      /**
       * Request an allocation of lamports to the specified address
       *
       * ```typescript
       * import { Connection, PublicKey, LAMPORTS_PER_SOL } from "@solana/web3.js";
       *
       * (async () => {
       *   const connection = new Connection("https://api.testnet.solana.com", "confirmed");
       *   const myAddress = new PublicKey("2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM");
       *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);
       *   await connection.confirmTransaction(signature);
       * })();
       * ```
       */


      async requestAirdrop(to, lamports) {
        const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);
        const res = create(unsafeRes, RequestAirdropRpcResult);

        if ('error' in res) {
          throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);
        }

        return res.result;
      }
      /**
       * @internal
       */


      async _recentBlockhash(disableCache) {
        if (!disableCache) {
          // Wait for polling to finish
          while (this._pollingBlockhash) {
            await sleep(100);
          }

          const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;

          const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;

          if (this._blockhashInfo.recentBlockhash !== null && !expired) {
            return this._blockhashInfo.recentBlockhash;
          }
        }

        return await this._pollNewBlockhash();
      }
      /**
       * @internal
       */


      async _pollNewBlockhash() {
        this._pollingBlockhash = true;

        try {
          const startTime = Date.now();

          for (let i = 0; i < 50; i++) {
            const {
              blockhash
            } = await this.getRecentBlockhash('finalized');

            if (this._blockhashInfo.recentBlockhash != blockhash) {
              this._blockhashInfo = {
                recentBlockhash: blockhash,
                lastFetch: Date.now(),
                transactionSignatures: [],
                simulatedSignatures: []
              };
              return blockhash;
            } // Sleep for approximately half a slot


            await sleep(MS_PER_SLOT / 2);
          }

          throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);
        } finally {
          this._pollingBlockhash = false;
        }
      }
      /**
       * Simulate a transaction
       */


      async simulateTransaction(transactionOrMessage, signers, includeAccounts) {
        let transaction;

        if (transactionOrMessage instanceof Transaction) {
          transaction = transactionOrMessage;
        } else {
          transaction = Transaction.populate(transactionOrMessage);
        }

        if (transaction.nonceInfo && signers) {
          transaction.sign(...signers);
        } else {
          let disableCache = this._disableBlockhashCaching;

          for (;;) {
            transaction.recentBlockhash = await this._recentBlockhash(disableCache);
            if (!signers) break;
            transaction.sign(...signers);

            if (!transaction.signature) {
              throw new Error('!signature'); // should never happen
            }

            const signature = transaction.signature.toString('base64');

            if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {
              // The signature of this transaction has not been seen before with the
              // current recentBlockhash, all done. Let's break
              this._blockhashInfo.simulatedSignatures.push(signature);

              break;
            } else {
              // This transaction would be treated as duplicate (its derived signature
              // matched to one of already recorded signatures).
              // So, we must fetch a new blockhash for a different signature by disabling
              // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).
              disableCache = true;
            }
          }
        }

        const message = transaction._compile();

        const signData = message.serialize();

        const wireTransaction = transaction._serialize(signData);

        const encodedTransaction = wireTransaction.toString('base64');
        const config = {
          encoding: 'base64',
          commitment: this.commitment
        };

        if (includeAccounts) {
          const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());
          config['accounts'] = {
            encoding: 'base64',
            addresses
          };
        }

        if (signers) {
          config.sigVerify = true;
        }

        const args = [encodedTransaction, config];
        const unsafeRes = await this._rpcRequest('simulateTransaction', args);
        const res = create(unsafeRes, SimulatedTransactionResponseStruct);

        if ('error' in res) {
          let logs;

          if ('data' in res.error) {
            logs = res.error.data.logs;

            if (logs && Array.isArray(logs)) {
              const traceIndent = '\n    ';
              const logTrace = traceIndent + logs.join(traceIndent);
              console.error(res.error.message, logTrace);
            }
          }

          throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);
        }

        return res.result;
      }
      /**
       * Sign and send a transaction
       */


      async sendTransaction(transaction, signers, options) {
        if (transaction.nonceInfo) {
          transaction.sign(...signers);
        } else {
          let disableCache = this._disableBlockhashCaching;

          for (;;) {
            transaction.recentBlockhash = await this._recentBlockhash(disableCache);
            transaction.sign(...signers);

            if (!transaction.signature) {
              throw new Error('!signature'); // should never happen
            }

            const signature = transaction.signature.toString('base64');

            if (!this._blockhashInfo.transactionSignatures.includes(signature)) {
              // The signature of this transaction has not been seen before with the
              // current recentBlockhash, all done. Let's break
              this._blockhashInfo.transactionSignatures.push(signature);

              break;
            } else {
              // This transaction would be treated as duplicate (its derived signature
              // matched to one of already recorded signatures).
              // So, we must fetch a new blockhash for a different signature by disabling
              // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).
              disableCache = true;
            }
          }
        }

        const wireTransaction = transaction.serialize();
        return await this.sendRawTransaction(wireTransaction, options);
      }
      /**
       * Send a transaction that has already been signed and serialized into the
       * wire format
       */


      async sendRawTransaction(rawTransaction, options) {
        const encodedTransaction = toBuffer$1(rawTransaction).toString('base64');
        const result = await this.sendEncodedTransaction(encodedTransaction, options);
        return result;
      }
      /**
       * Send a transaction that has already been signed, serialized into the
       * wire format, and encoded as a base64 string
       */


      async sendEncodedTransaction(encodedTransaction, options) {
        const config = {
          encoding: 'base64'
        };
        const skipPreflight = options && options.skipPreflight;
        const preflightCommitment = options && options.preflightCommitment || this.commitment;

        if (skipPreflight) {
          config.skipPreflight = skipPreflight;
        }

        if (preflightCommitment) {
          config.preflightCommitment = preflightCommitment;
        }

        const args = [encodedTransaction, config];
        const unsafeRes = await this._rpcRequest('sendTransaction', args);
        const res = create(unsafeRes, SendTransactionRpcResult);

        if ('error' in res) {
          let logs;

          if ('data' in res.error) {
            logs = res.error.data.logs;

            if (logs && Array.isArray(logs)) {
              const traceIndent = '\n    ';
              const logTrace = traceIndent + logs.join(traceIndent);
              console.error(res.error.message, logTrace);
            }
          }

          throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);
        }

        return res.result;
      }
      /**
       * @internal
       */


      _wsOnOpen() {
        this._rpcWebSocketConnected = true;
        this._rpcWebSocketHeartbeat = setInterval(() => {
          // Ping server every 5s to prevent idle timeouts
          this._rpcWebSocket.notify('ping').catch(() => {});
        }, 5000);

        this._updateSubscriptions();
      }
      /**
       * @internal
       */


      _wsOnError(err) {
        console.error('ws error:', err.message);
      }
      /**
       * @internal
       */


      _wsOnClose(code) {
        if (this._rpcWebSocketHeartbeat) {
          clearInterval(this._rpcWebSocketHeartbeat);
          this._rpcWebSocketHeartbeat = null;
        }

        if (code === 1000) {
          // explicit close, check if any subscriptions have been made since close
          this._updateSubscriptions();

          return;
        } // implicit close, prepare subscriptions for auto-reconnect


        this._resetSubscriptions();
      }
      /**
       * @internal
       */


      async _subscribe(sub, rpcMethod, rpcArgs) {
        if (sub.subscriptionId == null) {
          sub.subscriptionId = 'subscribing';

          try {
            const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);

            if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {
              // eslint-disable-next-line require-atomic-updates
              sub.subscriptionId = id;
            }
          } catch (err) {
            if (sub.subscriptionId === 'subscribing') {
              // eslint-disable-next-line require-atomic-updates
              sub.subscriptionId = null;
            }

            if (err instanceof Error) {
              console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);
            }
          }
        }
      }
      /**
       * @internal
       */


      async _unsubscribe(sub, rpcMethod) {
        const subscriptionId = sub.subscriptionId;

        if (subscriptionId != null && typeof subscriptionId != 'string') {
          const unsubscribeId = subscriptionId;

          try {
            await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);
          } catch (err) {
            if (err instanceof Error) {
              console.error(`${rpcMethod} error:`, err.message);
            }
          }
        }
      }
      /**
       * @internal
       */


      _resetSubscriptions() {
        Object.values(this._accountChangeSubscriptions).forEach(s => s.subscriptionId = null);
        Object.values(this._programAccountChangeSubscriptions).forEach(s => s.subscriptionId = null);
        Object.values(this._rootSubscriptions).forEach(s => s.subscriptionId = null);
        Object.values(this._signatureSubscriptions).forEach(s => s.subscriptionId = null);
        Object.values(this._slotSubscriptions).forEach(s => s.subscriptionId = null);
        Object.values(this._slotUpdateSubscriptions).forEach(s => s.subscriptionId = null);
      }
      /**
       * @internal
       */


      _updateSubscriptions() {
        const accountKeys = Object.keys(this._accountChangeSubscriptions).map(Number);
        const programKeys = Object.keys(this._programAccountChangeSubscriptions).map(Number);
        const slotKeys = Object.keys(this._slotSubscriptions).map(Number);
        const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(Number);
        const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);
        const rootKeys = Object.keys(this._rootSubscriptions).map(Number);
        const logsKeys = Object.keys(this._logsSubscriptions).map(Number);

        if (accountKeys.length === 0 && programKeys.length === 0 && slotKeys.length === 0 && slotUpdateKeys.length === 0 && signatureKeys.length === 0 && rootKeys.length === 0 && logsKeys.length === 0) {
          if (this._rpcWebSocketConnected) {
            this._rpcWebSocketConnected = false;
            this._rpcWebSocketIdleTimeout = setTimeout(() => {
              this._rpcWebSocketIdleTimeout = null;

              this._rpcWebSocket.close();
            }, 500);
          }

          return;
        }

        if (this._rpcWebSocketIdleTimeout !== null) {
          clearTimeout(this._rpcWebSocketIdleTimeout);
          this._rpcWebSocketIdleTimeout = null;
          this._rpcWebSocketConnected = true;
        }

        if (!this._rpcWebSocketConnected) {
          this._rpcWebSocket.connect();

          return;
        }

        for (let id of accountKeys) {
          const sub = this._accountChangeSubscriptions[id];

          this._subscribe(sub, 'accountSubscribe', this._buildArgs([sub.publicKey], sub.commitment, 'base64'));
        }

        for (let id of programKeys) {
          const sub = this._programAccountChangeSubscriptions[id];

          this._subscribe(sub, 'programSubscribe', this._buildArgs([sub.programId], sub.commitment, 'base64', {
            filters: sub.filters
          }));
        }

        for (let id of slotKeys) {
          const sub = this._slotSubscriptions[id];

          this._subscribe(sub, 'slotSubscribe', []);
        }

        for (let id of slotUpdateKeys) {
          const sub = this._slotUpdateSubscriptions[id];

          this._subscribe(sub, 'slotsUpdatesSubscribe', []);
        }

        for (let id of signatureKeys) {
          const sub = this._signatureSubscriptions[id];
          const args = [sub.signature];
          if (sub.options) args.push(sub.options);

          this._subscribe(sub, 'signatureSubscribe', args);
        }

        for (let id of rootKeys) {
          const sub = this._rootSubscriptions[id];

          this._subscribe(sub, 'rootSubscribe', []);
        }

        for (let id of logsKeys) {
          const sub = this._logsSubscriptions[id];
          let filter;

          if (typeof sub.filter === 'object') {
            filter = {
              mentions: [sub.filter.toString()]
            };
          } else {
            filter = sub.filter;
          }

          this._subscribe(sub, 'logsSubscribe', this._buildArgs([filter], sub.commitment));
        }
      }
      /**
       * @internal
       */


      _wsOnAccountNotification(notification) {
        const res = create(notification, AccountNotificationResult);

        for (const sub of Object.values(this._accountChangeSubscriptions)) {
          if (sub.subscriptionId === res.subscription) {
            sub.callback(res.result.value, res.result.context);
            return;
          }
        }
      }
      /**
       * Register a callback to be invoked whenever the specified account changes
       *
       * @param publicKey Public key of the account to monitor
       * @param callback Function to invoke whenever the account is changed
       * @param commitment Specify the commitment level account changes must reach before notification
       * @return subscription id
       */


      onAccountChange(publicKey, callback, commitment) {
        const id = ++this._accountChangeSubscriptionCounter;
        this._accountChangeSubscriptions[id] = {
          publicKey: publicKey.toBase58(),
          callback,
          commitment,
          subscriptionId: null
        };

        this._updateSubscriptions();

        return id;
      }
      /**
       * Deregister an account notification callback
       *
       * @param id subscription id to deregister
       */


      async removeAccountChangeListener(id) {
        if (this._accountChangeSubscriptions[id]) {
          const subInfo = this._accountChangeSubscriptions[id];
          delete this._accountChangeSubscriptions[id];
          await this._unsubscribe(subInfo, 'accountUnsubscribe');

          this._updateSubscriptions();
        } else {
          throw new Error(`Unknown account change id: ${id}`);
        }
      }
      /**
       * @internal
       */


      _wsOnProgramAccountNotification(notification) {
        const res = create(notification, ProgramAccountNotificationResult);

        for (const sub of Object.values(this._programAccountChangeSubscriptions)) {
          if (sub.subscriptionId === res.subscription) {
            const {
              value,
              context
            } = res.result;
            sub.callback({
              accountId: value.pubkey,
              accountInfo: value.account
            }, context);
            return;
          }
        }
      }
      /**
       * Register a callback to be invoked whenever accounts owned by the
       * specified program change
       *
       * @param programId Public key of the program to monitor
       * @param callback Function to invoke whenever the account is changed
       * @param commitment Specify the commitment level account changes must reach before notification
       * @param filters The program account filters to pass into the RPC method
       * @return subscription id
       */


      onProgramAccountChange(programId, callback, commitment, filters) {
        const id = ++this._programAccountChangeSubscriptionCounter;
        this._programAccountChangeSubscriptions[id] = {
          programId: programId.toBase58(),
          callback,
          commitment,
          subscriptionId: null,
          filters
        };

        this._updateSubscriptions();

        return id;
      }
      /**
       * Deregister an account notification callback
       *
       * @param id subscription id to deregister
       */


      async removeProgramAccountChangeListener(id) {
        if (this._programAccountChangeSubscriptions[id]) {
          const subInfo = this._programAccountChangeSubscriptions[id];
          delete this._programAccountChangeSubscriptions[id];
          await this._unsubscribe(subInfo, 'programUnsubscribe');

          this._updateSubscriptions();
        } else {
          throw new Error(`Unknown program account change id: ${id}`);
        }
      }
      /**
       * Registers a callback to be invoked whenever logs are emitted.
       */


      onLogs(filter, callback, commitment) {
        const id = ++this._logsSubscriptionCounter;
        this._logsSubscriptions[id] = {
          filter,
          callback,
          commitment,
          subscriptionId: null
        };

        this._updateSubscriptions();

        return id;
      }
      /**
       * Deregister a logs callback.
       *
       * @param id subscription id to deregister.
       */


      async removeOnLogsListener(id) {
        if (!this._logsSubscriptions[id]) {
          throw new Error(`Unknown logs id: ${id}`);
        }

        const subInfo = this._logsSubscriptions[id];
        delete this._logsSubscriptions[id];
        await this._unsubscribe(subInfo, 'logsUnsubscribe');

        this._updateSubscriptions();
      }
      /**
       * @internal
       */


      _wsOnLogsNotification(notification) {
        const res = create(notification, LogsNotificationResult);
        const keys = Object.keys(this._logsSubscriptions).map(Number);

        for (let id of keys) {
          const sub = this._logsSubscriptions[id];

          if (sub.subscriptionId === res.subscription) {
            sub.callback(res.result.value, res.result.context);
            return;
          }
        }
      }
      /**
       * @internal
       */


      _wsOnSlotNotification(notification) {
        const res = create(notification, SlotNotificationResult);

        for (const sub of Object.values(this._slotSubscriptions)) {
          if (sub.subscriptionId === res.subscription) {
            sub.callback(res.result);
            return;
          }
        }
      }
      /**
       * Register a callback to be invoked upon slot changes
       *
       * @param callback Function to invoke whenever the slot changes
       * @return subscription id
       */


      onSlotChange(callback) {
        const id = ++this._slotSubscriptionCounter;
        this._slotSubscriptions[id] = {
          callback,
          subscriptionId: null
        };

        this._updateSubscriptions();

        return id;
      }
      /**
       * Deregister a slot notification callback
       *
       * @param id subscription id to deregister
       */


      async removeSlotChangeListener(id) {
        if (this._slotSubscriptions[id]) {
          const subInfo = this._slotSubscriptions[id];
          delete this._slotSubscriptions[id];
          await this._unsubscribe(subInfo, 'slotUnsubscribe');

          this._updateSubscriptions();
        } else {
          throw new Error(`Unknown slot change id: ${id}`);
        }
      }
      /**
       * @internal
       */


      _wsOnSlotUpdatesNotification(notification) {
        const res = create(notification, SlotUpdateNotificationResult);

        for (const sub of Object.values(this._slotUpdateSubscriptions)) {
          if (sub.subscriptionId === res.subscription) {
            sub.callback(res.result);
            return;
          }
        }
      }
      /**
       * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s
       * may be useful to track live progress of a cluster.
       *
       * @param callback Function to invoke whenever the slot updates
       * @return subscription id
       */


      onSlotUpdate(callback) {
        const id = ++this._slotUpdateSubscriptionCounter;
        this._slotUpdateSubscriptions[id] = {
          callback,
          subscriptionId: null
        };

        this._updateSubscriptions();

        return id;
      }
      /**
       * Deregister a slot update notification callback
       *
       * @param id subscription id to deregister
       */


      async removeSlotUpdateListener(id) {
        if (this._slotUpdateSubscriptions[id]) {
          const subInfo = this._slotUpdateSubscriptions[id];
          delete this._slotUpdateSubscriptions[id];
          await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');

          this._updateSubscriptions();
        } else {
          throw new Error(`Unknown slot update id: ${id}`);
        }
      }

      _buildArgs(args, override, encoding, extra) {
        const commitment = override || this._commitment;

        if (commitment || encoding || extra) {
          let options = {};

          if (encoding) {
            options.encoding = encoding;
          }

          if (commitment) {
            options.commitment = commitment;
          }

          if (extra) {
            options = Object.assign(options, extra);
          }

          args.push(options);
        }

        return args;
      }
      /**
       * @internal
       */


      _buildArgsAtLeastConfirmed(args, override, encoding, extra) {
        const commitment = override || this._commitment;

        if (commitment && !['confirmed', 'finalized'].includes(commitment)) {
          throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');
        }

        return this._buildArgs(args, override, encoding, extra);
      }
      /**
       * @internal
       */


      _wsOnSignatureNotification(notification) {
        const res = create(notification, SignatureNotificationResult);

        for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {
          if (sub.subscriptionId === res.subscription) {
            if (res.result.value === 'receivedSignature') {
              sub.callback({
                type: 'received'
              }, res.result.context);
            } else {
              // Signatures subscriptions are auto-removed by the RPC service so
              // no need to explicitly send an unsubscribe message
              delete this._signatureSubscriptions[Number(id)];

              this._updateSubscriptions();

              sub.callback({
                type: 'status',
                result: res.result.value
              }, res.result.context);
            }

            return;
          }
        }
      }
      /**
       * Register a callback to be invoked upon signature updates
       *
       * @param signature Transaction signature string in base 58
       * @param callback Function to invoke on signature notifications
       * @param commitment Specify the commitment level signature must reach before notification
       * @return subscription id
       */


      onSignature(signature, callback, commitment) {
        const id = ++this._signatureSubscriptionCounter;
        this._signatureSubscriptions[id] = {
          signature,
          callback: (notification, context) => {
            if (notification.type === 'status') {
              callback(notification.result, context);
            }
          },
          options: {
            commitment
          },
          subscriptionId: null
        };

        this._updateSubscriptions();

        return id;
      }
      /**
       * Register a callback to be invoked when a transaction is
       * received and/or processed.
       *
       * @param signature Transaction signature string in base 58
       * @param callback Function to invoke on signature notifications
       * @param options Enable received notifications and set the commitment
       *   level that signature must reach before notification
       * @return subscription id
       */


      onSignatureWithOptions(signature, callback, options) {
        const id = ++this._signatureSubscriptionCounter;
        this._signatureSubscriptions[id] = {
          signature,
          callback,
          options,
          subscriptionId: null
        };

        this._updateSubscriptions();

        return id;
      }
      /**
       * Deregister a signature notification callback
       *
       * @param id subscription id to deregister
       */


      async removeSignatureListener(id) {
        if (this._signatureSubscriptions[id]) {
          const subInfo = this._signatureSubscriptions[id];
          delete this._signatureSubscriptions[id];
          await this._unsubscribe(subInfo, 'signatureUnsubscribe');

          this._updateSubscriptions();
        } else {
          throw new Error(`Unknown signature result id: ${id}`);
        }
      }
      /**
       * @internal
       */


      _wsOnRootNotification(notification) {
        const res = create(notification, RootNotificationResult);

        for (const sub of Object.values(this._rootSubscriptions)) {
          if (sub.subscriptionId === res.subscription) {
            sub.callback(res.result);
            return;
          }
        }
      }
      /**
       * Register a callback to be invoked upon root changes
       *
       * @param callback Function to invoke whenever the root changes
       * @return subscription id
       */


      onRootChange(callback) {
        const id = ++this._rootSubscriptionCounter;
        this._rootSubscriptions[id] = {
          callback,
          subscriptionId: null
        };

        this._updateSubscriptions();

        return id;
      }
      /**
       * Deregister a root notification callback
       *
       * @param id subscription id to deregister
       */


      async removeRootChangeListener(id) {
        if (this._rootSubscriptions[id]) {
          const subInfo = this._rootSubscriptions[id];
          delete this._rootSubscriptions[id];
          await this._unsubscribe(subInfo, 'rootUnsubscribe');

          this._updateSubscriptions();
        } else {
          throw new Error(`Unknown root change id: ${id}`);
        }
      }

    }

    /**
     * Keypair signer interface
     */

    /**
     * An account keypair used for signing transactions.
     */
    class Keypair {
      /**
       * Create a new keypair instance.
       * Generate random keypair if no {@link Ed25519Keypair} is provided.
       *
       * @param keypair ed25519 keypair
       */
      constructor(keypair) {
        this._keypair = void 0;

        if (keypair) {
          this._keypair = keypair;
        } else {
          this._keypair = naclFast.sign.keyPair();
        }
      }
      /**
       * Generate a new random keypair
       */


      static generate() {
        return new Keypair(naclFast.sign.keyPair());
      }
      /**
       * Create a keypair from a raw secret key byte array.
       *
       * This method should only be used to recreate a keypair from a previously
       * generated secret key. Generating keypairs from a random seed should be done
       * with the {@link Keypair.fromSeed} method.
       *
       * @throws error if the provided secret key is invalid and validation is not skipped.
       *
       * @param secretKey secret key byte array
       * @param options: skip secret key validation
       */


      static fromSecretKey(secretKey, options) {
        const keypair = naclFast.sign.keyPair.fromSecretKey(secretKey);

        if (!options || !options.skipValidation) {
          const encoder = new TextEncoder();
          const signData = encoder.encode('@solana/web3.js-validation-v1');
          const signature = naclFast.sign.detached(signData, keypair.secretKey);

          if (!naclFast.sign.detached.verify(signData, signature, keypair.publicKey)) {
            throw new Error('provided secretKey is invalid');
          }
        }

        return new Keypair(keypair);
      }
      /**
       * Generate a keypair from a 32 byte seed.
       *
       * @param seed seed byte array
       */


      static fromSeed(seed) {
        return new Keypair(naclFast.sign.keyPair.fromSeed(seed));
      }
      /**
       * The public key for this keypair
       */


      get publicKey() {
        return new PublicKey(this._keypair.publicKey);
      }
      /**
       * The raw secret key for this keypair
       */


      get secretKey() {
        return this._keypair.secretKey;
      }

    }

    const PRIVATE_KEY_BYTES$1 = 64;
    const PUBLIC_KEY_BYTES$1 = 32;
    const SIGNATURE_BYTES = 64;
    /**
     * Params for creating an ed25519 instruction using a public key
     */

    const ED25519_INSTRUCTION_LAYOUT = Layout_1$1.struct([Layout_1$1.u8('numSignatures'), Layout_1$1.u8('padding'), Layout_1$1.u16('signatureOffset'), Layout_1$1.u16('signatureInstructionIndex'), Layout_1$1.u16('publicKeyOffset'), Layout_1$1.u16('publicKeyInstructionIndex'), Layout_1$1.u16('messageDataOffset'), Layout_1$1.u16('messageDataSize'), Layout_1$1.u16('messageInstructionIndex')]);
    class Ed25519Program {
      /**
       * @internal
       */
      constructor() {}
      /**
       * Public key that identifies the ed25519 program
       */


      /**
       * Create an ed25519 instruction with a public key and signature. The
       * public key must be a buffer that is 32 bytes long, and the signature
       * must be a buffer of 64 bytes.
       */
      static createInstructionWithPublicKey(params) {
        const {
          publicKey,
          message,
          signature,
          instructionIndex
        } = params;
        assert$7(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);
        assert$7(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);
        const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;
        const signatureOffset = publicKeyOffset + publicKey.length;
        const messageDataOffset = signatureOffset + signature.length;
        const numSignatures = 1;
        const instructionData = Buffer.alloc(messageDataOffset + message.length);
        ED25519_INSTRUCTION_LAYOUT.encode({
          numSignatures,
          padding: 0,
          signatureOffset,
          signatureInstructionIndex: instructionIndex,
          publicKeyOffset,
          publicKeyInstructionIndex: instructionIndex,
          messageDataOffset,
          messageDataSize: message.length,
          messageInstructionIndex: instructionIndex
        }, instructionData);
        instructionData.fill(publicKey, publicKeyOffset);
        instructionData.fill(signature, signatureOffset);
        instructionData.fill(message, messageDataOffset);
        return new TransactionInstruction({
          keys: [],
          programId: Ed25519Program.programId,
          data: instructionData
        });
      }
      /**
       * Create an ed25519 instruction with a private key. The private key
       * must be a buffer that is 64 bytes long.
       */


      static createInstructionWithPrivateKey(params) {
        const {
          privateKey,
          message,
          instructionIndex
        } = params;
        assert$7(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);

        try {
          const keypair = Keypair.fromSecretKey(privateKey);
          const publicKey = keypair.publicKey.toBytes();
          const signature = naclFast.sign.detached(message, keypair.secretKey);
          return this.createInstructionWithPublicKey({
            publicKey,
            message,
            signature,
            instructionIndex
          });
        } catch (error) {
          throw new Error(`Error creating instruction; ${error}`);
        }
      }

    }
    Ed25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');

    /**
     * Address of the stake config account which configures the rate
     * of stake warmup and cooldown as well as the slashing penalty.
     */

    const STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');
    /**
     * Stake account authority info
     */

    class Authorized {
      /** stake authority */

      /** withdraw authority */

      /**
       * Create a new Authorized object
       * @param staker the stake authority
       * @param withdrawer the withdraw authority
       */
      constructor(staker, withdrawer) {
        this.staker = void 0;
        this.withdrawer = void 0;
        this.staker = staker;
        this.withdrawer = withdrawer;
      }

    }
    /**
     * Stake account lockup info
     */

    class Lockup {
      /** Unix timestamp of lockup expiration */

      /** Epoch of lockup expiration */

      /** Lockup custodian authority */

      /**
       * Create a new Lockup object
       */
      constructor(unixTimestamp, epoch, custodian) {
        this.unixTimestamp = void 0;
        this.epoch = void 0;
        this.custodian = void 0;
        this.unixTimestamp = unixTimestamp;
        this.epoch = epoch;
        this.custodian = custodian;
      }
      /**
       * Default, inactive Lockup value
       */


    }
    /**
     * Create stake account transaction params
     */

    Lockup.default = new Lockup(0, 0, PublicKey.default);

    /**
     * Stake Instruction class
     */
    class StakeInstruction {
      /**
       * @internal
       */
      constructor() {}
      /**
       * Decode a stake instruction and retrieve the instruction type.
       */


      static decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        const instructionTypeLayout = Layout_1$1.u32('instruction');
        const typeIndex = instructionTypeLayout.decode(instruction.data);
        let type;

        for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {
          if (layout.index == typeIndex) {
            type = ixType;
            break;
          }
        }

        if (!type) {
          throw new Error('Instruction type incorrect; not a StakeInstruction');
        }

        return type;
      }
      /**
       * Decode a initialize stake instruction and retrieve the instruction params.
       */


      static decodeInitialize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const {
          authorized,
          lockup
        } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);
        return {
          stakePubkey: instruction.keys[0].pubkey,
          authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),
          lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))
        };
      }
      /**
       * Decode a delegate stake instruction and retrieve the instruction params.
       */


      static decodeDelegate(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 6);
        decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);
        return {
          stakePubkey: instruction.keys[0].pubkey,
          votePubkey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[5].pubkey
        };
      }
      /**
       * Decode an authorize stake instruction and retrieve the instruction params.
       */


      static decodeAuthorize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        const {
          newAuthorized,
          stakeAuthorizationType
        } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);
        const o = {
          stakePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey,
          newAuthorizedPubkey: new PublicKey(newAuthorized),
          stakeAuthorizationType: {
            index: stakeAuthorizationType
          }
        };

        if (instruction.keys.length > 3) {
          o.custodianPubkey = instruction.keys[3].pubkey;
        }

        return o;
      }
      /**
       * Decode an authorize-with-seed stake instruction and retrieve the instruction params.
       */


      static decodeAuthorizeWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const {
          newAuthorized,
          stakeAuthorizationType,
          authoritySeed,
          authorityOwner
        } = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);
        const o = {
          stakePubkey: instruction.keys[0].pubkey,
          authorityBase: instruction.keys[1].pubkey,
          authoritySeed: authoritySeed,
          authorityOwner: new PublicKey(authorityOwner),
          newAuthorizedPubkey: new PublicKey(newAuthorized),
          stakeAuthorizationType: {
            index: stakeAuthorizationType
          }
        };

        if (instruction.keys.length > 3) {
          o.custodianPubkey = instruction.keys[3].pubkey;
        }

        return o;
      }
      /**
       * Decode a split stake instruction and retrieve the instruction params.
       */


      static decodeSplit(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        const {
          lamports
        } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);
        return {
          stakePubkey: instruction.keys[0].pubkey,
          splitStakePubkey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey,
          lamports
        };
      }
      /**
       * Decode a merge stake instruction and retrieve the instruction params.
       */


      static decodeMerge(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);
        return {
          stakePubkey: instruction.keys[0].pubkey,
          sourceStakePubKey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[4].pubkey
        };
      }
      /**
       * Decode a withdraw stake instruction and retrieve the instruction params.
       */


      static decodeWithdraw(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 5);
        const {
          lamports
        } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);
        const o = {
          stakePubkey: instruction.keys[0].pubkey,
          toPubkey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[4].pubkey,
          lamports
        };

        if (instruction.keys.length > 5) {
          o.custodianPubkey = instruction.keys[5].pubkey;
        }

        return o;
      }
      /**
       * Decode a deactivate stake instruction and retrieve the instruction params.
       */


      static decodeDeactivate(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);
        return {
          stakePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey
        };
      }
      /**
       * @internal
       */


      static checkProgramId(programId) {
        if (!programId.equals(StakeProgram.programId)) {
          throw new Error('invalid instruction; programId is not StakeProgram');
        }
      }
      /**
       * @internal
       */


      static checkKeyLength(keys, expectedLength) {
        if (keys.length < expectedLength) {
          throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);
        }
      }

    }
    /**
     * An enumeration of valid StakeInstructionType's
     */

    /**
     * An enumeration of valid stake InstructionType's
     * @internal
     */
    const STAKE_INSTRUCTION_LAYOUTS = Object.freeze({
      Initialize: {
        index: 0,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), authorized(), lockup()])
      },
      Authorize: {
        index: 1,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), publicKey$1('newAuthorized'), Layout_1$1.u32('stakeAuthorizationType')])
      },
      Delegate: {
        index: 2,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction')])
      },
      Split: {
        index: 3,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), Layout_1$1.ns64('lamports')])
      },
      Withdraw: {
        index: 4,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), Layout_1$1.ns64('lamports')])
      },
      Deactivate: {
        index: 5,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction')])
      },
      Merge: {
        index: 7,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction')])
      },
      AuthorizeWithSeed: {
        index: 8,
        layout: Layout_1$1.struct([Layout_1$1.u32('instruction'), publicKey$1('newAuthorized'), Layout_1$1.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey$1('authorityOwner')])
      }
    });
    /**
     * Stake authorization type
     */

    /**
     * An enumeration of valid StakeAuthorizationLayout's
     */
    const StakeAuthorizationLayout = Object.freeze({
      Staker: {
        index: 0
      },
      Withdrawer: {
        index: 1
      }
    });
    /**
     * Factory class for transactions to interact with the Stake program
     */

    class StakeProgram {
      /**
       * @internal
       */
      constructor() {}
      /**
       * Public key that identifies the Stake program
       */


      /**
       * Generate an Initialize instruction to add to a Stake Create transaction
       */
      static initialize(params) {
        const {
          stakePubkey,
          authorized,
          lockup: maybeLockup
        } = params;
        const lockup = maybeLockup || Lockup.default;
        const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;
        const data = encodeData(type, {
          authorized: {
            staker: toBuffer$1(authorized.staker.toBuffer()),
            withdrawer: toBuffer$1(authorized.withdrawer.toBuffer())
          },
          lockup: {
            unixTimestamp: lockup.unixTimestamp,
            epoch: lockup.epoch,
            custodian: toBuffer$1(lockup.custodian.toBuffer())
          }
        });
        const instructionData = {
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RENT_PUBKEY,
            isSigner: false,
            isWritable: false
          }],
          programId: this.programId,
          data
        };
        return new TransactionInstruction(instructionData);
      }
      /**
       * Generate a Transaction that creates a new Stake account at
       *   an address generated with `from`, a seed, and the Stake programId
       */


      static createAccountWithSeed(params) {
        const transaction = new Transaction();
        transaction.add(SystemProgram.createAccountWithSeed({
          fromPubkey: params.fromPubkey,
          newAccountPubkey: params.stakePubkey,
          basePubkey: params.basePubkey,
          seed: params.seed,
          lamports: params.lamports,
          space: this.space,
          programId: this.programId
        }));
        const {
          stakePubkey,
          authorized,
          lockup
        } = params;
        return transaction.add(this.initialize({
          stakePubkey,
          authorized,
          lockup
        }));
      }
      /**
       * Generate a Transaction that creates a new Stake account
       */


      static createAccount(params) {
        const transaction = new Transaction();
        transaction.add(SystemProgram.createAccount({
          fromPubkey: params.fromPubkey,
          newAccountPubkey: params.stakePubkey,
          lamports: params.lamports,
          space: this.space,
          programId: this.programId
        }));
        const {
          stakePubkey,
          authorized,
          lockup
        } = params;
        return transaction.add(this.initialize({
          stakePubkey,
          authorized,
          lockup
        }));
      }
      /**
       * Generate a Transaction that delegates Stake tokens to a validator
       * Vote PublicKey. This transaction can also be used to redelegate Stake
       * to a new validator Vote PublicKey.
       */


      static delegate(params) {
        const {
          stakePubkey,
          authorizedPubkey,
          votePubkey
        } = params;
        const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;
        const data = encodeData(type);
        return new Transaction().add({
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: votePubkey,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: STAKE_CONFIG_ID,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a Transaction that authorizes a new PublicKey as Staker
       * or Withdrawer on the Stake account.
       */


      static authorize(params) {
        const {
          stakePubkey,
          authorizedPubkey,
          newAuthorizedPubkey,
          stakeAuthorizationType,
          custodianPubkey
        } = params;
        const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;
        const data = encodeData(type, {
          newAuthorized: toBuffer$1(newAuthorizedPubkey.toBuffer()),
          stakeAuthorizationType: stakeAuthorizationType.index
        });
        const keys = [{
          pubkey: stakePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: SYSVAR_CLOCK_PUBKEY,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: authorizedPubkey,
          isSigner: true,
          isWritable: false
        }];

        if (custodianPubkey) {
          keys.push({
            pubkey: custodianPubkey,
            isSigner: false,
            isWritable: false
          });
        }

        return new Transaction().add({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a Transaction that authorizes a new PublicKey as Staker
       * or Withdrawer on the Stake account.
       */


      static authorizeWithSeed(params) {
        const {
          stakePubkey,
          authorityBase,
          authoritySeed,
          authorityOwner,
          newAuthorizedPubkey,
          stakeAuthorizationType,
          custodianPubkey
        } = params;
        const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;
        const data = encodeData(type, {
          newAuthorized: toBuffer$1(newAuthorizedPubkey.toBuffer()),
          stakeAuthorizationType: stakeAuthorizationType.index,
          authoritySeed: authoritySeed,
          authorityOwner: toBuffer$1(authorityOwner.toBuffer())
        });
        const keys = [{
          pubkey: stakePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: authorityBase,
          isSigner: true,
          isWritable: false
        }, {
          pubkey: SYSVAR_CLOCK_PUBKEY,
          isSigner: false,
          isWritable: false
        }];

        if (custodianPubkey) {
          keys.push({
            pubkey: custodianPubkey,
            isSigner: false,
            isWritable: false
          });
        }

        return new Transaction().add({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a Transaction that splits Stake tokens into another stake account
       */


      static split(params) {
        const {
          stakePubkey,
          authorizedPubkey,
          splitStakePubkey,
          lamports
        } = params;
        const transaction = new Transaction();
        transaction.add(SystemProgram.createAccount({
          fromPubkey: authorizedPubkey,
          newAccountPubkey: splitStakePubkey,
          lamports: 0,
          space: this.space,
          programId: this.programId
        }));
        const type = STAKE_INSTRUCTION_LAYOUTS.Split;
        const data = encodeData(type, {
          lamports
        });
        return transaction.add({
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: splitStakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a Transaction that merges Stake accounts.
       */


      static merge(params) {
        const {
          stakePubkey,
          sourceStakePubKey,
          authorizedPubkey
        } = params;
        const type = STAKE_INSTRUCTION_LAYOUTS.Merge;
        const data = encodeData(type);
        return new Transaction().add({
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: sourceStakePubKey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a Transaction that withdraws deactivated Stake tokens.
       */


      static withdraw(params) {
        const {
          stakePubkey,
          authorizedPubkey,
          toPubkey,
          lamports,
          custodianPubkey
        } = params;
        const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;
        const data = encodeData(type, {
          lamports
        });
        const keys = [{
          pubkey: stakePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: toPubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: SYSVAR_CLOCK_PUBKEY,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: authorizedPubkey,
          isSigner: true,
          isWritable: false
        }];

        if (custodianPubkey) {
          keys.push({
            pubkey: custodianPubkey,
            isSigner: false,
            isWritable: false
          });
        }

        return new Transaction().add({
          keys,
          programId: this.programId,
          data
        });
      }
      /**
       * Generate a Transaction that deactivates Stake tokens.
       */


      static deactivate(params) {
        const {
          stakePubkey,
          authorizedPubkey
        } = params;
        const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;
        const data = encodeData(type);
        return new Transaction().add({
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data
        });
      }

    }
    StakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');
    StakeProgram.space = 200;

    const {
      publicKeyCreate,
      ecdsaSign
    } = elliptic;
    const PRIVATE_KEY_BYTES = 32;
    const ETHEREUM_ADDRESS_BYTES = 20;
    const PUBLIC_KEY_BYTES = 64;
    const SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;
    /**
     * Params for creating an secp256k1 instruction using a public key
     */

    const SECP256K1_INSTRUCTION_LAYOUT = Layout_1$1.struct([Layout_1$1.u8('numSignatures'), Layout_1$1.u16('signatureOffset'), Layout_1$1.u8('signatureInstructionIndex'), Layout_1$1.u16('ethAddressOffset'), Layout_1$1.u8('ethAddressInstructionIndex'), Layout_1$1.u16('messageDataOffset'), Layout_1$1.u16('messageDataSize'), Layout_1$1.u8('messageInstructionIndex'), Layout_1$1.blob(20, 'ethAddress'), Layout_1$1.blob(64, 'signature'), Layout_1$1.u8('recoveryId')]);
    class Secp256k1Program {
      /**
       * @internal
       */
      constructor() {}
      /**
       * Public key that identifies the secp256k1 program
       */


      /**
       * Construct an Ethereum address from a secp256k1 public key buffer.
       * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer
       */
      static publicKeyToEthAddress(publicKey) {
        assert$7(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);

        try {
          return Buffer.from(sha3.keccak_256.update(toBuffer$1(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);
        } catch (error) {
          throw new Error(`Error constructing Ethereum address: ${error}`);
        }
      }
      /**
       * Create an secp256k1 instruction with a public key. The public key
       * must be a buffer that is 64 bytes long.
       */


      static createInstructionWithPublicKey(params) {
        const {
          publicKey,
          message,
          signature,
          recoveryId,
          instructionIndex
        } = params;
        return Secp256k1Program.createInstructionWithEthAddress({
          ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),
          message,
          signature,
          recoveryId,
          instructionIndex
        });
      }
      /**
       * Create an secp256k1 instruction with an Ethereum address. The address
       * must be a hex string or a buffer that is 20 bytes long.
       */


      static createInstructionWithEthAddress(params) {
        const {
          ethAddress: rawAddress,
          message,
          signature,
          recoveryId,
          instructionIndex = 0
        } = params;
        let ethAddress;

        if (typeof rawAddress === 'string') {
          if (rawAddress.startsWith('0x')) {
            ethAddress = Buffer.from(rawAddress.substr(2), 'hex');
          } else {
            ethAddress = Buffer.from(rawAddress, 'hex');
          }
        } else {
          ethAddress = rawAddress;
        }

        assert$7(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);
        const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;
        const ethAddressOffset = dataStart;
        const signatureOffset = dataStart + ethAddress.length;
        const messageDataOffset = signatureOffset + signature.length + 1;
        const numSignatures = 1;
        const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);
        SECP256K1_INSTRUCTION_LAYOUT.encode({
          numSignatures,
          signatureOffset,
          signatureInstructionIndex: instructionIndex,
          ethAddressOffset,
          ethAddressInstructionIndex: instructionIndex,
          messageDataOffset,
          messageDataSize: message.length,
          messageInstructionIndex: instructionIndex,
          signature: toBuffer$1(signature),
          ethAddress: toBuffer$1(ethAddress),
          recoveryId
        }, instructionData);
        instructionData.fill(toBuffer$1(message), SECP256K1_INSTRUCTION_LAYOUT.span);
        return new TransactionInstruction({
          keys: [],
          programId: Secp256k1Program.programId,
          data: instructionData
        });
      }
      /**
       * Create an secp256k1 instruction with a private key. The private key
       * must be a buffer that is 32 bytes long.
       */


      static createInstructionWithPrivateKey(params) {
        const {
          privateKey: pkey,
          message,
          instructionIndex
        } = params;
        assert$7(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);

        try {
          const privateKey = toBuffer$1(pkey);
          const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte

          const messageHash = Buffer.from(sha3.keccak_256.update(toBuffer$1(message)).digest());
          const {
            signature,
            recid: recoveryId
          } = ecdsaSign(messageHash, privateKey);
          return this.createInstructionWithPublicKey({
            publicKey,
            message,
            signature,
            recoveryId,
            instructionIndex
          });
        } catch (error) {
          throw new Error(`Error creating instruction; ${error}`);
        }
      }

    }
    Secp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');

    const VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');
    /**
     * @internal
     */

    const InfoString = type({
      name: string(),
      website: optional(string()),
      details: optional(string()),
      keybaseUsername: optional(string())
    });
    /**
     * ValidatorInfo class
     */

    class ValidatorInfo {
      /**
       * validator public key
       */

      /**
       * validator information
       */

      /**
       * Construct a valid ValidatorInfo
       *
       * @param key validator public key
       * @param info validator information
       */
      constructor(key, info) {
        this.key = void 0;
        this.info = void 0;
        this.key = key;
        this.info = info;
      }
      /**
       * Deserialize ValidatorInfo from the config account data. Exactly two config
       * keys are required in the data.
       *
       * @param buffer config account data
       * @return null if info was not found
       */


      static fromConfigData(buffer) {
        const PUBKEY_LENGTH = 32;
        let byteArray = [...buffer];
        const configKeyCount = decodeLength(byteArray);
        if (configKeyCount !== 2) return null;
        const configKeys = [];

        for (let i = 0; i < 2; i++) {
          const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));
          byteArray = byteArray.slice(PUBKEY_LENGTH);
          const isSigner = byteArray.slice(0, 1)[0] === 1;
          byteArray = byteArray.slice(1);
          configKeys.push({
            publicKey,
            isSigner
          });
        }

        if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {
          if (configKeys[1].isSigner) {
            const rawInfo = rustString().decode(Buffer.from(byteArray));
            const info = JSON.parse(rawInfo);
            assert$j(info, InfoString);
            return new ValidatorInfo(configKeys[1].publicKey, info);
          }
        }

        return null;
      }

    }

    const VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');

    /**
     * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88
     *
     * @internal
     */
    const VoteAccountLayout = Layout_1$1.struct([publicKey$1('nodePubkey'), publicKey$1('authorizedVoterPubkey'), publicKey$1('authorizedWithdrawerPubkey'), Layout_1$1.u8('commission'), Layout_1$1.nu64(), // votes.length
    Layout_1$1.seq(Layout_1$1.struct([Layout_1$1.nu64('slot'), Layout_1$1.u32('confirmationCount')]), Layout_1$1.offset(Layout_1$1.u32(), -8), 'votes'), Layout_1$1.u8('rootSlotValid'), Layout_1$1.nu64('rootSlot'), Layout_1$1.nu64('epoch'), Layout_1$1.nu64('credits'), Layout_1$1.nu64('lastEpochCredits'), Layout_1$1.nu64(), // epochCredits.length
    Layout_1$1.seq(Layout_1$1.struct([Layout_1$1.nu64('epoch'), Layout_1$1.nu64('credits'), Layout_1$1.nu64('prevCredits')]), Layout_1$1.offset(Layout_1$1.u32(), -8), 'epochCredits')]);

    /**
     * VoteAccount class
     */
    class VoteAccount {
      /**
       * @internal
       */
      constructor(args) {
        this.nodePubkey = void 0;
        this.authorizedVoterPubkey = void 0;
        this.authorizedWithdrawerPubkey = void 0;
        this.commission = void 0;
        this.votes = void 0;
        this.rootSlot = void 0;
        this.epoch = void 0;
        this.credits = void 0;
        this.lastEpochCredits = void 0;
        this.epochCredits = void 0;
        this.nodePubkey = args.nodePubkey;
        this.authorizedVoterPubkey = args.authorizedVoterPubkey;
        this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;
        this.commission = args.commission;
        this.votes = args.votes;
        this.rootSlot = args.rootSlot;
        this.epoch = args.epoch;
        this.credits = args.credits;
        this.lastEpochCredits = args.lastEpochCredits;
        this.epochCredits = args.epochCredits;
      }
      /**
       * Deserialize VoteAccount from the account data.
       *
       * @param buffer account data
       * @return VoteAccount
       */


      static fromAccountData(buffer) {
        const va = VoteAccountLayout.decode(toBuffer$1(buffer), 0);
        let rootSlot = va.rootSlot;

        if (!va.rootSlotValid) {
          rootSlot = null;
        }

        return new VoteAccount({
          nodePubkey: new PublicKey(va.nodePubkey),
          authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),
          authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),
          commission: va.commission,
          votes: va.votes,
          rootSlot,
          epoch: va.epoch,
          credits: va.credits,
          lastEpochCredits: va.lastEpochCredits,
          epochCredits: va.epochCredits
        });
      }

    }

    /**
     * Send and confirm a raw transaction
     *
     * If `commitment` option is not specified, defaults to 'max' commitment.
     *
     * @param {Connection} connection
     * @param {Buffer} rawTransaction
     * @param {ConfirmOptions} [options]
     * @returns {Promise<TransactionSignature>}
     */
    async function sendAndConfirmRawTransaction(connection, rawTransaction, options) {
      const sendOptions = options && {
        skipPreflight: options.skipPreflight,
        preflightCommitment: options.preflightCommitment || options.commitment
      };
      const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);
      const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;

      if (status.err) {
        throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);
      }

      return signature;
    }

    const endpoint = {
      http: {
        devnet: 'http://api.devnet.solana.com',
        testnet: 'http://api.testnet.solana.com',
        'mainnet-beta': 'http://api.mainnet-beta.solana.com'
      },
      https: {
        devnet: 'https://api.devnet.solana.com',
        testnet: 'https://api.testnet.solana.com',
        'mainnet-beta': 'https://api.mainnet-beta.solana.com'
      }
    };

    /**
     * Retrieves the RPC API URL for the specified cluster
     */
    function clusterApiUrl(cluster, tls) {
      const key = tls === false ? 'http' : 'https';

      if (!cluster) {
        return endpoint[key]['devnet'];
      }

      const url = endpoint[key][cluster];

      if (!url) {
        throw new Error(`Unknown ${key} cluster: ${cluster}`);
      }

      return url;
    }

    /**
     * There are 1-billion lamports in one SOL
     */

    const LAMPORTS_PER_SOL = 1000000000;

    var index_browser_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Account: Account,
        Authorized: Authorized,
        BLOCKHASH_CACHE_TIMEOUT_MS: BLOCKHASH_CACHE_TIMEOUT_MS,
        BPF_LOADER_DEPRECATED_PROGRAM_ID: BPF_LOADER_DEPRECATED_PROGRAM_ID,
        BPF_LOADER_PROGRAM_ID: BPF_LOADER_PROGRAM_ID,
        BpfLoader: BpfLoader,
        Connection: Connection,
        Ed25519Program: Ed25519Program,
        Enum: Enum,
        EpochSchedule: EpochSchedule,
        FeeCalculatorLayout: FeeCalculatorLayout,
        Keypair: Keypair,
        LAMPORTS_PER_SOL: LAMPORTS_PER_SOL,
        Loader: Loader$1,
        Lockup: Lockup,
        MAX_SEED_LENGTH: MAX_SEED_LENGTH,
        Message: Message,
        NONCE_ACCOUNT_LENGTH: NONCE_ACCOUNT_LENGTH,
        NonceAccount: NonceAccount,
        PACKET_DATA_SIZE: PACKET_DATA_SIZE,
        PublicKey: PublicKey,
        SOLANA_SCHEMA: SOLANA_SCHEMA,
        STAKE_CONFIG_ID: STAKE_CONFIG_ID,
        STAKE_INSTRUCTION_LAYOUTS: STAKE_INSTRUCTION_LAYOUTS,
        SYSTEM_INSTRUCTION_LAYOUTS: SYSTEM_INSTRUCTION_LAYOUTS,
        SYSVAR_CLOCK_PUBKEY: SYSVAR_CLOCK_PUBKEY,
        SYSVAR_INSTRUCTIONS_PUBKEY: SYSVAR_INSTRUCTIONS_PUBKEY,
        SYSVAR_RECENT_BLOCKHASHES_PUBKEY: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
        SYSVAR_RENT_PUBKEY: SYSVAR_RENT_PUBKEY,
        SYSVAR_REWARDS_PUBKEY: SYSVAR_REWARDS_PUBKEY,
        SYSVAR_STAKE_HISTORY_PUBKEY: SYSVAR_STAKE_HISTORY_PUBKEY,
        Secp256k1Program: Secp256k1Program,
        SendTransactionError: SendTransactionError,
        StakeAuthorizationLayout: StakeAuthorizationLayout,
        StakeInstruction: StakeInstruction,
        StakeProgram: StakeProgram,
        Struct: Struct,
        SystemInstruction: SystemInstruction,
        SystemProgram: SystemProgram,
        Transaction: Transaction,
        TransactionInstruction: TransactionInstruction,
        VALIDATOR_INFO_KEY: VALIDATOR_INFO_KEY,
        VOTE_PROGRAM_ID: VOTE_PROGRAM_ID,
        ValidatorInfo: ValidatorInfo,
        VoteAccount: VoteAccount,
        clusterApiUrl: clusterApiUrl,
        sendAndConfirmRawTransaction: sendAndConfirmRawTransaction,
        sendAndConfirmTransaction: sendAndConfirmTransaction$1
    });

    var _a;
    /**
     * Returns true if being run inside a web browser,
     * false if in a Node process or electron app.
     */
    const isBrowser = typeof window !== "undefined" && !((_a = window.process) === null || _a === void 0 ? void 0 : _a.hasOwnProperty("type"));

    /**
     * The network and wallet context used to send transactions paid for and signed
     * by the provider.
     */
    class Provider {
        /**
         * @param connection The cluster connection where the program is deployed.
         * @param wallet     The wallet used to pay for and sign all transactions.
         * @param opts       Transaction confirmation options to use by default.
         */
        constructor(connection, wallet, opts) {
            this.connection = connection;
            this.wallet = wallet;
            this.opts = opts;
        }
        static defaultOptions() {
            return {
                preflightCommitment: "recent",
                commitment: "recent",
            };
        }
        /**
         * Returns a `Provider` with a wallet read from the local filesystem.
         *
         * @param url  The network cluster url.
         * @param opts The default transaction confirmation options.
         *
         * (This api is for Node only.)
         */
        static local(url, opts) {
            opts = opts !== null && opts !== void 0 ? opts : Provider.defaultOptions();
            const connection = new Connection(url !== null && url !== void 0 ? url : "http://localhost:8899", opts.preflightCommitment);
            const wallet = NodeWallet.local();
            return new Provider(connection, wallet, opts);
        }
        /**
         * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment
         * variable
         *
         * (This api is for Node only.)
         */
        static env() {
            if (isBrowser)
                return;
            const process = require("process");
            const url = process.env.ANCHOR_PROVIDER_URL;
            if (url === undefined) {
                throw new Error("ANCHOR_PROVIDER_URL is not defined");
            }
            const options = Provider.defaultOptions();
            const connection = new Connection(url, options.commitment);
            const wallet = NodeWallet.local();
            return new Provider(connection, wallet, options);
        }
        /**
         * Sends the given transaction, paid for and signed by the provider's wallet.
         *
         * @param tx      The transaction to send.
         * @param signers The set of signers in addition to the provdier wallet that
         *                will sign the transaction.
         * @param opts    Transaction confirmation options.
         */
        async send(tx, signers, opts) {
            if (signers === undefined) {
                signers = [];
            }
            if (opts === undefined) {
                opts = this.opts;
            }
            tx.feePayer = this.wallet.publicKey;
            tx.recentBlockhash = (await this.connection.getRecentBlockhash(opts.preflightCommitment)).blockhash;
            await this.wallet.signTransaction(tx);
            signers
                .filter((s) => s !== undefined)
                .forEach((kp) => {
                tx.partialSign(kp);
            });
            const rawTx = tx.serialize();
            const txId = await sendAndConfirmRawTransaction(this.connection, rawTx, opts);
            return txId;
        }
        /**
         * Similar to `send`, but for an array of transactions and signers.
         */
        async sendAll(reqs, opts) {
            if (opts === undefined) {
                opts = this.opts;
            }
            const blockhash = await this.connection.getRecentBlockhash(opts.preflightCommitment);
            let txs = reqs.map((r) => {
                let tx = r.tx;
                let signers = r.signers;
                if (signers === undefined) {
                    signers = [];
                }
                tx.feePayer = this.wallet.publicKey;
                tx.recentBlockhash = blockhash.blockhash;
                signers
                    .filter((s) => s !== undefined)
                    .forEach((kp) => {
                    tx.partialSign(kp);
                });
                return tx;
            });
            const signedTxs = await this.wallet.signAllTransactions(txs);
            const sigs = [];
            for (let k = 0; k < txs.length; k += 1) {
                const tx = signedTxs[k];
                const rawTx = tx.serialize();
                sigs.push(await sendAndConfirmRawTransaction(this.connection, rawTx, opts));
            }
            return sigs;
        }
        /**
         * Simulates the given transaction, returning emitted logs from execution.
         *
         * @param tx      The transaction to send.
         * @param signers The set of signers in addition to the provdier wallet that
         *                will sign the transaction.
         * @param opts    Transaction confirmation options.
         */
        async simulate(tx, signers, opts) {
            var _a, _b;
            if (signers === undefined) {
                signers = [];
            }
            if (opts === undefined) {
                opts = this.opts;
            }
            tx.feePayer = this.wallet.publicKey;
            tx.recentBlockhash = (await this.connection.getRecentBlockhash((_a = opts.preflightCommitment) !== null && _a !== void 0 ? _a : this.opts.preflightCommitment)).blockhash;
            await this.wallet.signTransaction(tx);
            signers
                .filter((s) => s !== undefined)
                .forEach((kp) => {
                tx.partialSign(kp);
            });
            return await simulateTransaction(this.connection, tx, (_b = opts.commitment) !== null && _b !== void 0 ? _b : this.opts.commitment);
        }
    }
    /**
     * Node only wallet.
     */
    class NodeWallet {
        constructor(payer) {
            this.payer = payer;
        }
        static local() {
            const payer = Keypair.fromSecretKey(Buffer.from(JSON.parse(require("fs").readFileSync(require("os").homedir() + "/.config/solana/id.json", {
                encoding: "utf-8",
            }))));
            return new NodeWallet(payer);
        }
        async signTransaction(tx) {
            tx.partialSign(this.payer);
            return tx;
        }
        async signAllTransactions(txs) {
            return txs.map((t) => {
                t.partialSign(this.payer);
                return t;
            });
        }
        get publicKey() {
            return this.payer.publicKey;
        }
    }
    // Copy of Connection.simulateTransaction that takes a commitment parameter.
    async function simulateTransaction(connection, transaction, commitment) {
        // @ts-ignore
        transaction.recentBlockhash = await connection._recentBlockhash(
        // @ts-ignore
        connection._disableBlockhashCaching);
        const signData = transaction.serializeMessage();
        // @ts-ignore
        const wireTransaction = transaction._serialize(signData);
        const encodedTransaction = wireTransaction.toString("base64");
        const config = { encoding: "base64", commitment };
        const args = [encodedTransaction, config];
        // @ts-ignore
        const res = await connection._rpcRequest("simulateTransaction", args);
        if (res.error) {
            throw new Error("failed to simulate transaction: " + res.error.message);
        }
        return res.result;
    }
    /**
     * Sets the default provider on the client.
     */
    function setProvider(provider) {
        _provider = provider;
    }
    /**
     * Returns the default provider being used by the client.
     */
    function getProvider() {
        if (_provider === null) {
            return Provider.local();
        }
        return _provider;
    }
    // Global provider used as the default when a provider is not given.
    let _provider = null;

    const preserveCamelCase = string => {
    	let isLastCharLower = false;
    	let isLastCharUpper = false;
    	let isLastLastCharUpper = false;

    	for (let i = 0; i < string.length; i++) {
    		const character = string[i];

    		if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {
    			string = string.slice(0, i) + '-' + string.slice(i);
    			isLastCharLower = false;
    			isLastLastCharUpper = isLastCharUpper;
    			isLastCharUpper = true;
    			i++;
    		} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {
    			string = string.slice(0, i - 1) + '-' + string.slice(i - 1);
    			isLastLastCharUpper = isLastCharUpper;
    			isLastCharUpper = false;
    			isLastCharLower = true;
    		} else {
    			isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;
    			isLastLastCharUpper = isLastCharUpper;
    			isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;
    		}
    	}

    	return string;
    };

    const camelCase = (input, options) => {
    	if (!(typeof input === 'string' || Array.isArray(input))) {
    		throw new TypeError('Expected the input to be `string | string[]`');
    	}

    	options = Object.assign({
    		pascalCase: false
    	}, options);

    	const postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;

    	if (Array.isArray(input)) {
    		input = input.map(x => x.trim())
    			.filter(x => x.length)
    			.join('-');
    	} else {
    		input = input.trim();
    	}

    	if (input.length === 0) {
    		return '';
    	}

    	if (input.length === 1) {
    		return options.pascalCase ? input.toUpperCase() : input.toLowerCase();
    	}

    	const hasUpperCase = input !== input.toLowerCase();

    	if (hasUpperCase) {
    		input = preserveCamelCase(input);
    	}

    	input = input
    		.replace(/^[_.\- ]+/, '')
    		.toLowerCase()
    		.replace(/[_.\- ]+(\w|$)/g, (_, p1) => p1.toUpperCase())
    		.replace(/\d+(\w|$)/g, m => m.toUpperCase());

    	return postProcess(input);
    };

    var camelcase = camelCase;
    // TODO: Remove this for the next major release
    var _default = camelCase;
    camelcase.default = _default;

    /**
     * Base class for layout objects.
     *
     * **NOTE** This is an abstract base class; you can create instances
     * if it amuses you, but they won't support the {@link
     * Layout#encode|encode} or {@link Layout#decode|decode} functions.
     *
     * @param {Number} span - Initializer for {@link Layout#span|span}.  The
     * parameter must be an integer; a negative value signifies that the
     * span is {@link Layout#getSpan|value-specific}.
     *
     * @param {string} [property] - Initializer for {@link
     * Layout#property|property}.
     *
     * @abstract
     */
    class Layout$1 {
      constructor(span, property) {
        if (!Number.isInteger(span)) {
          throw new TypeError('span must be an integer');
        }

        /** The span of the layout in bytes.
         *
         * Positive values are generally expected.
         *
         * Zero will only appear in {@link Constant}s and in {@link
         * Sequence}s where the {@link Sequence#count|count} is zero.
         *
         * A negative value indicates that the span is value-specific, and
         * must be obtained using {@link Layout#getSpan|getSpan}. */
        this.span = span;

        /** The property name used when this layout is represented in an
         * Object.
         *
         * Used only for layouts that {@link Layout#decode|decode} to Object
         * instances.  If left undefined the span of the unnamed layout will
         * be treated as padding: it will not be mutated by {@link
         * Layout#encode|encode} nor represented as a property in the
         * decoded Object. */
        this.property = property;
      }

      /** Function to create an Object into which decoded properties will
       * be written.
       *
       * Used only for layouts that {@link Layout#decode|decode} to Object
       * instances, which means:
       * * {@link Structure}
       * * {@link Union}
       * * {@link VariantLayout}
       * * {@link BitStructure}
       *
       * If left undefined the JavaScript representation of these layouts
       * will be Object instances.
       *
       * See {@link bindConstructorLayout}.
       */
      makeDestinationObject() {
        return {};
      }

      /**
       * Decode from a Buffer into an JavaScript value.
       *
       * @param {Buffer} b - the buffer from which encoded data is read.
       *
       * @param {Number} [offset] - the offset at which the encoded data
       * starts.  If absent a zero offset is inferred.
       *
       * @returns {(Number|Array|Object)} - the value of the decoded data.
       *
       * @abstract
       */
      decode(b, offset) {
        throw new Error('Layout is abstract');
      }

      /**
       * Encode a JavaScript value into a Buffer.
       *
       * @param {(Number|Array|Object)} src - the value to be encoded into
       * the buffer.  The type accepted depends on the (sub-)type of {@link
       * Layout}.
       *
       * @param {Buffer} b - the buffer into which encoded data will be
       * written.
       *
       * @param {Number} [offset] - the offset at which the encoded data
       * starts.  If absent a zero offset is inferred.
       *
       * @returns {Number} - the number of bytes encoded, including the
       * space skipped for internal padding, but excluding data such as
       * {@link Sequence#count|lengths} when stored {@link
       * ExternalLayout|externally}.  This is the adjustment to `offset`
       * producing the offset where data for the next layout would be
       * written.
       *
       * @abstract
       */
      encode(src, b, offset) {
        throw new Error('Layout is abstract');
      }

      /**
       * Calculate the span of a specific instance of a layout.
       *
       * @param {Buffer} b - the buffer that contains an encoded instance.
       *
       * @param {Number} [offset] - the offset at which the encoded instance
       * starts.  If absent a zero offset is inferred.
       *
       * @return {Number} - the number of bytes covered by the layout
       * instance.  If this method is not overridden in a subclass the
       * definition-time constant {@link Layout#span|span} will be
       * returned.
       *
       * @throws {RangeError} - if the length of the value cannot be
       * determined.
       */
      getSpan(b, offset) {
        if (0 > this.span) {
          throw new RangeError('indeterminate span');
        }
        return this.span;
      }

      /**
       * Replicate the layout using a new property.
       *
       * This function must be used to get a structurally-equivalent layout
       * with a different name since all {@link Layout} instances are
       * immutable.
       *
       * **NOTE** This is a shallow copy.  All fields except {@link
       * Layout#property|property} are strictly equal to the origin layout.
       *
       * @param {String} property - the value for {@link
       * Layout#property|property} in the replica.
       *
       * @returns {Layout} - the copy with {@link Layout#property|property}
       * set to `property`.
       */
      replicate(property) {
        const rv = Object.create(this.constructor.prototype);
        Object.assign(rv, this);
        rv.property = property;
        return rv;
      }

      /**
       * Create an object from layout properties and an array of values.
       *
       * **NOTE** This function returns `undefined` if invoked on a layout
       * that does not return its value as an Object.  Objects are
       * returned for things that are a {@link Structure}, which includes
       * {@link VariantLayout|variant layouts} if they are structures, and
       * excludes {@link Union}s.  If you want this feature for a union
       * you must use {@link Union.getVariant|getVariant} to select the
       * desired layout.
       *
       * @param {Array} values - an array of values that correspond to the
       * default order for properties.  As with {@link Layout#decode|decode}
       * layout elements that have no property name are skipped when
       * iterating over the array values.  Only the top-level properties are
       * assigned; arguments are not assigned to properties of contained
       * layouts.  Any unused values are ignored.
       *
       * @return {(Object|undefined)}
       */
      fromArray(values) {
        return undefined;
      }
    }
    var Layout_2 = Layout$1;

    /* Provide text that carries a name (such as for a function that will
     * be throwing an error) annotated with the property of a given layout
     * (such as one for which the value was unacceptable).
     *
     * @ignore */
    function nameWithProperty$1(name, lo) {
      if (lo.property) {
        return name + '[' + lo.property + ']';
      }
      return name;
    }
    var nameWithProperty_1 = nameWithProperty$1;

    /**
     * Augment a class so that instances can be encoded/decoded using a
     * given layout.
     *
     * Calling this function couples `Class` with `layout` in several ways:
     *
     * * `Class.layout_` becomes a static member property equal to `layout`;
     * * `layout.boundConstructor_` becomes a static member property equal
     *    to `Class`;
     * * The {@link Layout#makeDestinationObject|makeDestinationObject()}
     *   property of `layout` is set to a function that returns a `new
     *   Class()`;
     * * `Class.decode(b, offset)` becomes a static member function that
     *   delegates to {@link Layout#decode|layout.decode}.  The
     *   synthesized function may be captured and extended.
     * * `Class.prototype.encode(b, offset)` provides an instance member
     *   function that delegates to {@link Layout#encode|layout.encode}
     *   with `src` set to `this`.  The synthesized function may be
     *   captured and extended, but when the extension is invoked `this`
     *   must be explicitly bound to the instance.
     *
     * @param {class} Class - a JavaScript class with a nullary
     * constructor.
     *
     * @param {Layout} layout - the {@link Layout} instance used to encode
     * instances of `Class`.
     */
    function bindConstructorLayout(Class, layout) {
      if ('function' !== typeof Class) {
        throw new TypeError('Class must be constructor');
      }
      if (Class.hasOwnProperty('layout_')) {
        throw new Error('Class is already bound to a layout');
      }
      if (!(layout && (layout instanceof Layout$1))) {
        throw new TypeError('layout must be a Layout');
      }
      if (layout.hasOwnProperty('boundConstructor_')) {
        throw new Error('layout is already bound to a constructor');
      }
      Class.layout_ = layout;
      layout.boundConstructor_ = Class;
      layout.makeDestinationObject = (() => new Class());
      Object.defineProperty(Class.prototype, 'encode', {
        value: function(b, offset) {
          return layout.encode(this, b, offset);
        },
        writable: true,
      });
      Object.defineProperty(Class, 'decode', {
        value: function(b, offset) {
          return layout.decode(b, offset);
        },
        writable: true,
      });
    }
    var bindConstructorLayout_1 = bindConstructorLayout;

    /**
     * An object that behaves like a layout but does not consume space
     * within its containing layout.
     *
     * This is primarily used to obtain metadata about a member, such as a
     * {@link OffsetLayout} that can provide data about a {@link
     * Layout#getSpan|value-specific span}.
     *
     * **NOTE** This is an abstract base class; you can create instances
     * if it amuses you, but they won't support {@link
     * ExternalLayout#isCount|isCount} or other {@link Layout} functions.
     *
     * @param {Number} span - initializer for {@link Layout#span|span}.
     * The parameter can range from 1 through 6.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @abstract
     * @augments {Layout}
     */
    class ExternalLayout$1 extends Layout$1 {
      /**
       * Return `true` iff the external layout decodes to an unsigned
       * integer layout.
       *
       * In that case it can be used as the source of {@link
       * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},
       * or as {@link UnionLayoutDiscriminator#layout|external union
       * discriminators}.
       *
       * @abstract
       */
      isCount() {
        throw new Error('ExternalLayout is abstract');
      }
    }

    /**
     * An {@link ExternalLayout} that determines its {@link
     * Layout#decode|value} based on offset into and length of the buffer
     * on which it is invoked.
     *
     * *Factory*: {@link module:Layout.greedy|greedy}
     *
     * @param {Number} [elementSpan] - initializer for {@link
     * GreedyCount#elementSpan|elementSpan}.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {ExternalLayout}
     */
    class GreedyCount extends ExternalLayout$1 {
      constructor(elementSpan, property) {
        if (undefined === elementSpan) {
          elementSpan = 1;
        }
        if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {
          throw new TypeError('elementSpan must be a (positive) integer');
        }
        super(-1, property);

        /** The layout for individual elements of the sequence.  The value
         * must be a positive integer.  If not provided, the value will be
         * 1. */
        this.elementSpan = elementSpan;
      }

      /** @override */
      isCount() {
        return true;
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const rem = b.length - offset;
        return Math.floor(rem / this.elementSpan);
      }

      /** @override */
      encode(src, b, offset) {
        return 0;
      }
    }

    /**
     * An {@link ExternalLayout} that supports accessing a {@link Layout}
     * at a fixed offset from the start of another Layout.  The offset may
     * be before, within, or after the base layout.
     *
     * *Factory*: {@link module:Layout.offset|offset}
     *
     * @param {Layout} layout - initializer for {@link
     * OffsetLayout#layout|layout}, modulo `property`.
     *
     * @param {Number} [offset] - Initializes {@link
     * OffsetLayout#offset|offset}.  Defaults to zero.
     *
     * @param {string} [property] - Optional new property name for a
     * {@link Layout#replicate| replica} of `layout` to be used as {@link
     * OffsetLayout#layout|layout}.  If not provided the `layout` is used
     * unchanged.
     *
     * @augments {Layout}
     */
    class OffsetLayout extends ExternalLayout$1 {
      constructor(layout, offset, property) {
        if (!(layout instanceof Layout$1)) {
          throw new TypeError('layout must be a Layout');
        }

        if (undefined === offset) {
          offset = 0;
        } else if (!Number.isInteger(offset)) {
          throw new TypeError('offset must be integer or undefined');
        }

        super(layout.span, property || layout.property);

        /** The subordinated layout. */
        this.layout = layout;

        /** The location of {@link OffsetLayout#layout} relative to the
         * start of another layout.
         *
         * The value may be positive or negative, but an error will thrown
         * if at the point of use it goes outside the span of the Buffer
         * being accessed.  */
        this.offset = offset;
      }

      /** @override */
      isCount() {
        return ((this.layout instanceof UInt$1)
                || (this.layout instanceof UIntBE));
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        return this.layout.decode(b, offset + this.offset);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        return this.layout.encode(src, b, offset + this.offset);
      }
    }

    /**
     * Represent an unsigned integer in little-endian format.
     *
     * *Factory*: {@link module:Layout.u8|u8}, {@link
     *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link
     *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link
     *  module:Layout.u48|u48}
     *
     * @param {Number} span - initializer for {@link Layout#span|span}.
     * The parameter can range from 1 through 6.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class UInt$1 extends Layout$1 {
      constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
          throw new RangeError('span must not exceed 6 bytes');
        }
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        return b.readUIntLE(offset, this.span);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        b.writeUIntLE(src, offset, this.span);
        return this.span;
      }
    }

    /**
     * Represent an unsigned integer in big-endian format.
     *
     * *Factory*: {@link module:Layout.u8be|u8be}, {@link
     * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},
     * {@link module:Layout.u32be|u32be}, {@link
     * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}
     *
     * @param {Number} span - initializer for {@link Layout#span|span}.
     * The parameter can range from 1 through 6.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class UIntBE extends Layout$1 {
      constructor(span, property) {
        super( span, property);
        if (6 < this.span) {
          throw new RangeError('span must not exceed 6 bytes');
        }
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        return b.readUIntBE(offset, this.span);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        b.writeUIntBE(src, offset, this.span);
        return this.span;
      }
    }

    /**
     * Represent a signed integer in little-endian format.
     *
     * *Factory*: {@link module:Layout.s8|s8}, {@link
     *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link
     *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link
     *  module:Layout.s48|s48}
     *
     * @param {Number} span - initializer for {@link Layout#span|span}.
     * The parameter can range from 1 through 6.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class Int extends Layout$1 {
      constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
          throw new RangeError('span must not exceed 6 bytes');
        }
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        return b.readIntLE(offset, this.span);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        b.writeIntLE(src, offset, this.span);
        return this.span;
      }
    }

    /**
     * Represent a signed integer in big-endian format.
     *
     * *Factory*: {@link module:Layout.s8be|s8be}, {@link
     * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},
     * {@link module:Layout.s32be|s32be}, {@link
     * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}
     *
     * @param {Number} span - initializer for {@link Layout#span|span}.
     * The parameter can range from 1 through 6.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class IntBE extends Layout$1 {
      constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
          throw new RangeError('span must not exceed 6 bytes');
        }
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        return b.readIntBE(offset, this.span);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        b.writeIntBE(src, offset, this.span);
        return this.span;
      }
    }

    const V2E32 = Math.pow(2, 32);

    /* True modulus high and low 32-bit words, where low word is always
     * non-negative. */
    function divmodInt64(src) {
      const hi32 = Math.floor(src / V2E32);
      const lo32 = src - (hi32 * V2E32);
      return {hi32, lo32};
    }
    /* Reconstruct Number from quotient and non-negative remainder */
    function roundedInt64(hi32, lo32) {
      return hi32 * V2E32 + lo32;
    }

    /**
     * Represent an unsigned 64-bit integer in little-endian format when
     * encoded and as a near integral JavaScript Number when decoded.
     *
     * *Factory*: {@link module:Layout.nu64|nu64}
     *
     * **NOTE** Values with magnitude greater than 2^52 may not decode to
     * the exact value of the encoded representation.
     *
     * @augments {Layout}
     */
    class NearUInt64 extends Layout$1 {
      constructor(property) {
        super(8, property);
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const lo32 = b.readUInt32LE(offset);
        const hi32 = b.readUInt32LE(offset + 4);
        return roundedInt64(hi32, lo32);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const split = divmodInt64(src);
        b.writeUInt32LE(split.lo32, offset);
        b.writeUInt32LE(split.hi32, offset + 4);
        return 8;
      }
    }

    /**
     * Represent an unsigned 64-bit integer in big-endian format when
     * encoded and as a near integral JavaScript Number when decoded.
     *
     * *Factory*: {@link module:Layout.nu64be|nu64be}
     *
     * **NOTE** Values with magnitude greater than 2^52 may not decode to
     * the exact value of the encoded representation.
     *
     * @augments {Layout}
     */
    class NearUInt64BE extends Layout$1 {
      constructor(property) {
        super(8, property);
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const hi32 = b.readUInt32BE(offset);
        const lo32 = b.readUInt32BE(offset + 4);
        return roundedInt64(hi32, lo32);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const split = divmodInt64(src);
        b.writeUInt32BE(split.hi32, offset);
        b.writeUInt32BE(split.lo32, offset + 4);
        return 8;
      }
    }

    /**
     * Represent a signed 64-bit integer in little-endian format when
     * encoded and as a near integral JavaScript Number when decoded.
     *
     * *Factory*: {@link module:Layout.ns64|ns64}
     *
     * **NOTE** Values with magnitude greater than 2^52 may not decode to
     * the exact value of the encoded representation.
     *
     * @augments {Layout}
     */
    class NearInt64 extends Layout$1 {
      constructor(property) {
        super(8, property);
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const lo32 = b.readUInt32LE(offset);
        const hi32 = b.readInt32LE(offset + 4);
        return roundedInt64(hi32, lo32);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const split = divmodInt64(src);
        b.writeUInt32LE(split.lo32, offset);
        b.writeInt32LE(split.hi32, offset + 4);
        return 8;
      }
    }

    /**
     * Represent a signed 64-bit integer in big-endian format when
     * encoded and as a near integral JavaScript Number when decoded.
     *
     * *Factory*: {@link module:Layout.ns64be|ns64be}
     *
     * **NOTE** Values with magnitude greater than 2^52 may not decode to
     * the exact value of the encoded representation.
     *
     * @augments {Layout}
     */
    class NearInt64BE extends Layout$1 {
      constructor(property) {
        super(8, property);
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const hi32 = b.readInt32BE(offset);
        const lo32 = b.readUInt32BE(offset + 4);
        return roundedInt64(hi32, lo32);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const split = divmodInt64(src);
        b.writeInt32BE(split.hi32, offset);
        b.writeUInt32BE(split.lo32, offset + 4);
        return 8;
      }
    }

    /**
     * Represent a 32-bit floating point number in little-endian format.
     *
     * *Factory*: {@link module:Layout.f32|f32}
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class Float extends Layout$1 {
      constructor(property) {
        super(4, property);
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        return b.readFloatLE(offset);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        b.writeFloatLE(src, offset);
        return 4;
      }
    }

    /**
     * Represent a 32-bit floating point number in big-endian format.
     *
     * *Factory*: {@link module:Layout.f32be|f32be}
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class FloatBE extends Layout$1 {
      constructor(property) {
        super(4, property);
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        return b.readFloatBE(offset);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        b.writeFloatBE(src, offset);
        return 4;
      }
    }

    /**
     * Represent a 64-bit floating point number in little-endian format.
     *
     * *Factory*: {@link module:Layout.f64|f64}
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class Double extends Layout$1 {
      constructor(property) {
        super(8, property);
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        return b.readDoubleLE(offset);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        b.writeDoubleLE(src, offset);
        return 8;
      }
    }

    /**
     * Represent a 64-bit floating point number in big-endian format.
     *
     * *Factory*: {@link module:Layout.f64be|f64be}
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class DoubleBE extends Layout$1 {
      constructor(property) {
        super(8, property);
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        return b.readDoubleBE(offset);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        b.writeDoubleBE(src, offset);
        return 8;
      }
    }

    /**
     * Represent a contiguous sequence of a specific layout as an Array.
     *
     * *Factory*: {@link module:Layout.seq|seq}
     *
     * @param {Layout} elementLayout - initializer for {@link
     * Sequence#elementLayout|elementLayout}.
     *
     * @param {(Number|ExternalLayout)} count - initializer for {@link
     * Sequence#count|count}.  The parameter must be either a positive
     * integer or an instance of {@link ExternalLayout}.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class Sequence extends Layout$1 {
      constructor(elementLayout, count, property) {
        if (!(elementLayout instanceof Layout$1)) {
          throw new TypeError('elementLayout must be a Layout');
        }
        if (!(((count instanceof ExternalLayout$1) && count.isCount())
              || (Number.isInteger(count) && (0 <= count)))) {
          throw new TypeError('count must be non-negative integer '
                              + 'or an unsigned integer ExternalLayout');
        }
        let span = -1;
        if ((!(count instanceof ExternalLayout$1))
            && (0 < elementLayout.span)) {
          span = count * elementLayout.span;
        }

        super(span, property);

        /** The layout for individual elements of the sequence. */
        this.elementLayout = elementLayout;

        /** The number of elements in the sequence.
         *
         * This will be either a non-negative integer or an instance of
         * {@link ExternalLayout} for which {@link
         * ExternalLayout#isCount|isCount()} is `true`. */
        this.count = count;
      }

      /** @override */
      getSpan(b, offset) {
        if (0 <= this.span) {
          return this.span;
        }
        if (undefined === offset) {
          offset = 0;
        }
        let span = 0;
        let count = this.count;
        if (count instanceof ExternalLayout$1) {
          count = count.decode(b, offset);
        }
        if (0 < this.elementLayout.span) {
          span = count * this.elementLayout.span;
        } else {
          let idx = 0;
          while (idx < count) {
            span += this.elementLayout.getSpan(b, offset + span);
            ++idx;
          }
        }
        return span;
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const rv = [];
        let i = 0;
        let count = this.count;
        if (count instanceof ExternalLayout$1) {
          count = count.decode(b, offset);
        }
        while (i < count) {
          rv.push(this.elementLayout.decode(b, offset));
          offset += this.elementLayout.getSpan(b, offset);
          i += 1;
        }
        return rv;
      }

      /** Implement {@link Layout#encode|encode} for {@link Sequence}.
       *
       * **NOTE** If `src` is shorter than {@link Sequence#count|count} then
       * the unused space in the buffer is left unchanged.  If `src` is
       * longer than {@link Sequence#count|count} the unneeded elements are
       * ignored.
       *
       * **NOTE** If {@link Layout#count|count} is an instance of {@link
       * ExternalLayout} then the length of `src` will be encoded as the
       * count after `src` is encoded. */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const elo = this.elementLayout;
        const span = src.reduce((span, v) => {
          return span + elo.encode(v, b, offset + span);
        }, 0);
        if (this.count instanceof ExternalLayout$1) {
          this.count.encode(src.length, b, offset);
        }
        return span;
      }
    }

    /**
     * Represent a contiguous sequence of arbitrary layout elements as an
     * Object.
     *
     * *Factory*: {@link module:Layout.struct|struct}
     *
     * **NOTE** The {@link Layout#span|span} of the structure is variable
     * if any layout in {@link Structure#fields|fields} has a variable
     * span.  When {@link Layout#encode|encoding} we must have a value for
     * all variable-length fields, or we wouldn't be able to figure out
     * how much space to use for storage.  We can only identify the value
     * for a field when it has a {@link Layout#property|property}.  As
     * such, although a structure may contain both unnamed fields and
     * variable-length fields, it cannot contain an unnamed
     * variable-length field.
     *
     * @param {Layout[]} fields - initializer for {@link
     * Structure#fields|fields}.  An error is raised if this contains a
     * variable-length field for which a {@link Layout#property|property}
     * is not defined.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @param {Boolean} [decodePrefixes] - initializer for {@link
     * Structure#decodePrefixes|property}.
     *
     * @throws {Error} - if `fields` contains an unnamed variable-length
     * layout.
     *
     * @augments {Layout}
     */
    class Structure$1 extends Layout$1 {
      constructor(fields, property, decodePrefixes) {
        if (!(Array.isArray(fields)
              && fields.reduce((acc, v) => acc && (v instanceof Layout$1), true))) {
          throw new TypeError('fields must be array of Layout instances');
        }
        if (('boolean' === typeof property)
            && (undefined === decodePrefixes)) {
          decodePrefixes = property;
          property = undefined;
        }

        /* Verify absence of unnamed variable-length fields. */
        for (const fd of fields) {
          if ((0 > fd.span)
              && (undefined === fd.property)) {
            throw new Error('fields cannot contain unnamed variable-length layout');
          }
        }

        let span = -1;
        try {
          span = fields.reduce((span, fd) => span + fd.getSpan(), 0);
        } catch (e) {
        }
        super(span, property);

        /** The sequence of {@link Layout} values that comprise the
         * structure.
         *
         * The individual elements need not be the same type, and may be
         * either scalar or aggregate layouts.  If a member layout leaves
         * its {@link Layout#property|property} undefined the
         * corresponding region of the buffer associated with the element
         * will not be mutated.
         *
         * @type {Layout[]} */
        this.fields = fields;

        /** Control behavior of {@link Layout#decode|decode()} given short
         * buffers.
         *
         * In some situations a structure many be extended with additional
         * fields over time, with older installations providing only a
         * prefix of the full structure.  If this property is `true`
         * decoding will accept those buffers and leave subsequent fields
         * undefined, as long as the buffer ends at a field boundary.
         * Defaults to `false`. */
        this.decodePrefixes = !!decodePrefixes;
      }

      /** @override */
      getSpan(b, offset) {
        if (0 <= this.span) {
          return this.span;
        }
        if (undefined === offset) {
          offset = 0;
        }
        let span = 0;
        try {
          span = this.fields.reduce((span, fd) => {
            const fsp = fd.getSpan(b, offset);
            offset += fsp;
            return span + fsp;
          }, 0);
        } catch (e) {
          throw new RangeError('indeterminate span');
        }
        return span;
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const dest = this.makeDestinationObject();
        for (const fd of this.fields) {
          if (undefined !== fd.property) {
            dest[fd.property] = fd.decode(b, offset);
          }
          offset += fd.getSpan(b, offset);
          if (this.decodePrefixes
              && (b.length === offset)) {
            break;
          }
        }
        return dest;
      }

      /** Implement {@link Layout#encode|encode} for {@link Structure}.
       *
       * If `src` is missing a property for a member with a defined {@link
       * Layout#property|property} the corresponding region of the buffer is
       * left unmodified. */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const firstOffset = offset;
        let lastOffset = 0;
        let lastWrote = 0;
        for (const fd of this.fields) {
          let span = fd.span;
          lastWrote = (0 < span) ? span : 0;
          if (undefined !== fd.property) {
            const fv = src[fd.property];
            if (undefined !== fv) {
              lastWrote = fd.encode(fv, b, offset);
              if (0 > span) {
                /* Read the as-encoded span, which is not necessarily the
                 * same as what we wrote. */
                span = fd.getSpan(b, offset);
              }
            }
          }
          lastOffset = offset;
          offset += span;
        }
        /* Use (lastOffset + lastWrote) instead of offset because the last
         * item may have had a dynamic length and we don't want to include
         * the padding between it and the end of the space reserved for
         * it. */
        return (lastOffset + lastWrote) - firstOffset;
      }

      /** @override */
      fromArray(values) {
        const dest = this.makeDestinationObject();
        for (const fd of this.fields) {
          if ((undefined !== fd.property)
              && (0 < values.length)) {
            dest[fd.property] = values.shift();
          }
        }
        return dest;
      }

      /**
       * Get access to the layout of a given property.
       *
       * @param {String} property - the structure member of interest.
       *
       * @return {Layout} - the layout associated with `property`, or
       * undefined if there is no such property.
       */
      layoutFor(property) {
        if ('string' !== typeof property) {
          throw new TypeError('property must be string');
        }
        for (const fd of this.fields) {
          if (fd.property === property) {
            return fd;
          }
        }
      }

      /**
       * Get the offset of a structure member.
       *
       * @param {String} property - the structure member of interest.
       *
       * @return {Number} - the offset in bytes to the start of `property`
       * within the structure, or undefined if `property` is not a field
       * within the structure.  If the property is a member but follows a
       * variable-length structure member a negative number will be
       * returned.
       */
      offsetOf(property) {
        if ('string' !== typeof property) {
          throw new TypeError('property must be string');
        }
        let offset = 0;
        for (const fd of this.fields) {
          if (fd.property === property) {
            return offset;
          }
          if (0 > fd.span) {
            offset = -1;
          } else if (0 <= offset) {
            offset += fd.span;
          }
        }
      }
    }

    /**
     * An object that can provide a {@link
     * Union#discriminator|discriminator} API for {@link Union}.
     *
     * **NOTE** This is an abstract base class; you can create instances
     * if it amuses you, but they won't support the {@link
     * UnionDiscriminator#encode|encode} or {@link
     * UnionDiscriminator#decode|decode} functions.
     *
     * @param {string} [property] - Default for {@link
     * UnionDiscriminator#property|property}.
     *
     * @abstract
     */
    class UnionDiscriminator {
      constructor(property) {
        /** The {@link Layout#property|property} to be used when the
         * discriminator is referenced in isolation (generally when {@link
         * Union#decode|Union decode} cannot delegate to a specific
         * variant). */
        this.property = property;
      }

      /** Analog to {@link Layout#decode|Layout decode} for union discriminators.
       *
       * The implementation of this method need not reference the buffer if
       * variant information is available through other means. */
      decode() {
        throw new Error('UnionDiscriminator is abstract');
      }

      /** Analog to {@link Layout#decode|Layout encode} for union discriminators.
       *
       * The implementation of this method need not store the value if
       * variant information is maintained through other means. */
      encode() {
        throw new Error('UnionDiscriminator is abstract');
      }
    }

    /**
     * An object that can provide a {@link
     * UnionDiscriminator|discriminator API} for {@link Union} using an
     * unsigned integral {@link Layout} instance located either inside or
     * outside the union.
     *
     * @param {ExternalLayout} layout - initializes {@link
     * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link
     * ExternalLayout#isCount|isCount()}.
     *
     * @param {string} [property] - Default for {@link
     * UnionDiscriminator#property|property}, superseding the property
     * from `layout`, but defaulting to `variant` if neither `property`
     * nor layout provide a property name.
     *
     * @augments {UnionDiscriminator}
     */
    class UnionLayoutDiscriminator extends UnionDiscriminator {
      constructor(layout, property) {
        if (!((layout instanceof ExternalLayout$1)
              && layout.isCount())) {
          throw new TypeError('layout must be an unsigned integer ExternalLayout');
        }

        super(property || layout.property || 'variant');

        /** The {@link ExternalLayout} used to access the discriminator
         * value. */
        this.layout = layout;
      }

      /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */
      decode(b, offset) {
        return this.layout.decode(b, offset);
      }

      /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */
      encode(src, b, offset) {
        return this.layout.encode(src, b, offset);
      }
    }

    /**
     * Represent any number of span-compatible layouts.
     *
     * *Factory*: {@link module:Layout.union|union}
     *
     * If the union has a {@link Union#defaultLayout|default layout} that
     * layout must have a non-negative {@link Layout#span|span}.  The span
     * of a fixed-span union includes its {@link
     * Union#discriminator|discriminator} if the variant is a {@link
     * Union#usesPrefixDiscriminator|prefix of the union}, plus the span
     * of its {@link Union#defaultLayout|default layout}.
     *
     * If the union does not have a default layout then the encoded span
     * of the union depends on the encoded span of its variant (which may
     * be fixed or variable).
     *
     * {@link VariantLayout#layout|Variant layout}s are added through
     * {@link Union#addVariant|addVariant}.  If the union has a default
     * layout, the span of the {@link VariantLayout#layout|layout
     * contained by the variant} must not exceed the span of the {@link
     * Union#defaultLayout|default layout} (minus the span of a {@link
     * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The
     * span of the variant will equal the span of the union itself.
     *
     * The variant for a buffer can only be identified from the {@link
     * Union#discriminator|discriminator} {@link
     * UnionDiscriminator#property|property} (in the case of the {@link
     * Union#defaultLayout|default layout}), or by using {@link
     * Union#getVariant|getVariant} and examining the resulting {@link
     * VariantLayout} instance.
     *
     * A variant compatible with a JavaScript object can be identified
     * using {@link Union#getSourceVariant|getSourceVariant}.
     *
     * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to
     * identify the layout used to interpret the union contents.  The
     * parameter must be an instance of {@link UnionDiscriminator}, an
     * {@link ExternalLayout} that satisfies {@link
     * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link
     * UIntBE}).  When a non-external layout element is passed the layout
     * appears at the start of the union.  In all cases the (synthesized)
     * {@link UnionDiscriminator} instance is recorded as {@link
     * Union#discriminator|discriminator}.
     *
     * @param {(Layout|null)} defaultLayout - initializer for {@link
     * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.
     * If `null` there is no default layout: the union has data-dependent
     * length and attempts to decode or encode unrecognized variants will
     * throw an exception.  A {@link Layout} instance must have a
     * non-negative {@link Layout#span|span}, and if it lacks a {@link
     * Layout#property|property} the {@link
     * Union#defaultLayout|defaultLayout} will be a {@link
     * Layout#replicate|replica} with property `content`.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class Union extends Layout$1 {
      constructor(discr, defaultLayout, property) {
        const upv = ((discr instanceof UInt$1)
                   || (discr instanceof UIntBE));
        if (upv) {
          discr = new UnionLayoutDiscriminator(new OffsetLayout(discr));
        } else if ((discr instanceof ExternalLayout$1)
                   && discr.isCount()) {
          discr = new UnionLayoutDiscriminator(discr);
        } else if (!(discr instanceof UnionDiscriminator)) {
          throw new TypeError('discr must be a UnionDiscriminator '
                              + 'or an unsigned integer layout');
        }
        if (undefined === defaultLayout) {
          defaultLayout = null;
        }
        if (!((null === defaultLayout)
              || (defaultLayout instanceof Layout$1))) {
          throw new TypeError('defaultLayout must be null or a Layout');
        }
        if (null !== defaultLayout) {
          if (0 > defaultLayout.span) {
            throw new Error('defaultLayout must have constant span');
          }
          if (undefined === defaultLayout.property) {
            defaultLayout = defaultLayout.replicate('content');
          }
        }

        /* The union span can be estimated only if there's a default
         * layout.  The union spans its default layout, plus any prefix
         * variant layout.  By construction both layouts, if present, have
         * non-negative span. */
        let span = -1;
        if (defaultLayout) {
          span = defaultLayout.span;
          if ((0 <= span) && upv) {
            span += discr.layout.span;
          }
        }
        super(span, property);

        /** The interface for the discriminator value in isolation.
         *
         * This a {@link UnionDiscriminator} either passed to the
         * constructor or synthesized from the `discr` constructor
         * argument.  {@link
         * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be
         * `true` iff the `discr` parameter was a non-offset {@link
         * Layout} instance. */
        this.discriminator = discr;

        /** `true` if the {@link Union#discriminator|discriminator} is the
         * first field in the union.
         *
         * If `false` the discriminator is obtained from somewhere
         * else. */
        this.usesPrefixDiscriminator = upv;

        /** The layout for non-discriminator content when the value of the
         * discriminator is not recognized.
         *
         * This is the value passed to the constructor.  It is
         * structurally equivalent to the second component of {@link
         * Union#layout|layout} but may have a different property
         * name. */
        this.defaultLayout = defaultLayout;

        /** A registry of allowed variants.
         *
         * The keys are unsigned integers which should be compatible with
         * {@link Union.discriminator|discriminator}.  The property value
         * is the corresponding {@link VariantLayout} instances assigned
         * to this union by {@link Union#addVariant|addVariant}.
         *
         * **NOTE** The registry remains mutable so that variants can be
         * {@link Union#addVariant|added} at any time.  Users should not
         * manipulate the content of this property. */
        this.registry = {};

        /* Private variable used when invoking getSourceVariant */
        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);

        /** Function to infer the variant selected by a source object.
         *
         * Defaults to {@link
         * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may
         * be overridden using {@link
         * Union#configGetSourceVariant|configGetSourceVariant}.
         *
         * @param {Object} src - as with {@link
         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
         *
         * @returns {(undefined|VariantLayout)} The default variant
         * (`undefined`) or first registered variant that uses a property
         * available in `src`. */
        this.getSourceVariant = function(src) {
          return boundGetSourceVariant(src);
        };

        /** Function to override the implementation of {@link
         * Union#getSourceVariant|getSourceVariant}.
         *
         * Use this if the desired variant cannot be identified using the
         * algorithm of {@link
         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
         *
         * **NOTE** The provided function will be invoked bound to this
         * Union instance, providing local access to {@link
         * Union#registry|registry}.
         *
         * @param {Function} gsv - a function that follows the API of
         * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */
        this.configGetSourceVariant = function(gsv) {
          boundGetSourceVariant = gsv.bind(this);
        };
      }

      /** @override */
      getSpan(b, offset) {
        if (0 <= this.span) {
          return this.span;
        }
        if (undefined === offset) {
          offset = 0;
        }
        /* Default layouts always have non-negative span, so we don't have
         * one and we have to recognize the variant which will in turn
         * determine the span. */
        const vlo = this.getVariant(b, offset);
        if (!vlo) {
          throw new Error('unable to determine span for unrecognized variant');
        }
        return vlo.getSpan(b, offset);
      }

      /**
       * Method to infer a registered Union variant compatible with `src`.
       *
       * The first satisified rule in the following sequence defines the
       * return value:
       * * If `src` has properties matching the Union discriminator and
       *   the default layout, `undefined` is returned regardless of the
       *   value of the discriminator property (this ensures the default
       *   layout will be used);
       * * If `src` has a property matching the Union discriminator, the
       *   value of the discriminator identifies a registered variant, and
       *   either (a) the variant has no layout, or (b) `src` has the
       *   variant's property, then the variant is returned (because the
       *   source satisfies the constraints of the variant it identifies);
       * * If `src` does not have a property matching the Union
       *   discriminator, but does have a property matching a registered
       *   variant, then the variant is returned (because the source
       *   matches a variant without an explicit conflict);
       * * An error is thrown (because we either can't identify a variant,
       *   or we were explicitly told the variant but can't satisfy it).
       *
       * @param {Object} src - an object presumed to be compatible with
       * the content of the Union.
       *
       * @return {(undefined|VariantLayout)} - as described above.
       *
       * @throws {Error} - if `src` cannot be associated with a default or
       * registered variant.
       */
      defaultGetSourceVariant(src) {
        if (src.hasOwnProperty(this.discriminator.property)) {
          if (this.defaultLayout
              && src.hasOwnProperty(this.defaultLayout.property)) {
            return undefined;
          }
          const vlo = this.registry[src[this.discriminator.property]];
          if (vlo
              && ((!vlo.layout)
                  || src.hasOwnProperty(vlo.property))) {
            return vlo;
          }
        } else {
          for (const tag in this.registry) {
            const vlo = this.registry[tag];
            if (src.hasOwnProperty(vlo.property)) {
              return vlo;
            }
          }
        }
        throw new Error('unable to infer src variant');
      }

      /** Implement {@link Layout#decode|decode} for {@link Union}.
       *
       * If the variant is {@link Union#addVariant|registered} the return
       * value is an instance of that variant, with no explicit
       * discriminator.  Otherwise the {@link Union#defaultLayout|default
       * layout} is used to decode the content. */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        let dest;
        const dlo = this.discriminator;
        const discr = dlo.decode(b, offset);
        let clo = this.registry[discr];
        if (undefined === clo) {
          let contentOffset = 0;
          clo = this.defaultLayout;
          if (this.usesPrefixDiscriminator) {
            contentOffset = dlo.layout.span;
          }
          dest = this.makeDestinationObject();
          dest[dlo.property] = discr;
          dest[clo.property] = this.defaultLayout.decode(b, offset + contentOffset);
        } else {
          dest = clo.decode(b, offset);
        }
        return dest;
      }

      /** Implement {@link Layout#encode|encode} for {@link Union}.
       *
       * This API assumes the `src` object is consistent with the union's
       * {@link Union#defaultLayout|default layout}.  To encode variants
       * use the appropriate variant-specific {@link VariantLayout#encode}
       * method. */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const vlo = this.getSourceVariant(src);
        if (undefined === vlo) {
          const dlo = this.discriminator;
          const clo = this.defaultLayout;
          let contentOffset = 0;
          if (this.usesPrefixDiscriminator) {
            contentOffset = dlo.layout.span;
          }
          dlo.encode(src[dlo.property], b, offset);
          return contentOffset + clo.encode(src[clo.property], b,
                                            offset + contentOffset);
        }
        return vlo.encode(src, b, offset);
      }

      /** Register a new variant structure within a union.  The newly
       * created variant is returned.
       *
       * @param {Number} variant - initializer for {@link
       * VariantLayout#variant|variant}.
       *
       * @param {Layout} layout - initializer for {@link
       * VariantLayout#layout|layout}.
       *
       * @param {String} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {VariantLayout} */
      addVariant(variant, layout, property) {
        const rv = new VariantLayout(this, variant, layout, property);
        this.registry[variant] = rv;
        return rv;
      }

      /**
       * Get the layout associated with a registered variant.
       *
       * If `vb` does not produce a registered variant the function returns
       * `undefined`.
       *
       * @param {(Number|Buffer)} vb - either the variant number, or a
       * buffer from which the discriminator is to be read.
       *
       * @param {Number} offset - offset into `vb` for the start of the
       * union.  Used only when `vb` is an instance of {Buffer}.
       *
       * @return {({VariantLayout}|undefined)}
       */
      getVariant(vb, offset) {
        let variant = vb;
        if (isBuffer(vb)) {
          if (undefined === offset) {
            offset = 0;
          }
          variant = this.discriminator.decode(vb, offset);
        }
        return this.registry[variant];
      }
    }

    /**
     * Represent a specific variant within a containing union.
     *
     * **NOTE** The {@link Layout#span|span} of the variant may include
     * the span of the {@link Union#discriminator|discriminator} used to
     * identify it, but values read and written using the variant strictly
     * conform to the content of {@link VariantLayout#layout|layout}.
     *
     * **NOTE** User code should not invoke this constructor directly.  Use
     * the union {@link Union#addVariant|addVariant} helper method.
     *
     * @param {Union} union - initializer for {@link
     * VariantLayout#union|union}.
     *
     * @param {Number} variant - initializer for {@link
     * VariantLayout#variant|variant}.
     *
     * @param {Layout} [layout] - initializer for {@link
     * VariantLayout#layout|layout}.  If absent the variant carries no
     * data.
     *
     * @param {String} [property] - initializer for {@link
     * Layout#property|property}.  Unlike many other layouts, variant
     * layouts normally include a property name so they can be identified
     * within their containing {@link Union}.  The property identifier may
     * be absent only if `layout` is is absent.
     *
     * @augments {Layout}
     */
    class VariantLayout extends Layout$1 {
      constructor(union, variant, layout, property) {
        if (!(union instanceof Union)) {
          throw new TypeError('union must be a Union');
        }
        if ((!Number.isInteger(variant)) || (0 > variant)) {
          throw new TypeError('variant must be a (non-negative) integer');
        }
        if (('string' === typeof layout)
            && (undefined === property)) {
          property = layout;
          layout = null;
        }
        if (layout) {
          if (!(layout instanceof Layout$1)) {
            throw new TypeError('layout must be a Layout');
          }
          if ((null !== union.defaultLayout)
              && (0 <= layout.span)
              && (layout.span > union.defaultLayout.span)) {
            throw new Error('variant span exceeds span of containing union');
          }
          if ('string' !== typeof property) {
            throw new TypeError('variant must have a String property');
          }
        }
        let span = union.span;
        if (0 > union.span) {
          span = layout ? layout.span : 0;
          if ((0 <= span) && union.usesPrefixDiscriminator) {
            span += union.discriminator.layout.span;
          }
        }
        super(span, property);

        /** The {@link Union} to which this variant belongs. */
        this.union = union;

        /** The unsigned integral value identifying this variant within
         * the {@link Union#discriminator|discriminator} of the containing
         * union. */
        this.variant = variant;

        /** The {@link Layout} to be used when reading/writing the
         * non-discriminator part of the {@link
         * VariantLayout#union|union}.  If `null` the variant carries no
         * data. */
        this.layout = layout || null;
      }

      /** @override */
      getSpan(b, offset) {
        if (0 <= this.span) {
          /* Will be equal to the containing union span if that is not
           * variable. */
          return this.span;
        }
        if (undefined === offset) {
          offset = 0;
        }
        let contentOffset = 0;
        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }
        /* Span is defined solely by the variant (and prefix discriminator) */
        return contentOffset + this.layout.getSpan(b, offset + contentOffset);
      }

      /** @override */
      decode(b, offset) {
        const dest = this.makeDestinationObject();
        if (undefined === offset) {
          offset = 0;
        }
        if (this !== this.union.getVariant(b, offset)) {
          throw new Error('variant mismatch');
        }
        let contentOffset = 0;
        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }
        if (this.layout) {
          dest[this.property] = this.layout.decode(b, offset + contentOffset);
        } else if (this.property) {
          dest[this.property] = true;
        } else if (this.union.usesPrefixDiscriminator) {
          dest[this.union.discriminator.property] = this.variant;
        }
        return dest;
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        let contentOffset = 0;
        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }
        if (this.layout
            && (!src.hasOwnProperty(this.property))) {
          throw new TypeError('variant lacks property ' + this.property);
        }
        this.union.discriminator.encode(this.variant, b, offset);
        let span = contentOffset;
        if (this.layout) {
          this.layout.encode(src[this.property], b, offset + contentOffset);
          span += this.layout.getSpan(b, offset + contentOffset);
          if ((0 <= this.union.span)
              && (span > this.union.span)) {
            throw new Error('encoded variant overruns containing union');
          }
        }
        return span;
      }

      /** Delegate {@link Layout#fromArray|fromArray} to {@link
       * VariantLayout#layout|layout}. */
      fromArray(values) {
        if (this.layout) {
          return this.layout.fromArray(values);
        }
      }
    }

    /** JavaScript chose to define bitwise operations as operating on
     * signed 32-bit values in 2's complement form, meaning any integer
     * with bit 31 set is going to look negative.  For right shifts that's
     * not a problem, because `>>>` is a logical shift, but for every
     * other bitwise operator we have to compensate for possible negative
     * results. */
    function fixBitwiseResult(v) {
      if (0 > v) {
        v += 0x100000000;
      }
      return v;
    }

    /**
     * Contain a sequence of bit fields as an unsigned integer.
     *
     * *Factory*: {@link module:Layout.bits|bits}
     *
     * This is a container element; within it there are {@link BitField}
     * instances that provide the extracted properties.  The container
     * simply defines the aggregate representation and its bit ordering.
     * The representation is an object containing properties with numeric
     * or {@link Boolean} values.
     *
     * {@link BitField}s are added with the {@link
     * BitStructure#addField|addField} and {@link
     * BitStructure#addBoolean|addBoolean} methods.

     * @param {Layout} word - initializer for {@link
     * BitStructure#word|word}.  The parameter must be an instance of
     * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.
     *
     * @param {bool} [msb] - `true` if the bit numbering starts at the
     * most significant bit of the containing word; `false` (default) if
     * it starts at the least significant bit of the containing word.  If
     * the parameter at this position is a string and `property` is
     * `undefined` the value of this argument will instead be used as the
     * value of `property`.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class BitStructure extends Layout$1 {
      constructor(word, msb, property) {
        if (!((word instanceof UInt$1)
              || (word instanceof UIntBE))) {
          throw new TypeError('word must be a UInt or UIntBE layout');
        }
        if (('string' === typeof msb)
            && (undefined === property)) {
          property = msb;
          msb = undefined;
        }
        if (4 < word.span) {
          throw new RangeError('word cannot exceed 32 bits');
        }
        super(word.span, property);

        /** The layout used for the packed value.  {@link BitField}
         * instances are packed sequentially depending on {@link
         * BitStructure#msb|msb}. */
        this.word = word;

        /** Whether the bit sequences are packed starting at the most
         * significant bit growing down (`true`), or the least significant
         * bit growing up (`false`).
         *
         * **NOTE** Regardless of this value, the least significant bit of
         * any {@link BitField} value is the least significant bit of the
         * corresponding section of the packed value. */
        this.msb = !!msb;

        /** The sequence of {@link BitField} layouts that comprise the
         * packed structure.
         *
         * **NOTE** The array remains mutable to allow fields to be {@link
         * BitStructure#addField|added} after construction.  Users should
         * not manipulate the content of this property.*/
        this.fields = [];

        /* Storage for the value.  Capture a variable instead of using an
         * instance property because we don't want anything to change the
         * value without going through the mutator. */
        let value = 0;
        this._packedSetValue = function(v) {
          value = fixBitwiseResult(v);
          return this;
        };
        this._packedGetValue = function() {
          return value;
        };
      }

      /** @override */
      decode(b, offset) {
        const dest = this.makeDestinationObject();
        if (undefined === offset) {
          offset = 0;
        }
        const value = this.word.decode(b, offset);
        this._packedSetValue(value);
        for (const fd of this.fields) {
          if (undefined !== fd.property) {
            dest[fd.property] = fd.decode(value);
          }
        }
        return dest;
      }

      /** Implement {@link Layout#encode|encode} for {@link BitStructure}.
       *
       * If `src` is missing a property for a member with a defined {@link
       * Layout#property|property} the corresponding region of the packed
       * value is left unmodified.  Unused bits are also left unmodified. */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const value = this.word.decode(b, offset);
        this._packedSetValue(value);
        for (const fd of this.fields) {
          if (undefined !== fd.property) {
            const fv = src[fd.property];
            if (undefined !== fv) {
              fd.encode(fv);
            }
          }
        }
        return this.word.encode(this._packedGetValue(), b, offset);
      }

      /** Register a new bitfield with a containing bit structure.  The
       * resulting bitfield is returned.
       *
       * @param {Number} bits - initializer for {@link BitField#bits|bits}.
       *
       * @param {string} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {BitField} */
      addField(bits, property) {
        const bf = new BitField(this, bits, property);
        this.fields.push(bf);
        return bf;
      }

      /** As with {@link BitStructure#addField|addField} for single-bit
       * fields with `boolean` value representation.
       *
       * @param {string} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {Boolean} */
      addBoolean(property) {
        // This is my Boolean, not the Javascript one.
        // eslint-disable-next-line no-new-wrappers
        const bf = new Boolean$1(this, property);
        this.fields.push(bf);
        return bf;
      }

      /**
       * Get access to the bit field for a given property.
       *
       * @param {String} property - the bit field of interest.
       *
       * @return {BitField} - the field associated with `property`, or
       * undefined if there is no such property.
       */
      fieldFor(property) {
        if ('string' !== typeof property) {
          throw new TypeError('property must be string');
        }
        for (const fd of this.fields) {
          if (fd.property === property) {
            return fd;
          }
        }
      }
    }

    /**
     * Represent a sequence of bits within a {@link BitStructure}.
     *
     * All bit field values are represented as unsigned integers.
     *
     * **NOTE** User code should not invoke this constructor directly.
     * Use the container {@link BitStructure#addField|addField} helper
     * method.
     *
     * **NOTE** BitField instances are not instances of {@link Layout}
     * since {@link Layout#span|span} measures 8-bit units.
     *
     * @param {BitStructure} container - initializer for {@link
     * BitField#container|container}.
     *
     * @param {Number} bits - initializer for {@link BitField#bits|bits}.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     */
    class BitField {
      constructor(container, bits, property) {
        if (!(container instanceof BitStructure)) {
          throw new TypeError('container must be a BitStructure');
        }
        if ((!Number.isInteger(bits)) || (0 >= bits)) {
          throw new TypeError('bits must be positive integer');
        }
        const totalBits = 8 * container.span;
        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);
        if ((bits + usedBits) > totalBits) {
          throw new Error('bits too long for span remainder ('
                          + (totalBits - usedBits) + ' of '
                          + totalBits + ' remain)');
        }

        /** The {@link BitStructure} instance to which this bit field
         * belongs. */
        this.container = container;

        /** The span of this value in bits. */
        this.bits = bits;

        /** A mask of {@link BitField#bits|bits} bits isolating value bits
         * that fit within the field.
         *
         * That is, it masks a value that has not yet been shifted into
         * position within its containing packed integer. */
        this.valueMask = (1 << bits) - 1;
        if (32 === bits) { // shifted value out of range
          this.valueMask = 0xFFFFFFFF;
        }

        /** The offset of the value within the containing packed unsigned
         * integer.  The least significant bit of the packed value is at
         * offset zero, regardless of bit ordering used. */
        this.start = usedBits;
        if (this.container.msb) {
          this.start = totalBits - usedBits - bits;
        }

        /** A mask of {@link BitField#bits|bits} isolating the field value
         * within the containing packed unsigned integer. */
        this.wordMask = fixBitwiseResult(this.valueMask << this.start);

        /** The property name used when this bitfield is represented in an
         * Object.
         *
         * Intended to be functionally equivalent to {@link
         * Layout#property}.
         *
         * If left undefined the corresponding span of bits will be
         * treated as padding: it will not be mutated by {@link
         * Layout#encode|encode} nor represented as a property in the
         * decoded Object. */
        this.property = property;
      }

      /** Store a value into the corresponding subsequence of the containing
       * bit field. */
      decode() {
        const word = this.container._packedGetValue();
        const wordValue = fixBitwiseResult(word & this.wordMask);
        const value = wordValue >>> this.start;
        return value;
      }

      /** Store a value into the corresponding subsequence of the containing
       * bit field.
       *
       * **NOTE** This is not a specialization of {@link
       * Layout#encode|Layout.encode} and there is no return value. */
      encode(value) {
        if ((!Number.isInteger(value))
            || (value !== fixBitwiseResult(value & this.valueMask))) {
          throw new TypeError(nameWithProperty$1('BitField.encode', this)
                              + ' value must be integer not exceeding ' + this.valueMask);
        }
        const word = this.container._packedGetValue();
        const wordValue = fixBitwiseResult(value << this.start);
        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)
                                       | wordValue);
      };
    }

    /**
     * Represent a single bit within a {@link BitStructure} as a
     * JavaScript boolean.
     *
     * **NOTE** User code should not invoke this constructor directly.
     * Use the container {@link BitStructure#addBoolean|addBoolean} helper
     * method.
     *
     * @param {BitStructure} container - initializer for {@link
     * BitField#container|container}.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {BitField}
     */
    /* eslint-disable no-extend-native */
    class Boolean$1 extends BitField {
      constructor(container, property) {
        super(container, 1, property);
      }

      /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.
       *
       * @returns {boolean} */
      decode(b, offset) {
        return !!BitField.prototype.decode.call(this, b, offset);
      }

      /** @override */
      encode(value) {
        if ('boolean' === typeof value) {
          // BitField requires integer values
          value = +value;
        }
        return BitField.prototype.encode.call(this, value);
      }
    }
    /* eslint-enable no-extend-native */

    /**
     * Contain a fixed-length block of arbitrary data, represented as a
     * Buffer.
     *
     * *Factory*: {@link module:Layout.blob|blob}
     *
     * @param {(Number|ExternalLayout)} length - initializes {@link
     * Blob#length|length}.
     *
     * @param {String} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class Blob$2 extends Layout$1 {
      constructor(length, property) {
        if (!(((length instanceof ExternalLayout$1) && length.isCount())
              || (Number.isInteger(length) && (0 <= length)))) {
          throw new TypeError('length must be positive integer '
                              + 'or an unsigned integer ExternalLayout');
        }

        let span = -1;
        if (!(length instanceof ExternalLayout$1)) {
          span = length;
        }
        super(span, property);

        /** The number of bytes in the blob.
         *
         * This may be a non-negative integer, or an instance of {@link
         * ExternalLayout} that satisfies {@link
         * ExternalLayout#isCount|isCount()}. */
        this.length = length;
      }

      /** @override */
      getSpan(b, offset) {
        let span = this.span;
        if (0 > span) {
          span = this.length.decode(b, offset);
        }
        return span;
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        let span = this.span;
        if (0 > span) {
          span = this.length.decode(b, offset);
        }
        return b.slice(offset, offset + span);
      }

      /** Implement {@link Layout#encode|encode} for {@link Blob}.
       *
       * **NOTE** If {@link Layout#count|count} is an instance of {@link
       * ExternalLayout} then the length of `src` will be encoded as the
       * count after `src` is encoded. */
      encode(src, b, offset) {
        let span = this.length;
        if (this.length instanceof ExternalLayout$1) {
          span = src.length;
        }
        if (!(isBuffer(src)
              && (span === src.length))) {
          throw new TypeError(nameWithProperty$1('Blob.encode', this)
                              + ' requires (length ' + span + ') Buffer as src');
        }
        if ((offset + span) > b.length) {
          throw new RangeError('encoding overruns Buffer');
        }
        b.write(src.toString('hex'), offset, span, 'hex');
        if (this.length instanceof ExternalLayout$1) {
          this.length.encode(span, b, offset);
        }
        return span;
      }
    }

    /**
     * Contain a `NUL`-terminated UTF8 string.
     *
     * *Factory*: {@link module:Layout.cstr|cstr}
     *
     * **NOTE** Any UTF8 string that incorporates a zero-valued byte will
     * not be correctly decoded by this layout.
     *
     * @param {String} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class CString extends Layout$1 {
      constructor(property) {
        super(-1, property);
      }

      /** @override */
      getSpan(b, offset) {
        if (!isBuffer(b)) {
          throw new TypeError('b must be a Buffer');
        }
        if (undefined === offset) {
          offset = 0;
        }
        let idx = offset;
        while ((idx < b.length) && (0 !== b[idx])) {
          idx += 1;
        }
        return 1 + idx - offset;
      }

      /** @override */
      decode(b, offset, dest) {
        if (undefined === offset) {
          offset = 0;
        }
        let span = this.getSpan(b, offset);
        return b.slice(offset, offset + span - 1).toString('utf-8');
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        /* Must force this to a string, lest it be a number and the
         * "utf8-encoding" below actually allocate a buffer of length
         * src */
        if ('string' !== typeof src) {
          src = src.toString();
        }
        const srcb = new Buffer(src, 'utf8');
        const span = srcb.length;
        if ((offset + span) > b.length) {
          throw new RangeError('encoding overruns Buffer');
        }
        srcb.copy(b, offset);
        b[offset + span] = 0;
        return span + 1;
      }
    }

    /**
     * Contain a UTF8 string with implicit length.
     *
     * *Factory*: {@link module:Layout.utf8|utf8}
     *
     * **NOTE** Because the length is implicit in the size of the buffer
     * this layout should be used only in isolation, or in a situation
     * where the length can be expressed by operating on a slice of the
     * containing buffer.
     *
     * @param {Number} [maxSpan] - the maximum length allowed for encoded
     * string content.  If not provided there is no bound on the allowed
     * content.
     *
     * @param {String} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class UTF8 extends Layout$1 {
      constructor(maxSpan, property) {
        if (('string' === typeof maxSpan)
            && (undefined === property)) {
          property = maxSpan;
          maxSpan = undefined;
        }
        if (undefined === maxSpan) {
          maxSpan = -1;
        } else if (!Number.isInteger(maxSpan)) {
          throw new TypeError('maxSpan must be an integer');
        }

        super(-1, property);

        /** The maximum span of the layout in bytes.
         *
         * Positive values are generally expected.  Zero is abnormal.
         * Attempts to encode or decode a value that exceeds this length
         * will throw a `RangeError`.
         *
         * A negative value indicates that there is no bound on the length
         * of the content. */
        this.maxSpan = maxSpan;
      }

      /** @override */
      getSpan(b, offset) {
        if (!isBuffer(b)) {
          throw new TypeError('b must be a Buffer');
        }
        if (undefined === offset) {
          offset = 0;
        }
        return b.length - offset;
      }

      /** @override */
      decode(b, offset, dest) {
        if (undefined === offset) {
          offset = 0;
        }
        let span = this.getSpan(b, offset);
        if ((0 <= this.maxSpan)
            && (this.maxSpan < span)) {
          throw new RangeError('text length exceeds maxSpan');
        }
        return b.slice(offset, offset + span).toString('utf-8');
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        /* Must force this to a string, lest it be a number and the
         * "utf8-encoding" below actually allocate a buffer of length
         * src */
        if ('string' !== typeof src) {
          src = src.toString();
        }
        const srcb = new Buffer(src, 'utf8');
        const span = srcb.length;
        if ((0 <= this.maxSpan)
            && (this.maxSpan < span)) {
          throw new RangeError('text length exceeds maxSpan');
        }
        if ((offset + span) > b.length) {
          throw new RangeError('encoding overruns Buffer');
        }
        srcb.copy(b, offset);
        return span;
      }
    }

    /**
     * Contain a constant value.
     *
     * This layout may be used in cases where a JavaScript value can be
     * inferred without an expression in the binary encoding.  An example
     * would be a {@link VariantLayout|variant layout} where the content
     * is implied by the union {@link Union#discriminator|discriminator}.
     *
     * @param {Object|Number|String} value - initializer for {@link
     * Constant#value|value}.  If the value is an object (or array) and
     * the application intends the object to remain unchanged regardless
     * of what is done to values decoded by this layout, the value should
     * be frozen prior passing it to this constructor.
     *
     * @param {String} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class Constant extends Layout$1 {
      constructor(value, property) {
        super(0, property);

        /** The value produced by this constant when the layout is {@link
         * Constant#decode|decoded}.
         *
         * Any JavaScript value including `null` and `undefined` is
         * permitted.
         *
         * **WARNING** If `value` passed in the constructor was not
         * frozen, it is possible for users of decoded values to change
         * the content of the value. */
        this.value = value;
      }

      /** @override */
      decode(b, offset, dest) {
        return this.value;
      }

      /** @override */
      encode(src, b, offset) {
        /* Constants take no space */
        return 0;
      }
    }

    var ExternalLayout_1 = ExternalLayout$1;
    var GreedyCount_1 = GreedyCount;
    var OffsetLayout_1 = OffsetLayout;
    var UInt_1 = UInt$1;
    var UIntBE_1 = UIntBE;
    var Int_1 = Int;
    var IntBE_1 = IntBE;
    var Float_1 = Float;
    var FloatBE_1 = FloatBE;
    var Double_1 = Double;
    var DoubleBE_1 = DoubleBE;
    var Sequence_1 = Sequence;
    var Structure_1 = Structure$1;
    var UnionDiscriminator_1 = UnionDiscriminator;
    var UnionLayoutDiscriminator_1 = UnionLayoutDiscriminator;
    var Union_1 = Union;
    var VariantLayout_1 = VariantLayout;
    var BitStructure_1 = BitStructure;
    var BitField_1 = BitField;
    var _Boolean = Boolean$1;
    var Blob_1 = Blob$2;
    var CString_1 = CString;
    var UTF8_1 = UTF8;
    var Constant_1 = Constant;

    /** Factory for {@link GreedyCount}. */
    var greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));

    /** Factory for {@link OffsetLayout}. */
    var offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));

    /** Factory for {@link UInt|unsigned int layouts} spanning one
     * byte. */
    var u8$1 = (property => new UInt$1(1, property));

    /** Factory for {@link UInt|little-endian unsigned int layouts}
     * spanning two bytes. */
    var u16 = (property => new UInt$1(2, property));

    /** Factory for {@link UInt|little-endian unsigned int layouts}
     * spanning three bytes. */
    var u24 = (property => new UInt$1(3, property));

    /** Factory for {@link UInt|little-endian unsigned int layouts}
     * spanning four bytes. */
    var u32$1 = (property => new UInt$1(4, property));

    /** Factory for {@link UInt|little-endian unsigned int layouts}
     * spanning five bytes. */
    var u40 = (property => new UInt$1(5, property));

    /** Factory for {@link UInt|little-endian unsigned int layouts}
     * spanning six bytes. */
    var u48 = (property => new UInt$1(6, property));

    /** Factory for {@link NearUInt64|little-endian unsigned int
     * layouts} interpreted as Numbers. */
    var nu64 = (property => new NearUInt64(property));

    /** Factory for {@link UInt|big-endian unsigned int layouts}
     * spanning two bytes. */
    var u16be = (property => new UIntBE(2, property));

    /** Factory for {@link UInt|big-endian unsigned int layouts}
     * spanning three bytes. */
    var u24be = (property => new UIntBE(3, property));

    /** Factory for {@link UInt|big-endian unsigned int layouts}
     * spanning four bytes. */
    var u32be = (property => new UIntBE(4, property));

    /** Factory for {@link UInt|big-endian unsigned int layouts}
     * spanning five bytes. */
    var u40be = (property => new UIntBE(5, property));

    /** Factory for {@link UInt|big-endian unsigned int layouts}
     * spanning six bytes. */
    var u48be = (property => new UIntBE(6, property));

    /** Factory for {@link NearUInt64BE|big-endian unsigned int
     * layouts} interpreted as Numbers. */
    var nu64be = (property => new NearUInt64BE(property));

    /** Factory for {@link Int|signed int layouts} spanning one
     * byte. */
    var s8 = (property => new Int(1, property));

    /** Factory for {@link Int|little-endian signed int layouts}
     * spanning two bytes. */
    var s16 = (property => new Int(2, property));

    /** Factory for {@link Int|little-endian signed int layouts}
     * spanning three bytes. */
    var s24 = (property => new Int(3, property));

    /** Factory for {@link Int|little-endian signed int layouts}
     * spanning four bytes. */
    var s32 = (property => new Int(4, property));

    /** Factory for {@link Int|little-endian signed int layouts}
     * spanning five bytes. */
    var s40 = (property => new Int(5, property));

    /** Factory for {@link Int|little-endian signed int layouts}
     * spanning six bytes. */
    var s48 = (property => new Int(6, property));

    /** Factory for {@link NearInt64|little-endian signed int layouts}
     * interpreted as Numbers. */
    var ns64 = (property => new NearInt64(property));

    /** Factory for {@link Int|big-endian signed int layouts}
     * spanning two bytes. */
    var s16be = (property => new IntBE(2, property));

    /** Factory for {@link Int|big-endian signed int layouts}
     * spanning three bytes. */
    var s24be = (property => new IntBE(3, property));

    /** Factory for {@link Int|big-endian signed int layouts}
     * spanning four bytes. */
    var s32be = (property => new IntBE(4, property));

    /** Factory for {@link Int|big-endian signed int layouts}
     * spanning five bytes. */
    var s40be = (property => new IntBE(5, property));

    /** Factory for {@link Int|big-endian signed int layouts}
     * spanning six bytes. */
    var s48be = (property => new IntBE(6, property));

    /** Factory for {@link NearInt64BE|big-endian signed int layouts}
     * interpreted as Numbers. */
    var ns64be = (property => new NearInt64BE(property));

    /** Factory for {@link Float|little-endian 32-bit floating point} values. */
    var f32 = (property => new Float(property));

    /** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */
    var f32be = (property => new FloatBE(property));

    /** Factory for {@link Double|little-endian 64-bit floating point} values. */
    var f64 = (property => new Double(property));

    /** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */
    var f64be = (property => new DoubleBE(property));

    /** Factory for {@link Structure} values. */
    var struct$1 = ((fields, property, decodePrefixes) => new Structure$1(fields, property, decodePrefixes));

    /** Factory for {@link BitStructure} values. */
    var bits = ((word, msb, property) => new BitStructure(word, msb, property));

    /** Factory for {@link Sequence} values. */
    var seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));

    /** Factory for {@link Union} values. */
    var union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));

    /** Factory for {@link UnionLayoutDiscriminator} values. */
    var unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));

    /** Factory for {@link Blob} values. */
    var blob$1 = ((length, property) => new Blob$2(length, property));

    /** Factory for {@link CString} values. */
    var cstr = (property => new CString(property));

    /** Factory for {@link UTF8} values. */
    var utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));

    /** Factory for {@link Constant} values. */
    var _const = ((value, property) => new Constant(value, property));

    var Layout_1 = {
    	Layout: Layout_2,
    	nameWithProperty: nameWithProperty_1,
    	bindConstructorLayout: bindConstructorLayout_1,
    	ExternalLayout: ExternalLayout_1,
    	GreedyCount: GreedyCount_1,
    	OffsetLayout: OffsetLayout_1,
    	UInt: UInt_1,
    	UIntBE: UIntBE_1,
    	Int: Int_1,
    	IntBE: IntBE_1,
    	Float: Float_1,
    	FloatBE: FloatBE_1,
    	Double: Double_1,
    	DoubleBE: DoubleBE_1,
    	Sequence: Sequence_1,
    	Structure: Structure_1,
    	UnionDiscriminator: UnionDiscriminator_1,
    	UnionLayoutDiscriminator: UnionLayoutDiscriminator_1,
    	Union: Union_1,
    	VariantLayout: VariantLayout_1,
    	BitStructure: BitStructure_1,
    	BitField: BitField_1,
    	Boolean: _Boolean,
    	Blob: Blob_1,
    	CString: CString_1,
    	UTF8: UTF8_1,
    	Constant: Constant_1,
    	greedy: greedy,
    	offset: offset,
    	u8: u8$1,
    	u16: u16,
    	u24: u24,
    	u32: u32$1,
    	u40: u40,
    	u48: u48,
    	nu64: nu64,
    	u16be: u16be,
    	u24be: u24be,
    	u32be: u32be,
    	u40be: u40be,
    	u48be: u48be,
    	nu64be: nu64be,
    	s8: s8,
    	s16: s16,
    	s24: s24,
    	s32: s32,
    	s40: s40,
    	s48: s48,
    	ns64: ns64,
    	s16be: s16be,
    	s24be: s24be,
    	s32be: s32be,
    	s40be: s40be,
    	s48be: s48be,
    	ns64be: ns64be,
    	f32: f32,
    	f32be: f32be,
    	f64: f64,
    	f64be: f64be,
    	struct: struct$1,
    	bits: bits,
    	seq: seq,
    	union: union,
    	unionLayoutDiscriminator: unionLayoutDiscriminator,
    	blob: blob$1,
    	cstr: cstr,
    	utf8: utf8,
    	const: _const
    };

    var web3_js_1 = /*@__PURE__*/getAugmentedNamespace(index_browser_esm);

    var lib$1 = createCommonjsModule(function (module, exports) {
    var __importDefault = (commonjsGlobal$1 && commonjsGlobal$1.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.map = exports.array = exports.rustEnum = exports.str = exports.vecU8 = exports.tagged = exports.vec = exports.bool = exports.option = exports.publicKey = exports.i128 = exports.u128 = exports.i64 = exports.u64 = exports.struct = exports.i32 = exports.u32 = exports.i16 = exports.u16 = exports.i8 = exports.u8 = void 0;


    const bn_js_1 = __importDefault(bn$1);
    var buffer_layout_2 = Layout_1;
    Object.defineProperty(exports, "u8", { enumerable: true, get: function () { return buffer_layout_2.u8; } });
    Object.defineProperty(exports, "i8", { enumerable: true, get: function () { return buffer_layout_2.s8; } });
    Object.defineProperty(exports, "u16", { enumerable: true, get: function () { return buffer_layout_2.u16; } });
    Object.defineProperty(exports, "i16", { enumerable: true, get: function () { return buffer_layout_2.s16; } });
    Object.defineProperty(exports, "u32", { enumerable: true, get: function () { return buffer_layout_2.u32; } });
    Object.defineProperty(exports, "i32", { enumerable: true, get: function () { return buffer_layout_2.s32; } });
    Object.defineProperty(exports, "struct", { enumerable: true, get: function () { return buffer_layout_2.struct; } });
    class BNLayout extends Layout_1.Layout {
        constructor(span, signed, property) {
            super(span, property);
            this.blob = Layout_1.blob(span);
            this.signed = signed;
        }
        decode(b, offset = 0) {
            const num = new bn_js_1.default(this.blob.decode(b, offset), 10, 'le');
            if (this.signed) {
                return num.fromTwos(this.span * 8).clone();
            }
            return num;
        }
        encode(src, b, offset = 0) {
            if (this.signed) {
                src = src.toTwos(this.span * 8);
            }
            return this.blob.encode(src.toArrayLike(Buffer, 'le', this.span), b, offset);
        }
    }
    function u64(property) {
        return new BNLayout(8, false, property);
    }
    exports.u64 = u64;
    function i64(property) {
        return new BNLayout(8, true, property);
    }
    exports.i64 = i64;
    function u128(property) {
        return new BNLayout(16, false, property);
    }
    exports.u128 = u128;
    function i128(property) {
        return new BNLayout(16, true, property);
    }
    exports.i128 = i128;
    class WrappedLayout extends Layout_1.Layout {
        constructor(layout, decoder, encoder, property) {
            super(layout.span, property);
            this.layout = layout;
            this.decoder = decoder;
            this.encoder = encoder;
        }
        decode(b, offset) {
            return this.decoder(this.layout.decode(b, offset));
        }
        encode(src, b, offset) {
            return this.layout.encode(this.encoder(src), b, offset);
        }
        getSpan(b, offset) {
            return this.layout.getSpan(b, offset);
        }
    }
    function publicKey(property) {
        return new WrappedLayout(Layout_1.blob(32), (b) => new web3_js_1.PublicKey(b), (key) => key.toBuffer(), property);
    }
    exports.publicKey = publicKey;
    class OptionLayout extends Layout_1.Layout {
        constructor(layout, property) {
            super(-1, property);
            this.layout = layout;
            this.discriminator = Layout_1.u8();
        }
        encode(src, b, offset = 0) {
            if (src === null || src === undefined) {
                return this.discriminator.encode(0, b, offset);
            }
            this.discriminator.encode(1, b, offset);
            return this.layout.encode(src, b, offset + 1) + 1;
        }
        decode(b, offset = 0) {
            const discriminator = this.discriminator.decode(b, offset);
            if (discriminator === 0) {
                return null;
            }
            else if (discriminator === 1) {
                return this.layout.decode(b, offset + 1);
            }
            throw new Error('Invalid option ' + this.property);
        }
        getSpan(b, offset = 0) {
            const discriminator = this.discriminator.decode(b, offset);
            if (discriminator === 0) {
                return 1;
            }
            else if (discriminator === 1) {
                return this.layout.getSpan(b, offset + 1) + 1;
            }
            throw new Error('Invalid option ' + this.property);
        }
    }
    function option(layout, property) {
        return new OptionLayout(layout, property);
    }
    exports.option = option;
    function bool(property) {
        return new WrappedLayout(Layout_1.u8(), decodeBool, encodeBool, property);
    }
    exports.bool = bool;
    function decodeBool(value) {
        if (value === 0) {
            return false;
        }
        else if (value === 1) {
            return true;
        }
        throw new Error('Invalid bool: ' + value);
    }
    function encodeBool(value) {
        return value ? 1 : 0;
    }
    function vec(elementLayout, property) {
        const length = Layout_1.u32('length');
        const layout = Layout_1.struct([
            length,
            Layout_1.seq(elementLayout, Layout_1.offset(length, -length.span), 'values'),
        ]);
        return new WrappedLayout(layout, ({ values }) => values, values => ({ values }), property);
    }
    exports.vec = vec;
    function tagged(tag, layout, property) {
        const wrappedLayout = Layout_1.struct([
            u64('tag'),
            layout.replicate('data'),
        ]);
        function decodeTag({ tag: receivedTag, data }) {
            if (!receivedTag.eq(tag)) {
                throw new Error('Invalid tag, expected: ' +
                    tag.toString('hex') +
                    ', got: ' +
                    receivedTag.toString('hex'));
            }
            return data;
        }
        return new WrappedLayout(wrappedLayout, decodeTag, data => ({ tag, data }), property);
    }
    exports.tagged = tagged;
    function vecU8(property) {
        const length = Layout_1.u32('length');
        const layout = Layout_1.struct([
            length,
            Layout_1.blob(Layout_1.offset(length, -length.span), 'data'),
        ]);
        return new WrappedLayout(layout, ({ data }) => data, data => ({ data }), property);
    }
    exports.vecU8 = vecU8;
    function str(property) {
        return new WrappedLayout(vecU8(), data => data.toString('utf-8'), s => Buffer.from(s, 'utf-8'), property);
    }
    exports.str = str;
    function rustEnum(variants, property) {
        const unionLayout = Layout_1.union(Layout_1.u8(), property);
        variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));
        return unionLayout;
    }
    exports.rustEnum = rustEnum;
    function array(elementLayout, length, property) {
        const layout = Layout_1.struct([
            Layout_1.seq(elementLayout, length, 'values'),
        ]);
        return new WrappedLayout(layout, ({ values }) => values, values => ({ values }), property);
    }
    exports.array = array;
    class MapEntryLayout extends Layout_1.Layout {
        constructor(keyLayout, valueLayout, property) {
            super(keyLayout.span + valueLayout.span, property);
            this.keyLayout = keyLayout;
            this.valueLayout = valueLayout;
        }
        decode(b, offset) {
            offset = offset || 0;
            const key = this.keyLayout.decode(b, offset);
            const value = this.valueLayout.decode(b, offset + this.keyLayout.getSpan(b, offset));
            return [key, value];
        }
        encode(src, b, offset) {
            offset = offset || 0;
            const keyBytes = this.keyLayout.encode(src[0], b, offset);
            const valueBytes = this.valueLayout.encode(src[1], b, offset + keyBytes);
            return keyBytes + valueBytes;
        }
        getSpan(b, offset) {
            return (this.keyLayout.getSpan(b, offset) + this.valueLayout.getSpan(b, offset));
        }
    }
    function map(keyLayout, valueLayout, property) {
        const length = Layout_1.u32('length');
        const layout = Layout_1.struct([
            length,
            Layout_1.seq(new MapEntryLayout(keyLayout, valueLayout), Layout_1.offset(length, -length.span), 'values'),
        ]);
        return new WrappedLayout(layout, ({ values }) => new Map(values), values => ({ values: Array.from(values.entries()) }), property);
    }
    exports.map = map;

    });

    class IdlError extends Error {
    }
    // An error from a user defined program.
    class ProgramError extends Error {
        constructor(code, msg, ...params) {
            super(...params);
            this.code = code;
            this.msg = msg;
        }
        static parse(err, idlErrors) {
            // TODO: don't rely on the error string. web3.js should preserve the error
            //       code information instead of giving us an untyped string.
            let components = err.toString().split("custom program error: ");
            if (components.length !== 2) {
                return null;
            }
            let errorCode;
            try {
                errorCode = parseInt(components[1]);
            }
            catch (parseErr) {
                return null;
            }
            // Parse user error.
            let errorMsg = idlErrors.get(errorCode);
            if (errorMsg !== undefined) {
                return new ProgramError(errorCode, errorMsg);
            }
            // Parse framework internal error.
            errorMsg = LangErrorMessage.get(errorCode);
            if (errorMsg !== undefined) {
                return new ProgramError(errorCode, errorMsg);
            }
            // Unable to parse the error. Just return the untranslated error.
            return null;
        }
        toString() {
            return this.msg;
        }
    }
    const LangErrorCode = {
        // Instructions.
        InstructionMissing: 100,
        InstructionFallbackNotFound: 101,
        InstructionDidNotDeserialize: 102,
        InstructionDidNotSerialize: 103,
        // IDL instructions.
        IdlInstructionStub: 120,
        IdlInstructionInvalidProgram: 121,
        // Constraints.
        ConstraintMut: 140,
        ConstraintHasOne: 141,
        ConstraintSigner: 142,
        ConstraintRaw: 143,
        ConstraintOwner: 144,
        ConstraintRentExempt: 145,
        ConstraintSeeds: 146,
        ConstraintExecutable: 147,
        ConstraintState: 148,
        ConstraintAssociated: 149,
        ConstraintAssociatedInit: 150,
        ConstraintClose: 151,
        ConstraintAddress: 152,
        // Accounts.
        AccountDiscriminatorAlreadySet: 160,
        AccountDiscriminatorNotFound: 161,
        AccountDiscriminatorMismatch: 162,
        AccountDidNotDeserialize: 163,
        AccountDidNotSerialize: 164,
        AccountNotEnoughKeys: 165,
        AccountNotMutable: 166,
        AccountNotProgramOwned: 167,
        // State.
        StateInvalidAddress: 180,
        // Used for APIs that shouldn't be used anymore.
        Deprecated: 299,
    };
    const LangErrorMessage = new Map([
        // Instructions.
        [
            LangErrorCode.InstructionMissing,
            "8 byte instruction identifier not provided",
        ],
        [
            LangErrorCode.InstructionFallbackNotFound,
            "Fallback functions are not supported",
        ],
        [
            LangErrorCode.InstructionDidNotDeserialize,
            "The program could not deserialize the given instruction",
        ],
        [
            LangErrorCode.InstructionDidNotSerialize,
            "The program could not serialize the given instruction",
        ],
        // Idl instructions.
        [
            LangErrorCode.IdlInstructionStub,
            "The program was compiled without idl instructions",
        ],
        [
            LangErrorCode.IdlInstructionInvalidProgram,
            "The transaction was given an invalid program for the IDL instruction",
        ],
        // Constraints.
        [LangErrorCode.ConstraintMut, "A mut constraint was violated"],
        [LangErrorCode.ConstraintHasOne, "A has_one constraint was violated"],
        [LangErrorCode.ConstraintSigner, "A signer constraint was violated"],
        [LangErrorCode.ConstraintRaw, "A raw constraint was violated"],
        [LangErrorCode.ConstraintOwner, "An owner constraint was violated"],
        [LangErrorCode.ConstraintRentExempt, "A rent exempt constraint was violated"],
        [LangErrorCode.ConstraintSeeds, "A seeds constraint was violated"],
        [LangErrorCode.ConstraintExecutable, "An executable constraint was violated"],
        [LangErrorCode.ConstraintState, "A state constraint was violated"],
        [LangErrorCode.ConstraintAssociated, "An associated constraint was violated"],
        [
            LangErrorCode.ConstraintAssociatedInit,
            "An associated init constraint was violated",
        ],
        [LangErrorCode.ConstraintClose, "A close constraint was violated"],
        [LangErrorCode.ConstraintAddress, "An address constraint was violated"],
        // Accounts.
        [
            LangErrorCode.AccountDiscriminatorAlreadySet,
            "The account discriminator was already set on this account",
        ],
        [
            LangErrorCode.AccountDiscriminatorNotFound,
            "No 8 byte discriminator was found on the account",
        ],
        [
            LangErrorCode.AccountDiscriminatorMismatch,
            "8 byte discriminator did not match what was expected",
        ],
        [LangErrorCode.AccountDidNotDeserialize, "Failed to deserialize the account"],
        [LangErrorCode.AccountDidNotSerialize, "Failed to serialize the account"],
        [
            LangErrorCode.AccountNotEnoughKeys,
            "Not enough account keys given to the instruction",
        ],
        [LangErrorCode.AccountNotMutable, "The given account is not mutable"],
        [
            LangErrorCode.AccountNotProgramOwned,
            "The given account is not owned by the executing program",
        ],
        // State.
        [
            LangErrorCode.StateInvalidAddress,
            "The given state account does not have the correct address",
        ],
        // Misc.
        [
            LangErrorCode.Deprecated,
            "The API being used is deprecated and should no longer be used",
        ],
    ]);

    class IdlCoder {
        static fieldLayout(field, types) {
            const fieldName = field.name !== undefined ? camelcase(field.name) : undefined;
            switch (field.type) {
                case "bool": {
                    return lib$1.bool(fieldName);
                }
                case "u8": {
                    return lib$1.u8(fieldName);
                }
                case "i8": {
                    return lib$1.i8(fieldName);
                }
                case "u16": {
                    return lib$1.u16(fieldName);
                }
                case "i16": {
                    return lib$1.i16(fieldName);
                }
                case "u32": {
                    return lib$1.u32(fieldName);
                }
                case "i32": {
                    return lib$1.i32(fieldName);
                }
                case "u64": {
                    return lib$1.u64(fieldName);
                }
                case "i64": {
                    return lib$1.i64(fieldName);
                }
                case "u128": {
                    return lib$1.u128(fieldName);
                }
                case "i128": {
                    return lib$1.i128(fieldName);
                }
                case "bytes": {
                    return lib$1.vecU8(fieldName);
                }
                case "string": {
                    return lib$1.str(fieldName);
                }
                case "publicKey": {
                    return lib$1.publicKey(fieldName);
                }
                default: {
                    // @ts-ignore
                    if (field.type.vec) {
                        return lib$1.vec(IdlCoder.fieldLayout({
                            name: undefined,
                            // @ts-ignore
                            type: field.type.vec,
                        }, types), fieldName);
                        // @ts-ignore
                    }
                    else if (field.type.option) {
                        return lib$1.option(IdlCoder.fieldLayout({
                            name: undefined,
                            // @ts-ignore
                            type: field.type.option,
                        }, types), fieldName);
                        // @ts-ignore
                    }
                    else if (field.type.defined) {
                        // User defined type.
                        if (types === undefined) {
                            throw new IdlError("User defined types not provided");
                        }
                        // @ts-ignore
                        const filtered = types.filter((t) => t.name === field.type.defined);
                        if (filtered.length !== 1) {
                            throw new IdlError(`Type not found: ${JSON.stringify(field)}`);
                        }
                        return IdlCoder.typeDefLayout(filtered[0], types, fieldName);
                        // @ts-ignore
                    }
                    else if (field.type.array) {
                        // @ts-ignore
                        let arrayTy = field.type.array[0];
                        // @ts-ignore
                        let arrayLen = field.type.array[1];
                        let innerLayout = IdlCoder.fieldLayout({
                            name: undefined,
                            type: arrayTy,
                        }, types);
                        return lib$1.array(innerLayout, arrayLen, fieldName);
                    }
                    else {
                        throw new Error(`Not yet implemented: ${field}`);
                    }
                }
            }
        }
        static typeDefLayout(typeDef, types, name) {
            if (typeDef.type.kind === "struct") {
                const fieldLayouts = typeDef.type.fields.map((field) => {
                    const x = IdlCoder.fieldLayout(field, types);
                    return x;
                });
                return lib$1.struct(fieldLayouts, name);
            }
            else if (typeDef.type.kind === "enum") {
                let variants = typeDef.type.variants.map((variant) => {
                    const name = camelcase(variant.name);
                    if (variant.fields === undefined) {
                        return lib$1.struct([], name);
                    }
                    // @ts-ignore
                    const fieldLayouts = variant.fields.map((f) => {
                        // @ts-ignore
                        if (f.name === undefined) {
                            throw new Error("Tuple enum variants not yet implemented.");
                        }
                        // @ts-ignore
                        return IdlCoder.fieldLayout(f, types);
                    });
                    return lib$1.struct(fieldLayouts, name);
                });
                if (name !== undefined) {
                    // Buffer-layout lib requires the name to be null (on construction)
                    // when used as a field.
                    return lib$1.rustEnum(variants).replicate(name);
                }
                return lib$1.rustEnum(variants, name);
            }
            else {
                throw new Error(`Unknown type kint: ${typeDef}`);
            }
        }
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
     */
    /**
     * Lower case as a function.
     */
    function lowerCase(str) {
        return str.toLowerCase();
    }

    // Support camel case ("camelCase" -> "camel Case" and "CAMELCase" -> "CAMEL Case").
    var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
    // Remove all non-word characters.
    var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
    /**
     * Normalize the string into something other libraries can manipulate easier.
     */
    function noCase(input, options) {
        if (options === void 0) { options = {}; }
        var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? " " : _d;
        var result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
        var start = 0;
        var end = result.length;
        // Trim the delimiter from around the output string.
        while (result.charAt(start) === "\0")
            start++;
        while (result.charAt(end - 1) === "\0")
            end--;
        // Transform each token independently.
        return result.slice(start, end).split("\0").map(transform).join(delimiter);
    }
    /**
     * Replace `re` in the input string with the replacement value.
     */
    function replace(input, re, value) {
        if (re instanceof RegExp)
            return input.replace(re, value);
        return re.reduce(function (input, re) { return input.replace(re, value); }, input);
    }

    function dotCase(input, options) {
        if (options === void 0) { options = {}; }
        return noCase(input, __assign({ delimiter: "." }, options));
    }

    function snakeCase(input, options) {
        if (options === void 0) { options = {}; }
        return dotCase(input, __assign({ delimiter: "_" }, options));
    }

    var sha256 = createCommonjsModule(function (module) {
    /**
     * [js-sha256]{@link https://github.com/emn178/js-sha256}
     *
     * @version 0.9.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2014-2017
     * @license MIT
     */
    /*jslint bitwise: true */
    (function () {

      var ERROR = 'input is invalid type';
      var WINDOW = typeof window === 'object';
      var root = WINDOW ? window : {};
      if (root.JS_SHA256_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === 'object';
      var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal$1;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && 'object' === 'object' && module.exports;
      var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
      var HEX_CHARS = '0123456789abcdef'.split('');
      var EXTRA = [-2147483648, 8388608, 32768, 128];
      var SHIFT = [24, 16, 8, 0];
      var K = [
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
      ];
      var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

      var blocks = [];

      if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function (obj) {
          return Object.prototype.toString.call(obj) === '[object Array]';
        };
      }

      if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function (obj) {
          return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }

      var createOutputMethod = function (outputType, is224) {
        return function (message) {
          return new Sha256(is224, true).update(message)[outputType]();
        };
      };

      var createMethod = function (is224) {
        var method = createOutputMethod('hex', is224);
        if (NODE_JS) {
          method = nodeWrap(method, is224);
        }
        method.create = function () {
          return new Sha256(is224);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createOutputMethod(type, is224);
        }
        return method;
      };

      var nodeWrap = function (method, is224) {
        var crypto = eval("require('crypto')");
        var Buffer = eval("require('buffer').Buffer");
        var algorithm = is224 ? 'sha224' : 'sha256';
        var nodeMethod = function (message) {
          if (typeof message === 'string') {
            return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');
          } else {
            if (message === null || message === undefined) {
              throw new Error(ERROR);
            } else if (message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            }
          }
          if (Array.isArray(message) || ArrayBuffer.isView(message) ||
            message.constructor === Buffer) {
            return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');
          } else {
            return method(message);
          }
        };
        return nodeMethod;
      };

      var createHmacOutputMethod = function (outputType, is224) {
        return function (key, message) {
          return new HmacSha256(key, is224, true).update(message)[outputType]();
        };
      };

      var createHmacMethod = function (is224) {
        var method = createHmacOutputMethod('hex', is224);
        method.create = function (key) {
          return new HmacSha256(key, is224);
        };
        method.update = function (key, message) {
          return method.create(key).update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createHmacOutputMethod(type, is224);
        }
        return method;
      };

      function Sha256(is224, sharedMemory) {
        if (sharedMemory) {
          blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =
            blocks[4] = blocks[5] = blocks[6] = blocks[7] =
            blocks[8] = blocks[9] = blocks[10] = blocks[11] =
            blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          this.blocks = blocks;
        } else {
          this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        }

        if (is224) {
          this.h0 = 0xc1059ed8;
          this.h1 = 0x367cd507;
          this.h2 = 0x3070dd17;
          this.h3 = 0xf70e5939;
          this.h4 = 0xffc00b31;
          this.h5 = 0x68581511;
          this.h6 = 0x64f98fa7;
          this.h7 = 0xbefa4fa4;
        } else { // 256
          this.h0 = 0x6a09e667;
          this.h1 = 0xbb67ae85;
          this.h2 = 0x3c6ef372;
          this.h3 = 0xa54ff53a;
          this.h4 = 0x510e527f;
          this.h5 = 0x9b05688c;
          this.h6 = 0x1f83d9ab;
          this.h7 = 0x5be0cd19;
        }

        this.block = this.start = this.bytes = this.hBytes = 0;
        this.finalized = this.hashed = false;
        this.first = true;
        this.is224 = is224;
      }

      Sha256.prototype.update = function (message) {
        if (this.finalized) {
          return;
        }
        var notString, type = typeof message;
        if (type !== 'string') {
          if (type === 'object') {
            if (message === null) {
              throw new Error(ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(ERROR);
              }
            }
          } else {
            throw new Error(ERROR);
          }
          notString = true;
        }
        var code, index = 0, i, length = message.length, blocks = this.blocks;

        while (index < length) {
          if (this.hashed) {
            this.hashed = false;
            blocks[0] = this.block;
            blocks[16] = blocks[1] = blocks[2] = blocks[3] =
              blocks[4] = blocks[5] = blocks[6] = blocks[7] =
              blocks[8] = blocks[9] = blocks[10] = blocks[11] =
              blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          }

          if (notString) {
            for (i = this.start; index < length && i < 64; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < 64; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }

          this.lastByteIndex = i;
          this.bytes += i - this.start;
          if (i >= 64) {
            this.block = blocks[16];
            this.start = i - 64;
            this.hash();
            this.hashed = true;
          } else {
            this.start = i;
          }
        }
        if (this.bytes > 4294967295) {
          this.hBytes += this.bytes / 4294967296 << 0;
          this.bytes = this.bytes % 4294967296;
        }
        return this;
      };

      Sha256.prototype.finalize = function () {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex;
        blocks[16] = this.block;
        blocks[i >> 2] |= EXTRA[i & 3];
        this.block = blocks[16];
        if (i >= 56) {
          if (!this.hashed) {
            this.hash();
          }
          blocks[0] = this.block;
          blocks[16] = blocks[1] = blocks[2] = blocks[3] =
            blocks[4] = blocks[5] = blocks[6] = blocks[7] =
            blocks[8] = blocks[9] = blocks[10] = blocks[11] =
            blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
        }
        blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
        blocks[15] = this.bytes << 3;
        this.hash();
      };

      Sha256.prototype.hash = function () {
        var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,
          h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;

        for (j = 16; j < 64; ++j) {
          // rightrotate
          t1 = blocks[j - 15];
          s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);
          t1 = blocks[j - 2];
          s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);
          blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;
        }

        bc = b & c;
        for (j = 0; j < 64; j += 4) {
          if (this.first) {
            if (this.is224) {
              ab = 300032;
              t1 = blocks[0] - 1413257819;
              h = t1 - 150054599 << 0;
              d = t1 + 24177077 << 0;
            } else {
              ab = 704751109;
              t1 = blocks[0] - 210244248;
              h = t1 - 1521486534 << 0;
              d = t1 + 143694565 << 0;
            }
            this.first = false;
          } else {
            s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));
            s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));
            ab = a & b;
            maj = ab ^ (a & c) ^ bc;
            ch = (e & f) ^ (~e & g);
            t1 = h + s1 + ch + K[j] + blocks[j];
            t2 = s0 + maj;
            h = d + t1 << 0;
            d = t1 + t2 << 0;
          }
          s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));
          s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));
          da = d & a;
          maj = da ^ (d & b) ^ ab;
          ch = (h & e) ^ (~h & f);
          t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
          t2 = s0 + maj;
          g = c + t1 << 0;
          c = t1 + t2 << 0;
          s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));
          s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));
          cd = c & d;
          maj = cd ^ (c & a) ^ da;
          ch = (g & h) ^ (~g & e);
          t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
          t2 = s0 + maj;
          f = b + t1 << 0;
          b = t1 + t2 << 0;
          s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));
          s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));
          bc = b & c;
          maj = bc ^ (b & d) ^ cd;
          ch = (f & g) ^ (~f & h);
          t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
          t2 = s0 + maj;
          e = a + t1 << 0;
          a = t1 + t2 << 0;
        }

        this.h0 = this.h0 + a << 0;
        this.h1 = this.h1 + b << 0;
        this.h2 = this.h2 + c << 0;
        this.h3 = this.h3 + d << 0;
        this.h4 = this.h4 + e << 0;
        this.h5 = this.h5 + f << 0;
        this.h6 = this.h6 + g << 0;
        this.h7 = this.h7 + h << 0;
      };

      Sha256.prototype.hex = function () {
        this.finalize();

        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
          h6 = this.h6, h7 = this.h7;

        var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
          HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
          HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
          HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
          HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
          HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
          HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
          HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
          HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
          HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
          HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
          HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
          HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +
          HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
          HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
          HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
          HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +
          HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +
          HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +
          HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +
          HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +
          HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +
          HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +
          HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +
          HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +
          HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +
          HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +
          HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];
        if (!this.is224) {
          hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +
            HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +
            HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +
            HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];
        }
        return hex;
      };

      Sha256.prototype.toString = Sha256.prototype.hex;

      Sha256.prototype.digest = function () {
        this.finalize();

        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
          h6 = this.h6, h7 = this.h7;

        var arr = [
          (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,
          (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,
          (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,
          (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,
          (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,
          (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,
          (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF
        ];
        if (!this.is224) {
          arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);
        }
        return arr;
      };

      Sha256.prototype.array = Sha256.prototype.digest;

      Sha256.prototype.arrayBuffer = function () {
        this.finalize();

        var buffer = new ArrayBuffer(this.is224 ? 28 : 32);
        var dataView = new DataView(buffer);
        dataView.setUint32(0, this.h0);
        dataView.setUint32(4, this.h1);
        dataView.setUint32(8, this.h2);
        dataView.setUint32(12, this.h3);
        dataView.setUint32(16, this.h4);
        dataView.setUint32(20, this.h5);
        dataView.setUint32(24, this.h6);
        if (!this.is224) {
          dataView.setUint32(28, this.h7);
        }
        return buffer;
      };

      function HmacSha256(key, is224, sharedMemory) {
        var i, type = typeof key;
        if (type === 'string') {
          var bytes = [], length = key.length, index = 0, code;
          for (i = 0; i < length; ++i) {
            code = key.charCodeAt(i);
            if (code < 0x80) {
              bytes[index++] = code;
            } else if (code < 0x800) {
              bytes[index++] = (0xc0 | (code >> 6));
              bytes[index++] = (0x80 | (code & 0x3f));
            } else if (code < 0xd800 || code >= 0xe000) {
              bytes[index++] = (0xe0 | (code >> 12));
              bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
              bytes[index++] = (0x80 | (code & 0x3f));
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));
              bytes[index++] = (0xf0 | (code >> 18));
              bytes[index++] = (0x80 | ((code >> 12) & 0x3f));
              bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
              bytes[index++] = (0x80 | (code & 0x3f));
            }
          }
          key = bytes;
        } else {
          if (type === 'object') {
            if (key === null) {
              throw new Error(ERROR);
            } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
              key = new Uint8Array(key);
            } else if (!Array.isArray(key)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
                throw new Error(ERROR);
              }
            }
          } else {
            throw new Error(ERROR);
          }
        }

        if (key.length > 64) {
          key = (new Sha256(is224, true)).update(key).array();
        }

        var oKeyPad = [], iKeyPad = [];
        for (i = 0; i < 64; ++i) {
          var b = key[i] || 0;
          oKeyPad[i] = 0x5c ^ b;
          iKeyPad[i] = 0x36 ^ b;
        }

        Sha256.call(this, is224, sharedMemory);

        this.update(iKeyPad);
        this.oKeyPad = oKeyPad;
        this.inner = true;
        this.sharedMemory = sharedMemory;
      }
      HmacSha256.prototype = new Sha256();

      HmacSha256.prototype.finalize = function () {
        Sha256.prototype.finalize.call(this);
        if (this.inner) {
          this.inner = false;
          var innerHash = this.array();
          Sha256.call(this, this.is224, this.sharedMemory);
          this.update(this.oKeyPad);
          this.update(innerHash);
          Sha256.prototype.finalize.call(this);
        }
      };

      var exports = createMethod();
      exports.sha256 = exports;
      exports.sha224 = createMethod(true);
      exports.sha256.hmac = createHmacMethod();
      exports.sha224.hmac = createHmacMethod(true);

      if (COMMON_JS) {
        module.exports = exports;
      } else {
        root.sha256 = exports.sha256;
        root.sha224 = exports.sha224;
      }
    })();
    });

    function accountSize(idl, idlAccount) {
        if (idlAccount.type.kind === "enum") {
            let variantSizes = idlAccount.type.variants.map((variant) => {
                if (variant.fields === undefined) {
                    return 0;
                }
                return (variant.fields
                    // @ts-ignore
                    .map((f) => {
                    // @ts-ignore
                    if (f.name === undefined) {
                        throw new Error("Tuple enum variants not yet implemented.");
                    }
                    // @ts-ignore
                    return typeSize(idl, f.type);
                })
                    .reduce((a, b) => a + b));
            });
            return Math.max(...variantSizes) + 1;
        }
        if (idlAccount.type.fields === undefined) {
            return 0;
        }
        return idlAccount.type.fields
            .map((f) => typeSize(idl, f.type))
            .reduce((a, b) => a + b);
    }
    // Returns the size of the type in bytes. For variable length types, just return
    // 1. Users should override this value in such cases.
    function typeSize(idl, ty) {
        switch (ty) {
            case "bool":
                return 1;
            case "u8":
                return 1;
            case "i8":
                return 1;
            case "i16":
                return 2;
            case "u16":
                return 2;
            case "u32":
                return 4;
            case "i32":
                return 4;
            case "u64":
                return 8;
            case "i64":
                return 8;
            case "u128":
                return 16;
            case "i128":
                return 16;
            case "bytes":
                return 1;
            case "string":
                return 1;
            case "publicKey":
                return 32;
            default:
                // @ts-ignore
                if (ty.vec !== undefined) {
                    return 1;
                }
                // @ts-ignore
                if (ty.option !== undefined) {
                    // @ts-ignore
                    return 1 + typeSize(idl, ty.option);
                }
                // @ts-ignore
                if (ty.defined !== undefined) {
                    // @ts-ignore
                    const filtered = idl.types.filter((t) => t.name === ty.defined);
                    if (filtered.length !== 1) {
                        throw new IdlError(`Type not found: ${JSON.stringify(ty)}`);
                    }
                    let typeDef = filtered[0];
                    return accountSize(idl, typeDef);
                }
                // @ts-ignore
                if (ty.array !== undefined) {
                    // @ts-ignore
                    let arrayTy = ty.array[0];
                    // @ts-ignore
                    let arraySize = ty.array[1];
                    // @ts-ignore
                    return typeSize(idl, arrayTy) * arraySize;
                }
                throw new Error(`Invalid type ${JSON.stringify(ty)}`);
        }
    }
    // Not technically sighash, since we don't include the arguments, as Rust
    // doesn't allow function overloading.
    function sighash(nameSpace, ixName) {
        let name = snakeCase(ixName);
        let preimage = `${nameSpace}:${name}`;
        return Buffer.from(sha256.sha256.digest(preimage)).slice(0, 8);
    }

    /**
     * Namespace for state method function signatures.
     */
    const SIGHASH_STATE_NAMESPACE = "state";
    /**
     * Namespace for global instruction function signatures (i.e. functions
     * that aren't namespaced by the state or any of its trait implementations).
     */
    const SIGHASH_GLOBAL_NAMESPACE = "global";
    /**
     * Encodes and decodes program instructions.
     */
    class InstructionCoder {
        constructor(idl) {
            this.idl = idl;
            this.ixLayout = InstructionCoder.parseIxLayout(idl);
            const sighashLayouts = new Map();
            idl.instructions.forEach((ix) => {
                const sh = sighash(SIGHASH_GLOBAL_NAMESPACE, ix.name);
                sighashLayouts.set(bs58.encode(sh), {
                    layout: this.ixLayout.get(ix.name),
                    name: ix.name,
                });
            });
            if (idl.state) {
                idl.state.methods.map((ix) => {
                    const sh = sighash(SIGHASH_STATE_NAMESPACE, ix.name);
                    sighashLayouts.set(bs58.encode(sh), {
                        layout: this.ixLayout.get(ix.name),
                        name: ix.name,
                    });
                });
            }
            this.sighashLayouts = sighashLayouts;
        }
        /**
         * Encodes a program instruction.
         */
        encode(ixName, ix) {
            return this._encode(SIGHASH_GLOBAL_NAMESPACE, ixName, ix);
        }
        /**
         * Encodes a program state instruction.
         */
        encodeState(ixName, ix) {
            return this._encode(SIGHASH_STATE_NAMESPACE, ixName, ix);
        }
        _encode(nameSpace, ixName, ix) {
            const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.
            const methodName = camelcase(ixName);
            const len = this.ixLayout.get(methodName).encode(ix, buffer);
            const data = buffer.slice(0, len);
            return Buffer.concat([sighash(nameSpace, ixName), data]);
        }
        static parseIxLayout(idl) {
            const stateMethods = idl.state ? idl.state.methods : [];
            const ixLayouts = stateMethods
                .map((m) => {
                let fieldLayouts = m.args.map((arg) => {
                    var _a, _b;
                    return IdlCoder.fieldLayout(arg, Array.from([...((_a = idl.accounts) !== null && _a !== void 0 ? _a : []), ...((_b = idl.types) !== null && _b !== void 0 ? _b : [])]));
                });
                const name = camelcase(m.name);
                return [name, lib$1.struct(fieldLayouts, name)];
            })
                .concat(idl.instructions.map((ix) => {
                let fieldLayouts = ix.args.map((arg) => {
                    var _a, _b;
                    return IdlCoder.fieldLayout(arg, Array.from([...((_a = idl.accounts) !== null && _a !== void 0 ? _a : []), ...((_b = idl.types) !== null && _b !== void 0 ? _b : [])]));
                });
                const name = camelcase(ix.name);
                return [name, lib$1.struct(fieldLayouts, name)];
            }));
            // @ts-ignore
            return new Map(ixLayouts);
        }
        /**
         * Dewcodes a program instruction.
         */
        decode(ix, encoding = "hex") {
            if (typeof ix === "string") {
                ix = encoding === "hex" ? Buffer.from(ix, "hex") : bs58.decode(ix);
            }
            let sighash = bs58.encode(ix.slice(0, 8));
            let data = ix.slice(8);
            const decoder = this.sighashLayouts.get(sighash);
            if (!decoder) {
                return null;
            }
            return {
                data: decoder.layout.decode(data),
                name: decoder.name,
            };
        }
        /**
         * Returns a formatted table of all the fields in the given instruction data.
         */
        format(ix, accountMetas) {
            return InstructionFormatter.format(ix, accountMetas, this.idl);
        }
    }
    class InstructionFormatter {
        static format(ix, accountMetas, idl) {
            const idlIx = idl.instructions.filter((i) => ix.name === i.name)[0];
            if (idlIx === undefined) {
                console.error("Invalid instruction given");
                return null;
            }
            const args = idlIx.args.map((idlField) => {
                return {
                    name: idlField.name,
                    type: InstructionFormatter.formatIdlType(idlField.type),
                    data: InstructionFormatter.formatIdlData(idlField, ix.data[idlField.name], idl.types),
                };
            });
            const flatIdlAccounts = InstructionFormatter.flattenIdlAccounts(idlIx.accounts);
            const accounts = accountMetas.map((meta, idx) => {
                if (idx < flatIdlAccounts.length) {
                    return {
                        name: flatIdlAccounts[idx].name,
                        ...meta,
                    };
                }
                // "Remaining accounts" are unnamed in Anchor.
                else {
                    return {
                        name: undefined,
                        ...meta,
                    };
                }
            });
            return {
                args,
                accounts,
            };
        }
        static formatIdlType(idlType) {
            if (typeof idlType === "string") {
                return idlType;
            }
            // @ts-ignore
            if (idlType.vec) {
                // @ts-ignore
                return `Vec<${this.formatIdlType(idlType.vec)}>`;
            }
            // @ts-ignore
            if (idlType.option) {
                // @ts-ignore
                return `Option<${this.formatIdlType(idlType.option)}>`;
            }
            // @ts-ignore
            if (idlType.defined) {
                // @ts-ignore
                return idlType.defined;
            }
        }
        static formatIdlData(idlField, data, types) {
            if (typeof idlField.type === "string") {
                return data.toString();
            }
            // @ts-ignore
            if (idlField.type.vec) {
                // @ts-ignore
                return ("[" +
                    data
                        // @ts-ignore
                        .map((d) => this.formatIdlData(
                    // @ts-ignore
                    { name: "", type: idlField.type.vec }, d))
                        .join(", ") +
                    "]");
            }
            // @ts-ignore
            if (idlField.type.option) {
                // @ts-ignore
                return data === null
                    ? "null"
                    : this.formatIdlData(
                    // @ts-ignore
                    { name: "", type: idlField.type.option }, data);
            }
            // @ts-ignore
            if (idlField.type.defined) {
                if (types === undefined) {
                    throw new Error("User defined types not provided");
                }
                // @ts-ignore
                const filtered = types.filter((t) => t.name === idlField.type.defined);
                if (filtered.length !== 1) {
                    // @ts-ignore
                    throw new Error(`Type not found: ${idlField.type.defined}`);
                }
                return InstructionFormatter.formatIdlDataDefined(filtered[0], data, types);
            }
            return "unknown";
        }
        static formatIdlDataDefined(typeDef, data, types) {
            if (typeDef.type.kind === "struct") {
                const fields = Object.keys(data)
                    .map((k) => {
                    const f = typeDef.type.fields.filter((f) => f.name === k)[0];
                    if (f === undefined) {
                        throw new Error("Unable to find type");
                    }
                    return (k + ": " + InstructionFormatter.formatIdlData(f, data[k], types));
                })
                    .join(", ");
                return "{ " + fields + " }";
            }
            else {
                if (typeDef.type.variants.length === 0) {
                    return "{}";
                }
                // Struct enum.
                if (typeDef.type.variants[0].name) {
                    const variant = Object.keys(data)[0];
                    const enumType = data[variant];
                    const namedFields = Object.keys(enumType)
                        .map((f) => {
                        var _a;
                        const fieldData = enumType[f];
                        const idlField = (_a = typeDef.type.variants[variant]) === null || _a === void 0 ? void 0 : _a.filter((v) => v.name === f)[0];
                        if (idlField === undefined) {
                            throw new Error("Unable to find variant");
                        }
                        return (f +
                            ": " +
                            InstructionFormatter.formatIdlData(idlField, fieldData, types));
                    })
                        .join(", ");
                    const variantName = camelcase(variant, { pascalCase: true });
                    if (namedFields.length === 0) {
                        return variantName;
                    }
                    return `${variantName} { ${namedFields} }`;
                }
                // Tuple enum.
                else {
                    // TODO.
                    return "Tuple formatting not yet implemented";
                }
            }
        }
        static flattenIdlAccounts(accounts, prefix) {
            // @ts-ignore
            return accounts
                .map((account) => {
                const accName = sentenceCase(account.name);
                // @ts-ignore
                if (account.accounts) {
                    const newPrefix = prefix ? `${prefix} > ${accName}` : accName;
                    // @ts-ignore
                    return InstructionFormatter.flattenIdlAccounts(
                    // @ts-ignore
                    account.accounts, newPrefix);
                }
                else {
                    return {
                        ...account,
                        name: prefix ? `${prefix} > ${accName}` : accName,
                    };
                }
            })
                .flat();
        }
    }
    function sentenceCase(field) {
        const result = field.replace(/([A-Z])/g, " $1");
        return result.charAt(0).toUpperCase() + result.slice(1);
    }

    /**
     * Number of bytes of the account discriminator.
     */
    const ACCOUNT_DISCRIMINATOR_SIZE = 8;
    /**
     * Encodes and decodes account objects.
     */
    class AccountsCoder {
        constructor(idl) {
            if (idl.accounts === undefined) {
                this.accountLayouts = new Map();
                return;
            }
            const layouts = idl.accounts.map((acc) => {
                return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];
            });
            this.accountLayouts = new Map(layouts);
        }
        async encode(accountName, account) {
            const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.
            const layout = this.accountLayouts.get(accountName);
            const len = layout.encode(account, buffer);
            let accountData = buffer.slice(0, len);
            let discriminator = await accountDiscriminator(accountName);
            return Buffer.concat([discriminator, accountData]);
        }
        decode(accountName, ix) {
            // Chop off the discriminator before decoding.
            const data = ix.slice(8);
            const layout = this.accountLayouts.get(accountName);
            return layout.decode(data);
        }
    }
    // Calculates unique 8 byte discriminator prepended to all anchor accounts.
    async function accountDiscriminator(name) {
        return Buffer.from(sha256.sha256.digest(`account:${name}`)).slice(0, 8);
    }

    /**
     * Encodes and decodes user defined types.
     */
    class TypesCoder {
        constructor(idl) {
            if (idl.types === undefined) {
                this.layouts = new Map();
                return;
            }
            const layouts = idl.types.map((acc) => {
                return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];
            });
            // @ts-ignore
            this.layouts = new Map(layouts);
        }
        encode(accountName, account) {
            const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.
            const layout = this.layouts.get(accountName);
            const len = layout.encode(account, buffer);
            return buffer.slice(0, len);
        }
        decode(accountName, ix) {
            const layout = this.layouts.get(accountName);
            return layout.decode(ix);
        }
    }

    var toByteArray_1 = toByteArray$1;
    var fromByteArray_1 = fromByteArray$1;

    var lookup$1 = [];
    var revLookup$1 = [];
    var Arr$1 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

    var code$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i$1 = 0, len$1 = code$1.length; i$1 < len$1; ++i$1) {
      lookup$1[i$1] = code$1[i$1];
      revLookup$1[code$1.charCodeAt(i$1)] = i$1;
    }

    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup$1['-'.charCodeAt(0)] = 62;
    revLookup$1['_'.charCodeAt(0)] = 63;

    function getLens$1 (b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;

      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4);

      return [validLen, placeHoldersLen]
    }

    function _byteLength$1 (b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function toByteArray$1 (b64) {
      var tmp;
      var lens = getLens$1(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];

      var arr = new Arr$1(_byteLength$1(b64, validLen, placeHoldersLen));

      var curByte = 0;

      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen;

      var i;
      for (i = 0; i < len; i += 4) {
        tmp =
          (revLookup$1[b64.charCodeAt(i)] << 18) |
          (revLookup$1[b64.charCodeAt(i + 1)] << 12) |
          (revLookup$1[b64.charCodeAt(i + 2)] << 6) |
          revLookup$1[b64.charCodeAt(i + 3)];
        arr[curByte++] = (tmp >> 16) & 0xFF;
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 2) {
        tmp =
          (revLookup$1[b64.charCodeAt(i)] << 2) |
          (revLookup$1[b64.charCodeAt(i + 1)] >> 4);
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 1) {
        tmp =
          (revLookup$1[b64.charCodeAt(i)] << 10) |
          (revLookup$1[b64.charCodeAt(i + 1)] << 4) |
          (revLookup$1[b64.charCodeAt(i + 2)] >> 2);
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64$1 (num) {
      return lookup$1[num >> 18 & 0x3F] +
        lookup$1[num >> 12 & 0x3F] +
        lookup$1[num >> 6 & 0x3F] +
        lookup$1[num & 0x3F]
    }

    function encodeChunk$1 (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64$1(tmp));
      }
      return output.join('')
    }

    function fromByteArray$1 (uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk$1(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(
          lookup$1[tmp >> 2] +
          lookup$1[(tmp << 4) & 0x3F] +
          '=='
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(
          lookup$1[tmp >> 10] +
          lookup$1[(tmp >> 4) & 0x3F] +
          lookup$1[(tmp << 2) & 0x3F] +
          '='
        );
      }

      return parts.join('')
    }

    class EventCoder {
        constructor(idl) {
            if (idl.events === undefined) {
                this.layouts = new Map();
                return;
            }
            const layouts = idl.events.map((event) => {
                let eventTypeDef = {
                    name: event.name,
                    type: {
                        kind: "struct",
                        fields: event.fields.map((f) => {
                            return { name: f.name, type: f.type };
                        }),
                    },
                };
                return [event.name, IdlCoder.typeDefLayout(eventTypeDef, idl.types)];
            });
            // @ts-ignore
            this.layouts = new Map(layouts);
            this.discriminators = new Map(idl.events === undefined
                ? []
                : idl.events.map((e) => [
                    fromByteArray_1(eventDiscriminator(e.name)),
                    e.name,
                ]));
        }
        decode(log) {
            let logArr;
            // This will throw if log length is not a multiple of 4.
            try {
                logArr = Buffer.from(toByteArray_1(log));
            }
            catch (e) {
                return null;
            }
            const disc = fromByteArray_1(logArr.slice(0, 8));
            // Only deserialize if the discriminator implies a proper event.
            const eventName = this.discriminators.get(disc);
            if (eventName === undefined) {
                return null;
            }
            const layout = this.layouts.get(eventName);
            const data = layout.decode(logArr.slice(8));
            return { data, name: eventName };
        }
    }
    function eventDiscriminator(name) {
        return Buffer.from(sha256.sha256.digest(`event:${name}`)).slice(0, 8);
    }

    const _FEATURES = new Map();
    function isSet$1(key) {
        return _FEATURES.get(key) !== undefined;
    }

    class StateCoder {
        constructor(idl) {
            if (idl.state === undefined) {
                throw new Error("Idl state not defined.");
            }
            this.layout = IdlCoder.typeDefLayout(idl.state.struct, idl.types);
        }
        async encode(name, account) {
            const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.
            const len = this.layout.encode(account, buffer);
            const disc = await stateDiscriminator(name);
            const accData = buffer.slice(0, len);
            return Buffer.concat([disc, accData]);
        }
        decode(ix) {
            // Chop off discriminator.
            const data = ix.slice(8);
            return this.layout.decode(data);
        }
    }
    // Calculates unique 8 byte discriminator prepended to all anchor state accounts.
    async function stateDiscriminator(name) {
        let ns = isSet$1("anchor-deprecated-state") ? "account" : "state";
        return Buffer.from(sha256.sha256.digest(`${ns}:${name}`)).slice(0, 8);
    }

    /**
     * Coder provides a facade for encoding and decoding all IDL related objects.
     */
    class Coder {
        constructor(idl) {
            this.instruction = new InstructionCoder(idl);
            this.accounts = new AccountsCoder(idl);
            this.types = new TypesCoder(idl);
            this.events = new EventCoder(idl);
            if (idl.state) {
                this.state = new StateCoder(idl);
            }
        }
        sighash(nameSpace, ixName) {
            return sighash(nameSpace, ixName);
        }
    }

    var parser = (function() {
      /*
       * Generated by PEG.js 0.8.0.
       *
       * http://pegjs.majda.cz/
       */

      function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
      }

      function SyntaxError(message, expected, found, offset, line, column) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.offset   = offset;
        this.line     = line;
        this.column   = column;

        this.name     = "SyntaxError";
      }

      peg$subclass(SyntaxError, Error);

      function parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},

            peg$FAILED = {},

            peg$startRuleFunctions = { start: peg$parsestart },
            peg$startRuleFunction  = peg$parsestart,

            peg$c1 = function() { return nodes },
            peg$c2 = peg$FAILED,
            peg$c3 = "#",
            peg$c4 = { type: "literal", value: "#", description: "\"#\"" },
            peg$c5 = void 0,
            peg$c6 = { type: "any", description: "any character" },
            peg$c7 = "[",
            peg$c8 = { type: "literal", value: "[", description: "\"[\"" },
            peg$c9 = "]",
            peg$c10 = { type: "literal", value: "]", description: "\"]\"" },
            peg$c11 = function(name) { addNode(node('ObjectPath', name, line, column)); },
            peg$c12 = function(name) { addNode(node('ArrayPath', name, line, column)); },
            peg$c13 = function(parts, name) { return parts.concat(name) },
            peg$c14 = function(name) { return [name] },
            peg$c15 = function(name) { return name },
            peg$c16 = ".",
            peg$c17 = { type: "literal", value: ".", description: "\".\"" },
            peg$c18 = "=",
            peg$c19 = { type: "literal", value: "=", description: "\"=\"" },
            peg$c20 = function(key, value) { addNode(node('Assign', value, line, column, key)); },
            peg$c21 = function(chars) { return chars.join('') },
            peg$c22 = function(node) { return node.value },
            peg$c23 = "\"\"\"",
            peg$c24 = { type: "literal", value: "\"\"\"", description: "\"\\\"\\\"\\\"\"" },
            peg$c25 = null,
            peg$c26 = function(chars) { return node('String', chars.join(''), line, column) },
            peg$c27 = "\"",
            peg$c28 = { type: "literal", value: "\"", description: "\"\\\"\"" },
            peg$c29 = "'''",
            peg$c30 = { type: "literal", value: "'''", description: "\"'''\"" },
            peg$c31 = "'",
            peg$c32 = { type: "literal", value: "'", description: "\"'\"" },
            peg$c33 = function(char) { return char },
            peg$c34 = function(char) { return char},
            peg$c35 = "\\",
            peg$c36 = { type: "literal", value: "\\", description: "\"\\\\\"" },
            peg$c37 = function() { return '' },
            peg$c38 = "e",
            peg$c39 = { type: "literal", value: "e", description: "\"e\"" },
            peg$c40 = "E",
            peg$c41 = { type: "literal", value: "E", description: "\"E\"" },
            peg$c42 = function(left, right) { return node('Float', parseFloat(left + 'e' + right), line, column) },
            peg$c43 = function(text) { return node('Float', parseFloat(text), line, column) },
            peg$c44 = "+",
            peg$c45 = { type: "literal", value: "+", description: "\"+\"" },
            peg$c46 = function(digits) { return digits.join('') },
            peg$c47 = "-",
            peg$c48 = { type: "literal", value: "-", description: "\"-\"" },
            peg$c49 = function(digits) { return '-' + digits.join('') },
            peg$c50 = function(text) { return node('Integer', parseInt(text, 10), line, column) },
            peg$c51 = "true",
            peg$c52 = { type: "literal", value: "true", description: "\"true\"" },
            peg$c53 = function() { return node('Boolean', true, line, column) },
            peg$c54 = "false",
            peg$c55 = { type: "literal", value: "false", description: "\"false\"" },
            peg$c56 = function() { return node('Boolean', false, line, column) },
            peg$c57 = function() { return node('Array', [], line, column) },
            peg$c58 = function(value) { return node('Array', value ? [value] : [], line, column) },
            peg$c59 = function(values) { return node('Array', values, line, column) },
            peg$c60 = function(values, value) { return node('Array', values.concat(value), line, column) },
            peg$c61 = function(value) { return value },
            peg$c62 = ",",
            peg$c63 = { type: "literal", value: ",", description: "\",\"" },
            peg$c64 = "{",
            peg$c65 = { type: "literal", value: "{", description: "\"{\"" },
            peg$c66 = "}",
            peg$c67 = { type: "literal", value: "}", description: "\"}\"" },
            peg$c68 = function(values) { return node('InlineTable', values, line, column) },
            peg$c69 = function(key, value) { return node('InlineTableValue', value, line, column, key) },
            peg$c70 = function(digits) { return "." + digits },
            peg$c71 = function(date) { return  date.join('') },
            peg$c72 = ":",
            peg$c73 = { type: "literal", value: ":", description: "\":\"" },
            peg$c74 = function(time) { return time.join('') },
            peg$c75 = "T",
            peg$c76 = { type: "literal", value: "T", description: "\"T\"" },
            peg$c77 = "Z",
            peg$c78 = { type: "literal", value: "Z", description: "\"Z\"" },
            peg$c79 = function(date, time) { return node('Date', new Date(date + "T" + time + "Z"), line, column) },
            peg$c80 = function(date, time) { return node('Date', new Date(date + "T" + time), line, column) },
            peg$c81 = /^[ \t]/,
            peg$c82 = { type: "class", value: "[ \\t]", description: "[ \\t]" },
            peg$c83 = "\n",
            peg$c84 = { type: "literal", value: "\n", description: "\"\\n\"" },
            peg$c85 = "\r",
            peg$c86 = { type: "literal", value: "\r", description: "\"\\r\"" },
            peg$c87 = /^[0-9a-f]/i,
            peg$c88 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
            peg$c89 = /^[0-9]/,
            peg$c90 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c91 = "_",
            peg$c92 = { type: "literal", value: "_", description: "\"_\"" },
            peg$c93 = function() { return "" },
            peg$c94 = /^[A-Za-z0-9_\-]/,
            peg$c95 = { type: "class", value: "[A-Za-z0-9_\\-]", description: "[A-Za-z0-9_\\-]" },
            peg$c96 = function(d) { return d.join('') },
            peg$c97 = "\\\"",
            peg$c98 = { type: "literal", value: "\\\"", description: "\"\\\\\\\"\"" },
            peg$c99 = function() { return '"'  },
            peg$c100 = "\\\\",
            peg$c101 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
            peg$c102 = function() { return '\\' },
            peg$c103 = "\\b",
            peg$c104 = { type: "literal", value: "\\b", description: "\"\\\\b\"" },
            peg$c105 = function() { return '\b' },
            peg$c106 = "\\t",
            peg$c107 = { type: "literal", value: "\\t", description: "\"\\\\t\"" },
            peg$c108 = function() { return '\t' },
            peg$c109 = "\\n",
            peg$c110 = { type: "literal", value: "\\n", description: "\"\\\\n\"" },
            peg$c111 = function() { return '\n' },
            peg$c112 = "\\f",
            peg$c113 = { type: "literal", value: "\\f", description: "\"\\\\f\"" },
            peg$c114 = function() { return '\f' },
            peg$c115 = "\\r",
            peg$c116 = { type: "literal", value: "\\r", description: "\"\\\\r\"" },
            peg$c117 = function() { return '\r' },
            peg$c118 = "\\U",
            peg$c119 = { type: "literal", value: "\\U", description: "\"\\\\U\"" },
            peg$c120 = function(digits) { return convertCodePoint(digits.join('')) },
            peg$c121 = "\\u",
            peg$c122 = { type: "literal", value: "\\u", description: "\"\\\\u\"" },

            peg$currPos          = 0,
            peg$reportedPos      = 0,
            peg$cachedPos        = 0,
            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,

            peg$cache = {},
            peg$result;

        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
          }

          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function line() {
          return peg$computePosDetails(peg$reportedPos).line;
        }

        function column() {
          return peg$computePosDetails(peg$reportedPos).column;
        }

        function peg$computePosDetails(pos) {
          function advance(details, startPos, endPos) {
            var p, ch;

            for (p = startPos; p < endPos; p++) {
              ch = input.charAt(p);
              if (ch === "\n") {
                if (!details.seenCR) { details.line++; }
                details.column = 1;
                details.seenCR = false;
              } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                details.line++;
                details.column = 1;
                details.seenCR = true;
              } else {
                details.column++;
                details.seenCR = false;
              }
            }
          }

          if (peg$cachedPos !== pos) {
            if (peg$cachedPos > pos) {
              peg$cachedPos = 0;
              peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
            }
            advance(peg$cachedPosDetails, peg$cachedPos, pos);
            peg$cachedPos = pos;
          }

          return peg$cachedPosDetails;
        }

        function peg$fail(expected) {
          if (peg$currPos < peg$maxFailPos) { return; }

          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }

          peg$maxFailExpected.push(expected);
        }

        function peg$buildException(message, expected, pos) {
          function cleanupExpected(expected) {
            var i = 1;

            expected.sort(function(a, b) {
              if (a.description < b.description) {
                return -1;
              } else if (a.description > b.description) {
                return 1;
              } else {
                return 0;
              }
            });

            while (i < expected.length) {
              if (expected[i - 1] === expected[i]) {
                expected.splice(i, 1);
              } else {
                i++;
              }
            }
          }

          function buildMessage(expected, found) {
            function stringEscape(s) {
              function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

              return s
                .replace(/\\/g,   '\\\\')
                .replace(/"/g,    '\\"')
                .replace(/\x08/g, '\\b')
                .replace(/\t/g,   '\\t')
                .replace(/\n/g,   '\\n')
                .replace(/\f/g,   '\\f')
                .replace(/\r/g,   '\\r')
                .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
            }

            var expectedDescs = new Array(expected.length),
                expectedDesc, foundDesc, i;

            for (i = 0; i < expected.length; i++) {
              expectedDescs[i] = expected[i].description;
            }

            expectedDesc = expected.length > 1
              ? expectedDescs.slice(0, -1).join(", ")
                  + " or "
                  + expectedDescs[expected.length - 1]
              : expectedDescs[0];

            foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

            return "Expected " + expectedDesc + " but " + foundDesc + " found.";
          }

          var posDetails = peg$computePosDetails(pos),
              found      = pos < input.length ? input.charAt(pos) : null;

          if (expected !== null) {
            cleanupExpected(expected);
          }

          return new SyntaxError(
            message !== null ? message : buildMessage(expected, found),
            expected,
            found,
            pos,
            posDetails.line,
            posDetails.column
          );
        }

        function peg$parsestart() {
          var s0, s1, s2;

          var key    = peg$currPos * 49 + 0,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseline();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseline();
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c1();
          }
          s0 = s1;

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseline() {
          var s0, s1, s2, s3, s4, s5, s6;

          var key    = peg$currPos * 49 + 1,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexpression();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parsecomment();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsecomment();
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseNL();
                  if (s6 !== peg$FAILED) {
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parseNL();
                    }
                  } else {
                    s5 = peg$c2;
                  }
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseEOF();
                  }
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseS();
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseS();
              }
            } else {
              s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseNL();
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseNL();
                }
              } else {
                s2 = peg$c2;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$parseEOF();
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseNL();
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseexpression() {
          var s0;

          var key    = peg$currPos * 49 + 2,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$parsecomment();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepath();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetablearray();
              if (s0 === peg$FAILED) {
                s0 = peg$parseassignment();
              }
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsecomment() {
          var s0, s1, s2, s3, s4, s5;

          var key    = peg$currPos * 49 + 3,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 35) {
            s1 = peg$c3;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c4); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parseNL();
            if (s5 === peg$FAILED) {
              s5 = peg$parseEOF();
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c5;
            } else {
              peg$currPos = s4;
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c6); }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c2;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c2;
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parseNL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseEOF();
              }
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = peg$c5;
              } else {
                peg$currPos = s4;
                s4 = peg$c2;
              }
              if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c6); }
                }
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c2;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c2;
              }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsepath() {
          var s0, s1, s2, s3, s4, s5;

          var key    = peg$currPos * 49 + 4,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c7;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsetable_key();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseS();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseS();
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s5 = peg$c9;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c11(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsetablearray() {
          var s0, s1, s2, s3, s4, s5, s6, s7;

          var key    = peg$currPos * 49 + 5,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c7;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s2 = peg$c7;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetable_key();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseS();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseS();
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s6 = peg$c9;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c10); }
                    }
                    if (s6 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 93) {
                        s7 = peg$c9;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c10); }
                      }
                      if (s7 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c12(s4);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsetable_key() {
          var s0, s1, s2;

          var key    = peg$currPos * 49 + 6,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsedot_ended_table_key_part();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsedot_ended_table_key_part();
            }
          } else {
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsetable_key_part();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c13(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsetable_key_part();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c14(s1);
            }
            s0 = s1;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsetable_key_part() {
          var s0, s1, s2, s3, s4;

          var key    = peg$currPos * 49 + 7,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsekey();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c15(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseS();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseS();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsequoted_key();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseS();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseS();
                }
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c15(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsedot_ended_table_key_part() {
          var s0, s1, s2, s3, s4, s5, s6;

          var key    = peg$currPos * 49 + 8,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsekey();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s4 = peg$c16;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseS();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseS();
                  }
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c15(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseS();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseS();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsequoted_key();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseS();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseS();
                }
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s4 = peg$c16;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c17); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$parseS();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parseS();
                    }
                    if (s5 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c15(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseassignment() {
          var s0, s1, s2, s3, s4, s5;

          var key    = peg$currPos * 49 + 9,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = peg$parsekey();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s3 = peg$c18;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseS();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseS();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsevalue();
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c20(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsequoted_key();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseS();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseS();
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s3 = peg$c18;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c19); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parseS();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parseS();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsevalue();
                    if (s5 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c20(s1, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsekey() {
          var s0, s1, s2;

          var key    = peg$currPos * 49 + 10,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseASCII_BASIC();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseASCII_BASIC();
            }
          } else {
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c21(s1);
          }
          s0 = s1;

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsequoted_key() {
          var s0, s1;

          var key    = peg$currPos * 49 + 11,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = peg$parsedouble_quoted_single_line_string();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c22(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsesingle_quoted_single_line_string();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c22(s1);
            }
            s0 = s1;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsevalue() {
          var s0;

          var key    = peg$currPos * 49 + 12,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$parsestring();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedatetime();
            if (s0 === peg$FAILED) {
              s0 = peg$parsefloat();
              if (s0 === peg$FAILED) {
                s0 = peg$parseinteger();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseboolean();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsearray();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseinline_table();
                    }
                  }
                }
              }
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsestring() {
          var s0;

          var key    = peg$currPos * 49 + 13,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$parsedouble_quoted_multiline_string();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedouble_quoted_single_line_string();
            if (s0 === peg$FAILED) {
              s0 = peg$parsesingle_quoted_multiline_string();
              if (s0 === peg$FAILED) {
                s0 = peg$parsesingle_quoted_single_line_string();
              }
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsedouble_quoted_multiline_string() {
          var s0, s1, s2, s3, s4;

          var key    = peg$currPos * 49 + 14,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c23) {
            s1 = peg$c23;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseNL();
            if (s2 === peg$FAILED) {
              s2 = peg$c25;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsemultiline_string_char();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsemultiline_string_char();
              }
              if (s3 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c23) {
                  s4 = peg$c23;
                  peg$currPos += 3;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c24); }
                }
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c26(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsedouble_quoted_single_line_string() {
          var s0, s1, s2, s3;

          var key    = peg$currPos * 49 + 15,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c27;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsestring_char();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsestring_char();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c27;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c28); }
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c26(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsesingle_quoted_multiline_string() {
          var s0, s1, s2, s3, s4;

          var key    = peg$currPos * 49 + 16,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c29) {
            s1 = peg$c29;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseNL();
            if (s2 === peg$FAILED) {
              s2 = peg$c25;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsemultiline_literal_char();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsemultiline_literal_char();
              }
              if (s3 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c29) {
                  s4 = peg$c29;
                  peg$currPos += 3;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c30); }
                }
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c26(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsesingle_quoted_single_line_string() {
          var s0, s1, s2, s3;

          var key    = peg$currPos * 49 + 17,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c31;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseliteral_char();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseliteral_char();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c31;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c32); }
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c26(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsestring_char() {
          var s0, s1, s2;

          var key    = peg$currPos * 49 + 18,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$parseESCAPED();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 34) {
              s2 = peg$c27;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c28); }
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) {
              s1 = peg$c5;
            } else {
              peg$currPos = s1;
              s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c6); }
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c33(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseliteral_char() {
          var s0, s1, s2;

          var key    = peg$currPos * 49 + 19,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 39) {
            s2 = peg$c31;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          peg$silentFails--;
          if (s2 === peg$FAILED) {
            s1 = peg$c5;
          } else {
            peg$currPos = s1;
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c33(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsemultiline_string_char() {
          var s0, s1, s2;

          var key    = peg$currPos * 49 + 20,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$parseESCAPED();
          if (s0 === peg$FAILED) {
            s0 = peg$parsemultiline_string_delim();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$currPos;
              peg$silentFails++;
              if (input.substr(peg$currPos, 3) === peg$c23) {
                s2 = peg$c23;
                peg$currPos += 3;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
              peg$silentFails--;
              if (s2 === peg$FAILED) {
                s1 = peg$c5;
              } else {
                peg$currPos = s1;
                s1 = peg$c2;
              }
              if (s1 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c6); }
                }
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c34(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsemultiline_string_delim() {
          var s0, s1, s2, s3, s4;

          var key    = peg$currPos * 49 + 21,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c35;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseNL();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseNLS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseNLS();
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c37();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsemultiline_literal_char() {
          var s0, s1, s2;

          var key    = peg$currPos * 49 + 22,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 3) === peg$c29) {
            s2 = peg$c29;
            peg$currPos += 3;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          peg$silentFails--;
          if (s2 === peg$FAILED) {
            s1 = peg$c5;
          } else {
            peg$currPos = s1;
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c33(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsefloat() {
          var s0, s1, s2, s3;

          var key    = peg$currPos * 49 + 23,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = peg$parsefloat_text();
          if (s1 === peg$FAILED) {
            s1 = peg$parseinteger_text();
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 101) {
              s2 = peg$c38;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 69) {
                s2 = peg$c40;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseinteger_text();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c42(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsefloat_text();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c43(s1);
            }
            s0 = s1;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsefloat_text() {
          var s0, s1, s2, s3, s4, s5;

          var key    = peg$currPos * 49 + 24,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 43) {
            s1 = peg$c44;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
          if (s1 === peg$FAILED) {
            s1 = peg$c25;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseDIGITS();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s4 = peg$c16;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseDIGITS();
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c46(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c47;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c48); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseDIGITS();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s4 = peg$c16;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseDIGITS();
                  if (s5 !== peg$FAILED) {
                    s3 = [s3, s4, s5];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c49(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseinteger() {
          var s0, s1;

          var key    = peg$currPos * 49 + 25,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = peg$parseinteger_text();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c50(s1);
          }
          s0 = s1;

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseinteger_text() {
          var s0, s1, s2, s3, s4;

          var key    = peg$currPos * 49 + 26,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 43) {
            s1 = peg$c44;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
          if (s1 === peg$FAILED) {
            s1 = peg$c25;
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseDIGIT_OR_UNDER();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseDIGIT_OR_UNDER();
              }
            } else {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 46) {
                s4 = peg$c16;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              peg$silentFails--;
              if (s4 === peg$FAILED) {
                s3 = peg$c5;
              } else {
                peg$currPos = s3;
                s3 = peg$c2;
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c46(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c47;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c48); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseDIGIT_OR_UNDER();
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseDIGIT_OR_UNDER();
                }
              } else {
                s2 = peg$c2;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 46) {
                  s4 = peg$c16;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                  s3 = peg$c5;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c2;
                }
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c49(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseboolean() {
          var s0, s1;

          var key    = peg$currPos * 49 + 27,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c51) {
            s1 = peg$c51;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c52); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c53();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c54) {
              s1 = peg$c54;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c55); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c56();
            }
            s0 = s1;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsearray() {
          var s0, s1, s2, s3, s4;

          var key    = peg$currPos * 49 + 28,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c7;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsearray_sep();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsearray_sep();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s3 = peg$c9;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c57();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c7;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsearray_value();
              if (s2 === peg$FAILED) {
                s2 = peg$c25;
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s3 = peg$c9;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c10); }
                }
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c58(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c7;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsearray_value_list();
                if (s3 !== peg$FAILED) {
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parsearray_value_list();
                  }
                } else {
                  s2 = peg$c2;
                }
                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s3 = peg$c9;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c59(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                  s1 = peg$c7;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  s3 = peg$parsearray_value_list();
                  if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$parsearray_value_list();
                    }
                  } else {
                    s2 = peg$c2;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsearray_value();
                    if (s3 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 93) {
                        s4 = peg$c9;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c10); }
                      }
                      if (s4 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c60(s2, s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              }
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsearray_value() {
          var s0, s1, s2, s3, s4;

          var key    = peg$currPos * 49 + 29,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsearray_sep();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsearray_sep();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsevalue();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsearray_sep();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsearray_sep();
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c61(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsearray_value_list() {
          var s0, s1, s2, s3, s4, s5, s6;

          var key    = peg$currPos * 49 + 30,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsearray_sep();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsearray_sep();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsevalue();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsearray_sep();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsearray_sep();
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s4 = peg$c62;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c63); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parsearray_sep();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parsearray_sep();
                  }
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c61(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsearray_sep() {
          var s0;

          var key    = peg$currPos * 49 + 31,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$parseS();
          if (s0 === peg$FAILED) {
            s0 = peg$parseNL();
            if (s0 === peg$FAILED) {
              s0 = peg$parsecomment();
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseinline_table() {
          var s0, s1, s2, s3, s4, s5;

          var key    = peg$currPos * 49 + 32,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c64;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseinline_table_assignment();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseinline_table_assignment();
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseS();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseS();
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s5 = peg$c66;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c67); }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c68(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseinline_table_assignment() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

          var key    = peg$currPos * 49 + 33,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsekey();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s4 = peg$c18;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c19); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseS();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseS();
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsevalue();
                    if (s6 !== peg$FAILED) {
                      s7 = [];
                      s8 = peg$parseS();
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = peg$parseS();
                      }
                      if (s7 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s8 = peg$c62;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c63); }
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = [];
                          s10 = peg$parseS();
                          while (s10 !== peg$FAILED) {
                            s9.push(s10);
                            s10 = peg$parseS();
                          }
                          if (s9 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c69(s2, s6);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c2;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseS();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseS();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsekey();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseS();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseS();
                }
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s4 = peg$c18;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c19); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$parseS();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parseS();
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsevalue();
                      if (s6 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c69(s2, s6);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsesecfragment() {
          var s0, s1, s2;

          var key    = peg$currPos * 49 + 34,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s1 = peg$c16;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c17); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDIGITS();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c70(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsedate() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

          var key    = peg$currPos * 49 + 35,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parseDIGIT_OR_UNDER();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDIGIT_OR_UNDER();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseDIGIT_OR_UNDER();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseDIGIT_OR_UNDER();
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s6 = peg$c47;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c48); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseDIGIT_OR_UNDER();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseDIGIT_OR_UNDER();
                      if (s8 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 45) {
                          s9 = peg$c47;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c48); }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseDIGIT_OR_UNDER();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseDIGIT_OR_UNDER();
                            if (s11 !== peg$FAILED) {
                              s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                              s1 = s2;
                            } else {
                              peg$currPos = s1;
                              s1 = peg$c2;
                            }
                          } else {
                            peg$currPos = s1;
                            s1 = peg$c2;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$c2;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$c2;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$c2;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c2;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$c2;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c2;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c2;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c71(s1);
          }
          s0 = s1;

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsetime() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

          var key    = peg$currPos * 49 + 36,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parseDIGIT_OR_UNDER();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDIGIT_OR_UNDER();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s4 = peg$c72;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c73); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseDIGIT_OR_UNDER();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseDIGIT_OR_UNDER();
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s7 = peg$c72;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c73); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseDIGIT_OR_UNDER();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseDIGIT_OR_UNDER();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsesecfragment();
                          if (s10 === peg$FAILED) {
                            s10 = peg$c25;
                          }
                          if (s10 !== peg$FAILED) {
                            s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10];
                            s1 = s2;
                          } else {
                            peg$currPos = s1;
                            s1 = peg$c2;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$c2;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$c2;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$c2;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c2;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$c2;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c2;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c2;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c74(s1);
          }
          s0 = s1;

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsetime_with_offset() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

          var key    = peg$currPos * 49 + 37,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parseDIGIT_OR_UNDER();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDIGIT_OR_UNDER();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s4 = peg$c72;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c73); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseDIGIT_OR_UNDER();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseDIGIT_OR_UNDER();
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s7 = peg$c72;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c73); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseDIGIT_OR_UNDER();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseDIGIT_OR_UNDER();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsesecfragment();
                          if (s10 === peg$FAILED) {
                            s10 = peg$c25;
                          }
                          if (s10 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 45) {
                              s11 = peg$c47;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c48); }
                            }
                            if (s11 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 43) {
                                s11 = peg$c44;
                                peg$currPos++;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c45); }
                              }
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parseDIGIT_OR_UNDER();
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parseDIGIT_OR_UNDER();
                                if (s13 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 58) {
                                    s14 = peg$c72;
                                    peg$currPos++;
                                  } else {
                                    s14 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c73); }
                                  }
                                  if (s14 !== peg$FAILED) {
                                    s15 = peg$parseDIGIT_OR_UNDER();
                                    if (s15 !== peg$FAILED) {
                                      s16 = peg$parseDIGIT_OR_UNDER();
                                      if (s16 !== peg$FAILED) {
                                        s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16];
                                        s1 = s2;
                                      } else {
                                        peg$currPos = s1;
                                        s1 = peg$c2;
                                      }
                                    } else {
                                      peg$currPos = s1;
                                      s1 = peg$c2;
                                    }
                                  } else {
                                    peg$currPos = s1;
                                    s1 = peg$c2;
                                  }
                                } else {
                                  peg$currPos = s1;
                                  s1 = peg$c2;
                                }
                              } else {
                                peg$currPos = s1;
                                s1 = peg$c2;
                              }
                            } else {
                              peg$currPos = s1;
                              s1 = peg$c2;
                            }
                          } else {
                            peg$currPos = s1;
                            s1 = peg$c2;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$c2;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$c2;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$c2;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c2;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$c2;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c2;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c2;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c74(s1);
          }
          s0 = s1;

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parsedatetime() {
          var s0, s1, s2, s3, s4;

          var key    = peg$currPos * 49 + 38,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = peg$parsedate();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 84) {
              s2 = peg$c75;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c76); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsetime();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 90) {
                  s4 = peg$c77;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c78); }
                }
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c79(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsedate();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 84) {
                s2 = peg$c75;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c76); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsetime_with_offset();
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c80(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseS() {
          var s0;

          var key    = peg$currPos * 49 + 39,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          if (peg$c81.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c82); }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseNL() {
          var s0, s1, s2;

          var key    = peg$currPos * 49 + 40,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          if (input.charCodeAt(peg$currPos) === 10) {
            s0 = peg$c83;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 13) {
              s1 = peg$c85;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c86); }
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 10) {
                s2 = peg$c83;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c84); }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseNLS() {
          var s0;

          var key    = peg$currPos * 49 + 41,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$parseNL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseS();
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseEOF() {
          var s0, s1;

          var key    = peg$currPos * 49 + 42,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          peg$silentFails++;
          if (input.length > peg$currPos) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          peg$silentFails--;
          if (s1 === peg$FAILED) {
            s0 = peg$c5;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseHEX() {
          var s0;

          var key    = peg$currPos * 49 + 43,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          if (peg$c87.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseDIGIT_OR_UNDER() {
          var s0, s1;

          var key    = peg$currPos * 49 + 44,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          if (peg$c89.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c90); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s1 = peg$c91;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c92); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c93();
            }
            s0 = s1;
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseASCII_BASIC() {
          var s0;

          var key    = peg$currPos * 49 + 45,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          if (peg$c94.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseDIGITS() {
          var s0, s1, s2;

          var key    = peg$currPos * 49 + 46,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseDIGIT_OR_UNDER();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseDIGIT_OR_UNDER();
            }
          } else {
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c96(s1);
          }
          s0 = s1;

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseESCAPED() {
          var s0, s1;

          var key    = peg$currPos * 49 + 47,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c97) {
            s1 = peg$c97;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c98); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c99();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c100) {
              s1 = peg$c100;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c101); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c102();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c103) {
                s1 = peg$c103;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c104); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c105();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c106) {
                  s1 = peg$c106;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c107); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c108();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c109) {
                    s1 = peg$c109;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c110); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c111();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c112) {
                      s1 = peg$c112;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c113); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c114();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c115) {
                        s1 = peg$c115;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c116); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c117();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseESCAPED_UNICODE();
                      }
                    }
                  }
                }
              }
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }

        function peg$parseESCAPED_UNICODE() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

          var key    = peg$currPos * 49 + 48,
              cached = peg$cache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c118) {
            s1 = peg$c118;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c119); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseHEX();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseHEX();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseHEX();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseHEX();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseHEX();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseHEX();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseHEX();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseHEX();
                          if (s10 !== peg$FAILED) {
                            s3 = [s3, s4, s5, s6, s7, s8, s9, s10];
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c2;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c2;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c2;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c2;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c120(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c121) {
              s1 = peg$c121;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c122); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseHEX();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseHEX();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseHEX();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseHEX();
                    if (s6 !== peg$FAILED) {
                      s3 = [s3, s4, s5, s6];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c2;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c120(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          }

          peg$cache[key] = { nextPos: peg$currPos, result: s0 };

          return s0;
        }


          var nodes = [];

          function genError(err, line, col) {
            var ex = new Error(err);
            ex.line = line;
            ex.column = col;
            throw ex;
          }

          function addNode(node) {
            nodes.push(node);
          }

          function node(type, value, line, column, key) {
            var obj = { type: type, value: value, line: line(), column: column() };
            if (key) obj.key = key;
            return obj;
          }

          function convertCodePoint(str, line, col) {
            var num = parseInt("0x" + str);

            if (
              !isFinite(num) ||
              Math.floor(num) != num ||
              num < 0 ||
              num > 0x10FFFF ||
              (num > 0xD7FF && num < 0xE000)
            ) {
              genError("Invalid Unicode escape code: " + str, line, col);
            } else {
              return fromCodePoint(num);
            }
          }

          function fromCodePoint() {
            var MAX_SIZE = 0x4000;
            var codeUnits = [];
            var highSurrogate;
            var lowSurrogate;
            var index = -1;
            var length = arguments.length;
            if (!length) {
              return '';
            }
            var result = '';
            while (++index < length) {
              var codePoint = Number(arguments[index]);
              if (codePoint <= 0xFFFF) { // BMP code point
                codeUnits.push(codePoint);
              } else { // Astral code point; split in surrogate halves
                // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                codePoint -= 0x10000;
                highSurrogate = (codePoint >> 10) + 0xD800;
                lowSurrogate = (codePoint % 0x400) + 0xDC00;
                codeUnits.push(highSurrogate, lowSurrogate);
              }
              if (index + 1 == length || codeUnits.length > MAX_SIZE) {
                result += String.fromCharCode.apply(null, codeUnits);
                codeUnits.length = 0;
              }
            }
            return result;
          }


        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail({ type: "end", description: "end of input" });
          }

          throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
        }
      }

      return {
        SyntaxError: SyntaxError,
        parse:       parse
      };
    })();

    function compile(nodes) {
      var assignedPaths = [];
      var valueAssignments = [];
      var currentPath = "";
      var data = Object.create(null);
      var context = data;

      return reduce(nodes);

      function reduce(nodes) {
        var node;
        for (var i = 0; i < nodes.length; i++) {
          node = nodes[i];
          switch (node.type) {
          case "Assign":
            assign(node);
            break;
          case "ObjectPath":
            setPath(node);
            break;
          case "ArrayPath":
            addTableArray(node);
            break;
          }
        }

        return data;
      }

      function genError(err, line, col) {
        var ex = new Error(err);
        ex.line = line;
        ex.column = col;
        throw ex;
      }

      function assign(node) {
        var key = node.key;
        var value = node.value;
        var line = node.line;
        var column = node.column;

        var fullPath;
        if (currentPath) {
          fullPath = currentPath + "." + key;
        } else {
          fullPath = key;
        }
        if (typeof context[key] !== "undefined") {
          genError("Cannot redefine existing key '" + fullPath + "'.", line, column);
        }

        context[key] = reduceValueNode(value);

        if (!pathAssigned(fullPath)) {
          assignedPaths.push(fullPath);
          valueAssignments.push(fullPath);
        }
      }


      function pathAssigned(path) {
        return assignedPaths.indexOf(path) !== -1;
      }

      function reduceValueNode(node) {
        if (node.type === "Array") {
          return reduceArrayWithTypeChecking(node.value);
        } else if (node.type === "InlineTable") {
          return reduceInlineTableNode(node.value);
        } else {
          return node.value;
        }
      }

      function reduceInlineTableNode(values) {
        var obj = Object.create(null);
        for (var i = 0; i < values.length; i++) {
          var val = values[i];
          if (val.value.type === "InlineTable") {
            obj[val.key] = reduceInlineTableNode(val.value.value);
          } else if (val.type === "InlineTableValue") {
            obj[val.key] = reduceValueNode(val.value);
          }
        }

        return obj;
      }

      function setPath(node) {
        var path = node.value;
        var quotedPath = path.map(quoteDottedString).join(".");
        var line = node.line;
        var column = node.column;

        if (pathAssigned(quotedPath)) {
          genError("Cannot redefine existing key '" + path + "'.", line, column);
        }
        assignedPaths.push(quotedPath);
        context = deepRef(data, path, Object.create(null), line, column);
        currentPath = path;
      }

      function addTableArray(node) {
        var path = node.value;
        var quotedPath = path.map(quoteDottedString).join(".");
        var line = node.line;
        var column = node.column;

        if (!pathAssigned(quotedPath)) {
          assignedPaths.push(quotedPath);
        }
        assignedPaths = assignedPaths.filter(function(p) {
          return p.indexOf(quotedPath) !== 0;
        });
        assignedPaths.push(quotedPath);
        context = deepRef(data, path, [], line, column);
        currentPath = quotedPath;

        if (context instanceof Array) {
          var newObj = Object.create(null);
          context.push(newObj);
          context = newObj;
        } else {
          genError("Cannot redefine existing key '" + path + "'.", line, column);
        }
      }

      // Given a path 'a.b.c', create (as necessary) `start.a`,
      // `start.a.b`, and `start.a.b.c`, assigning `value` to `start.a.b.c`.
      // If `a` or `b` are arrays and have items in them, the last item in the
      // array is used as the context for the next sub-path.
      function deepRef(start, keys, value, line, column) {
        var traversed = [];
        var traversedPath = "";
        keys.join(".");
        var ctx = start;

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          traversed.push(key);
          traversedPath = traversed.join(".");
          if (typeof ctx[key] === "undefined") {
            if (i === keys.length - 1) {
              ctx[key] = value;
            } else {
              ctx[key] = Object.create(null);
            }
          } else if (i !== keys.length - 1 && valueAssignments.indexOf(traversedPath) > -1) {
            // already a non-object value at key, can't be used as part of a new path
            genError("Cannot redefine existing key '" + traversedPath + "'.", line, column);
          }

          ctx = ctx[key];
          if (ctx instanceof Array && ctx.length && i < keys.length - 1) {
            ctx = ctx[ctx.length - 1];
          }
        }

        return ctx;
      }

      function reduceArrayWithTypeChecking(array) {
        // Ensure that all items in the array are of the same type
        var firstType = null;
        for (var i = 0; i < array.length; i++) {
          var node = array[i];
          if (firstType === null) {
            firstType = node.type;
          } else {
            if (node.type !== firstType) {
              genError("Cannot add value of type " + node.type + " to array of type " +
                firstType + ".", node.line, node.column);
            }
          }
        }

        // Recursively reduce array of nodes into array of the nodes' values
        return array.map(reduceValueNode);
      }

      function quoteDottedString(str) {
        if (str.indexOf(".") > -1) {
          return "\"" + str + "\"";
        } else {
          return str;
        }
      }
    }

    var compiler = {
      compile: compile
    };

    var toml = {
      parse: function(input) {
        var nodes = parser.parse(input.toString());
        return compiler.compile(nodes);
      }
    };

    /*! pako 2.0.4 https://github.com/nodeca/pako @license (MIT AND Zlib) */
    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    /* eslint-disable space-unary-ops */

    /* Public constants ==========================================================*/
    /* ===========================================================================*/


    //const Z_FILTERED          = 1;
    //const Z_HUFFMAN_ONLY      = 2;
    //const Z_RLE               = 3;
    const Z_FIXED$1               = 4;
    //const Z_DEFAULT_STRATEGY  = 0;

    /* Possible values of the data_type field (though see inflate()) */
    const Z_BINARY              = 0;
    const Z_TEXT                = 1;
    //const Z_ASCII             = 1; // = Z_TEXT
    const Z_UNKNOWN$1             = 2;

    /*============================================================================*/


    function zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }

    // From zutil.h

    const STORED_BLOCK = 0;
    const STATIC_TREES = 1;
    const DYN_TREES    = 2;
    /* The three kinds of block type */

    const MIN_MATCH$1    = 3;
    const MAX_MATCH$1    = 258;
    /* The minimum and maximum match lengths */

    // From deflate.h
    /* ===========================================================================
     * Internal compression state.
     */

    const LENGTH_CODES$1  = 29;
    /* number of length codes, not counting the special END_BLOCK code */

    const LITERALS$1      = 256;
    /* number of literal bytes 0..255 */

    const L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
    /* number of Literal or Length codes, including the END_BLOCK code */

    const D_CODES$1       = 30;
    /* number of distance codes */

    const BL_CODES$1      = 19;
    /* number of codes used to transfer the bit lengths */

    const HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
    /* maximum heap size */

    const MAX_BITS$1      = 15;
    /* All codes must not exceed MAX_BITS bits */

    const Buf_size      = 16;
    /* size of bit buffer in bi_buf */


    /* ===========================================================================
     * Constants
     */

    const MAX_BL_BITS = 7;
    /* Bit length codes must not exceed MAX_BL_BITS bits */

    const END_BLOCK   = 256;
    /* end of block literal code */

    const REP_3_6     = 16;
    /* repeat previous bit length 3-6 times (2 bits of repeat count) */

    const REPZ_3_10   = 17;
    /* repeat a zero length 3-10 times  (3 bits of repeat count) */

    const REPZ_11_138 = 18;
    /* repeat a zero length 11-138 times  (7 bits of repeat count) */

    /* eslint-disable comma-spacing,array-bracket-spacing */
    const extra_lbits =   /* extra bits for each length code */
      new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);

    const extra_dbits =   /* extra bits for each distance code */
      new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);

    const extra_blbits =  /* extra bits for each bit length code */
      new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);

    const bl_order =
      new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
    /* eslint-enable comma-spacing,array-bracket-spacing */

    /* The lengths of the bit length codes are sent in order of decreasing
     * probability, to avoid transmitting the lengths for unused bit length codes.
     */

    /* ===========================================================================
     * Local data. These are initialized only once.
     */

    // We pre-fill arrays with 0 to avoid uninitialized gaps

    const DIST_CODE_LEN = 512; /* see definition of array dist_code below */

    // !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
    const static_ltree  = new Array((L_CODES$1 + 2) * 2);
    zero$1(static_ltree);
    /* The static literal tree. Since the bit lengths are imposed, there is no
     * need for the L_CODES extra codes used during heap construction. However
     * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
     * below).
     */

    const static_dtree  = new Array(D_CODES$1 * 2);
    zero$1(static_dtree);
    /* The static distance tree. (Actually a trivial tree since all codes use
     * 5 bits.)
     */

    const _dist_code    = new Array(DIST_CODE_LEN);
    zero$1(_dist_code);
    /* Distance codes. The first 256 values correspond to the distances
     * 3 .. 258, the last 256 values correspond to the top 8 bits of
     * the 15 bit distances.
     */

    const _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
    zero$1(_length_code);
    /* length code for each normalized match length (0 == MIN_MATCH) */

    const base_length   = new Array(LENGTH_CODES$1);
    zero$1(base_length);
    /* First normalized length for each code (0 = MIN_MATCH) */

    const base_dist     = new Array(D_CODES$1);
    zero$1(base_dist);
    /* First normalized distance for each code (0 = distance of 1) */


    function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

      this.static_tree  = static_tree;  /* static tree or NULL */
      this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
      this.extra_base   = extra_base;   /* base index for extra_bits */
      this.elems        = elems;        /* max number of elements in the tree */
      this.max_length   = max_length;   /* max bit length for the codes */

      // show if `static_tree` has data or dummy - needed for monomorphic objects
      this.has_stree    = static_tree && static_tree.length;
    }


    let static_l_desc;
    let static_d_desc;
    let static_bl_desc;


    function TreeDesc(dyn_tree, stat_desc) {
      this.dyn_tree = dyn_tree;     /* the dynamic tree */
      this.max_code = 0;            /* largest code with non zero frequency */
      this.stat_desc = stat_desc;   /* the corresponding static tree */
    }



    const d_code = (dist) => {

      return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
    };


    /* ===========================================================================
     * Output a short LSB first on the stream.
     * IN assertion: there is enough room in pendingBuf.
     */
    const put_short = (s, w) => {
    //    put_byte(s, (uch)((w) & 0xff));
    //    put_byte(s, (uch)((ush)(w) >> 8));
      s.pending_buf[s.pending++] = (w) & 0xff;
      s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
    };


    /* ===========================================================================
     * Send a value on a given number of bits.
     * IN assertion: length <= 16 and value fits in length bits.
     */
    const send_bits = (s, value, length) => {

      if (s.bi_valid > (Buf_size - length)) {
        s.bi_buf |= (value << s.bi_valid) & 0xffff;
        put_short(s, s.bi_buf);
        s.bi_buf = value >> (Buf_size - s.bi_valid);
        s.bi_valid += length - Buf_size;
      } else {
        s.bi_buf |= (value << s.bi_valid) & 0xffff;
        s.bi_valid += length;
      }
    };


    const send_code = (s, c, tree) => {

      send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
    };


    /* ===========================================================================
     * Reverse the first len bits of a code, using straightforward code (a faster
     * method would use a table)
     * IN assertion: 1 <= len <= 15
     */
    const bi_reverse = (code, len) => {

      let res = 0;
      do {
        res |= code & 1;
        code >>>= 1;
        res <<= 1;
      } while (--len > 0);
      return res >>> 1;
    };


    /* ===========================================================================
     * Flush the bit buffer, keeping at most 7 bits in it.
     */
    const bi_flush = (s) => {

      if (s.bi_valid === 16) {
        put_short(s, s.bi_buf);
        s.bi_buf = 0;
        s.bi_valid = 0;

      } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = s.bi_buf & 0xff;
        s.bi_buf >>= 8;
        s.bi_valid -= 8;
      }
    };


    /* ===========================================================================
     * Compute the optimal bit lengths for a tree and update the total bit length
     * for the current block.
     * IN assertion: the fields freq and dad are set, heap[heap_max] and
     *    above are the tree nodes sorted by increasing frequency.
     * OUT assertions: the field len is set to the optimal bit length, the
     *     array bl_count contains the frequencies for each bit length.
     *     The length opt_len is updated; static_len is also updated if stree is
     *     not null.
     */
    const gen_bitlen = (s, desc) =>
    //    deflate_state *s;
    //    tree_desc *desc;    /* the tree descriptor */
    {
      const tree            = desc.dyn_tree;
      const max_code        = desc.max_code;
      const stree           = desc.stat_desc.static_tree;
      const has_stree       = desc.stat_desc.has_stree;
      const extra           = desc.stat_desc.extra_bits;
      const base            = desc.stat_desc.extra_base;
      const max_length      = desc.stat_desc.max_length;
      let h;              /* heap index */
      let n, m;           /* iterate over the tree elements */
      let bits;           /* bit length */
      let xbits;          /* extra bits */
      let f;              /* frequency */
      let overflow = 0;   /* number of elements with bit length too large */

      for (bits = 0; bits <= MAX_BITS$1; bits++) {
        s.bl_count[bits] = 0;
      }

      /* In a first pass, compute the optimal bit lengths (which may
       * overflow in the case of the bit length tree).
       */
      tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

      for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
        n = s.heap[h];
        bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
        if (bits > max_length) {
          bits = max_length;
          overflow++;
        }
        tree[n * 2 + 1]/*.Len*/ = bits;
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) { continue; } /* not a leaf node */

        s.bl_count[bits]++;
        xbits = 0;
        if (n >= base) {
          xbits = extra[n - base];
        }
        f = tree[n * 2]/*.Freq*/;
        s.opt_len += f * (bits + xbits);
        if (has_stree) {
          s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
        }
      }
      if (overflow === 0) { return; }

      // Trace((stderr,"\nbit length overflow\n"));
      /* This happens for example on obj2 and pic of the Calgary corpus */

      /* Find the first bit length which could increase: */
      do {
        bits = max_length - 1;
        while (s.bl_count[bits] === 0) { bits--; }
        s.bl_count[bits]--;      /* move one leaf down the tree */
        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
        s.bl_count[max_length]--;
        /* The brother of the overflow item also moves one step up,
         * but this does not affect bl_count[max_length]
         */
        overflow -= 2;
      } while (overflow > 0);

      /* Now recompute all bit lengths, scanning in increasing frequency.
       * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
       * lengths instead of fixing only the wrong ones. This idea is taken
       * from 'ar' written by Haruhiko Okumura.)
       */
      for (bits = max_length; bits !== 0; bits--) {
        n = s.bl_count[bits];
        while (n !== 0) {
          m = s.heap[--h];
          if (m > max_code) { continue; }
          if (tree[m * 2 + 1]/*.Len*/ !== bits) {
            // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
            s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
            tree[m * 2 + 1]/*.Len*/ = bits;
          }
          n--;
        }
      }
    };


    /* ===========================================================================
     * Generate the codes for a given tree and bit counts (which need not be
     * optimal).
     * IN assertion: the array bl_count contains the bit length statistics for
     * the given tree and the field len is set for all tree elements.
     * OUT assertion: the field code is set for all tree elements of non
     *     zero code length.
     */
    const gen_codes = (tree, max_code, bl_count) =>
    //    ct_data *tree;             /* the tree to decorate */
    //    int max_code;              /* largest code with non zero frequency */
    //    ushf *bl_count;            /* number of codes at each bit length */
    {
      const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
      let code = 0;              /* running code value */
      let bits;                  /* bit index */
      let n;                     /* code index */

      /* The distribution counts are first used to generate the code values
       * without bit reversal.
       */
      for (bits = 1; bits <= MAX_BITS$1; bits++) {
        next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
      }
      /* Check that the bit counts in bl_count are consistent. The last code
       * must be all ones.
       */
      //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
      //        "inconsistent bit counts");
      //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

      for (n = 0;  n <= max_code; n++) {
        let len = tree[n * 2 + 1]/*.Len*/;
        if (len === 0) { continue; }
        /* Now reverse the bits */
        tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

        //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
        //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
      }
    };


    /* ===========================================================================
     * Initialize the various 'constant' tables.
     */
    const tr_static_init = () => {

      let n;        /* iterates over tree elements */
      let bits;     /* bit counter */
      let length;   /* length value */
      let code;     /* code value */
      let dist;     /* distance index */
      const bl_count = new Array(MAX_BITS$1 + 1);
      /* number of codes at each bit length for an optimal tree */

      // do check in _tr_init()
      //if (static_init_done) return;

      /* For some embedded targets, global variables are not initialized: */
    /*#ifdef NO_INIT_GLOBAL_POINTERS
      static_l_desc.static_tree = static_ltree;
      static_l_desc.extra_bits = extra_lbits;
      static_d_desc.static_tree = static_dtree;
      static_d_desc.extra_bits = extra_dbits;
      static_bl_desc.extra_bits = extra_blbits;
    #endif*/

      /* Initialize the mapping length (0..255) -> length code (0..28) */
      length = 0;
      for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
        base_length[code] = length;
        for (n = 0; n < (1 << extra_lbits[code]); n++) {
          _length_code[length++] = code;
        }
      }
      //Assert (length == 256, "tr_static_init: length != 256");
      /* Note that the length 255 (match length 258) can be represented
       * in two different ways: code 284 + 5 bits or code 285, so we
       * overwrite length_code[255] to use the best encoding:
       */
      _length_code[length - 1] = code;

      /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
      dist = 0;
      for (code = 0; code < 16; code++) {
        base_dist[code] = dist;
        for (n = 0; n < (1 << extra_dbits[code]); n++) {
          _dist_code[dist++] = code;
        }
      }
      //Assert (dist == 256, "tr_static_init: dist != 256");
      dist >>= 7; /* from now on, all distances are divided by 128 */
      for (; code < D_CODES$1; code++) {
        base_dist[code] = dist << 7;
        for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
          _dist_code[256 + dist++] = code;
        }
      }
      //Assert (dist == 256, "tr_static_init: 256+dist != 512");

      /* Construct the codes of the static literal tree */
      for (bits = 0; bits <= MAX_BITS$1; bits++) {
        bl_count[bits] = 0;
      }

      n = 0;
      while (n <= 143) {
        static_ltree[n * 2 + 1]/*.Len*/ = 8;
        n++;
        bl_count[8]++;
      }
      while (n <= 255) {
        static_ltree[n * 2 + 1]/*.Len*/ = 9;
        n++;
        bl_count[9]++;
      }
      while (n <= 279) {
        static_ltree[n * 2 + 1]/*.Len*/ = 7;
        n++;
        bl_count[7]++;
      }
      while (n <= 287) {
        static_ltree[n * 2 + 1]/*.Len*/ = 8;
        n++;
        bl_count[8]++;
      }
      /* Codes 286 and 287 do not exist, but we must include them in the
       * tree construction to get a canonical Huffman tree (longest code
       * all ones)
       */
      gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

      /* The static distance tree is trivial: */
      for (n = 0; n < D_CODES$1; n++) {
        static_dtree[n * 2 + 1]/*.Len*/ = 5;
        static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
      }

      // Now data ready and we can init static trees
      static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
      static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);
      static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);

      //static_init_done = true;
    };


    /* ===========================================================================
     * Initialize a new block.
     */
    const init_block = (s) => {

      let n; /* iterates over tree elements */

      /* Initialize the trees. */
      for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
      for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
      for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

      s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
      s.opt_len = s.static_len = 0;
      s.last_lit = s.matches = 0;
    };


    /* ===========================================================================
     * Flush the bit buffer and align the output on a byte boundary
     */
    const bi_windup = (s) =>
    {
      if (s.bi_valid > 8) {
        put_short(s, s.bi_buf);
      } else if (s.bi_valid > 0) {
        //put_byte(s, (Byte)s->bi_buf);
        s.pending_buf[s.pending++] = s.bi_buf;
      }
      s.bi_buf = 0;
      s.bi_valid = 0;
    };

    /* ===========================================================================
     * Copy a stored block, storing first the length and its
     * one's complement if requested.
     */
    const copy_block = (s, buf, len, header) =>
    //DeflateState *s;
    //charf    *buf;    /* the input data */
    //unsigned len;     /* its length */
    //int      header;  /* true if block header must be written */
    {
      bi_windup(s);        /* align on byte boundary */

      if (header) {
        put_short(s, len);
        put_short(s, ~len);
      }
    //  while (len--) {
    //    put_byte(s, *buf++);
    //  }
      s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);
      s.pending += len;
    };

    /* ===========================================================================
     * Compares to subtrees, using the tree depth as tie breaker when
     * the subtrees have equal frequency. This minimizes the worst case length.
     */
    const smaller = (tree, n, m, depth) => {

      const _n2 = n * 2;
      const _m2 = m * 2;
      return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
             (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
    };

    /* ===========================================================================
     * Restore the heap property by moving down the tree starting at node k,
     * exchanging a node with the smallest of its two sons if necessary, stopping
     * when the heap property is re-established (each father smaller than its
     * two sons).
     */
    const pqdownheap = (s, tree, k) =>
    //    deflate_state *s;
    //    ct_data *tree;  /* the tree to restore */
    //    int k;               /* node to move down */
    {
      const v = s.heap[k];
      let j = k << 1;  /* left son of k */
      while (j <= s.heap_len) {
        /* Set j to the smallest of the two sons: */
        if (j < s.heap_len &&
          smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
          j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s.heap[j], s.depth)) { break; }

        /* Exchange v with the smallest son */
        s.heap[k] = s.heap[j];
        k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
      }
      s.heap[k] = v;
    };


    // inlined manually
    // const SMALLEST = 1;

    /* ===========================================================================
     * Send the block data compressed using the given Huffman trees
     */
    const compress_block = (s, ltree, dtree) =>
    //    deflate_state *s;
    //    const ct_data *ltree; /* literal tree */
    //    const ct_data *dtree; /* distance tree */
    {
      let dist;           /* distance of matched string */
      let lc;             /* match length or unmatched char (if dist == 0) */
      let lx = 0;         /* running index in l_buf */
      let code;           /* the code to send */
      let extra;          /* number of extra bits to send */

      if (s.last_lit !== 0) {
        do {
          dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
          lc = s.pending_buf[s.l_buf + lx];
          lx++;

          if (dist === 0) {
            send_code(s, lc, ltree); /* send a literal byte */
            //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
          } else {
            /* Here, lc is the match length - MIN_MATCH */
            code = _length_code[lc];
            send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
            extra = extra_lbits[code];
            if (extra !== 0) {
              lc -= base_length[code];
              send_bits(s, lc, extra);       /* send the extra length bits */
            }
            dist--; /* dist is now the match distance - 1 */
            code = d_code(dist);
            //Assert (code < D_CODES, "bad d_code");

            send_code(s, code, dtree);       /* send the distance code */
            extra = extra_dbits[code];
            if (extra !== 0) {
              dist -= base_dist[code];
              send_bits(s, dist, extra);   /* send the extra distance bits */
            }
          } /* literal or match pair ? */

          /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
          //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
          //       "pendingBuf overflow");

        } while (lx < s.last_lit);
      }

      send_code(s, END_BLOCK, ltree);
    };


    /* ===========================================================================
     * Construct one Huffman tree and assigns the code bit strings and lengths.
     * Update the total bit length for the current block.
     * IN assertion: the field freq is set for all tree elements.
     * OUT assertions: the fields len and code are set to the optimal bit length
     *     and corresponding code. The length opt_len is updated; static_len is
     *     also updated if stree is not null. The field max_code is set.
     */
    const build_tree = (s, desc) =>
    //    deflate_state *s;
    //    tree_desc *desc; /* the tree descriptor */
    {
      const tree     = desc.dyn_tree;
      const stree    = desc.stat_desc.static_tree;
      const has_stree = desc.stat_desc.has_stree;
      const elems    = desc.stat_desc.elems;
      let n, m;          /* iterate over heap elements */
      let max_code = -1; /* largest code with non zero frequency */
      let node;          /* new node being created */

      /* Construct the initial heap, with least frequent element in
       * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
       * heap[0] is not used.
       */
      s.heap_len = 0;
      s.heap_max = HEAP_SIZE$1;

      for (n = 0; n < elems; n++) {
        if (tree[n * 2]/*.Freq*/ !== 0) {
          s.heap[++s.heap_len] = max_code = n;
          s.depth[n] = 0;

        } else {
          tree[n * 2 + 1]/*.Len*/ = 0;
        }
      }

      /* The pkzip format requires that at least one distance code exists,
       * and that at least one bit should be sent even if there is only one
       * possible code. So to avoid special checks later on we force at least
       * two codes of non zero frequency.
       */
      while (s.heap_len < 2) {
        node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
        tree[node * 2]/*.Freq*/ = 1;
        s.depth[node] = 0;
        s.opt_len--;

        if (has_stree) {
          s.static_len -= stree[node * 2 + 1]/*.Len*/;
        }
        /* node is 0 or 1 so it does not have extra bits */
      }
      desc.max_code = max_code;

      /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
       * establish sub-heaps of increasing lengths:
       */
      for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

      /* Construct the Huffman tree by repeatedly combining the least two
       * frequent nodes.
       */
      node = elems;              /* next internal node of the tree */
      do {
        //pqremove(s, tree, n);  /* n = node of least frequency */
        /*** pqremove ***/
        n = s.heap[1/*SMALLEST*/];
        s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
        pqdownheap(s, tree, 1/*SMALLEST*/);
        /***/

        m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
        s.heap[--s.heap_max] = m;

        /* Create a new node father of n and m */
        tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
        tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

        /* and insert the new node in the heap */
        s.heap[1/*SMALLEST*/] = node++;
        pqdownheap(s, tree, 1/*SMALLEST*/);

      } while (s.heap_len >= 2);

      s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

      /* At this point, the fields freq and dad are set. We can now
       * generate the bit lengths.
       */
      gen_bitlen(s, desc);

      /* The field len is now set, we can generate the bit codes */
      gen_codes(tree, max_code, s.bl_count);
    };


    /* ===========================================================================
     * Scan a literal or distance tree to determine the frequencies of the codes
     * in the bit length tree.
     */
    const scan_tree = (s, tree, max_code) =>
    //    deflate_state *s;
    //    ct_data *tree;   /* the tree to be scanned */
    //    int max_code;    /* and its largest code of non zero frequency */
    {
      let n;                     /* iterates over all tree elements */
      let prevlen = -1;          /* last emitted length */
      let curlen;                /* length of current code */

      let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

      let count = 0;             /* repeat count of the current code */
      let max_count = 7;         /* max repeat count */
      let min_count = 4;         /* min repeat count */

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

        if (++count < max_count && curlen === nextlen) {
          continue;

        } else if (count < min_count) {
          s.bl_tree[curlen * 2]/*.Freq*/ += count;

        } else if (curlen !== 0) {

          if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
          s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

        } else if (count <= 10) {
          s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

        } else {
          s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
        }

        count = 0;
        prevlen = curlen;

        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;

        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;

        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    };


    /* ===========================================================================
     * Send a literal or distance tree in compressed form, using the codes in
     * bl_tree.
     */
    const send_tree = (s, tree, max_code) =>
    //    deflate_state *s;
    //    ct_data *tree; /* the tree to be scanned */
    //    int max_code;       /* and its largest code of non zero frequency */
    {
      let n;                     /* iterates over all tree elements */
      let prevlen = -1;          /* last emitted length */
      let curlen;                /* length of current code */

      let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

      let count = 0;             /* repeat count of the current code */
      let max_count = 7;         /* max repeat count */
      let min_count = 4;         /* min repeat count */

      /* tree[max_code+1].Len = -1; */  /* guard already set */
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }

      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

        if (++count < max_count && curlen === nextlen) {
          continue;

        } else if (count < min_count) {
          do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            send_code(s, curlen, s.bl_tree);
            count--;
          }
          //Assert(count >= 3 && count <= 6, " 3_6?");
          send_code(s, REP_3_6, s.bl_tree);
          send_bits(s, count - 3, 2);

        } else if (count <= 10) {
          send_code(s, REPZ_3_10, s.bl_tree);
          send_bits(s, count - 3, 3);

        } else {
          send_code(s, REPZ_11_138, s.bl_tree);
          send_bits(s, count - 11, 7);
        }

        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;

        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;

        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    };


    /* ===========================================================================
     * Construct the Huffman tree for the bit lengths and return the index in
     * bl_order of the last bit length code to send.
     */
    const build_bl_tree = (s) => {

      let max_blindex;  /* index of last bit length code of non zero freq */

      /* Determine the bit length frequencies for literal and distance trees */
      scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
      scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

      /* Build the bit length tree: */
      build_tree(s, s.bl_desc);
      /* opt_len now includes the length of the tree representations, except
       * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
       */

      /* Determine the number of bit length codes to send. The pkzip format
       * requires that at least 4 bit length codes be sent. (appnote.txt says
       * 3 but the actual value used is 4.)
       */
      for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
        if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
          break;
        }
      }
      /* Update opt_len to include the bit length tree and counts */
      s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
      //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
      //        s->opt_len, s->static_len));

      return max_blindex;
    };


    /* ===========================================================================
     * Send the header for a block using dynamic Huffman trees: the counts, the
     * lengths of the bit length codes, the literal tree and the distance tree.
     * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
     */
    const send_all_trees = (s, lcodes, dcodes, blcodes) =>
    //    deflate_state *s;
    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
    {
      let rank;                    /* index in bl_order */

      //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
      //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
      //        "too many codes");
      //Tracev((stderr, "\nbl counts: "));
      send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
      send_bits(s, dcodes - 1,   5);
      send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
      for (rank = 0; rank < blcodes; rank++) {
        //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
      }
      //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

      send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
      //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

      send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
      //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
    };


    /* ===========================================================================
     * Check if the data type is TEXT or BINARY, using the following algorithm:
     * - TEXT if the two conditions below are satisfied:
     *    a) There are no non-portable control characters belonging to the
     *       "black list" (0..6, 14..25, 28..31).
     *    b) There is at least one printable character belonging to the
     *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
     * - BINARY otherwise.
     * - The following partially-portable control characters form a
     *   "gray list" that is ignored in this detection algorithm:
     *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
     * IN assertion: the fields Freq of dyn_ltree are set.
     */
    const detect_data_type = (s) => {
      /* black_mask is the bit mask of black-listed bytes
       * set bits 0..6, 14..25, and 28..31
       * 0xf3ffc07f = binary 11110011111111111100000001111111
       */
      let black_mask = 0xf3ffc07f;
      let n;

      /* Check for non-textual ("black-listed") bytes. */
      for (n = 0; n <= 31; n++, black_mask >>>= 1) {
        if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
          return Z_BINARY;
        }
      }

      /* Check for textual ("white-listed") bytes. */
      if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
          s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
        return Z_TEXT;
      }
      for (n = 32; n < LITERALS$1; n++) {
        if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
          return Z_TEXT;
        }
      }

      /* There are no "black-listed" or "white-listed" bytes:
       * this stream either is empty or has tolerated ("gray-listed") bytes only.
       */
      return Z_BINARY;
    };


    let static_init_done = false;

    /* ===========================================================================
     * Initialize the tree data structures for a new zlib stream.
     */
    const _tr_init$1 = (s) =>
    {

      if (!static_init_done) {
        tr_static_init();
        static_init_done = true;
      }

      s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
      s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
      s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

      s.bi_buf = 0;
      s.bi_valid = 0;

      /* Initialize the first block of the first file: */
      init_block(s);
    };


    /* ===========================================================================
     * Send a stored block
     */
    const _tr_stored_block$1 = (s, buf, stored_len, last) =>
    //DeflateState *s;
    //charf *buf;       /* input block */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    {
      send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
      copy_block(s, buf, stored_len, true); /* with header */
    };


    /* ===========================================================================
     * Send one empty static block to give enough lookahead for inflate.
     * This takes 10 bits, of which 7 may remain in the bit buffer.
     */
    const _tr_align$1 = (s) => {
      send_bits(s, STATIC_TREES << 1, 3);
      send_code(s, END_BLOCK, static_ltree);
      bi_flush(s);
    };


    /* ===========================================================================
     * Determine the best encoding for the current block: dynamic trees, static
     * trees or store, and output the encoded block to the zip file.
     */
    const _tr_flush_block$1 = (s, buf, stored_len, last) =>
    //DeflateState *s;
    //charf *buf;       /* input block, or NULL if too old */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    {
      let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
      let max_blindex = 0;        /* index of last bit length code of non zero freq */

      /* Build the Huffman trees unless a stored block is forced */
      if (s.level > 0) {

        /* Check if the file is binary or text */
        if (s.strm.data_type === Z_UNKNOWN$1) {
          s.strm.data_type = detect_data_type(s);
        }

        /* Construct the literal and distance trees */
        build_tree(s, s.l_desc);
        // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));

        build_tree(s, s.d_desc);
        // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        /* At this point, opt_len and static_len are the total bit lengths of
         * the compressed block data, excluding the tree representations.
         */

        /* Build the bit length tree for the above two trees, and get the index
         * in bl_order of the last bit length code to send.
         */
        max_blindex = build_bl_tree(s);

        /* Determine the best encoding. Compute the block lengths in bytes. */
        opt_lenb = (s.opt_len + 3 + 7) >>> 3;
        static_lenb = (s.static_len + 3 + 7) >>> 3;

        // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
        //        s->last_lit));

        if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

      } else {
        // Assert(buf != (char*)0, "lost buf");
        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
      }

      if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
        /* 4: two words for the lengths */

        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
         * transform a block into a stored block.
         */
        _tr_stored_block$1(s, buf, stored_len, last);

      } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {

        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
        compress_block(s, static_ltree, static_dtree);

      } else {
        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
        compress_block(s, s.dyn_ltree, s.dyn_dtree);
      }
      // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
      /* The above check is made mod 2^32, for files larger than 512 MB
       * and uLong implemented on 32 bits.
       */
      init_block(s);

      if (last) {
        bi_windup(s);
      }
      // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
      //       s->compressed_len-7*last));
    };

    /* ===========================================================================
     * Save the match info and tally the frequency counts. Return true if
     * the current block must be flushed.
     */
    const _tr_tally$1 = (s, dist, lc) =>
    //    deflate_state *s;
    //    unsigned dist;  /* distance of matched string */
    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
    {
      //let out_length, in_length, dcode;

      s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
      s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

      s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
      s.last_lit++;

      if (dist === 0) {
        /* lc is the unmatched char */
        s.dyn_ltree[lc * 2]/*.Freq*/++;
      } else {
        s.matches++;
        /* Here, lc is the match length - MIN_MATCH */
        dist--;             /* dist = match distance - 1 */
        //Assert((ush)dist < (ush)MAX_DIST(s) &&
        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
        //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

        s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;
        s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
      }

    // (!) This block is disabled in zlib defaults,
    // don't enable it for binary compatibility

    //#ifdef TRUNCATE_BLOCK
    //  /* Try to guess if it is profitable to stop the current block here */
    //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
    //    /* Compute an upper bound for the compressed length */
    //    out_length = s.last_lit*8;
    //    in_length = s.strstart - s.block_start;
    //
    //    for (dcode = 0; dcode < D_CODES; dcode++) {
    //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
    //    }
    //    out_length >>>= 3;
    //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
    //    //       s->last_lit, in_length, out_length,
    //    //       100L - out_length*100L/in_length));
    //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
    //      return true;
    //    }
    //  }
    //#endif

      return (s.last_lit === s.lit_bufsize - 1);
      /* We avoid equality with lit_bufsize because of wraparound at 64K
       * on 16 bit machines and because stored blocks are restricted to
       * 64K-1 bytes.
       */
    };

    var _tr_init_1  = _tr_init$1;
    var _tr_stored_block_1 = _tr_stored_block$1;
    var _tr_flush_block_1  = _tr_flush_block$1;
    var _tr_tally_1 = _tr_tally$1;
    var _tr_align_1 = _tr_align$1;

    var trees = {
    	_tr_init: _tr_init_1,
    	_tr_stored_block: _tr_stored_block_1,
    	_tr_flush_block: _tr_flush_block_1,
    	_tr_tally: _tr_tally_1,
    	_tr_align: _tr_align_1
    };

    // Note: adler32 takes 12% for level 0 and 2% for level 6.
    // It isn't worth it to make additional optimizations as in original.
    // Small size is preferable.

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    const adler32 = (adler, buf, len, pos) => {
      let s1 = (adler & 0xffff) |0,
          s2 = ((adler >>> 16) & 0xffff) |0,
          n = 0;

      while (len !== 0) {
        // Set limit ~ twice less than 5552, to keep
        // s2 in 31-bits, because we force signed ints.
        // in other case %= will fail.
        n = len > 2000 ? 2000 : len;
        len -= n;

        do {
          s1 = (s1 + buf[pos++]) |0;
          s2 = (s2 + s1) |0;
        } while (--n);

        s1 %= 65521;
        s2 %= 65521;
      }

      return (s1 | (s2 << 16)) |0;
    };


    var adler32_1 = adler32;

    // Note: we can't get significant speed boost here.
    // So write code to minimize size - no pregenerated tables
    // and array tools dependencies.

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    // Use ordinary array, since untyped makes no boost here
    const makeTable = () => {
      let c, table = [];

      for (var n = 0; n < 256; n++) {
        c = n;
        for (var k = 0; k < 8; k++) {
          c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        table[n] = c;
      }

      return table;
    };

    // Create table on load. Just 255 signed longs. Not a problem.
    const crcTable = new Uint32Array(makeTable());


    const crc32 = (crc, buf, len, pos) => {
      const t = crcTable;
      const end = pos + len;

      crc ^= -1;

      for (let i = pos; i < end; i++) {
        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
      }

      return (crc ^ (-1)); // >>> 0;
    };


    var crc32_1 = crc32;

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    var messages = {
      2:      'need dictionary',     /* Z_NEED_DICT       2  */
      1:      'stream end',          /* Z_STREAM_END      1  */
      0:      '',                    /* Z_OK              0  */
      '-1':   'file error',          /* Z_ERRNO         (-1) */
      '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
      '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
      '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
      '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
      '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    var constants$2 = {

      /* Allowed flush values; see deflate() and inflate() below for details */
      Z_NO_FLUSH:         0,
      Z_PARTIAL_FLUSH:    1,
      Z_SYNC_FLUSH:       2,
      Z_FULL_FLUSH:       3,
      Z_FINISH:           4,
      Z_BLOCK:            5,
      Z_TREES:            6,

      /* Return codes for the compression/decompression functions. Negative values
      * are errors, positive values are used for special but normal events.
      */
      Z_OK:               0,
      Z_STREAM_END:       1,
      Z_NEED_DICT:        2,
      Z_ERRNO:           -1,
      Z_STREAM_ERROR:    -2,
      Z_DATA_ERROR:      -3,
      Z_MEM_ERROR:       -4,
      Z_BUF_ERROR:       -5,
      //Z_VERSION_ERROR: -6,

      /* compression levels */
      Z_NO_COMPRESSION:         0,
      Z_BEST_SPEED:             1,
      Z_BEST_COMPRESSION:       9,
      Z_DEFAULT_COMPRESSION:   -1,


      Z_FILTERED:               1,
      Z_HUFFMAN_ONLY:           2,
      Z_RLE:                    3,
      Z_FIXED:                  4,
      Z_DEFAULT_STRATEGY:       0,

      /* Possible values of the data_type field (though see inflate()) */
      Z_BINARY:                 0,
      Z_TEXT:                   1,
      //Z_ASCII:                1, // = Z_TEXT (deprecated)
      Z_UNKNOWN:                2,

      /* The deflate compression method */
      Z_DEFLATED:               8
      //Z_NULL:                 null // Use -1 or null inline, depending on var type
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;




    /* Public constants ==========================================================*/
    /* ===========================================================================*/

    const {
      Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,
      Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,
      Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
      Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
      Z_UNKNOWN,
      Z_DEFLATED: Z_DEFLATED$2
    } = constants$2;

    /*============================================================================*/


    const MAX_MEM_LEVEL = 9;
    /* Maximum value for memLevel in deflateInit2 */
    const MAX_WBITS$1 = 15;
    /* 32K LZ77 window */
    const DEF_MEM_LEVEL = 8;


    const LENGTH_CODES  = 29;
    /* number of length codes, not counting the special END_BLOCK code */
    const LITERALS      = 256;
    /* number of literal bytes 0..255 */
    const L_CODES       = LITERALS + 1 + LENGTH_CODES;
    /* number of Literal or Length codes, including the END_BLOCK code */
    const D_CODES       = 30;
    /* number of distance codes */
    const BL_CODES      = 19;
    /* number of codes used to transfer the bit lengths */
    const HEAP_SIZE     = 2 * L_CODES + 1;
    /* maximum heap size */
    const MAX_BITS  = 15;
    /* All codes must not exceed MAX_BITS bits */

    const MIN_MATCH = 3;
    const MAX_MATCH = 258;
    const MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

    const PRESET_DICT = 0x20;

    const INIT_STATE = 42;
    const EXTRA_STATE = 69;
    const NAME_STATE = 73;
    const COMMENT_STATE = 91;
    const HCRC_STATE = 103;
    const BUSY_STATE = 113;
    const FINISH_STATE = 666;

    const BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
    const BS_BLOCK_DONE     = 2; /* block flush performed */
    const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
    const BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

    const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

    const err = (strm, errorCode) => {
      strm.msg = messages[errorCode];
      return errorCode;
    };

    const rank = (f) => {
      return ((f) << 1) - ((f) > 4 ? 9 : 0);
    };

    const zero = (buf) => {
      let len = buf.length; while (--len >= 0) { buf[len] = 0; }
    };


    /* eslint-disable new-cap */
    let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
    // This hash causes less collisions, https://github.com/nodeca/pako/issues/135
    // But breaks binary compatibility
    //let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
    let HASH = HASH_ZLIB;

    /* =========================================================================
     * Flush as much pending output as possible. All deflate() output goes
     * through this function so some applications may wish to modify it
     * to avoid allocating a large strm->output buffer and copying into it.
     * (See also read_buf()).
     */
    const flush_pending = (strm) => {
      const s = strm.state;

      //_tr_flush_bits(s);
      let len = s.pending;
      if (len > strm.avail_out) {
        len = strm.avail_out;
      }
      if (len === 0) { return; }

      strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
      strm.next_out += len;
      s.pending_out += len;
      strm.total_out += len;
      strm.avail_out -= len;
      s.pending -= len;
      if (s.pending === 0) {
        s.pending_out = 0;
      }
    };


    const flush_block_only = (s, last) => {
      _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
      s.block_start = s.strstart;
      flush_pending(s.strm);
    };


    const put_byte = (s, b) => {
      s.pending_buf[s.pending++] = b;
    };


    /* =========================================================================
     * Put a short in the pending buffer. The 16-bit value is put in MSB order.
     * IN assertion: the stream state is correct and there is enough room in
     * pending_buf.
     */
    const putShortMSB = (s, b) => {

      //  put_byte(s, (Byte)(b >> 8));
    //  put_byte(s, (Byte)(b & 0xff));
      s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
      s.pending_buf[s.pending++] = b & 0xff;
    };


    /* ===========================================================================
     * Read a new buffer from the current input stream, update the adler32
     * and total number of bytes read.  All deflate() input goes through
     * this function so some applications may wish to modify it to avoid
     * allocating a large strm->input buffer and copying from it.
     * (See also flush_pending()).
     */
    const read_buf = (strm, buf, start, size) => {

      let len = strm.avail_in;

      if (len > size) { len = size; }
      if (len === 0) { return 0; }

      strm.avail_in -= len;

      // zmemcpy(buf, strm->next_in, len);
      buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
      if (strm.state.wrap === 1) {
        strm.adler = adler32_1(strm.adler, buf, len, start);
      }

      else if (strm.state.wrap === 2) {
        strm.adler = crc32_1(strm.adler, buf, len, start);
      }

      strm.next_in += len;
      strm.total_in += len;

      return len;
    };


    /* ===========================================================================
     * Set match_start to the longest match starting at the given string and
     * return its length. Matches shorter or equal to prev_length are discarded,
     * in which case the result is equal to prev_length and match_start is
     * garbage.
     * IN assertions: cur_match is the head of the hash chain for the current
     *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
     * OUT assertion: the match length is not greater than s->lookahead.
     */
    const longest_match = (s, cur_match) => {

      let chain_length = s.max_chain_length;      /* max hash chain length */
      let scan = s.strstart; /* current string */
      let match;                       /* matched string */
      let len;                           /* length of current match */
      let best_len = s.prev_length;              /* best match length so far */
      let nice_match = s.nice_match;             /* stop if match long enough */
      const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
          s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

      const _win = s.window; // shortcut

      const wmask = s.w_mask;
      const prev  = s.prev;

      /* Stop when cur_match becomes <= limit. To simplify the code,
       * we prevent matches with the string of window index 0.
       */

      const strend = s.strstart + MAX_MATCH;
      let scan_end1  = _win[scan + best_len - 1];
      let scan_end   = _win[scan + best_len];

      /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
       * It is easy to get rid of this optimization if necessary.
       */
      // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

      /* Do not waste too much time if we already have a good match: */
      if (s.prev_length >= s.good_match) {
        chain_length >>= 2;
      }
      /* Do not look for matches beyond the end of the input. This is necessary
       * to make deflate deterministic.
       */
      if (nice_match > s.lookahead) { nice_match = s.lookahead; }

      // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

      do {
        // Assert(cur_match < s->strstart, "no future");
        match = cur_match;

        /* Skip to next match if the match length cannot increase
         * or if the match length is less than 2.  Note that the checks below
         * for insufficient lookahead only occur occasionally for performance
         * reasons.  Therefore uninitialized memory will be accessed, and
         * conditional jumps will be made that depend on those values.
         * However the length of the match is limited to the lookahead, so
         * the output of deflate is not affected by the uninitialized values.
         */

        if (_win[match + best_len]     !== scan_end  ||
            _win[match + best_len - 1] !== scan_end1 ||
            _win[match]                !== _win[scan] ||
            _win[++match]              !== _win[scan + 1]) {
          continue;
        }

        /* The check at best_len-1 can be removed because it will be made
         * again later. (This heuristic is not always a win.)
         * It is not necessary to compare scan[2] and match[2] since they
         * are always equal when the other bytes match, given that
         * the hash keys are equal and that HASH_BITS >= 8.
         */
        scan += 2;
        match++;
        // Assert(*scan == *match, "match[2]?");

        /* We check for insufficient lookahead only every 8th comparison;
         * the 256th check will be made at strstart+258.
         */
        do {
          /*jshint noempty:false*/
        } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 scan < strend);

        // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

        len = MAX_MATCH - (strend - scan);
        scan = strend - MAX_MATCH;

        if (len > best_len) {
          s.match_start = cur_match;
          best_len = len;
          if (len >= nice_match) {
            break;
          }
          scan_end1  = _win[scan + best_len - 1];
          scan_end   = _win[scan + best_len];
        }
      } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

      if (best_len <= s.lookahead) {
        return best_len;
      }
      return s.lookahead;
    };


    /* ===========================================================================
     * Fill the window when the lookahead becomes insufficient.
     * Updates strstart and lookahead.
     *
     * IN assertion: lookahead < MIN_LOOKAHEAD
     * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
     *    At least one byte has been read, or avail_in == 0; reads are
     *    performed for at least two bytes (required for the zip translate_eol
     *    option -- not supported here).
     */
    const fill_window = (s) => {

      const _w_size = s.w_size;
      let p, n, m, more, str;

      //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

      do {
        more = s.window_size - s.lookahead - s.strstart;

        // JS ints have 32 bit, block below not needed
        /* Deal with !@#$% 64K limit: */
        //if (sizeof(int) <= 2) {
        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
        //        more = wsize;
        //
        //  } else if (more == (unsigned)(-1)) {
        //        /* Very unlikely, but possible on 16 bit machine if
        //         * strstart == 0 && lookahead == 1 (input done a byte at time)
        //         */
        //        more--;
        //    }
        //}


        /* If the window is almost full and there is insufficient lookahead,
         * move the upper half to the lower one to make room in the upper half.
         */
        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

          s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);
          s.match_start -= _w_size;
          s.strstart -= _w_size;
          /* we now have strstart >= MAX_DIST */
          s.block_start -= _w_size;

          /* Slide the hash table (could be avoided with 32 bit values
           at the expense of memory usage). We slide even when level == 0
           to keep the hash table consistent if we switch back to level > 0
           later. (Using level 0 permanently is not an optimal usage of
           zlib, so we don't care about this pathological case.)
           */

          n = s.hash_size;
          p = n;

          do {
            m = s.head[--p];
            s.head[p] = (m >= _w_size ? m - _w_size : 0);
          } while (--n);

          n = _w_size;
          p = n;

          do {
            m = s.prev[--p];
            s.prev[p] = (m >= _w_size ? m - _w_size : 0);
            /* If n is not on any hash chain, prev[n] is garbage but
             * its value will never be used.
             */
          } while (--n);

          more += _w_size;
        }
        if (s.strm.avail_in === 0) {
          break;
        }

        /* If there was no sliding:
         *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
         *    more == window_size - lookahead - strstart
         * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
         * => more >= window_size - 2*WSIZE + 2
         * In the BIG_MEM or MMAP case (not yet supported),
         *   window_size == input_size + MIN_LOOKAHEAD  &&
         *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
         * Otherwise, window_size == 2*WSIZE so more >= 2.
         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
         */
        //Assert(more >= 2, "more < 2");
        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
        s.lookahead += n;

        /* Initialize the hash value now that we have some input: */
        if (s.lookahead + s.insert >= MIN_MATCH) {
          str = s.strstart - s.insert;
          s.ins_h = s.window[str];

          /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
          s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
    //#if MIN_MATCH != 3
    //        Call update_hash() MIN_MATCH-3 more times
    //#endif
          while (s.insert) {
            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
            s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
            s.insert--;
            if (s.lookahead + s.insert < MIN_MATCH) {
              break;
            }
          }
        }
        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
         * but this is not important since only literal bytes will be emitted.
         */

      } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

      /* If the WIN_INIT bytes after the end of the current data have never been
       * written, then zero those bytes in order to avoid memory check reports of
       * the use of uninitialized (or uninitialised as Julian writes) bytes by
       * the longest match routines.  Update the high water mark for the next
       * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
       * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
       */
    //  if (s.high_water < s.window_size) {
    //    const curr = s.strstart + s.lookahead;
    //    let init = 0;
    //
    //    if (s.high_water < curr) {
    //      /* Previous high water mark below current data -- zero WIN_INIT
    //       * bytes or up to end of window, whichever is less.
    //       */
    //      init = s.window_size - curr;
    //      if (init > WIN_INIT)
    //        init = WIN_INIT;
    //      zmemzero(s->window + curr, (unsigned)init);
    //      s->high_water = curr + init;
    //    }
    //    else if (s->high_water < (ulg)curr + WIN_INIT) {
    //      /* High water mark at or above current data, but below current data
    //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
    //       * to end of window, whichever is less.
    //       */
    //      init = (ulg)curr + WIN_INIT - s->high_water;
    //      if (init > s->window_size - s->high_water)
    //        init = s->window_size - s->high_water;
    //      zmemzero(s->window + s->high_water, (unsigned)init);
    //      s->high_water += init;
    //    }
    //  }
    //
    //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
    //    "not enough room for search");
    };

    /* ===========================================================================
     * Copy without compression as much as possible from the input stream, return
     * the current block state.
     * This function does not insert new strings in the dictionary since
     * uncompressible data is probably not useful. This function is used
     * only for the level=0 compression option.
     * NOTE: this function should be optimized to avoid extra copying from
     * window to pending_buf.
     */
    const deflate_stored = (s, flush) => {

      /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
       * to pending_buf_size, and each stored block has a 5 byte header:
       */
      let max_block_size = 0xffff;

      if (max_block_size > s.pending_buf_size - 5) {
        max_block_size = s.pending_buf_size - 5;
      }

      /* Copy as much as possible from input to output: */
      for (;;) {
        /* Fill the window as much as possible: */
        if (s.lookahead <= 1) {

          //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
          //  s->block_start >= (long)s->w_size, "slide too late");
    //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
    //        s.block_start >= s.w_size)) {
    //        throw  new Error("slide too late");
    //      }

          fill_window(s);
          if (s.lookahead === 0 && flush === Z_NO_FLUSH$2) {
            return BS_NEED_MORE;
          }

          if (s.lookahead === 0) {
            break;
          }
          /* flush the current block */
        }
        //Assert(s->block_start >= 0L, "block gone");
    //    if (s.block_start < 0) throw new Error("block gone");

        s.strstart += s.lookahead;
        s.lookahead = 0;

        /* Emit a stored block if pending_buf will be full: */
        const max_start = s.block_start + max_block_size;

        if (s.strstart === 0 || s.strstart >= max_start) {
          /* strstart == 0 is possible when wraparound on 16-bit machine */
          s.lookahead = s.strstart - max_start;
          s.strstart = max_start;
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/


        }
        /* Flush if we may have to slide, otherwise block_start may become
         * negative and the data will be gone:
         */
        if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }

      s.insert = 0;

      if (flush === Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }

      if (s.strstart > s.block_start) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

      return BS_NEED_MORE;
    };

    /* ===========================================================================
     * Compress as much as possible from the input stream, return the current
     * block state.
     * This function does not perform lazy evaluation of matches and inserts
     * new strings in the dictionary only for unmatched strings or for short
     * matches. It is used only for the fast compression options.
     */
    const deflate_fast = (s, flush) => {

      let hash_head;        /* head of the hash chain */
      let bflush;           /* set if current block must be flushed */

      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break; /* flush the current block */
          }
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = 0/*NIL*/;
        if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }

        /* Find the longest match, discarding those <= prev_length.
         * At this point we have always match_length < MIN_MATCH
         */
        if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
          /* To simplify the code, we prevent matches with the string
           * of window index 0 (in particular we have to avoid a match
           * of the string with itself at the start of the input file).
           */
          s.match_length = longest_match(s, hash_head);
          /* longest_match() sets match_start */
        }
        if (s.match_length >= MIN_MATCH) {
          // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

          /*** _tr_tally_dist(s, s.strstart - s.match_start,
                         s.match_length - MIN_MATCH, bflush); ***/
          bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

          s.lookahead -= s.match_length;

          /* Insert new strings in the hash table only if the match length
           * is not too large. This saves time but degrades compression.
           */
          if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
            s.match_length--; /* string at strstart already in table */
            do {
              s.strstart++;
              /*** INSERT_STRING(s, s.strstart, hash_head); ***/
              s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
              /***/
              /* strstart never exceeds WSIZE-MAX_MATCH, so there are
               * always MIN_MATCH bytes ahead.
               */
            } while (--s.match_length !== 0);
            s.strstart++;
          } else
          {
            s.strstart += s.match_length;
            s.match_length = 0;
            s.ins_h = s.window[s.strstart];
            /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
            s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);

    //#if MIN_MATCH != 3
    //                Call UPDATE_HASH() MIN_MATCH-3 more times
    //#endif
            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
             * matter since it will be recomputed at next deflate call.
             */
          }
        } else {
          /* No match, output a literal byte */
          //Tracevv((stderr,"%c", s.window[s.strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
          bflush = _tr_tally(s, 0, s.window[s.strstart]);

          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
      if (flush === Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    };

    /* ===========================================================================
     * Same as above, but achieves better compression. We use a lazy
     * evaluation for matches: a match is finally adopted only if there is
     * no better match at the next window position.
     */
    const deflate_slow = (s, flush) => {

      let hash_head;          /* head of hash chain */
      let bflush;              /* set if current block must be flushed */

      let max_insert;

      /* Process the input block. */
      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) { break; } /* flush the current block */
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = 0/*NIL*/;
        if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }

        /* Find the longest match, discarding those <= prev_length.
         */
        s.prev_length = s.match_length;
        s.prev_match = s.match_start;
        s.match_length = MIN_MATCH - 1;

        if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
            s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
          /* To simplify the code, we prevent matches with the string
           * of window index 0 (in particular we have to avoid a match
           * of the string with itself at the start of the input file).
           */
          s.match_length = longest_match(s, hash_head);
          /* longest_match() sets match_start */

          if (s.match_length <= 5 &&
             (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

            /* If prev_match is also MIN_MATCH, match_start is garbage
             * but we will ignore the current match anyway.
             */
            s.match_length = MIN_MATCH - 1;
          }
        }
        /* If there was a match at the previous step and the current
         * match is not better, output the previous match:
         */
        if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
          max_insert = s.strstart + s.lookahead - MIN_MATCH;
          /* Do not insert strings in hash table beyond this. */

          //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

          /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                         s.prev_length - MIN_MATCH, bflush);***/
          bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
          /* Insert in hash table all strings up to the end of the match.
           * strstart-1 and strstart are already inserted. If there is not
           * enough lookahead, the last two strings are not inserted in
           * the hash table.
           */
          s.lookahead -= s.prev_length - 1;
          s.prev_length -= 2;
          do {
            if (++s.strstart <= max_insert) {
              /*** INSERT_STRING(s, s.strstart, hash_head); ***/
              s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
              /***/
            }
          } while (--s.prev_length !== 0);
          s.match_available = 0;
          s.match_length = MIN_MATCH - 1;
          s.strstart++;

          if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/
          }

        } else if (s.match_available) {
          /* If there was no match at the previous position, output a
           * single literal. If there was a match but the current match
           * is longer, truncate the previous match to a single literal.
           */
          //Tracevv((stderr,"%c", s->window[s->strstart-1]));
          /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
          bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

          if (bflush) {
            /*** FLUSH_BLOCK_ONLY(s, 0) ***/
            flush_block_only(s, false);
            /***/
          }
          s.strstart++;
          s.lookahead--;
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        } else {
          /* There is no previous match to compare with, wait for
           * the next step to decide.
           */
          s.match_available = 1;
          s.strstart++;
          s.lookahead--;
        }
      }
      //Assert (flush != Z_NO_FLUSH, "no flush?");
      if (s.match_available) {
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

        s.match_available = 0;
      }
      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

      return BS_BLOCK_DONE;
    };


    /* ===========================================================================
     * For Z_RLE, simply look for runs of bytes, generate matches only of distance
     * one.  Do not maintain a hash table.  (It will be regenerated if this run of
     * deflate switches away from Z_RLE.)
     */
    const deflate_rle = (s, flush) => {

      let bflush;            /* set if current block must be flushed */
      let prev;              /* byte at distance one to match */
      let scan, strend;      /* scan goes up to strend for length of run */

      const _win = s.window;

      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the longest run, plus one for the unrolled loop.
         */
        if (s.lookahead <= MAX_MATCH) {
          fill_window(s);
          if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) { break; } /* flush the current block */
        }

        /* See how many times the previous byte repeats */
        s.match_length = 0;
        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
          scan = s.strstart - 1;
          prev = _win[scan];
          if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
            strend = s.strstart + MAX_MATCH;
            do {
              /*jshint noempty:false*/
            } while (prev === _win[++scan] && prev === _win[++scan] &&
                     prev === _win[++scan] && prev === _win[++scan] &&
                     prev === _win[++scan] && prev === _win[++scan] &&
                     prev === _win[++scan] && prev === _win[++scan] &&
                     scan < strend);
            s.match_length = MAX_MATCH - (strend - scan);
            if (s.match_length > s.lookahead) {
              s.match_length = s.lookahead;
            }
          }
          //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
        }

        /* Emit match if have run of MIN_MATCH or longer, else emit literal */
        if (s.match_length >= MIN_MATCH) {
          //check_match(s, s.strstart, s.strstart - 1, s.match_length);

          /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
          bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);

          s.lookahead -= s.match_length;
          s.strstart += s.match_length;
          s.match_length = 0;
        } else {
          /* No match, output a literal byte */
          //Tracevv((stderr,"%c", s->window[s->strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
          bflush = _tr_tally(s, 0, s.window[s.strstart]);

          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    };

    /* ===========================================================================
     * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
     * (It will be regenerated if this run of deflate switches away from Huffman.)
     */
    const deflate_huff = (s, flush) => {

      let bflush;             /* set if current block must be flushed */

      for (;;) {
        /* Make sure that we have a literal to write. */
        if (s.lookahead === 0) {
          fill_window(s);
          if (s.lookahead === 0) {
            if (flush === Z_NO_FLUSH$2) {
              return BS_NEED_MORE;
            }
            break;      /* flush the current block */
          }
        }

        /* Output a literal byte */
        s.match_length = 0;
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    };

    /* Values for max_lazy_match, good_match and max_chain_length, depending on
     * the desired pack level (0..9). The values given below have been tuned to
     * exclude worst case performance for pathological files. Better values may be
     * found for specific files.
     */
    function Config(good_length, max_lazy, nice_length, max_chain, func) {

      this.good_length = good_length;
      this.max_lazy = max_lazy;
      this.nice_length = nice_length;
      this.max_chain = max_chain;
      this.func = func;
    }

    const configuration_table = [
      /*      good lazy nice chain */
      new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
      new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
      new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
      new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

      new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
      new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
      new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
      new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
      new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
      new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
    ];


    /* ===========================================================================
     * Initialize the "longest match" routines for a new zlib stream
     */
    const lm_init = (s) => {

      s.window_size = 2 * s.w_size;

      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);

      /* Set the default configuration parameters:
       */
      s.max_lazy_match = configuration_table[s.level].max_lazy;
      s.good_match = configuration_table[s.level].good_length;
      s.nice_match = configuration_table[s.level].nice_length;
      s.max_chain_length = configuration_table[s.level].max_chain;

      s.strstart = 0;
      s.block_start = 0;
      s.lookahead = 0;
      s.insert = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      s.ins_h = 0;
    };


    function DeflateState() {
      this.strm = null;            /* pointer back to this zlib stream */
      this.status = 0;            /* as the name implies */
      this.pending_buf = null;      /* output still pending */
      this.pending_buf_size = 0;  /* size of pending_buf */
      this.pending_out = 0;       /* next pending byte to output to the stream */
      this.pending = 0;           /* nb of bytes in the pending buffer */
      this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
      this.gzhead = null;         /* gzip header information to write */
      this.gzindex = 0;           /* where in extra, name, or comment */
      this.method = Z_DEFLATED$2; /* can only be DEFLATED */
      this.last_flush = -1;   /* value of flush param for previous deflate call */

      this.w_size = 0;  /* LZ77 window size (32K by default) */
      this.w_bits = 0;  /* log2(w_size)  (8..16) */
      this.w_mask = 0;  /* w_size - 1 */

      this.window = null;
      /* Sliding window. Input bytes are read into the second half of the window,
       * and move to the first half later to keep a dictionary of at least wSize
       * bytes. With this organization, matches are limited to a distance of
       * wSize-MAX_MATCH bytes, but this ensures that IO is always
       * performed with a length multiple of the block size.
       */

      this.window_size = 0;
      /* Actual size of window: 2*wSize, except when the user input buffer
       * is directly used as sliding window.
       */

      this.prev = null;
      /* Link to older string with same hash index. To limit the size of this
       * array to 64K, this link is maintained only for the last 32K strings.
       * An index in this array is thus a window index modulo 32K.
       */

      this.head = null;   /* Heads of the hash chains or NIL. */

      this.ins_h = 0;       /* hash index of string to be inserted */
      this.hash_size = 0;   /* number of elements in hash table */
      this.hash_bits = 0;   /* log2(hash_size) */
      this.hash_mask = 0;   /* hash_size-1 */

      this.hash_shift = 0;
      /* Number of bits by which ins_h must be shifted at each input
       * step. It must be such that after MIN_MATCH steps, the oldest
       * byte no longer takes part in the hash key, that is:
       *   hash_shift * MIN_MATCH >= hash_bits
       */

      this.block_start = 0;
      /* Window position at the beginning of the current output block. Gets
       * negative when the window is moved backwards.
       */

      this.match_length = 0;      /* length of best match */
      this.prev_match = 0;        /* previous match */
      this.match_available = 0;   /* set if previous match exists */
      this.strstart = 0;          /* start of string to insert */
      this.match_start = 0;       /* start of matching string */
      this.lookahead = 0;         /* number of valid bytes ahead in window */

      this.prev_length = 0;
      /* Length of the best match at previous step. Matches not greater than this
       * are discarded. This is used in the lazy match evaluation.
       */

      this.max_chain_length = 0;
      /* To speed up deflation, hash chains are never searched beyond this
       * length.  A higher limit improves compression ratio but degrades the
       * speed.
       */

      this.max_lazy_match = 0;
      /* Attempt to find a better match only when the current match is strictly
       * smaller than this value. This mechanism is used only for compression
       * levels >= 4.
       */
      // That's alias to max_lazy_match, don't use directly
      //this.max_insert_length = 0;
      /* Insert new strings in the hash table only if the match length is not
       * greater than this length. This saves time but degrades compression.
       * max_insert_length is used only for compression levels <= 3.
       */

      this.level = 0;     /* compression level (1..9) */
      this.strategy = 0;  /* favor or force Huffman coding*/

      this.good_match = 0;
      /* Use a faster search when the previous match is longer than this */

      this.nice_match = 0; /* Stop searching when current match exceeds this */

                  /* used by trees.c: */

      /* Didn't use ct_data typedef below to suppress compiler warning */

      // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
      // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
      // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

      // Use flat array of DOUBLE size, with interleaved fata,
      // because JS does not support effective
      this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);
      this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);
      this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);
      zero(this.dyn_ltree);
      zero(this.dyn_dtree);
      zero(this.bl_tree);

      this.l_desc   = null;         /* desc. for literal tree */
      this.d_desc   = null;         /* desc. for distance tree */
      this.bl_desc  = null;         /* desc. for bit length tree */

      //ush bl_count[MAX_BITS+1];
      this.bl_count = new Uint16Array(MAX_BITS + 1);
      /* number of codes at each bit length for an optimal tree */

      //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
      this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
      zero(this.heap);

      this.heap_len = 0;               /* number of elements in the heap */
      this.heap_max = 0;               /* element of largest frequency */
      /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
       * The same heap array is used to build all trees.
       */

      this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
      zero(this.depth);
      /* Depth of each subtree used as tie breaker for trees of equal frequency
       */

      this.l_buf = 0;          /* buffer index for literals or lengths */

      this.lit_bufsize = 0;
      /* Size of match buffer for literals/lengths.  There are 4 reasons for
       * limiting lit_bufsize to 64K:
       *   - frequencies can be kept in 16 bit counters
       *   - if compression is not successful for the first block, all input
       *     data is still in the window so we can still emit a stored block even
       *     when input comes from standard input.  (This can also be done for
       *     all blocks if lit_bufsize is not greater than 32K.)
       *   - if compression is not successful for a file smaller than 64K, we can
       *     even emit a stored file instead of a stored block (saving 5 bytes).
       *     This is applicable only for zip (not gzip or zlib).
       *   - creating new Huffman trees less frequently may not provide fast
       *     adaptation to changes in the input data statistics. (Take for
       *     example a binary file with poorly compressible code followed by
       *     a highly compressible string table.) Smaller buffer sizes give
       *     fast adaptation but have of course the overhead of transmitting
       *     trees more frequently.
       *   - I can't count above 4
       */

      this.last_lit = 0;      /* running index in l_buf */

      this.d_buf = 0;
      /* Buffer index for distances. To simplify the code, d_buf and l_buf have
       * the same number of elements. To use different lengths, an extra flag
       * array would be necessary.
       */

      this.opt_len = 0;       /* bit length of current block with optimal trees */
      this.static_len = 0;    /* bit length of current block with static trees */
      this.matches = 0;       /* number of string matches in current block */
      this.insert = 0;        /* bytes at end of window left to insert */


      this.bi_buf = 0;
      /* Output buffer. bits are inserted starting at the bottom (least
       * significant bits).
       */
      this.bi_valid = 0;
      /* Number of valid bits in bi_buf.  All bits above the last valid bit
       * are always zero.
       */

      // Used for window memory init. We safely ignore it for JS. That makes
      // sense only for pointers and memory check tools.
      //this.high_water = 0;
      /* High water mark offset in window for initialized bytes -- bytes above
       * this are set to zero in order to avoid memory check warnings when
       * longest match routines access bytes past the input.  This is then
       * updated to the new high water mark.
       */
    }


    const deflateResetKeep = (strm) => {

      if (!strm || !strm.state) {
        return err(strm, Z_STREAM_ERROR$2);
      }

      strm.total_in = strm.total_out = 0;
      strm.data_type = Z_UNKNOWN;

      const s = strm.state;
      s.pending = 0;
      s.pending_out = 0;

      if (s.wrap < 0) {
        s.wrap = -s.wrap;
        /* was made negative by deflate(..., Z_FINISH); */
      }
      s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
      strm.adler = (s.wrap === 2) ?
        0  // crc32(0, Z_NULL, 0)
      :
        1; // adler32(0, Z_NULL, 0)
      s.last_flush = Z_NO_FLUSH$2;
      _tr_init(s);
      return Z_OK$3;
    };


    const deflateReset = (strm) => {

      const ret = deflateResetKeep(strm);
      if (ret === Z_OK$3) {
        lm_init(strm.state);
      }
      return ret;
    };


    const deflateSetHeader = (strm, head) => {

      if (!strm || !strm.state) { return Z_STREAM_ERROR$2; }
      if (strm.state.wrap !== 2) { return Z_STREAM_ERROR$2; }
      strm.state.gzhead = head;
      return Z_OK$3;
    };


    const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {

      if (!strm) { // === Z_NULL
        return Z_STREAM_ERROR$2;
      }
      let wrap = 1;

      if (level === Z_DEFAULT_COMPRESSION$1) {
        level = 6;
      }

      if (windowBits < 0) { /* suppress zlib wrapper */
        wrap = 0;
        windowBits = -windowBits;
      }

      else if (windowBits > 15) {
        wrap = 2;           /* write gzip wrapper instead */
        windowBits -= 16;
      }


      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
        strategy < 0 || strategy > Z_FIXED) {
        return err(strm, Z_STREAM_ERROR$2);
      }


      if (windowBits === 8) {
        windowBits = 9;
      }
      /* until 256-byte window bug fixed */

      const s = new DeflateState();

      strm.state = s;
      s.strm = strm;

      s.wrap = wrap;
      s.gzhead = null;
      s.w_bits = windowBits;
      s.w_size = 1 << s.w_bits;
      s.w_mask = s.w_size - 1;

      s.hash_bits = memLevel + 7;
      s.hash_size = 1 << s.hash_bits;
      s.hash_mask = s.hash_size - 1;
      s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

      s.window = new Uint8Array(s.w_size * 2);
      s.head = new Uint16Array(s.hash_size);
      s.prev = new Uint16Array(s.w_size);

      // Don't need mem init magic for JS.
      //s.high_water = 0;  /* nothing written to s->window yet */

      s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

      s.pending_buf_size = s.lit_bufsize * 4;

      //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
      //s->pending_buf = (uchf *) overlay;
      s.pending_buf = new Uint8Array(s.pending_buf_size);

      // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
      //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
      s.d_buf = 1 * s.lit_bufsize;

      //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
      s.l_buf = (1 + 2) * s.lit_bufsize;

      s.level = level;
      s.strategy = strategy;
      s.method = method;

      return deflateReset(strm);
    };

    const deflateInit = (strm, level) => {

      return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
    };


    const deflate$2 = (strm, flush) => {

      let beg, val; // for gzip header write only

      if (!strm || !strm.state ||
        flush > Z_BLOCK$1 || flush < 0) {
        return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
      }

      const s = strm.state;

      if (!strm.output ||
          (!strm.input && strm.avail_in !== 0) ||
          (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {
        return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);
      }

      s.strm = strm; /* just in case */
      const old_flush = s.last_flush;
      s.last_flush = flush;

      /* Write the header */
      if (s.status === INIT_STATE) {

        if (s.wrap === 2) { // GZIP header
          strm.adler = 0;  //crc32(0L, Z_NULL, 0);
          put_byte(s, 31);
          put_byte(s, 139);
          put_byte(s, 8);
          if (!s.gzhead) { // s->gzhead == Z_NULL
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, s.level === 9 ? 2 :
                        (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                         4 : 0));
            put_byte(s, OS_CODE);
            s.status = BUSY_STATE;
          }
          else {
            put_byte(s, (s.gzhead.text ? 1 : 0) +
                        (s.gzhead.hcrc ? 2 : 0) +
                        (!s.gzhead.extra ? 0 : 4) +
                        (!s.gzhead.name ? 0 : 8) +
                        (!s.gzhead.comment ? 0 : 16)
            );
            put_byte(s, s.gzhead.time & 0xff);
            put_byte(s, (s.gzhead.time >> 8) & 0xff);
            put_byte(s, (s.gzhead.time >> 16) & 0xff);
            put_byte(s, (s.gzhead.time >> 24) & 0xff);
            put_byte(s, s.level === 9 ? 2 :
                        (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                         4 : 0));
            put_byte(s, s.gzhead.os & 0xff);
            if (s.gzhead.extra && s.gzhead.extra.length) {
              put_byte(s, s.gzhead.extra.length & 0xff);
              put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
            }
            if (s.gzhead.hcrc) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
            }
            s.gzindex = 0;
            s.status = EXTRA_STATE;
          }
        }
        else // DEFLATE header
        {
          let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;
          let level_flags = -1;

          if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
            level_flags = 0;
          } else if (s.level < 6) {
            level_flags = 1;
          } else if (s.level === 6) {
            level_flags = 2;
          } else {
            level_flags = 3;
          }
          header |= (level_flags << 6);
          if (s.strstart !== 0) { header |= PRESET_DICT; }
          header += 31 - (header % 31);

          s.status = BUSY_STATE;
          putShortMSB(s, header);

          /* Save the adler32 of the preset dictionary: */
          if (s.strstart !== 0) {
            putShortMSB(s, strm.adler >>> 16);
            putShortMSB(s, strm.adler & 0xffff);
          }
          strm.adler = 1; // adler32(0L, Z_NULL, 0);
        }
      }

    //#ifdef GZIP
      if (s.status === EXTRA_STATE) {
        if (s.gzhead.extra/* != Z_NULL*/) {
          beg = s.pending;  /* start of bytes to update crc */

          while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                break;
              }
            }
            put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
            s.gzindex++;
          }
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (s.gzindex === s.gzhead.extra.length) {
            s.gzindex = 0;
            s.status = NAME_STATE;
          }
        }
        else {
          s.status = NAME_STATE;
        }
      }
      if (s.status === NAME_STATE) {
        if (s.gzhead.name/* != Z_NULL*/) {
          beg = s.pending;  /* start of bytes to update crc */
          //int val;

          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            }
            // JS specific: little magic to add zero terminator to end of string
            if (s.gzindex < s.gzhead.name.length) {
              val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);

          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (val === 0) {
            s.gzindex = 0;
            s.status = COMMENT_STATE;
          }
        }
        else {
          s.status = COMMENT_STATE;
        }
      }
      if (s.status === COMMENT_STATE) {
        if (s.gzhead.comment/* != Z_NULL*/) {
          beg = s.pending;  /* start of bytes to update crc */
          //int val;

          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            }
            // JS specific: little magic to add zero terminator to end of string
            if (s.gzindex < s.gzhead.comment.length) {
              val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);

          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (val === 0) {
            s.status = HCRC_STATE;
          }
        }
        else {
          s.status = HCRC_STATE;
        }
      }
      if (s.status === HCRC_STATE) {
        if (s.gzhead.hcrc) {
          if (s.pending + 2 > s.pending_buf_size) {
            flush_pending(strm);
          }
          if (s.pending + 2 <= s.pending_buf_size) {
            put_byte(s, strm.adler & 0xff);
            put_byte(s, (strm.adler >> 8) & 0xff);
            strm.adler = 0; //crc32(0L, Z_NULL, 0);
            s.status = BUSY_STATE;
          }
        }
        else {
          s.status = BUSY_STATE;
        }
      }
    //#endif

      /* Flush as much pending output as possible */
      if (s.pending !== 0) {
        flush_pending(strm);
        if (strm.avail_out === 0) {
          /* Since avail_out is 0, deflate will be called again with
           * more output space, but possibly with both pending and
           * avail_in equal to zero. There won't be anything to do,
           * but this is not an error situation so make sure we
           * return OK instead of BUF_ERROR at next call of deflate:
           */
          s.last_flush = -1;
          return Z_OK$3;
        }

        /* Make sure there is something to do and avoid duplicate consecutive
         * flushes. For repeated and useless calls with Z_FINISH, we keep
         * returning Z_STREAM_END instead of Z_BUF_ERROR.
         */
      } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
        flush !== Z_FINISH$3) {
        return err(strm, Z_BUF_ERROR$1);
      }

      /* User must not provide more input after the first FINISH: */
      if (s.status === FINISH_STATE && strm.avail_in !== 0) {
        return err(strm, Z_BUF_ERROR$1);
      }

      /* Start a new block or continue the current one.
       */
      if (strm.avail_in !== 0 || s.lookahead !== 0 ||
        (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {
        let bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
          (s.strategy === Z_RLE ? deflate_rle(s, flush) :
            configuration_table[s.level].func(s, flush));

        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
          s.status = FINISH_STATE;
        }
        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
          if (strm.avail_out === 0) {
            s.last_flush = -1;
            /* avoid BUF_ERROR next call, see above */
          }
          return Z_OK$3;
          /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
           * of deflate should use the same flush parameter to make sure
           * that the flush is complete. So we don't have to output an
           * empty block here, this will be done at next call. This also
           * ensures that for a very small output buffer, we emit at most
           * one empty block.
           */
        }
        if (bstate === BS_BLOCK_DONE) {
          if (flush === Z_PARTIAL_FLUSH) {
            _tr_align(s);
          }
          else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */

            _tr_stored_block(s, 0, 0, false);
            /* For a full flush, this empty block will be recognized
             * as a special marker by inflate_sync().
             */
            if (flush === Z_FULL_FLUSH$1) {
              /*** CLEAR_HASH(s); ***/             /* forget history */
              zero(s.head); // Fill with NIL (= 0);

              if (s.lookahead === 0) {
                s.strstart = 0;
                s.block_start = 0;
                s.insert = 0;
              }
            }
          }
          flush_pending(strm);
          if (strm.avail_out === 0) {
            s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
            return Z_OK$3;
          }
        }
      }
      //Assert(strm->avail_out > 0, "bug2");
      //if (strm.avail_out <= 0) { throw new Error("bug2");}

      if (flush !== Z_FINISH$3) { return Z_OK$3; }
      if (s.wrap <= 0) { return Z_STREAM_END$3; }

      /* Write the trailer */
      if (s.wrap === 2) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        put_byte(s, (strm.adler >> 16) & 0xff);
        put_byte(s, (strm.adler >> 24) & 0xff);
        put_byte(s, strm.total_in & 0xff);
        put_byte(s, (strm.total_in >> 8) & 0xff);
        put_byte(s, (strm.total_in >> 16) & 0xff);
        put_byte(s, (strm.total_in >> 24) & 0xff);
      }
      else
      {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }

      flush_pending(strm);
      /* If avail_out is zero, the application will call deflate again
       * to flush the rest.
       */
      if (s.wrap > 0) { s.wrap = -s.wrap; }
      /* write the trailer only once! */
      return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;
    };


    const deflateEnd = (strm) => {

      if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
        return Z_STREAM_ERROR$2;
      }

      const status = strm.state.status;
      if (status !== INIT_STATE &&
        status !== EXTRA_STATE &&
        status !== NAME_STATE &&
        status !== COMMENT_STATE &&
        status !== HCRC_STATE &&
        status !== BUSY_STATE &&
        status !== FINISH_STATE
      ) {
        return err(strm, Z_STREAM_ERROR$2);
      }

      strm.state = null;

      return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;
    };


    /* =========================================================================
     * Initializes the compression dictionary from the given byte
     * sequence without producing any compressed output.
     */
    const deflateSetDictionary = (strm, dictionary) => {

      let dictLength = dictionary.length;

      if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
        return Z_STREAM_ERROR$2;
      }

      const s = strm.state;
      const wrap = s.wrap;

      if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
        return Z_STREAM_ERROR$2;
      }

      /* when using zlib wrappers, compute Adler-32 for provided dictionary */
      if (wrap === 1) {
        /* adler32(strm->adler, dictionary, dictLength); */
        strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
      }

      s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

      /* if dictionary would fill window, just replace the history */
      if (dictLength >= s.w_size) {
        if (wrap === 0) {            /* already empty otherwise */
          /*** CLEAR_HASH(s); ***/
          zero(s.head); // Fill with NIL (= 0);
          s.strstart = 0;
          s.block_start = 0;
          s.insert = 0;
        }
        /* use the tail */
        // dictionary = dictionary.slice(dictLength - s.w_size);
        let tmpDict = new Uint8Array(s.w_size);
        tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
        dictionary = tmpDict;
        dictLength = s.w_size;
      }
      /* insert dictionary into window and hash */
      const avail = strm.avail_in;
      const next = strm.next_in;
      const input = strm.input;
      strm.avail_in = dictLength;
      strm.next_in = 0;
      strm.input = dictionary;
      fill_window(s);
      while (s.lookahead >= MIN_MATCH) {
        let str = s.strstart;
        let n = s.lookahead - (MIN_MATCH - 1);
        do {
          /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
          s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

          s.prev[str & s.w_mask] = s.head[s.ins_h];

          s.head[s.ins_h] = str;
          str++;
        } while (--n);
        s.strstart = str;
        s.lookahead = MIN_MATCH - 1;
        fill_window(s);
      }
      s.strstart += s.lookahead;
      s.block_start = s.strstart;
      s.insert = s.lookahead;
      s.lookahead = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      strm.next_in = next;
      strm.input = input;
      strm.avail_in = avail;
      s.wrap = wrap;
      return Z_OK$3;
    };


    var deflateInit_1 = deflateInit;
    var deflateInit2_1 = deflateInit2;
    var deflateReset_1 = deflateReset;
    var deflateResetKeep_1 = deflateResetKeep;
    var deflateSetHeader_1 = deflateSetHeader;
    var deflate_2$1 = deflate$2;
    var deflateEnd_1 = deflateEnd;
    var deflateSetDictionary_1 = deflateSetDictionary;
    var deflateInfo = 'pako deflate (from Nodeca project)';

    /* Not implemented
    module.exports.deflateBound = deflateBound;
    module.exports.deflateCopy = deflateCopy;
    module.exports.deflateParams = deflateParams;
    module.exports.deflatePending = deflatePending;
    module.exports.deflatePrime = deflatePrime;
    module.exports.deflateTune = deflateTune;
    */

    var deflate_1$2 = {
    	deflateInit: deflateInit_1,
    	deflateInit2: deflateInit2_1,
    	deflateReset: deflateReset_1,
    	deflateResetKeep: deflateResetKeep_1,
    	deflateSetHeader: deflateSetHeader_1,
    	deflate: deflate_2$1,
    	deflateEnd: deflateEnd_1,
    	deflateSetDictionary: deflateSetDictionary_1,
    	deflateInfo: deflateInfo
    };

    const _has = (obj, key) => {
      return Object.prototype.hasOwnProperty.call(obj, key);
    };

    var assign$1 = function (obj /*from1, from2, from3, ...*/) {
      const sources = Array.prototype.slice.call(arguments, 1);
      while (sources.length) {
        const source = sources.shift();
        if (!source) { continue; }

        if (typeof source !== 'object') {
          throw new TypeError(source + 'must be non-object');
        }

        for (const p in source) {
          if (_has(source, p)) {
            obj[p] = source[p];
          }
        }
      }

      return obj;
    };


    // Join array of chunks to single array.
    var flattenChunks = (chunks) => {
      // calculate data length
      let len = 0;

      for (let i = 0, l = chunks.length; i < l; i++) {
        len += chunks[i].length;
      }

      // join chunks
      const result = new Uint8Array(len);

      for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
        let chunk = chunks[i];
        result.set(chunk, pos);
        pos += chunk.length;
      }

      return result;
    };

    var common = {
    	assign: assign$1,
    	flattenChunks: flattenChunks
    };

    // String encode/decode helpers


    // Quick check if we can use fast array to bin string conversion
    //
    // - apply(Array) can fail on Android 2.2
    // - apply(Uint8Array) can fail on iOS 5.1 Safari
    //
    let STR_APPLY_UIA_OK = true;

    try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


    // Table with utf8 lengths (calculated by first byte of sequence)
    // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
    // because max possible codepoint is 0x10ffff
    const _utf8len = new Uint8Array(256);
    for (let q = 0; q < 256; q++) {
      _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
    }
    _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


    // convert string to array (typed, when possible)
    var string2buf = (str) => {
      if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {
        return new TextEncoder().encode(str);
      }

      let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

      // count binary size
      for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
          c2 = str.charCodeAt(m_pos + 1);
          if ((c2 & 0xfc00) === 0xdc00) {
            c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
            m_pos++;
          }
        }
        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
      }

      // allocate buffer
      buf = new Uint8Array(buf_len);

      // convert
      for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
          c2 = str.charCodeAt(m_pos + 1);
          if ((c2 & 0xfc00) === 0xdc00) {
            c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
            m_pos++;
          }
        }
        if (c < 0x80) {
          /* one byte */
          buf[i++] = c;
        } else if (c < 0x800) {
          /* two bytes */
          buf[i++] = 0xC0 | (c >>> 6);
          buf[i++] = 0x80 | (c & 0x3f);
        } else if (c < 0x10000) {
          /* three bytes */
          buf[i++] = 0xE0 | (c >>> 12);
          buf[i++] = 0x80 | (c >>> 6 & 0x3f);
          buf[i++] = 0x80 | (c & 0x3f);
        } else {
          /* four bytes */
          buf[i++] = 0xf0 | (c >>> 18);
          buf[i++] = 0x80 | (c >>> 12 & 0x3f);
          buf[i++] = 0x80 | (c >>> 6 & 0x3f);
          buf[i++] = 0x80 | (c & 0x3f);
        }
      }

      return buf;
    };

    // Helper
    const buf2binstring = (buf, len) => {
      // On Chrome, the arguments in a function call that are allowed is `65534`.
      // If the length of the buffer is smaller than that, we can use this optimization,
      // otherwise we will take a slower path.
      if (len < 65534) {
        if (buf.subarray && STR_APPLY_UIA_OK) {
          return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
        }
      }

      let result = '';
      for (let i = 0; i < len; i++) {
        result += String.fromCharCode(buf[i]);
      }
      return result;
    };


    // convert array to string
    var buf2string = (buf, max) => {
      const len = max || buf.length;

      if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {
        return new TextDecoder().decode(buf.subarray(0, max));
      }

      let i, out;

      // Reserve max possible length (2 words per char)
      // NB: by unknown reasons, Array is significantly faster for
      //     String.fromCharCode.apply than Uint16Array.
      const utf16buf = new Array(len * 2);

      for (out = 0, i = 0; i < len;) {
        let c = buf[i++];
        // quick process ascii
        if (c < 0x80) { utf16buf[out++] = c; continue; }

        let c_len = _utf8len[c];
        // skip 5 & 6 byte codes
        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

        // apply mask on first byte
        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
        // join the rest
        while (c_len > 1 && i < len) {
          c = (c << 6) | (buf[i++] & 0x3f);
          c_len--;
        }

        // terminated by end of string?
        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

        if (c < 0x10000) {
          utf16buf[out++] = c;
        } else {
          c -= 0x10000;
          utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
          utf16buf[out++] = 0xdc00 | (c & 0x3ff);
        }
      }

      return buf2binstring(utf16buf, out);
    };


    // Calculate max possible position in utf8 buffer,
    // that will not break sequence. If that's not possible
    // - (very small limits) return max size as is.
    //
    // buf[] - utf8 bytes array
    // max   - length limit (mandatory);
    var utf8border = (buf, max) => {

      max = max || buf.length;
      if (max > buf.length) { max = buf.length; }

      // go back from last position, until start of sequence found
      let pos = max - 1;
      while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

      // Very small and broken sequence,
      // return max, because we should return something anyway.
      if (pos < 0) { return max; }

      // If we came to start of buffer - that means buffer is too small,
      // return max too.
      if (pos === 0) { return max; }

      return (pos + _utf8len[buf[pos]] > max) ? pos : max;
    };

    var strings = {
    	string2buf: string2buf,
    	buf2string: buf2string,
    	utf8border: utf8border
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    function ZStream() {
      /* next input byte */
      this.input = null; // JS specific, because we have no pointers
      this.next_in = 0;
      /* number of bytes available at input */
      this.avail_in = 0;
      /* total number of input bytes read so far */
      this.total_in = 0;
      /* next output byte should be put there */
      this.output = null; // JS specific, because we have no pointers
      this.next_out = 0;
      /* remaining free space at output */
      this.avail_out = 0;
      /* total number of bytes output so far */
      this.total_out = 0;
      /* last error message, NULL if no error */
      this.msg = ''/*Z_NULL*/;
      /* not visible by applications */
      this.state = null;
      /* best guess about the data type: binary or text */
      this.data_type = 2/*Z_UNKNOWN*/;
      /* adler32 value of the uncompressed data */
      this.adler = 0;
    }

    var zstream = ZStream;

    const toString$1 = Object.prototype.toString;

    /* Public constants ==========================================================*/
    /* ===========================================================================*/

    const {
      Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,
      Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,
      Z_DEFAULT_COMPRESSION,
      Z_DEFAULT_STRATEGY,
      Z_DEFLATED: Z_DEFLATED$1
    } = constants$2;

    /* ===========================================================================*/


    /**
     * class Deflate
     *
     * Generic JS-style wrapper for zlib calls. If you don't need
     * streaming behaviour - use more simple functions: [[deflate]],
     * [[deflateRaw]] and [[gzip]].
     **/

    /* internal
     * Deflate.chunks -> Array
     *
     * Chunks of output data, if [[Deflate#onData]] not overridden.
     **/

    /**
     * Deflate.result -> Uint8Array
     *
     * Compressed result, generated by default [[Deflate#onData]]
     * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
     * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
     **/

    /**
     * Deflate.err -> Number
     *
     * Error code after deflate finished. 0 (Z_OK) on success.
     * You will not need it in real life, because deflate errors
     * are possible only on wrong options or bad `onData` / `onEnd`
     * custom handlers.
     **/

    /**
     * Deflate.msg -> String
     *
     * Error message, if [[Deflate.err]] != 0
     **/


    /**
     * new Deflate(options)
     * - options (Object): zlib deflate options.
     *
     * Creates new deflator instance with specified params. Throws exception
     * on bad params. Supported options:
     *
     * - `level`
     * - `windowBits`
     * - `memLevel`
     * - `strategy`
     * - `dictionary`
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Additional options, for internal needs:
     *
     * - `chunkSize` - size of generated data chunks (16K by default)
     * - `raw` (Boolean) - do raw deflate
     * - `gzip` (Boolean) - create gzip wrapper
     * - `header` (Object) - custom header for gzip
     *   - `text` (Boolean) - true if compressed data believed to be text
     *   - `time` (Number) - modification time, unix timestamp
     *   - `os` (Number) - operation system code
     *   - `extra` (Array) - array of bytes with extra data (max 65536)
     *   - `name` (String) - file name (binary string)
     *   - `comment` (String) - comment (binary string)
     *   - `hcrc` (Boolean) - true if header crc should be added
     *
     * ##### Example:
     *
     * ```javascript
     * const pako = require('pako')
     *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
     *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
     *
     * const deflate = new pako.Deflate({ level: 3});
     *
     * deflate.push(chunk1, false);
     * deflate.push(chunk2, true);  // true -> last chunk
     *
     * if (deflate.err) { throw new Error(deflate.err); }
     *
     * console.log(deflate.result);
     * ```
     **/
    function Deflate$1(options) {
      this.options = common.assign({
        level: Z_DEFAULT_COMPRESSION,
        method: Z_DEFLATED$1,
        chunkSize: 16384,
        windowBits: 15,
        memLevel: 8,
        strategy: Z_DEFAULT_STRATEGY
      }, options || {});

      let opt = this.options;

      if (opt.raw && (opt.windowBits > 0)) {
        opt.windowBits = -opt.windowBits;
      }

      else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
        opt.windowBits += 16;
      }

      this.err    = 0;      // error code, if happens (0 = Z_OK)
      this.msg    = '';     // error message
      this.ended  = false;  // used to avoid multiple onEnd() calls
      this.chunks = [];     // chunks of compressed data

      this.strm = new zstream();
      this.strm.avail_out = 0;

      let status = deflate_1$2.deflateInit2(
        this.strm,
        opt.level,
        opt.method,
        opt.windowBits,
        opt.memLevel,
        opt.strategy
      );

      if (status !== Z_OK$2) {
        throw new Error(messages[status]);
      }

      if (opt.header) {
        deflate_1$2.deflateSetHeader(this.strm, opt.header);
      }

      if (opt.dictionary) {
        let dict;
        // Convert data if needed
        if (typeof opt.dictionary === 'string') {
          // If we need to compress text, change encoding to utf8.
          dict = strings.string2buf(opt.dictionary);
        } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {
          dict = new Uint8Array(opt.dictionary);
        } else {
          dict = opt.dictionary;
        }

        status = deflate_1$2.deflateSetDictionary(this.strm, dict);

        if (status !== Z_OK$2) {
          throw new Error(messages[status]);
        }

        this._dict_set = true;
      }
    }

    /**
     * Deflate#push(data[, flush_mode]) -> Boolean
     * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
     *   converted to utf8 byte sequence.
     * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
     *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
     *
     * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
     * new compressed chunks. Returns `true` on success. The last data block must
     * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
     * buffers and call [[Deflate#onEnd]].
     *
     * On fail call [[Deflate#onEnd]] with error code and return false.
     *
     * ##### Example
     *
     * ```javascript
     * push(chunk, false); // push one of data chunks
     * ...
     * push(chunk, true);  // push last chunk
     * ```
     **/
    Deflate$1.prototype.push = function (data, flush_mode) {
      const strm = this.strm;
      const chunkSize = this.options.chunkSize;
      let status, _flush_mode;

      if (this.ended) { return false; }

      if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
      else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;

      // Convert data if needed
      if (typeof data === 'string') {
        // If we need to compress text, change encoding to utf8.
        strm.input = strings.string2buf(data);
      } else if (toString$1.call(data) === '[object ArrayBuffer]') {
        strm.input = new Uint8Array(data);
      } else {
        strm.input = data;
      }

      strm.next_in = 0;
      strm.avail_in = strm.input.length;

      for (;;) {
        if (strm.avail_out === 0) {
          strm.output = new Uint8Array(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }

        // Make sure avail_out > 6 to avoid repeating markers
        if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
          this.onData(strm.output.subarray(0, strm.next_out));
          strm.avail_out = 0;
          continue;
        }

        status = deflate_1$2.deflate(strm, _flush_mode);

        // Ended => flush and finish
        if (status === Z_STREAM_END$2) {
          if (strm.next_out > 0) {
            this.onData(strm.output.subarray(0, strm.next_out));
          }
          status = deflate_1$2.deflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return status === Z_OK$2;
        }

        // Flush if out buffer full
        if (strm.avail_out === 0) {
          this.onData(strm.output);
          continue;
        }

        // Flush if requested and has data
        if (_flush_mode > 0 && strm.next_out > 0) {
          this.onData(strm.output.subarray(0, strm.next_out));
          strm.avail_out = 0;
          continue;
        }

        if (strm.avail_in === 0) break;
      }

      return true;
    };


    /**
     * Deflate#onData(chunk) -> Void
     * - chunk (Uint8Array): output data.
     *
     * By default, stores data blocks in `chunks[]` property and glue
     * those in `onEnd`. Override this handler, if you need another behaviour.
     **/
    Deflate$1.prototype.onData = function (chunk) {
      this.chunks.push(chunk);
    };


    /**
     * Deflate#onEnd(status) -> Void
     * - status (Number): deflate status. 0 (Z_OK) on success,
     *   other if not.
     *
     * Called once after you tell deflate that the input stream is
     * complete (Z_FINISH). By default - join collected chunks,
     * free memory and fill `results` / `err` properties.
     **/
    Deflate$1.prototype.onEnd = function (status) {
      // On success - join
      if (status === Z_OK$2) {
        this.result = common.flattenChunks(this.chunks);
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    // See state defs from inflate.js
    const BAD$1 = 30;       /* got a data error -- remain here until reset */
    const TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */

    /*
       Decode literal, length, and distance codes and write out the resulting
       literal and match bytes until either not enough input or output is
       available, an end-of-block is encountered, or a data error is encountered.
       When large enough input and output buffers are supplied to inflate(), for
       example, a 16K input buffer and a 64K output buffer, more than 95% of the
       inflate execution time is spent in this routine.

       Entry assumptions:

            state.mode === LEN
            strm.avail_in >= 6
            strm.avail_out >= 258
            start >= strm.avail_out
            state.bits < 8

       On return, state.mode is one of:

            LEN -- ran out of enough output space or enough available input
            TYPE -- reached end of block code, inflate() to interpret next block
            BAD -- error in block data

       Notes:

        - The maximum input bits used by a length/distance pair is 15 bits for the
          length code, 5 bits for the length extra, 15 bits for the distance code,
          and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
          Therefore if strm.avail_in >= 6, then there is enough input to avoid
          checking for available input while decoding.

        - The maximum bytes that a single length/distance pair can output is 258
          bytes, which is the maximum length that can be coded.  inflate_fast()
          requires strm.avail_out >= 258 for each loop to avoid checking for
          output space.
     */
    var inffast = function inflate_fast(strm, start) {
      let _in;                    /* local strm.input */
      let last;                   /* have enough input while in < last */
      let _out;                   /* local strm.output */
      let beg;                    /* inflate()'s initial strm.output */
      let end;                    /* while out < end, enough space available */
    //#ifdef INFLATE_STRICT
      let dmax;                   /* maximum distance from zlib header */
    //#endif
      let wsize;                  /* window size or zero if not using window */
      let whave;                  /* valid bytes in the window */
      let wnext;                  /* window write index */
      // Use `s_window` instead `window`, avoid conflict with instrumentation tools
      let s_window;               /* allocated sliding window, if wsize != 0 */
      let hold;                   /* local strm.hold */
      let bits;                   /* local strm.bits */
      let lcode;                  /* local strm.lencode */
      let dcode;                  /* local strm.distcode */
      let lmask;                  /* mask for first level of length codes */
      let dmask;                  /* mask for first level of distance codes */
      let here;                   /* retrieved table entry */
      let op;                     /* code bits, operation, extra bits, or */
                                  /*  window position, window bytes to copy */
      let len;                    /* match length, unused bytes */
      let dist;                   /* match distance */
      let from;                   /* where to copy match from */
      let from_source;


      let input, output; // JS specific, because we have no pointers

      /* copy state to local variables */
      const state = strm.state;
      //here = state.here;
      _in = strm.next_in;
      input = strm.input;
      last = _in + (strm.avail_in - 5);
      _out = strm.next_out;
      output = strm.output;
      beg = _out - (start - strm.avail_out);
      end = _out + (strm.avail_out - 257);
    //#ifdef INFLATE_STRICT
      dmax = state.dmax;
    //#endif
      wsize = state.wsize;
      whave = state.whave;
      wnext = state.wnext;
      s_window = state.window;
      hold = state.hold;
      bits = state.bits;
      lcode = state.lencode;
      dcode = state.distcode;
      lmask = (1 << state.lenbits) - 1;
      dmask = (1 << state.distbits) - 1;


      /* decode literals and length/distances until end-of-block or not enough
         input data or output space */

      top:
      do {
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }

        here = lcode[hold & lmask];

        dolen:
        for (;;) { // Goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;
          if (op === 0) {                          /* literal */
            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            output[_out++] = here & 0xffff/*here.val*/;
          }
          else if (op & 16) {                     /* length base */
            len = here & 0xffff/*here.val*/;
            op &= 15;                           /* number of extra bits */
            if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
              len += hold & ((1 << op) - 1);
              hold >>>= op;
              bits -= op;
            }
            //Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = dcode[hold & dmask];

            dodist:
            for (;;) { // goto emulation
              op = here >>> 24/*here.bits*/;
              hold >>>= op;
              bits -= op;
              op = (here >>> 16) & 0xff/*here.op*/;

              if (op & 16) {                      /* distance base */
                dist = here & 0xffff/*here.val*/;
                op &= 15;                       /* number of extra bits */
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                  }
                }
                dist += hold & ((1 << op) - 1);
    //#ifdef INFLATE_STRICT
                if (dist > dmax) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD$1;
                  break top;
                }
    //#endif
                hold >>>= op;
                bits -= op;
                //Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = _out - beg;                /* max distance in output */
                if (dist > op) {                /* see if copy from window */
                  op = dist - op;               /* distance back in window */
                  if (op > whave) {
                    if (state.sane) {
                      strm.msg = 'invalid distance too far back';
                      state.mode = BAD$1;
                      break top;
                    }

    // (!) This block is disabled in zlib defaults,
    // don't enable it for binary compatibility
    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
    //                if (len <= op - whave) {
    //                  do {
    //                    output[_out++] = 0;
    //                  } while (--len);
    //                  continue top;
    //                }
    //                len -= op - whave;
    //                do {
    //                  output[_out++] = 0;
    //                } while (--op > whave);
    //                if (op === 0) {
    //                  from = _out - dist;
    //                  do {
    //                    output[_out++] = output[from++];
    //                  } while (--len);
    //                  continue top;
    //                }
    //#endif
                  }
                  from = 0; // window index
                  from_source = s_window;
                  if (wnext === 0) {           /* very common case */
                    from += wsize - op;
                    if (op < len) {         /* some from window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;  /* rest from output */
                      from_source = output;
                    }
                  }
                  else if (wnext < op) {      /* wrap around window */
                    from += wsize + wnext - op;
                    op -= wnext;
                    if (op < len) {         /* some from end of window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = 0;
                      if (wnext < len) {  /* some from start of window */
                        op = wnext;
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;      /* rest from output */
                        from_source = output;
                      }
                    }
                  }
                  else {                      /* contiguous in window */
                    from += wnext - op;
                    if (op < len) {         /* some from window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;  /* rest from output */
                      from_source = output;
                    }
                  }
                  while (len > 2) {
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    len -= 3;
                  }
                  if (len) {
                    output[_out++] = from_source[from++];
                    if (len > 1) {
                      output[_out++] = from_source[from++];
                    }
                  }
                }
                else {
                  from = _out - dist;          /* copy direct from output */
                  do {                        /* minimum length is three */
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    len -= 3;
                  } while (len > 2);
                  if (len) {
                    output[_out++] = output[from++];
                    if (len > 1) {
                      output[_out++] = output[from++];
                    }
                  }
                }
              }
              else if ((op & 64) === 0) {          /* 2nd level distance code */
                here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
                continue dodist;
              }
              else {
                strm.msg = 'invalid distance code';
                state.mode = BAD$1;
                break top;
              }

              break; // need to emulate goto via "continue"
            }
          }
          else if ((op & 64) === 0) {              /* 2nd level length code */
            here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dolen;
          }
          else if (op & 32) {                     /* end-of-block */
            //Tracevv((stderr, "inflate:         end of block\n"));
            state.mode = TYPE$1;
            break top;
          }
          else {
            strm.msg = 'invalid literal/length code';
            state.mode = BAD$1;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      } while (_in < last && _out < end);

      /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
      len = bits >> 3;
      _in -= len;
      bits -= len << 3;
      hold &= (1 << bits) - 1;

      /* update state and return */
      strm.next_in = _in;
      strm.next_out = _out;
      strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
      strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
      state.hold = hold;
      state.bits = bits;
      return;
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    const MAXBITS = 15;
    const ENOUGH_LENS$1 = 852;
    const ENOUGH_DISTS$1 = 592;
    //const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

    const CODES$1 = 0;
    const LENS$1 = 1;
    const DISTS$1 = 2;

    const lbase = new Uint16Array([ /* Length codes 257..285 base */
      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
      35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
    ]);

    const lext = new Uint8Array([ /* Length codes 257..285 extra */
      16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
      19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
    ]);

    const dbase = new Uint16Array([ /* Distance codes 0..29 base */
      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
      257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
      8193, 12289, 16385, 24577, 0, 0
    ]);

    const dext = new Uint8Array([ /* Distance codes 0..29 extra */
      16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
      23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
      28, 28, 29, 29, 64, 64
    ]);

    const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>
    {
      const bits = opts.bits;
          //here = opts.here; /* table entry for duplication */

      let len = 0;               /* a code's length in bits */
      let sym = 0;               /* index of code symbols */
      let min = 0, max = 0;          /* minimum and maximum code lengths */
      let root = 0;              /* number of index bits for root table */
      let curr = 0;              /* number of index bits for current table */
      let drop = 0;              /* code bits to drop for sub-table */
      let left = 0;                   /* number of prefix codes available */
      let used = 0;              /* code entries in table used */
      let huff = 0;              /* Huffman code */
      let incr;              /* for incrementing code, index */
      let fill;              /* index for replicating entries */
      let low;               /* low bits for current root entry */
      let mask;              /* mask for low root bits */
      let next;             /* next available space in table */
      let base = null;     /* base value table to use */
      let base_index = 0;
    //  let shoextra;    /* extra bits table to use */
      let end;                    /* use base and extra for symbol > end */
      const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
      const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
      let extra = null;
      let extra_index = 0;

      let here_bits, here_op, here_val;

      /*
       Process a set of code lengths to create a canonical Huffman code.  The
       code lengths are lens[0..codes-1].  Each length corresponds to the
       symbols 0..codes-1.  The Huffman code is generated by first sorting the
       symbols by length from short to long, and retaining the symbol order
       for codes with equal lengths.  Then the code starts with all zero bits
       for the first code of the shortest length, and the codes are integer
       increments for the same length, and zeros are appended as the length
       increases.  For the deflate format, these bits are stored backwards
       from their more natural integer increment ordering, and so when the
       decoding tables are built in the large loop below, the integer codes
       are incremented backwards.

       This routine assumes, but does not check, that all of the entries in
       lens[] are in the range 0..MAXBITS.  The caller must assure this.
       1..MAXBITS is interpreted as that code length.  zero means that that
       symbol does not occur in this code.

       The codes are sorted by computing a count of codes for each length,
       creating from that a table of starting indices for each length in the
       sorted table, and then entering the symbols in order in the sorted
       table.  The sorted table is work[], with that space being provided by
       the caller.

       The length counts are used for other purposes as well, i.e. finding
       the minimum and maximum length codes, determining if there are any
       codes at all, checking for a valid set of lengths, and looking ahead
       at length counts to determine sub-table sizes when building the
       decoding tables.
       */

      /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
      for (len = 0; len <= MAXBITS; len++) {
        count[len] = 0;
      }
      for (sym = 0; sym < codes; sym++) {
        count[lens[lens_index + sym]]++;
      }

      /* bound code lengths, force root to be within code lengths */
      root = bits;
      for (max = MAXBITS; max >= 1; max--) {
        if (count[max] !== 0) { break; }
      }
      if (root > max) {
        root = max;
      }
      if (max === 0) {                     /* no symbols to code at all */
        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
        table[table_index++] = (1 << 24) | (64 << 16) | 0;


        //table.op[opts.table_index] = 64;
        //table.bits[opts.table_index] = 1;
        //table.val[opts.table_index++] = 0;
        table[table_index++] = (1 << 24) | (64 << 16) | 0;

        opts.bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
      }
      for (min = 1; min < max; min++) {
        if (count[min] !== 0) { break; }
      }
      if (root < min) {
        root = min;
      }

      /* check for an over-subscribed or incomplete set of lengths */
      left = 1;
      for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
        if (left < 0) {
          return -1;
        }        /* over-subscribed */
      }
      if (left > 0 && (type === CODES$1 || max !== 1)) {
        return -1;                      /* incomplete set */
      }

      /* generate offsets into symbol table for each length for sorting */
      offs[1] = 0;
      for (len = 1; len < MAXBITS; len++) {
        offs[len + 1] = offs[len] + count[len];
      }

      /* sort symbols by length, by symbol order within each length */
      for (sym = 0; sym < codes; sym++) {
        if (lens[lens_index + sym] !== 0) {
          work[offs[lens[lens_index + sym]]++] = sym;
        }
      }

      /*
       Create and fill in decoding tables.  In this loop, the table being
       filled is at next and has curr index bits.  The code being used is huff
       with length len.  That code is converted to an index by dropping drop
       bits off of the bottom.  For codes where len is less than drop + curr,
       those top drop + curr - len bits are incremented through all values to
       fill the table with replicated entries.

       root is the number of index bits for the root table.  When len exceeds
       root, sub-tables are created pointed to by the root entry with an index
       of the low root bits of huff.  This is saved in low to check for when a
       new sub-table should be started.  drop is zero when the root table is
       being filled, and drop is root when sub-tables are being filled.

       When a new sub-table is needed, it is necessary to look ahead in the
       code lengths to determine what size sub-table is needed.  The length
       counts are used for this, and so count[] is decremented as codes are
       entered in the tables.

       used keeps track of how many table entries have been allocated from the
       provided *table space.  It is checked for LENS and DIST tables against
       the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
       the initial root table size constants.  See the comments in inftrees.h
       for more information.

       sym increments through all symbols, and the loop terminates when
       all codes of length max, i.e. all codes, have been processed.  This
       routine permits incomplete codes, so another loop after this one fills
       in the rest of the decoding tables with invalid code markers.
       */

      /* set up for code type */
      // poor man optimization - use if-else instead of switch,
      // to avoid deopts in old v8
      if (type === CODES$1) {
        base = extra = work;    /* dummy value--not used */
        end = 19;

      } else if (type === LENS$1) {
        base = lbase;
        base_index -= 257;
        extra = lext;
        extra_index -= 257;
        end = 256;

      } else {                    /* DISTS */
        base = dbase;
        extra = dext;
        end = -1;
      }

      /* initialize opts for loop */
      huff = 0;                   /* starting code */
      sym = 0;                    /* starting code symbol */
      len = min;                  /* starting code length */
      next = table_index;              /* current table to fill in */
      curr = root;                /* current table index bits */
      drop = 0;                   /* current bits to drop from code for index */
      low = -1;                   /* trigger new sub-table when len > root */
      used = 1 << root;          /* use root table entries */
      mask = used - 1;            /* mask for comparing low */

      /* check available table space */
      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
        return 1;
      }

      /* process all codes and make table entries */
      for (;;) {
        /* create table entry */
        here_bits = len - drop;
        if (work[sym] < end) {
          here_op = 0;
          here_val = work[sym];
        }
        else if (work[sym] > end) {
          here_op = extra[extra_index + work[sym]];
          here_val = base[base_index + work[sym]];
        }
        else {
          here_op = 32 + 64;         /* end of block */
          here_val = 0;
        }

        /* replicate for those indices with low len bits equal to huff */
        incr = 1 << (len - drop);
        fill = 1 << curr;
        min = fill;                 /* save offset to next table */
        do {
          fill -= incr;
          table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
        } while (fill !== 0);

        /* backwards increment the len-bit code huff */
        incr = 1 << (len - 1);
        while (huff & incr) {
          incr >>= 1;
        }
        if (incr !== 0) {
          huff &= incr - 1;
          huff += incr;
        } else {
          huff = 0;
        }

        /* go to next symbol, update count, len */
        sym++;
        if (--count[len] === 0) {
          if (len === max) { break; }
          len = lens[lens_index + work[sym]];
        }

        /* create new sub-table if needed */
        if (len > root && (huff & mask) !== low) {
          /* if first time, transition to sub-tables */
          if (drop === 0) {
            drop = root;
          }

          /* increment past last table */
          next += min;            /* here min is 1 << curr */

          /* determine length of next table */
          curr = len - drop;
          left = 1 << curr;
          while (curr + drop < max) {
            left -= count[curr + drop];
            if (left <= 0) { break; }
            curr++;
            left <<= 1;
          }

          /* check for enough space */
          used += 1 << curr;
          if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
            (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
            return 1;
          }

          /* point entry in root table to sub-table */
          low = huff & mask;
          /*table.op[low] = curr;
          table.bits[low] = root;
          table.val[low] = next - opts.table_index;*/
          table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
        }
      }

      /* fill in remaining table entry if code is incomplete (guaranteed to have
       at most one remaining entry, since if the code is incomplete, the
       maximum code length that was allowed to get this far is one bit) */
      if (huff !== 0) {
        //table.op[next + huff] = 64;            /* invalid code marker */
        //table.bits[next + huff] = len - drop;
        //table.val[next + huff] = 0;
        table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
      }

      /* set return parameters */
      //opts.table_index += used;
      opts.bits = root;
      return 0;
    };


    var inftrees = inflate_table;

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.






    const CODES = 0;
    const LENS = 1;
    const DISTS = 2;

    /* Public constants ==========================================================*/
    /* ===========================================================================*/

    const {
      Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,
      Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,
      Z_DEFLATED
    } = constants$2;


    /* STATES ====================================================================*/
    /* ===========================================================================*/


    const    HEAD = 1;       /* i: waiting for magic header */
    const    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
    const    TIME = 3;       /* i: waiting for modification time (gzip) */
    const    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
    const    EXLEN = 5;      /* i: waiting for extra length (gzip) */
    const    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
    const    NAME = 7;       /* i: waiting for end of file name (gzip) */
    const    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
    const    HCRC = 9;       /* i: waiting for header crc (gzip) */
    const    DICTID = 10;    /* i: waiting for dictionary check value */
    const    DICT = 11;      /* waiting for inflateSetDictionary() call */
    const        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
    const        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
    const        STORED = 14;    /* i: waiting for stored size (length and complement) */
    const        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
    const        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
    const        TABLE = 17;     /* i: waiting for dynamic block table lengths */
    const        LENLENS = 18;   /* i: waiting for code length code lengths */
    const        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
    const            LEN_ = 20;      /* i: same as LEN below, but only first time in */
    const            LEN = 21;       /* i: waiting for length/lit/eob code */
    const            LENEXT = 22;    /* i: waiting for length extra bits */
    const            DIST = 23;      /* i: waiting for distance code */
    const            DISTEXT = 24;   /* i: waiting for distance extra bits */
    const            MATCH = 25;     /* o: waiting for output space to copy string */
    const            LIT = 26;       /* o: waiting for output space to write literal */
    const    CHECK = 27;     /* i: waiting for 32-bit check value */
    const    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
    const    DONE = 29;      /* finished check, done -- remain here until reset */
    const    BAD = 30;       /* got a data error -- remain here until reset */
    const    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
    const    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

    /* ===========================================================================*/



    const ENOUGH_LENS = 852;
    const ENOUGH_DISTS = 592;
    //const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

    const MAX_WBITS = 15;
    /* 32K LZ77 window */
    const DEF_WBITS = MAX_WBITS;


    const zswap32 = (q) => {

      return  (((q >>> 24) & 0xff) +
              ((q >>> 8) & 0xff00) +
              ((q & 0xff00) << 8) +
              ((q & 0xff) << 24));
    };


    function InflateState() {
      this.mode = 0;             /* current inflate mode */
      this.last = false;          /* true if processing last block */
      this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
      this.havedict = false;      /* true if dictionary provided */
      this.flags = 0;             /* gzip header method and flags (0 if zlib) */
      this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
      this.check = 0;             /* protected copy of check value */
      this.total = 0;             /* protected copy of output count */
      // TODO: may be {}
      this.head = null;           /* where to save gzip header information */

      /* sliding window */
      this.wbits = 0;             /* log base 2 of requested window size */
      this.wsize = 0;             /* window size or zero if not using window */
      this.whave = 0;             /* valid bytes in the window */
      this.wnext = 0;             /* window write index */
      this.window = null;         /* allocated sliding window, if needed */

      /* bit accumulator */
      this.hold = 0;              /* input bit accumulator */
      this.bits = 0;              /* number of bits in "in" */

      /* for string and stored block copying */
      this.length = 0;            /* literal or length of data to copy */
      this.offset = 0;            /* distance back to copy string from */

      /* for table and code decoding */
      this.extra = 0;             /* extra bits needed */

      /* fixed and dynamic code tables */
      this.lencode = null;          /* starting table for length/literal codes */
      this.distcode = null;         /* starting table for distance codes */
      this.lenbits = 0;           /* index bits for lencode */
      this.distbits = 0;          /* index bits for distcode */

      /* dynamic table building */
      this.ncode = 0;             /* number of code length code lengths */
      this.nlen = 0;              /* number of length code lengths */
      this.ndist = 0;             /* number of distance code lengths */
      this.have = 0;              /* number of code lengths in lens[] */
      this.next = null;              /* next available space in codes[] */

      this.lens = new Uint16Array(320); /* temporary storage for code lengths */
      this.work = new Uint16Array(288); /* work area for code table building */

      /*
       because we don't have pointers in js, we use lencode and distcode directly
       as buffers so we don't need codes
      */
      //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
      this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
      this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
      this.sane = 0;                   /* if false, allow invalid distance too far */
      this.back = 0;                   /* bits back of last unprocessed length/lit */
      this.was = 0;                    /* initial length of match */
    }


    const inflateResetKeep = (strm) => {

      if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
      const state = strm.state;
      strm.total_in = strm.total_out = state.total = 0;
      strm.msg = ''; /*Z_NULL*/
      if (state.wrap) {       /* to support ill-conceived Java test suite */
        strm.adler = state.wrap & 1;
      }
      state.mode = HEAD;
      state.last = 0;
      state.havedict = 0;
      state.dmax = 32768;
      state.head = null/*Z_NULL*/;
      state.hold = 0;
      state.bits = 0;
      //state.lencode = state.distcode = state.next = state.codes;
      state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
      state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

      state.sane = 1;
      state.back = -1;
      //Tracev((stderr, "inflate: reset\n"));
      return Z_OK$1;
    };


    const inflateReset = (strm) => {

      if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
      const state = strm.state;
      state.wsize = 0;
      state.whave = 0;
      state.wnext = 0;
      return inflateResetKeep(strm);

    };


    const inflateReset2 = (strm, windowBits) => {
      let wrap;

      /* get the state */
      if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
      const state = strm.state;

      /* extract wrap request from windowBits parameter */
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      }
      else {
        wrap = (windowBits >> 4) + 1;
        if (windowBits < 48) {
          windowBits &= 15;
        }
      }

      /* set number of window bits, free window if different */
      if (windowBits && (windowBits < 8 || windowBits > 15)) {
        return Z_STREAM_ERROR$1;
      }
      if (state.window !== null && state.wbits !== windowBits) {
        state.window = null;
      }

      /* update state and reset the rest of it */
      state.wrap = wrap;
      state.wbits = windowBits;
      return inflateReset(strm);
    };


    const inflateInit2 = (strm, windowBits) => {

      if (!strm) { return Z_STREAM_ERROR$1; }
      //strm.msg = Z_NULL;                 /* in case we return an error */

      const state = new InflateState();

      //if (state === Z_NULL) return Z_MEM_ERROR;
      //Tracev((stderr, "inflate: allocated\n"));
      strm.state = state;
      state.window = null/*Z_NULL*/;
      const ret = inflateReset2(strm, windowBits);
      if (ret !== Z_OK$1) {
        strm.state = null/*Z_NULL*/;
      }
      return ret;
    };


    const inflateInit = (strm) => {

      return inflateInit2(strm, DEF_WBITS);
    };


    /*
     Return state with length and distance decoding tables and index sizes set to
     fixed code decoding.  Normally this returns fixed tables from inffixed.h.
     If BUILDFIXED is defined, then instead this routine builds the tables the
     first time it's called, and returns those tables the first time and
     thereafter.  This reduces the size of the code by about 2K bytes, in
     exchange for a little execution time.  However, BUILDFIXED should not be
     used for threaded applications, since the rewriting of the tables and virgin
     may not be thread-safe.
     */
    let virgin = true;

    let lenfix, distfix; // We have no pointers in JS, so keep tables separate


    const fixedtables = (state) => {

      /* build fixed huffman tables if first call (may not be thread safe) */
      if (virgin) {
        lenfix = new Int32Array(512);
        distfix = new Int32Array(32);

        /* literal/length table */
        let sym = 0;
        while (sym < 144) { state.lens[sym++] = 8; }
        while (sym < 256) { state.lens[sym++] = 9; }
        while (sym < 280) { state.lens[sym++] = 7; }
        while (sym < 288) { state.lens[sym++] = 8; }

        inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

        /* distance table */
        sym = 0;
        while (sym < 32) { state.lens[sym++] = 5; }

        inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

        /* do this just once */
        virgin = false;
      }

      state.lencode = lenfix;
      state.lenbits = 9;
      state.distcode = distfix;
      state.distbits = 5;
    };


    /*
     Update the window with the last wsize (normally 32K) bytes written before
     returning.  If window does not exist yet, create it.  This is only called
     when a window is already in use, or when output has been written during this
     inflate call, but the end of the deflate stream has not been reached yet.
     It is also called to create a window for dictionary data when a dictionary
     is loaded.

     Providing output buffers larger than 32K to inflate() should provide a speed
     advantage, since only the last 32K of output is copied to the sliding window
     upon return from inflate(), and since all distances after the first 32K of
     output will fall in the output data, making match copies simpler and faster.
     The advantage may be dependent on the size of the processor's data caches.
     */
    const updatewindow = (strm, src, end, copy) => {

      let dist;
      const state = strm.state;

      /* if it hasn't been done already, allocate space for the window */
      if (state.window === null) {
        state.wsize = 1 << state.wbits;
        state.wnext = 0;
        state.whave = 0;

        state.window = new Uint8Array(state.wsize);
      }

      /* copy state->wsize or less output bytes into the circular window */
      if (copy >= state.wsize) {
        state.window.set(src.subarray(end - state.wsize, end), 0);
        state.wnext = 0;
        state.whave = state.wsize;
      }
      else {
        dist = state.wsize - state.wnext;
        if (dist > copy) {
          dist = copy;
        }
        //zmemcpy(state->window + state->wnext, end - copy, dist);
        state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
        copy -= dist;
        if (copy) {
          //zmemcpy(state->window, end - copy, copy);
          state.window.set(src.subarray(end - copy, end), 0);
          state.wnext = copy;
          state.whave = state.wsize;
        }
        else {
          state.wnext += dist;
          if (state.wnext === state.wsize) { state.wnext = 0; }
          if (state.whave < state.wsize) { state.whave += dist; }
        }
      }
      return 0;
    };


    const inflate$2 = (strm, flush) => {

      let state;
      let input, output;          // input/output buffers
      let next;                   /* next input INDEX */
      let put;                    /* next output INDEX */
      let have, left;             /* available input and output */
      let hold;                   /* bit buffer */
      let bits;                   /* bits in bit buffer */
      let _in, _out;              /* save starting available input and output */
      let copy;                   /* number of stored or match bytes to copy */
      let from;                   /* where to copy match bytes from */
      let from_source;
      let here = 0;               /* current decoding table entry */
      let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
      //let last;                   /* parent table entry */
      let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
      let len;                    /* length to copy for repeats, bits to drop */
      let ret;                    /* return code */
      const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
      let opts;

      let n; // temporary variable for NEED_BITS

      const order = /* permutation of code lengths */
        new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);


      if (!strm || !strm.state || !strm.output ||
          (!strm.input && strm.avail_in !== 0)) {
        return Z_STREAM_ERROR$1;
      }

      state = strm.state;
      if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


      //--- LOAD() ---
      put = strm.next_out;
      output = strm.output;
      left = strm.avail_out;
      next = strm.next_in;
      input = strm.input;
      have = strm.avail_in;
      hold = state.hold;
      bits = state.bits;
      //---

      _in = have;
      _out = left;
      ret = Z_OK$1;

      inf_leave: // goto emulation
      for (;;) {
        switch (state.mode) {
          case HEAD:
            if (state.wrap === 0) {
              state.mode = TYPEDO;
              break;
            }
            //=== NEEDBITS(16);
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
              state.check = 0/*crc32(0L, Z_NULL, 0)*/;
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32_1(state.check, hbuf, 2, 0);
              //===//

              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              state.mode = FLAGS;
              break;
            }
            state.flags = 0;           /* expect zlib header */
            if (state.head) {
              state.head.done = false;
            }
            if (!(state.wrap & 1) ||   /* check if zlib header allowed */
              (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
              strm.msg = 'incorrect header check';
              state.mode = BAD;
              break;
            }
            if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
              strm.msg = 'unknown compression method';
              state.mode = BAD;
              break;
            }
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
            len = (hold & 0x0f)/*BITS(4)*/ + 8;
            if (state.wbits === 0) {
              state.wbits = len;
            }
            else if (len > state.wbits) {
              strm.msg = 'invalid window size';
              state.mode = BAD;
              break;
            }

            // !!! pako patch. Force use `options.windowBits` if passed.
            // Required to always use max window size by default.
            state.dmax = 1 << state.wbits;
            //state.dmax = 1 << len;

            //Tracev((stderr, "inflate:   zlib header ok\n"));
            strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
            state.mode = hold & 0x200 ? DICTID : TYPE;
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            break;
          case FLAGS:
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.flags = hold;
            if ((state.flags & 0xff) !== Z_DEFLATED) {
              strm.msg = 'unknown compression method';
              state.mode = BAD;
              break;
            }
            if (state.flags & 0xe000) {
              strm.msg = 'unknown header flags set';
              state.mode = BAD;
              break;
            }
            if (state.head) {
              state.head.text = ((hold >> 8) & 1);
            }
            if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32_1(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = TIME;
            /* falls through */
          case TIME:
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (state.head) {
              state.head.time = hold;
            }
            if (state.flags & 0x0200) {
              //=== CRC4(state.check, hold)
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              hbuf[2] = (hold >>> 16) & 0xff;
              hbuf[3] = (hold >>> 24) & 0xff;
              state.check = crc32_1(state.check, hbuf, 4, 0);
              //===
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = OS;
            /* falls through */
          case OS:
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (state.head) {
              state.head.xflags = (hold & 0xff);
              state.head.os = (hold >> 8);
            }
            if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32_1(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = EXLEN;
            /* falls through */
          case EXLEN:
            if (state.flags & 0x0400) {
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.length = hold;
              if (state.head) {
                state.head.extra_len = hold;
              }
              if (state.flags & 0x0200) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = (hold >>> 8) & 0xff;
                state.check = crc32_1(state.check, hbuf, 2, 0);
                //===//
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
            }
            else if (state.head) {
              state.head.extra = null/*Z_NULL*/;
            }
            state.mode = EXTRA;
            /* falls through */
          case EXTRA:
            if (state.flags & 0x0400) {
              copy = state.length;
              if (copy > have) { copy = have; }
              if (copy) {
                if (state.head) {
                  len = state.head.extra_len - state.length;
                  if (!state.head.extra) {
                    // Use untyped array for more convenient processing later
                    state.head.extra = new Uint8Array(state.head.extra_len);
                  }
                  state.head.extra.set(
                    input.subarray(
                      next,
                      // extra field is limited to 65536 bytes
                      // - no need for additional size check
                      next + copy
                    ),
                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                    len
                  );
                  //zmemcpy(state.head.extra + len, next,
                  //        len + copy > state.head.extra_max ?
                  //        state.head.extra_max - len : copy);
                }
                if (state.flags & 0x0200) {
                  state.check = crc32_1(state.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                state.length -= copy;
              }
              if (state.length) { break inf_leave; }
            }
            state.length = 0;
            state.mode = NAME;
            /* falls through */
          case NAME:
            if (state.flags & 0x0800) {
              if (have === 0) { break inf_leave; }
              copy = 0;
              do {
                // TODO: 2 or 1 bytes?
                len = input[next + copy++];
                /* use constant limit because in js we should not preallocate memory */
                if (state.head && len &&
                    (state.length < 65536 /*state.head.name_max*/)) {
                  state.head.name += String.fromCharCode(len);
                }
              } while (len && copy < have);

              if (state.flags & 0x0200) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              if (len) { break inf_leave; }
            }
            else if (state.head) {
              state.head.name = null;
            }
            state.length = 0;
            state.mode = COMMENT;
            /* falls through */
          case COMMENT:
            if (state.flags & 0x1000) {
              if (have === 0) { break inf_leave; }
              copy = 0;
              do {
                len = input[next + copy++];
                /* use constant limit because in js we should not preallocate memory */
                if (state.head && len &&
                    (state.length < 65536 /*state.head.comm_max*/)) {
                  state.head.comment += String.fromCharCode(len);
                }
              } while (len && copy < have);
              if (state.flags & 0x0200) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              if (len) { break inf_leave; }
            }
            else if (state.head) {
              state.head.comment = null;
            }
            state.mode = HCRC;
            /* falls through */
          case HCRC:
            if (state.flags & 0x0200) {
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              if (hold !== (state.check & 0xffff)) {
                strm.msg = 'header crc mismatch';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
            }
            if (state.head) {
              state.head.hcrc = ((state.flags >> 9) & 1);
              state.head.done = true;
            }
            strm.adler = state.check = 0;
            state.mode = TYPE;
            break;
          case DICTID:
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            strm.adler = state.check = zswap32(hold);
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = DICT;
            /* falls through */
          case DICT:
            if (state.havedict === 0) {
              //--- RESTORE() ---
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              //---
              return Z_NEED_DICT$1;
            }
            strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
            state.mode = TYPE;
            /* falls through */
          case TYPE:
            if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
            /* falls through */
          case TYPEDO:
            if (state.last) {
              //--- BYTEBITS() ---//
              hold >>>= bits & 7;
              bits -= bits & 7;
              //---//
              state.mode = CHECK;
              break;
            }
            //=== NEEDBITS(3); */
            while (bits < 3) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.last = (hold & 0x01)/*BITS(1)*/;
            //--- DROPBITS(1) ---//
            hold >>>= 1;
            bits -= 1;
            //---//

            switch ((hold & 0x03)/*BITS(2)*/) {
              case 0:                             /* stored block */
                //Tracev((stderr, "inflate:     stored block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = STORED;
                break;
              case 1:                             /* fixed block */
                fixedtables(state);
                //Tracev((stderr, "inflate:     fixed codes block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = LEN_;             /* decode codes */
                if (flush === Z_TREES) {
                  //--- DROPBITS(2) ---//
                  hold >>>= 2;
                  bits -= 2;
                  //---//
                  break inf_leave;
                }
                break;
              case 2:                             /* dynamic block */
                //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = TABLE;
                break;
              case 3:
                strm.msg = 'invalid block type';
                state.mode = BAD;
            }
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
            break;
          case STORED:
            //--- BYTEBITS() ---// /* go to byte boundary */
            hold >>>= bits & 7;
            bits -= bits & 7;
            //---//
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
              strm.msg = 'invalid stored block lengths';
              state.mode = BAD;
              break;
            }
            state.length = hold & 0xffff;
            //Tracev((stderr, "inflate:       stored length %u\n",
            //        state.length));
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = COPY_;
            if (flush === Z_TREES) { break inf_leave; }
            /* falls through */
          case COPY_:
            state.mode = COPY;
            /* falls through */
          case COPY:
            copy = state.length;
            if (copy) {
              if (copy > have) { copy = have; }
              if (copy > left) { copy = left; }
              if (copy === 0) { break inf_leave; }
              //--- zmemcpy(put, next, copy); ---
              output.set(input.subarray(next, next + copy), put);
              //---//
              have -= copy;
              next += copy;
              left -= copy;
              put += copy;
              state.length -= copy;
              break;
            }
            //Tracev((stderr, "inflate:       stored end\n"));
            state.mode = TYPE;
            break;
          case TABLE:
            //=== NEEDBITS(14); */
            while (bits < 14) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
    //#ifndef PKZIP_BUG_WORKAROUND
            if (state.nlen > 286 || state.ndist > 30) {
              strm.msg = 'too many length or distance symbols';
              state.mode = BAD;
              break;
            }
    //#endif
            //Tracev((stderr, "inflate:       table sizes ok\n"));
            state.have = 0;
            state.mode = LENLENS;
            /* falls through */
          case LENLENS:
            while (state.have < state.ncode) {
              //=== NEEDBITS(3);
              while (bits < 3) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            while (state.have < 19) {
              state.lens[order[state.have++]] = 0;
            }
            // We have separate tables & no pointers. 2 commented lines below not needed.
            //state.next = state.codes;
            //state.lencode = state.next;
            // Switch to use dynamic table
            state.lencode = state.lendyn;
            state.lenbits = 7;

            opts = { bits: state.lenbits };
            ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
            state.lenbits = opts.bits;

            if (ret) {
              strm.msg = 'invalid code lengths set';
              state.mode = BAD;
              break;
            }
            //Tracev((stderr, "inflate:       code lengths ok\n"));
            state.have = 0;
            state.mode = CODELENS;
            /* falls through */
          case CODELENS:
            while (state.have < state.nlen + state.ndist) {
              for (;;) {
                here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((here_bits) <= bits) { break; }
                //--- PULLBYTE() ---//
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              if (here_val < 16) {
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                state.lens[state.have++] = here_val;
              }
              else {
                if (here_val === 16) {
                  //=== NEEDBITS(here.bits + 2);
                  n = here_bits + 2;
                  while (bits < n) {
                    if (have === 0) { break inf_leave; }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  if (state.have === 0) {
                    strm.msg = 'invalid bit length repeat';
                    state.mode = BAD;
                    break;
                  }
                  len = state.lens[state.have - 1];
                  copy = 3 + (hold & 0x03);//BITS(2);
                  //--- DROPBITS(2) ---//
                  hold >>>= 2;
                  bits -= 2;
                  //---//
                }
                else if (here_val === 17) {
                  //=== NEEDBITS(here.bits + 3);
                  n = here_bits + 3;
                  while (bits < n) {
                    if (have === 0) { break inf_leave; }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  len = 0;
                  copy = 3 + (hold & 0x07);//BITS(3);
                  //--- DROPBITS(3) ---//
                  hold >>>= 3;
                  bits -= 3;
                  //---//
                }
                else {
                  //=== NEEDBITS(here.bits + 7);
                  n = here_bits + 7;
                  while (bits < n) {
                    if (have === 0) { break inf_leave; }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  len = 0;
                  copy = 11 + (hold & 0x7f);//BITS(7);
                  //--- DROPBITS(7) ---//
                  hold >>>= 7;
                  bits -= 7;
                  //---//
                }
                if (state.have + copy > state.nlen + state.ndist) {
                  strm.msg = 'invalid bit length repeat';
                  state.mode = BAD;
                  break;
                }
                while (copy--) {
                  state.lens[state.have++] = len;
                }
              }
            }

            /* handle error breaks in while */
            if (state.mode === BAD) { break; }

            /* check for end-of-block code (better have one) */
            if (state.lens[256] === 0) {
              strm.msg = 'invalid code -- missing end-of-block';
              state.mode = BAD;
              break;
            }

            /* build code tables -- note: do not change the lenbits or distbits
               values here (9 and 6) without reading the comments in inftrees.h
               concerning the ENOUGH constants, which depend on those values */
            state.lenbits = 9;

            opts = { bits: state.lenbits };
            ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.lenbits = opts.bits;
            // state.lencode = state.next;

            if (ret) {
              strm.msg = 'invalid literal/lengths set';
              state.mode = BAD;
              break;
            }

            state.distbits = 6;
            //state.distcode.copy(state.codes);
            // Switch to use dynamic table
            state.distcode = state.distdyn;
            opts = { bits: state.distbits };
            ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.distbits = opts.bits;
            // state.distcode = state.next;

            if (ret) {
              strm.msg = 'invalid distances set';
              state.mode = BAD;
              break;
            }
            //Tracev((stderr, 'inflate:       codes ok\n'));
            state.mode = LEN_;
            if (flush === Z_TREES) { break inf_leave; }
            /* falls through */
          case LEN_:
            state.mode = LEN;
            /* falls through */
          case LEN:
            if (have >= 6 && left >= 258) {
              //--- RESTORE() ---
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              //---
              inffast(strm, _out);
              //--- LOAD() ---
              put = strm.next_out;
              output = strm.output;
              left = strm.avail_out;
              next = strm.next_in;
              input = strm.input;
              have = strm.avail_in;
              hold = state.hold;
              bits = state.bits;
              //---

              if (state.mode === TYPE) {
                state.back = -1;
              }
              break;
            }
            state.back = 0;
            for (;;) {
              here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if (here_bits <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if (here_op && (here_op & 0xf0) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (;;) {
                here = state.lencode[last_val +
                        ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((last_bits + here_bits) <= bits) { break; }
                //--- PULLBYTE() ---//
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              //--- DROPBITS(last.bits) ---//
              hold >>>= last_bits;
              bits -= last_bits;
              //---//
              state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            state.length = here_val;
            if (here_op === 0) {
              //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
              //        "inflate:         literal '%c'\n" :
              //        "inflate:         literal 0x%02x\n", here.val));
              state.mode = LIT;
              break;
            }
            if (here_op & 32) {
              //Tracevv((stderr, "inflate:         end of block\n"));
              state.back = -1;
              state.mode = TYPE;
              break;
            }
            if (here_op & 64) {
              strm.msg = 'invalid literal/length code';
              state.mode = BAD;
              break;
            }
            state.extra = here_op & 15;
            state.mode = LENEXT;
            /* falls through */
          case LENEXT:
            if (state.extra) {
              //=== NEEDBITS(state.extra);
              n = state.extra;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
              //--- DROPBITS(state.extra) ---//
              hold >>>= state.extra;
              bits -= state.extra;
              //---//
              state.back += state.extra;
            }
            //Tracevv((stderr, "inflate:         length %u\n", state.length));
            state.was = state.length;
            state.mode = DIST;
            /* falls through */
          case DIST:
            for (;;) {
              here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((here_bits) <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if ((here_op & 0xf0) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (;;) {
                here = state.distcode[last_val +
                        ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((last_bits + here_bits) <= bits) { break; }
                //--- PULLBYTE() ---//
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              //--- DROPBITS(last.bits) ---//
              hold >>>= last_bits;
              bits -= last_bits;
              //---//
              state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            if (here_op & 64) {
              strm.msg = 'invalid distance code';
              state.mode = BAD;
              break;
            }
            state.offset = here_val;
            state.extra = (here_op) & 15;
            state.mode = DISTEXT;
            /* falls through */
          case DISTEXT:
            if (state.extra) {
              //=== NEEDBITS(state.extra);
              n = state.extra;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
              //--- DROPBITS(state.extra) ---//
              hold >>>= state.extra;
              bits -= state.extra;
              //---//
              state.back += state.extra;
            }
    //#ifdef INFLATE_STRICT
            if (state.offset > state.dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
    //#endif
            //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
            state.mode = MATCH;
            /* falls through */
          case MATCH:
            if (left === 0) { break inf_leave; }
            copy = _out - left;
            if (state.offset > copy) {         /* copy from window */
              copy = state.offset - copy;
              if (copy > state.whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break;
                }
    // (!) This block is disabled in zlib defaults,
    // don't enable it for binary compatibility
    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
    //          Trace((stderr, "inflate.c too far\n"));
    //          copy -= state.whave;
    //          if (copy > state.length) { copy = state.length; }
    //          if (copy > left) { copy = left; }
    //          left -= copy;
    //          state.length -= copy;
    //          do {
    //            output[put++] = 0;
    //          } while (--copy);
    //          if (state.length === 0) { state.mode = LEN; }
    //          break;
    //#endif
              }
              if (copy > state.wnext) {
                copy -= state.wnext;
                from = state.wsize - copy;
              }
              else {
                from = state.wnext - copy;
              }
              if (copy > state.length) { copy = state.length; }
              from_source = state.window;
            }
            else {                              /* copy from output */
              from_source = output;
              from = put - state.offset;
              copy = state.length;
            }
            if (copy > left) { copy = left; }
            left -= copy;
            state.length -= copy;
            do {
              output[put++] = from_source[from++];
            } while (--copy);
            if (state.length === 0) { state.mode = LEN; }
            break;
          case LIT:
            if (left === 0) { break inf_leave; }
            output[put++] = state.length;
            left--;
            state.mode = LEN;
            break;
          case CHECK:
            if (state.wrap) {
              //=== NEEDBITS(32);
              while (bits < 32) {
                if (have === 0) { break inf_leave; }
                have--;
                // Use '|' instead of '+' to make sure that result is signed
                hold |= input[next++] << bits;
                bits += 8;
              }
              //===//
              _out -= left;
              strm.total_out += _out;
              state.total += _out;
              if (_out) {
                strm.adler = state.check =
                    /*UPDATE(state.check, put - _out, _out);*/
                    (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));

              }
              _out = left;
              // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
              if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                strm.msg = 'incorrect data check';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              //Tracev((stderr, "inflate:   check matches trailer\n"));
            }
            state.mode = LENGTH;
            /* falls through */
          case LENGTH:
            if (state.wrap && state.flags) {
              //=== NEEDBITS(32);
              while (bits < 32) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              if (hold !== (state.total & 0xffffffff)) {
                strm.msg = 'incorrect length check';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              //Tracev((stderr, "inflate:   length matches trailer\n"));
            }
            state.mode = DONE;
            /* falls through */
          case DONE:
            ret = Z_STREAM_END$1;
            break inf_leave;
          case BAD:
            ret = Z_DATA_ERROR$1;
            break inf_leave;
          case MEM:
            return Z_MEM_ERROR$1;
          case SYNC:
            /* falls through */
          default:
            return Z_STREAM_ERROR$1;
        }
      }

      // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

      /*
         Return from inflate(), updating the total counts and the check value.
         If there was no progress during the inflate() call, return a buffer
         error.  Call updatewindow() to create and/or update the window state.
         Note: a memory error from inflate() is non-recoverable.
       */

      //--- RESTORE() ---
      strm.next_out = put;
      strm.avail_out = left;
      strm.next_in = next;
      strm.avail_in = have;
      state.hold = hold;
      state.bits = bits;
      //---

      if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                          (state.mode < CHECK || flush !== Z_FINISH$1))) {
        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
      }
      _in -= strm.avail_in;
      _out -= strm.avail_out;
      strm.total_in += _in;
      strm.total_out += _out;
      state.total += _out;
      if (state.wrap && _out) {
        strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
          (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));
      }
      strm.data_type = state.bits + (state.last ? 64 : 0) +
                        (state.mode === TYPE ? 128 : 0) +
                        (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
      if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {
        ret = Z_BUF_ERROR;
      }
      return ret;
    };


    const inflateEnd = (strm) => {

      if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
        return Z_STREAM_ERROR$1;
      }

      let state = strm.state;
      if (state.window) {
        state.window = null;
      }
      strm.state = null;
      return Z_OK$1;
    };


    const inflateGetHeader = (strm, head) => {

      /* check state */
      if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
      const state = strm.state;
      if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }

      /* save header structure */
      state.head = head;
      head.done = false;
      return Z_OK$1;
    };


    const inflateSetDictionary = (strm, dictionary) => {
      const dictLength = dictionary.length;

      let state;
      let dictid;
      let ret;

      /* check state */
      if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR$1; }
      state = strm.state;

      if (state.wrap !== 0 && state.mode !== DICT) {
        return Z_STREAM_ERROR$1;
      }

      /* check for correct dictionary identifier */
      if (state.mode === DICT) {
        dictid = 1; /* adler32(0, null, 0)*/
        /* dictid = adler32(dictid, dictionary, dictLength); */
        dictid = adler32_1(dictid, dictionary, dictLength, 0);
        if (dictid !== state.check) {
          return Z_DATA_ERROR$1;
        }
      }
      /* copy dictionary to window using updatewindow(), which will amend the
       existing dictionary if appropriate */
      ret = updatewindow(strm, dictionary, dictLength, dictLength);
      if (ret) {
        state.mode = MEM;
        return Z_MEM_ERROR$1;
      }
      state.havedict = 1;
      // Tracev((stderr, "inflate:   dictionary set\n"));
      return Z_OK$1;
    };


    var inflateReset_1 = inflateReset;
    var inflateReset2_1 = inflateReset2;
    var inflateResetKeep_1 = inflateResetKeep;
    var inflateInit_1 = inflateInit;
    var inflateInit2_1 = inflateInit2;
    var inflate_2$1 = inflate$2;
    var inflateEnd_1 = inflateEnd;
    var inflateGetHeader_1 = inflateGetHeader;
    var inflateSetDictionary_1 = inflateSetDictionary;
    var inflateInfo = 'pako inflate (from Nodeca project)';

    /* Not implemented
    module.exports.inflateCopy = inflateCopy;
    module.exports.inflateGetDictionary = inflateGetDictionary;
    module.exports.inflateMark = inflateMark;
    module.exports.inflatePrime = inflatePrime;
    module.exports.inflateSync = inflateSync;
    module.exports.inflateSyncPoint = inflateSyncPoint;
    module.exports.inflateUndermine = inflateUndermine;
    */

    var inflate_1$2 = {
    	inflateReset: inflateReset_1,
    	inflateReset2: inflateReset2_1,
    	inflateResetKeep: inflateResetKeep_1,
    	inflateInit: inflateInit_1,
    	inflateInit2: inflateInit2_1,
    	inflate: inflate_2$1,
    	inflateEnd: inflateEnd_1,
    	inflateGetHeader: inflateGetHeader_1,
    	inflateSetDictionary: inflateSetDictionary_1,
    	inflateInfo: inflateInfo
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    function GZheader() {
      /* true if compressed data believed to be text */
      this.text       = 0;
      /* modification time */
      this.time       = 0;
      /* extra flags (not used when writing a gzip file) */
      this.xflags     = 0;
      /* operating system */
      this.os         = 0;
      /* pointer to extra field or Z_NULL if none */
      this.extra      = null;
      /* extra field length (valid if extra != Z_NULL) */
      this.extra_len  = 0; // Actually, we don't need it in JS,
                           // but leave for few code modifications

      //
      // Setup limits is not necessary because in js we should not preallocate memory
      // for inflate use constant limit in 65536 bytes
      //

      /* space at extra (only when reading header) */
      // this.extra_max  = 0;
      /* pointer to zero-terminated file name or Z_NULL */
      this.name       = '';
      /* space at name (only when reading header) */
      // this.name_max   = 0;
      /* pointer to zero-terminated comment or Z_NULL */
      this.comment    = '';
      /* space at comment (only when reading header) */
      // this.comm_max   = 0;
      /* true if there was or will be a header crc */
      this.hcrc       = 0;
      /* true when done reading gzip header (not used when writing a gzip file) */
      this.done       = false;
    }

    var gzheader = GZheader;

    const toString$2 = Object.prototype.toString;

    /* Public constants ==========================================================*/
    /* ===========================================================================*/

    const {
      Z_NO_FLUSH, Z_FINISH,
      Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR
    } = constants$2;

    /* ===========================================================================*/


    /**
     * class Inflate
     *
     * Generic JS-style wrapper for zlib calls. If you don't need
     * streaming behaviour - use more simple functions: [[inflate]]
     * and [[inflateRaw]].
     **/

    /* internal
     * inflate.chunks -> Array
     *
     * Chunks of output data, if [[Inflate#onData]] not overridden.
     **/

    /**
     * Inflate.result -> Uint8Array|String
     *
     * Uncompressed result, generated by default [[Inflate#onData]]
     * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
     * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
     **/

    /**
     * Inflate.err -> Number
     *
     * Error code after inflate finished. 0 (Z_OK) on success.
     * Should be checked if broken data possible.
     **/

    /**
     * Inflate.msg -> String
     *
     * Error message, if [[Inflate.err]] != 0
     **/


    /**
     * new Inflate(options)
     * - options (Object): zlib inflate options.
     *
     * Creates new inflator instance with specified params. Throws exception
     * on bad params. Supported options:
     *
     * - `windowBits`
     * - `dictionary`
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Additional options, for internal needs:
     *
     * - `chunkSize` - size of generated data chunks (16K by default)
     * - `raw` (Boolean) - do raw inflate
     * - `to` (String) - if equal to 'string', then result will be converted
     *   from utf8 to utf16 (javascript) string. When string output requested,
     *   chunk length can differ from `chunkSize`, depending on content.
     *
     * By default, when no options set, autodetect deflate/gzip data format via
     * wrapper header.
     *
     * ##### Example:
     *
     * ```javascript
     * const pako = require('pako')
     * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
     * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
     *
     * const inflate = new pako.Inflate({ level: 3});
     *
     * inflate.push(chunk1, false);
     * inflate.push(chunk2, true);  // true -> last chunk
     *
     * if (inflate.err) { throw new Error(inflate.err); }
     *
     * console.log(inflate.result);
     * ```
     **/
    function Inflate$1(options) {
      this.options = common.assign({
        chunkSize: 1024 * 64,
        windowBits: 15,
        to: ''
      }, options || {});

      const opt = this.options;

      // Force window size for `raw` data, if not set directly,
      // because we have no header for autodetect.
      if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
        opt.windowBits = -opt.windowBits;
        if (opt.windowBits === 0) { opt.windowBits = -15; }
      }

      // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
      if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
          !(options && options.windowBits)) {
        opt.windowBits += 32;
      }

      // Gzip header has no info about windows size, we can do autodetect only
      // for deflate. So, if window size not set, force it to max when gzip possible
      if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
        // bit 3 (16) -> gzipped data
        // bit 4 (32) -> autodetect gzip/deflate
        if ((opt.windowBits & 15) === 0) {
          opt.windowBits |= 15;
        }
      }

      this.err    = 0;      // error code, if happens (0 = Z_OK)
      this.msg    = '';     // error message
      this.ended  = false;  // used to avoid multiple onEnd() calls
      this.chunks = [];     // chunks of compressed data

      this.strm   = new zstream();
      this.strm.avail_out = 0;

      let status  = inflate_1$2.inflateInit2(
        this.strm,
        opt.windowBits
      );

      if (status !== Z_OK) {
        throw new Error(messages[status]);
      }

      this.header = new gzheader();

      inflate_1$2.inflateGetHeader(this.strm, this.header);

      // Setup dictionary
      if (opt.dictionary) {
        // Convert data if needed
        if (typeof opt.dictionary === 'string') {
          opt.dictionary = strings.string2buf(opt.dictionary);
        } else if (toString$2.call(opt.dictionary) === '[object ArrayBuffer]') {
          opt.dictionary = new Uint8Array(opt.dictionary);
        }
        if (opt.raw) { //In raw mode we need to set the dictionary early
          status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
          if (status !== Z_OK) {
            throw new Error(messages[status]);
          }
        }
      }
    }

    /**
     * Inflate#push(data[, flush_mode]) -> Boolean
     * - data (Uint8Array|ArrayBuffer): input data
     * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
     *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
     *   `true` means Z_FINISH.
     *
     * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
     * new output chunks. Returns `true` on success. If end of stream detected,
     * [[Inflate#onEnd]] will be called.
     *
     * `flush_mode` is not needed for normal operation, because end of stream
     * detected automatically. You may try to use it for advanced things, but
     * this functionality was not tested.
     *
     * On fail call [[Inflate#onEnd]] with error code and return false.
     *
     * ##### Example
     *
     * ```javascript
     * push(chunk, false); // push one of data chunks
     * ...
     * push(chunk, true);  // push last chunk
     * ```
     **/
    Inflate$1.prototype.push = function (data, flush_mode) {
      const strm = this.strm;
      const chunkSize = this.options.chunkSize;
      const dictionary = this.options.dictionary;
      let status, _flush_mode, last_avail_out;

      if (this.ended) return false;

      if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
      else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

      // Convert data if needed
      if (toString$2.call(data) === '[object ArrayBuffer]') {
        strm.input = new Uint8Array(data);
      } else {
        strm.input = data;
      }

      strm.next_in = 0;
      strm.avail_in = strm.input.length;

      for (;;) {
        if (strm.avail_out === 0) {
          strm.output = new Uint8Array(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }

        status = inflate_1$2.inflate(strm, _flush_mode);

        if (status === Z_NEED_DICT && dictionary) {
          status = inflate_1$2.inflateSetDictionary(strm, dictionary);

          if (status === Z_OK) {
            status = inflate_1$2.inflate(strm, _flush_mode);
          } else if (status === Z_DATA_ERROR) {
            // Replace code with more verbose
            status = Z_NEED_DICT;
          }
        }

        // Skip snyc markers if more data follows and not raw mode
        while (strm.avail_in > 0 &&
               status === Z_STREAM_END &&
               strm.state.wrap > 0 &&
               data[strm.next_in] !== 0)
        {
          inflate_1$2.inflateReset(strm);
          status = inflate_1$2.inflate(strm, _flush_mode);
        }

        switch (status) {
          case Z_STREAM_ERROR:
          case Z_DATA_ERROR:
          case Z_NEED_DICT:
          case Z_MEM_ERROR:
            this.onEnd(status);
            this.ended = true;
            return false;
        }

        // Remember real `avail_out` value, because we may patch out buffer content
        // to align utf8 strings boundaries.
        last_avail_out = strm.avail_out;

        if (strm.next_out) {
          if (strm.avail_out === 0 || status === Z_STREAM_END) {

            if (this.options.to === 'string') {

              let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

              let tail = strm.next_out - next_out_utf8;
              let utf8str = strings.buf2string(strm.output, next_out_utf8);

              // move tail & realign counters
              strm.next_out = tail;
              strm.avail_out = chunkSize - tail;
              if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);

              this.onData(utf8str);

            } else {
              this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
            }
          }
        }

        // Must repeat iteration if out buffer is full
        if (status === Z_OK && last_avail_out === 0) continue;

        // Finalize if end of stream reached.
        if (status === Z_STREAM_END) {
          status = inflate_1$2.inflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return true;
        }

        if (strm.avail_in === 0) break;
      }

      return true;
    };


    /**
     * Inflate#onData(chunk) -> Void
     * - chunk (Uint8Array|String): output data. When string output requested,
     *   each chunk will be string.
     *
     * By default, stores data blocks in `chunks[]` property and glue
     * those in `onEnd`. Override this handler, if you need another behaviour.
     **/
    Inflate$1.prototype.onData = function (chunk) {
      this.chunks.push(chunk);
    };


    /**
     * Inflate#onEnd(status) -> Void
     * - status (Number): inflate status. 0 (Z_OK) on success,
     *   other if not.
     *
     * Called either after you tell inflate that the input stream is
     * complete (Z_FINISH). By default - join collected chunks,
     * free memory and fill `results` / `err` properties.
     **/
    Inflate$1.prototype.onEnd = function (status) {
      // On success - join
      if (status === Z_OK) {
        if (this.options.to === 'string') {
          this.result = this.chunks.join('');
        } else {
          this.result = common.flattenChunks(this.chunks);
        }
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };


    /**
     * inflate(data[, options]) -> Uint8Array|String
     * - data (Uint8Array): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * Decompress `data` with inflate/ungzip and `options`. Autodetect
     * format via wrapper header by default. That's why we don't provide
     * separate `ungzip` method.
     *
     * Supported options are:
     *
     * - windowBits
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information.
     *
     * Sugar (options):
     *
     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
     *   negative windowBits implicitly.
     * - `to` (String) - if equal to 'string', then result will be converted
     *   from utf8 to utf16 (javascript) string. When string output requested,
     *   chunk length can differ from `chunkSize`, depending on content.
     *
     *
     * ##### Example:
     *
     * ```javascript
     * const pako = require('pako');
     * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
     * let output;
     *
     * try {
     *   output = pako.inflate(input);
     * } catch (err) {
     *   console.log(err);
     * }
     * ```
     **/
    function inflate$1(input, options) {
      const inflator = new Inflate$1(options);

      inflator.push(input);

      // That will never happens, if you don't cheat with options :)
      if (inflator.err) throw inflator.msg || messages[inflator.err];

      return inflator.result;
    }


    /**
     * inflateRaw(data[, options]) -> Uint8Array|String
     * - data (Uint8Array): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * The same as [[inflate]], but creates raw data, without wrapper
     * (header and adler32 crc).
     **/
    function inflateRaw$1(input, options) {
      options = options || {};
      options.raw = true;
      return inflate$1(input, options);
    }


    /**
     * ungzip(data[, options]) -> Uint8Array|String
     * - data (Uint8Array): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * Just shortcut to [[inflate]], because it autodetects format
     * by header.content. Done for convenience.
     **/


    var Inflate_1$1 = Inflate$1;
    var inflate_2 = inflate$1;
    var inflateRaw_1$1 = inflateRaw$1;
    var ungzip$1 = inflate$1;
    var constants = constants$2;

    var inflate_1$1 = {
    	Inflate: Inflate_1$1,
    	inflate: inflate_2,
    	inflateRaw: inflateRaw_1$1,
    	ungzip: ungzip$1,
    	constants: constants
    };

    const { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;
    var inflate_1 = inflate;

    // Deterministic IDL address as a function of the program id.
    async function idlAddress(programId) {
        const base = (await PublicKey.findProgramAddress([], programId))[0];
        return await PublicKey.createWithSeed(base, seed(), programId);
    }
    // Seed for generating the idlAddress.
    function seed() {
        return "anchor:idl";
    }
    const IDL_ACCOUNT_LAYOUT = lib$1.struct([
        lib$1.publicKey("authority"),
        lib$1.vecU8("data"),
    ]);
    function decodeIdlAccount(data) {
        return IDL_ACCOUNT_LAYOUT.decode(data);
    }

    function parseIdlErrors(idl) {
        const errors = new Map();
        if (idl.errors) {
            idl.errors.forEach((e) => {
                var _a;
                let msg = (_a = e.msg) !== null && _a !== void 0 ? _a : e.name;
                errors.set(e.code, msg);
            });
        }
        return errors;
    }
    // Allow either IdLInstruction or IdlStateMethod since the types share fields.
    function toInstruction(idlIx, ...args) {
        if (idlIx.args.length != args.length) {
            throw new Error("Invalid argument length");
        }
        const ix = {};
        let idx = 0;
        idlIx.args.forEach((ixArg) => {
            ix[ixArg.name] = args[idx];
            idx += 1;
        });
        return ix;
    }
    // Throws error if any account required for the `ix` is not given.
    function validateAccounts(ixAccounts, accounts) {
        ixAccounts.forEach((acc) => {
            // @ts-ignore
            if (acc.accounts !== undefined) {
                // @ts-ignore
                validateAccounts(acc.accounts, accounts[acc.name]);
            }
            else {
                if (accounts[acc.name] === undefined) {
                    throw new Error(`Invalid arguments: ${acc.name} not provided.`);
                }
            }
        });
    }
    // Translates an address to a Pubkey.
    function translateAddress(address) {
        if (typeof address === "string") {
            const pk = new PublicKey(address);
            return pk;
        }
        else {
            return address;
        }
    }

    // Sync version of web3.PublicKey.createWithSeed.
    function createWithSeedSync(fromPublicKey, seed, programId) {
        const buffer = Buffer.concat([
            fromPublicKey.toBuffer(),
            Buffer.from(seed),
            programId.toBuffer(),
        ]);
        const hash = sha256.sha256.digest(buffer);
        return new PublicKey(Buffer.from(hash));
    }
    // Sync version of web3.PublicKey.createProgramAddress.
    function createProgramAddressSync(seeds, programId) {
        const MAX_SEED_LENGTH = 32;
        let buffer = Buffer.alloc(0);
        seeds.forEach(function (seed) {
            if (seed.length > MAX_SEED_LENGTH) {
                throw new TypeError(`Max seed length exceeded`);
            }
            buffer = Buffer.concat([buffer, toBuffer(seed)]);
        });
        buffer = Buffer.concat([
            buffer,
            programId.toBuffer(),
            Buffer.from("ProgramDerivedAddress"),
        ]);
        let hash = sha256.sha256(new Uint8Array(buffer));
        let publicKeyBytes = new bn$1(hash, 16).toArray(undefined, 32);
        if (PublicKey.isOnCurve(new Uint8Array(publicKeyBytes))) {
            throw new Error(`Invalid seeds, address must fall off the curve`);
        }
        return new PublicKey(publicKeyBytes);
    }
    // Sync version of web3.PublicKey.findProgramAddress.
    function findProgramAddressSync(seeds, programId) {
        let nonce = 255;
        let address;
        while (nonce != 0) {
            try {
                const seedsWithNonce = seeds.concat(Buffer.from([nonce]));
                address = createProgramAddressSync(seedsWithNonce, programId);
            }
            catch (err) {
                if (err instanceof TypeError) {
                    throw err;
                }
                nonce--;
                continue;
            }
            return [address, nonce];
        }
        throw new Error(`Unable to find a viable program address nonce`);
    }
    const toBuffer = (arr) => {
        if (arr instanceof Buffer) {
            return arr;
        }
        else if (arr instanceof Uint8Array) {
            return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);
        }
        else {
            return Buffer.from(arr);
        }
    };
    async function associated(programId, ...args) {
        let seeds = [Buffer.from([97, 110, 99, 104, 111, 114])]; // b"anchor".
        args.forEach((arg) => {
            seeds.push(
            // @ts-ignore
            arg.buffer !== undefined ? arg : translateAddress(arg).toBuffer());
        });
        const [assoc] = await PublicKey.findProgramAddress(seeds, translateAddress(programId));
        return assoc;
    }

    function splitArgsAndCtx(idlIx, args) {
        let options = {};
        const inputLen = idlIx.args ? idlIx.args.length : 0;
        if (args.length > inputLen) {
            if (args.length !== inputLen + 1) {
                throw new Error("provided too many arguments ${args}");
            }
            options = args.pop();
        }
        return [args, options];
    }

    class InstructionNamespaceFactory {
        static build(idlIx, encodeFn, programId) {
            if (idlIx.name === "_inner") {
                throw new IdlError("the _inner name is reserved");
            }
            const ix = (...args) => {
                const [ixArgs, ctx] = splitArgsAndCtx(idlIx, [...args]);
                validateAccounts(idlIx.accounts, ctx.accounts);
                validateInstruction(idlIx, ...args);
                const keys = ix.accounts(ctx.accounts);
                if (ctx.remainingAccounts !== undefined) {
                    keys.push(...ctx.remainingAccounts);
                }
                if (ctx.__private && ctx.__private.logAccounts) {
                    console.log("Outgoing account metas:", keys);
                }
                return new TransactionInstruction({
                    keys,
                    programId,
                    data: encodeFn(idlIx.name, toInstruction(idlIx, ...ixArgs)),
                });
            };
            // Utility fn for ordering the accounts for this instruction.
            ix["accounts"] = (accs) => {
                return InstructionNamespaceFactory.accountsArray(accs, idlIx.accounts);
            };
            return ix;
        }
        static accountsArray(ctx, accounts) {
            return accounts
                .map((acc) => {
                // Nested accounts.
                // @ts-ignore
                const nestedAccounts = acc.accounts;
                if (nestedAccounts !== undefined) {
                    const rpcAccs = ctx[acc.name];
                    return InstructionNamespaceFactory.accountsArray(rpcAccs, nestedAccounts).flat();
                }
                else {
                    const account = acc;
                    return {
                        pubkey: translateAddress(ctx[acc.name]),
                        isWritable: account.isMut,
                        isSigner: account.isSigner,
                    };
                }
            })
                .flat();
        }
    }
    // Throws error if any argument required for the `ix` is not given.
    function validateInstruction(ix, ...args) {
        // todo
    }

    class RpcFactory {
        static build(idlIx, txFn, idlErrors, provider) {
            const rpc = async (...args) => {
                const tx = txFn(...args);
                const [, ctx] = splitArgsAndCtx(idlIx, [...args]);
                try {
                    const txSig = await provider.send(tx, ctx.signers, ctx.options);
                    return txSig;
                }
                catch (err) {
                    console.log("Translating error", err);
                    let translatedErr = ProgramError.parse(err, idlErrors);
                    if (translatedErr === null) {
                        throw err;
                    }
                    throw translatedErr;
                }
            };
            return rpc;
        }
    }

    class TransactionFactory {
        static build(idlIx, ixFn) {
            const txFn = (...args) => {
                const [, ctx] = splitArgsAndCtx(idlIx, [...args]);
                const tx = new Transaction();
                if (ctx.instructions !== undefined) {
                    tx.add(...ctx.instructions);
                }
                tx.add(ixFn(...args));
                return tx;
            };
            return txFn;
        }
    }

    class StateFactory {
        static build(idl, coder, programId, provider) {
            if (idl.state === undefined) {
                return undefined;
            }
            return new StateClient(idl, programId, provider, coder);
        }
    }
    /**
     * A client for the program state. Similar to the base [[Program]] client,
     * one can use this to send transactions and read accounts for the state
     * abstraction.
     */
    class StateClient {
        constructor(idl, programId, provider, coder) {
            this._idl = idl;
            this._programId = programId;
            this._address = programStateAddress(programId);
            this._provider = provider !== null && provider !== void 0 ? provider : getProvider();
            this._coder = coder !== null && coder !== void 0 ? coder : new Coder(idl);
            this._sub = null;
            // Build namespaces.
            const [instruction, transaction, rpc] = (() => {
                let instruction = {};
                let transaction = {};
                let rpc = {};
                idl.state.methods.forEach((m) => {
                    // Build instruction method.
                    const ixItem = InstructionNamespaceFactory.build(m, (ixName, ix) => coder.instruction.encodeState(ixName, ix), programId);
                    ixItem["accounts"] = (accounts) => {
                        const keys = stateInstructionKeys(programId, provider, m, accounts);
                        return keys.concat(InstructionNamespaceFactory.accountsArray(accounts, m.accounts));
                    };
                    // Build transaction method.
                    const txItem = TransactionFactory.build(m, ixItem);
                    // Build RPC method.
                    const rpcItem = RpcFactory.build(m, txItem, parseIdlErrors(idl), provider);
                    // Attach them all to their respective namespaces.
                    const name = camelcase(m.name);
                    instruction[name] = ixItem;
                    transaction[name] = txItem;
                    rpc[name] = rpcItem;
                });
                return [instruction, transaction, rpc];
            })();
            this.instruction = instruction;
            this.transaction = transaction;
            this.rpc = rpc;
        }
        /**
         * Returns the program ID owning the state.
         */
        get programId() {
            return this._programId;
        }
        /**
         * Returns the client's wallet and network provider.
         */
        get provider() {
            return this._provider;
        }
        /**
         * Returns the coder.
         */
        get coder() {
            return this._coder;
        }
        /**
         * Returns the deserialized state account.
         */
        async fetch() {
            const addr = this.address();
            const accountInfo = await this.provider.connection.getAccountInfo(addr);
            if (accountInfo === null) {
                throw new Error(`Account does not exist ${addr.toString()}`);
            }
            // Assert the account discriminator is correct.
            const expectedDiscriminator = await stateDiscriminator(this._idl.state.struct.name);
            if (expectedDiscriminator.compare(accountInfo.data.slice(0, 8))) {
                throw new Error("Invalid account discriminator");
            }
            return this.coder.state.decode(accountInfo.data);
        }
        /**
         * Returns the state address.
         */
        address() {
            return this._address;
        }
        /**
         * Returns an `EventEmitter` with a `"change"` event that's fired whenever
         * the state account cahnges.
         */
        subscribe(commitment) {
            if (this._sub !== null) {
                return this._sub.ee;
            }
            const ee = new eventemitter3();
            const listener = this.provider.connection.onAccountChange(this.address(), (acc) => {
                const account = this.coder.state.decode(acc.data);
                ee.emit("change", account);
            }, commitment);
            this._sub = {
                ee,
                listener,
            };
            return ee;
        }
        /**
         * Unsubscribes to state changes.
         */
        unsubscribe() {
            if (this._sub !== null) {
                this.provider.connection
                    .removeAccountChangeListener(this._sub.listener)
                    .then(async () => {
                    this._sub = null;
                })
                    .catch(console.error);
            }
        }
    }
    // Calculates the deterministic address of the program's "state" account.
    function programStateAddress(programId) {
        let [registrySigner] = findProgramAddressSync([], programId);
        return createWithSeedSync(registrySigner, "unversioned", programId);
    }
    // Returns the common keys that are prepended to all instructions targeting
    // the "state" of a program.
    function stateInstructionKeys(programId, provider, m, accounts) {
        if (m.name === "new") {
            // Ctor `new` method.
            const [programSigner] = findProgramAddressSync([], programId);
            return [
                {
                    pubkey: provider.wallet.publicKey,
                    isWritable: false,
                    isSigner: true,
                },
                {
                    pubkey: programStateAddress(programId),
                    isWritable: true,
                    isSigner: false,
                },
                { pubkey: programSigner, isWritable: false, isSigner: false },
                {
                    pubkey: SystemProgram.programId,
                    isWritable: false,
                    isSigner: false,
                },
                { pubkey: programId, isWritable: false, isSigner: false },
            ];
        }
        else {
            validateAccounts(m.accounts, accounts);
            return [
                {
                    pubkey: programStateAddress(programId),
                    isWritable: true,
                    isSigner: false,
                },
            ];
        }
    }

    class AccountFactory {
        static build(idl, coder, programId, provider) {
            const accountFns = {};
            idl.accounts.forEach((idlAccount) => {
                const name = camelcase(idlAccount.name);
                accountFns[name] = new AccountClient(idl, idlAccount, programId, provider, coder);
            });
            return accountFns;
        }
    }
    class AccountClient {
        constructor(idl, idlAccount, programId, provider, coder) {
            this._idlAccount = idlAccount;
            this._programId = programId;
            this._provider = provider !== null && provider !== void 0 ? provider : getProvider();
            this._coder = coder !== null && coder !== void 0 ? coder : new Coder(idl);
            this._size = ACCOUNT_DISCRIMINATOR_SIZE + accountSize(idl, idlAccount);
        }
        /**
         * Returns the number of bytes in this account.
         */
        get size() {
            return this._size;
        }
        /**
         * Returns the program ID owning all accounts.
         */
        get programId() {
            return this._programId;
        }
        /**
         * Returns the client's wallet and network provider.
         */
        get provider() {
            return this._provider;
        }
        /**
         * Returns the coder.
         */
        get coder() {
            return this._coder;
        }
        /**
         * Returns a deserialized account.
         *
         * @param address The address of the account to fetch.
         */
        async fetch(address) {
            const accountInfo = await this._provider.connection.getAccountInfo(translateAddress(address));
            if (accountInfo === null) {
                throw new Error(`Account does not exist ${address.toString()}`);
            }
            // Assert the account discriminator is correct.
            const discriminator = await accountDiscriminator(this._idlAccount.name);
            if (discriminator.compare(accountInfo.data.slice(0, 8))) {
                throw new Error("Invalid account discriminator");
            }
            return this._coder.accounts.decode(this._idlAccount.name, accountInfo.data);
        }
        /**
         * Returns all instances of this account type for the program.
         */
        async all(filter) {
            let bytes = await accountDiscriminator(this._idlAccount.name);
            if (filter !== undefined) {
                bytes = Buffer.concat([bytes, filter]);
            }
            let resp = await this._provider.connection.getProgramAccounts(this._programId, {
                commitment: this._provider.connection.commitment,
                filters: [
                    {
                        memcmp: {
                            offset: 0,
                            bytes: bs58.encode(bytes),
                        },
                    },
                ],
            });
            return resp.map(({ pubkey, account }) => {
                return {
                    publicKey: pubkey,
                    account: this._coder.accounts.decode(this._idlAccount.name, account.data),
                };
            });
        }
        /**
         * Returns an `EventEmitter` emitting a "change" event whenever the account
         * changes.
         */
        subscribe(address, commitment) {
            if (subscriptions.get(address.toString())) {
                return subscriptions.get(address.toString()).ee;
            }
            const ee = new eventemitter3();
            address = translateAddress(address);
            const listener = this._provider.connection.onAccountChange(address, (acc) => {
                const account = this._coder.accounts.decode(this._idlAccount.name, acc.data);
                ee.emit("change", account);
            }, commitment);
            subscriptions.set(address.toString(), {
                ee,
                listener,
            });
            return ee;
        }
        /**
         * Unsubscribes from the account at the given address.
         */
        unsubscribe(address) {
            let sub = subscriptions.get(address.toString());
            if (!sub) {
                console.warn("Address is not subscribed");
                return;
            }
            if (subscriptions) {
                this._provider.connection
                    .removeAccountChangeListener(sub.listener)
                    .then(() => {
                    subscriptions.delete(address.toString());
                })
                    .catch(console.error);
            }
        }
        /**
         * Returns an instruction for creating this account.
         */
        async createInstruction(signer, sizeOverride) {
            const size = this.size;
            return SystemProgram.createAccount({
                fromPubkey: this._provider.wallet.publicKey,
                newAccountPubkey: signer.publicKey,
                space: sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size,
                lamports: await this._provider.connection.getMinimumBalanceForRentExemption(sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size),
                programId: this._programId,
            });
        }
        /**
         * @deprecated since version 14.0.
         *
         * Function returning the associated account. Args are keys to associate.
         * Order matters.
         */
        async associated(...args) {
            const addr = await this.associatedAddress(...args);
            return await this.fetch(addr);
        }
        /**
         * @deprecated since version 14.0.
         *
         * Function returning the associated address. Args are keys to associate.
         * Order matters.
         */
        async associatedAddress(...args) {
            return await associated(this._programId, ...args);
        }
    }
    // Tracks all subscriptions.
    const subscriptions = new Map();

    /* eslint complexity: [2, 18], max-statements: [2, 33] */
    var shams$1 = function hasSymbols() {
    	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
    	if (typeof Symbol.iterator === 'symbol') { return true; }

    	var obj = {};
    	var sym = Symbol('test');
    	var symObj = Object(sym);
    	if (typeof sym === 'string') { return false; }

    	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
    	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

    	// temp disabled per https://github.com/ljharb/object.assign/issues/17
    	// if (sym instanceof Symbol) { return false; }
    	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    	// if (!(symObj instanceof Symbol)) { return false; }

    	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
    	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

    	var symVal = 42;
    	obj[sym] = symVal;
    	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

    	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

    	var syms = Object.getOwnPropertySymbols(obj);
    	if (syms.length !== 1 || syms[0] !== sym) { return false; }

    	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

    	if (typeof Object.getOwnPropertyDescriptor === 'function') {
    		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
    		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
    	}

    	return true;
    };

    var shams = function hasToStringTagShams() {
    	return shams$1() && !!Symbol.toStringTag;
    };

    var origSymbol = typeof Symbol !== 'undefined' && Symbol;


    var hasSymbols$2 = function hasNativeSymbols() {
    	if (typeof origSymbol !== 'function') { return false; }
    	if (typeof Symbol !== 'function') { return false; }
    	if (typeof origSymbol('foo') !== 'symbol') { return false; }
    	if (typeof Symbol('bar') !== 'symbol') { return false; }

    	return shams$1();
    };

    /* eslint no-invalid-this: 1 */

    var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
    var slice$1 = Array.prototype.slice;
    var toStr$4 = Object.prototype.toString;
    var funcType = '[object Function]';

    var implementation$3 = function bind(that) {
        var target = this;
        if (typeof target !== 'function' || toStr$4.call(target) !== funcType) {
            throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slice$1.call(arguments, 1);

        var bound;
        var binder = function () {
            if (this instanceof bound) {
                var result = target.apply(
                    this,
                    args.concat(slice$1.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;
            } else {
                return target.apply(
                    that,
                    args.concat(slice$1.call(arguments))
                );
            }
        };

        var boundLength = Math.max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }

        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

        if (target.prototype) {
            var Empty = function Empty() {};
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            Empty.prototype = null;
        }

        return bound;
    };

    var functionBind = Function.prototype.bind || implementation$3;

    var src = functionBind.call(Function.call, Object.prototype.hasOwnProperty);

    var undefined$1;

    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;

    // eslint-disable-next-line consistent-return
    var getEvalledConstructor = function (expressionSyntax) {
    	try {
    		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
    	} catch (e) {}
    };

    var $gOPD$1 = Object.getOwnPropertyDescriptor;
    if ($gOPD$1) {
    	try {
    		$gOPD$1({}, '');
    	} catch (e) {
    		$gOPD$1 = null; // this is IE 8, which has a broken gOPD
    	}
    }

    var throwTypeError = function () {
    	throw new $TypeError();
    };
    var ThrowTypeError = $gOPD$1
    	? (function () {
    		try {
    			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
    			arguments.callee; // IE 8 does not throw here
    			return throwTypeError;
    		} catch (calleeThrows) {
    			try {
    				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
    				return $gOPD$1(arguments, 'callee').get;
    			} catch (gOPDthrows) {
    				return throwTypeError;
    			}
    		}
    	}())
    	: throwTypeError;

    var hasSymbols$1 = hasSymbols$2();

    var getProto$1 = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

    var needsEval = {};

    var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto$1(Uint8Array);

    var INTRINSICS = {
    	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
    	'%Array%': Array,
    	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
    	'%ArrayIteratorPrototype%': hasSymbols$1 ? getProto$1([][Symbol.iterator]()) : undefined$1,
    	'%AsyncFromSyncIteratorPrototype%': undefined$1,
    	'%AsyncFunction%': needsEval,
    	'%AsyncGenerator%': needsEval,
    	'%AsyncGeneratorFunction%': needsEval,
    	'%AsyncIteratorPrototype%': needsEval,
    	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
    	'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
    	'%Boolean%': Boolean,
    	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
    	'%Date%': Date,
    	'%decodeURI%': decodeURI,
    	'%decodeURIComponent%': decodeURIComponent,
    	'%encodeURI%': encodeURI,
    	'%encodeURIComponent%': encodeURIComponent,
    	'%Error%': Error,
    	'%eval%': eval, // eslint-disable-line no-eval
    	'%EvalError%': EvalError,
    	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
    	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
    	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
    	'%Function%': $Function,
    	'%GeneratorFunction%': needsEval,
    	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
    	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
    	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
    	'%isFinite%': isFinite,
    	'%isNaN%': isNaN,
    	'%IteratorPrototype%': hasSymbols$1 ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$1,
    	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
    	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
    	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$1 ? undefined$1 : getProto$1(new Map()[Symbol.iterator]()),
    	'%Math%': Math,
    	'%Number%': Number,
    	'%Object%': Object,
    	'%parseFloat%': parseFloat,
    	'%parseInt%': parseInt,
    	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
    	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
    	'%RangeError%': RangeError,
    	'%ReferenceError%': ReferenceError,
    	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
    	'%RegExp%': RegExp,
    	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
    	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$1 ? undefined$1 : getProto$1(new Set()[Symbol.iterator]()),
    	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
    	'%String%': String,
    	'%StringIteratorPrototype%': hasSymbols$1 ? getProto$1(''[Symbol.iterator]()) : undefined$1,
    	'%Symbol%': hasSymbols$1 ? Symbol : undefined$1,
    	'%SyntaxError%': $SyntaxError,
    	'%ThrowTypeError%': ThrowTypeError,
    	'%TypedArray%': TypedArray,
    	'%TypeError%': $TypeError,
    	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
    	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
    	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
    	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
    	'%URIError%': URIError,
    	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
    	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
    	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
    };

    var doEval = function doEval(name) {
    	var value;
    	if (name === '%AsyncFunction%') {
    		value = getEvalledConstructor('async function () {}');
    	} else if (name === '%GeneratorFunction%') {
    		value = getEvalledConstructor('function* () {}');
    	} else if (name === '%AsyncGeneratorFunction%') {
    		value = getEvalledConstructor('async function* () {}');
    	} else if (name === '%AsyncGenerator%') {
    		var fn = doEval('%AsyncGeneratorFunction%');
    		if (fn) {
    			value = fn.prototype;
    		}
    	} else if (name === '%AsyncIteratorPrototype%') {
    		var gen = doEval('%AsyncGenerator%');
    		if (gen) {
    			value = getProto$1(gen.prototype);
    		}
    	}

    	INTRINSICS[name] = value;

    	return value;
    };

    var LEGACY_ALIASES = {
    	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
    	'%ArrayPrototype%': ['Array', 'prototype'],
    	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
    	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
    	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
    	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
    	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
    	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
    	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
    	'%BooleanPrototype%': ['Boolean', 'prototype'],
    	'%DataViewPrototype%': ['DataView', 'prototype'],
    	'%DatePrototype%': ['Date', 'prototype'],
    	'%ErrorPrototype%': ['Error', 'prototype'],
    	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
    	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
    	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
    	'%FunctionPrototype%': ['Function', 'prototype'],
    	'%Generator%': ['GeneratorFunction', 'prototype'],
    	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
    	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
    	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
    	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
    	'%JSONParse%': ['JSON', 'parse'],
    	'%JSONStringify%': ['JSON', 'stringify'],
    	'%MapPrototype%': ['Map', 'prototype'],
    	'%NumberPrototype%': ['Number', 'prototype'],
    	'%ObjectPrototype%': ['Object', 'prototype'],
    	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
    	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
    	'%PromisePrototype%': ['Promise', 'prototype'],
    	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
    	'%Promise_all%': ['Promise', 'all'],
    	'%Promise_reject%': ['Promise', 'reject'],
    	'%Promise_resolve%': ['Promise', 'resolve'],
    	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
    	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
    	'%RegExpPrototype%': ['RegExp', 'prototype'],
    	'%SetPrototype%': ['Set', 'prototype'],
    	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
    	'%StringPrototype%': ['String', 'prototype'],
    	'%SymbolPrototype%': ['Symbol', 'prototype'],
    	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
    	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
    	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
    	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
    	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
    	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
    	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
    	'%URIErrorPrototype%': ['URIError', 'prototype'],
    	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
    	'%WeakSetPrototype%': ['WeakSet', 'prototype']
    };



    var $concat = functionBind.call(Function.call, Array.prototype.concat);
    var $spliceApply = functionBind.call(Function.apply, Array.prototype.splice);
    var $replace = functionBind.call(Function.call, String.prototype.replace);
    var $strSlice = functionBind.call(Function.call, String.prototype.slice);

    /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
    var stringToPath = function stringToPath(string) {
    	var first = $strSlice(string, 0, 1);
    	var last = $strSlice(string, -1);
    	if (first === '%' && last !== '%') {
    		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
    	} else if (last === '%' && first !== '%') {
    		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
    	}
    	var result = [];
    	$replace(string, rePropName, function (match, number, quote, subString) {
    		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
    	});
    	return result;
    };
    /* end adaptation */

    var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    	var intrinsicName = name;
    	var alias;
    	if (src(LEGACY_ALIASES, intrinsicName)) {
    		alias = LEGACY_ALIASES[intrinsicName];
    		intrinsicName = '%' + alias[0] + '%';
    	}

    	if (src(INTRINSICS, intrinsicName)) {
    		var value = INTRINSICS[intrinsicName];
    		if (value === needsEval) {
    			value = doEval(intrinsicName);
    		}
    		if (typeof value === 'undefined' && !allowMissing) {
    			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
    		}

    		return {
    			alias: alias,
    			name: intrinsicName,
    			value: value
    		};
    	}

    	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
    };

    var getIntrinsic = function GetIntrinsic(name, allowMissing) {
    	if (typeof name !== 'string' || name.length === 0) {
    		throw new $TypeError('intrinsic name must be a non-empty string');
    	}
    	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
    		throw new $TypeError('"allowMissing" argument must be a boolean');
    	}

    	var parts = stringToPath(name);
    	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

    	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
    	var intrinsicRealName = intrinsic.name;
    	var value = intrinsic.value;
    	var skipFurtherCaching = false;

    	var alias = intrinsic.alias;
    	if (alias) {
    		intrinsicBaseName = alias[0];
    		$spliceApply(parts, $concat([0, 1], alias));
    	}

    	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
    		var part = parts[i];
    		var first = $strSlice(part, 0, 1);
    		var last = $strSlice(part, -1);
    		if (
    			(
    				(first === '"' || first === "'" || first === '`')
    				|| (last === '"' || last === "'" || last === '`')
    			)
    			&& first !== last
    		) {
    			throw new $SyntaxError('property names with quotes must have matching quotes');
    		}
    		if (part === 'constructor' || !isOwn) {
    			skipFurtherCaching = true;
    		}

    		intrinsicBaseName += '.' + part;
    		intrinsicRealName = '%' + intrinsicBaseName + '%';

    		if (src(INTRINSICS, intrinsicRealName)) {
    			value = INTRINSICS[intrinsicRealName];
    		} else if (value != null) {
    			if (!(part in value)) {
    				if (!allowMissing) {
    					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
    				}
    				return void undefined$1;
    			}
    			if ($gOPD$1 && (i + 1) >= parts.length) {
    				var desc = $gOPD$1(value, part);
    				isOwn = !!desc;

    				// By convention, when a data property is converted to an accessor
    				// property to emulate a data property that does not suffer from
    				// the override mistake, that accessor's getter is marked with
    				// an `originalValue` property. Here, when we detect this, we
    				// uphold the illusion by pretending to see that original data
    				// property, i.e., returning the value rather than the getter
    				// itself.
    				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
    					value = desc.get;
    				} else {
    					value = value[part];
    				}
    			} else {
    				isOwn = src(value, part);
    				value = value[part];
    			}

    			if (isOwn && !skipFurtherCaching) {
    				INTRINSICS[intrinsicRealName] = value;
    			}
    		}
    	}
    	return value;
    };

    var callBind = createCommonjsModule(function (module) {




    var $apply = getIntrinsic('%Function.prototype.apply%');
    var $call = getIntrinsic('%Function.prototype.call%');
    var $reflectApply = getIntrinsic('%Reflect.apply%', true) || functionBind.call($call, $apply);

    var $gOPD = getIntrinsic('%Object.getOwnPropertyDescriptor%', true);
    var $defineProperty = getIntrinsic('%Object.defineProperty%', true);
    var $max = getIntrinsic('%Math.max%');

    if ($defineProperty) {
    	try {
    		$defineProperty({}, 'a', { value: 1 });
    	} catch (e) {
    		// IE 8 has a broken defineProperty
    		$defineProperty = null;
    	}
    }

    module.exports = function callBind(originalFunction) {
    	var func = $reflectApply(functionBind, $call, arguments);
    	if ($gOPD && $defineProperty) {
    		var desc = $gOPD(func, 'length');
    		if (desc.configurable) {
    			// original length, plus the receiver, minus any additional arguments (after the receiver)
    			$defineProperty(
    				func,
    				'length',
    				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
    			);
    		}
    	}
    	return func;
    };

    var applyBind = function applyBind() {
    	return $reflectApply(functionBind, $apply, arguments);
    };

    if ($defineProperty) {
    	$defineProperty(module.exports, 'apply', { value: applyBind });
    } else {
    	module.exports.apply = applyBind;
    }
    });

    var $indexOf$1 = callBind(getIntrinsic('String.prototype.indexOf'));

    var callBound = function callBoundIntrinsic(name, allowMissing) {
    	var intrinsic = getIntrinsic(name, !!allowMissing);
    	if (typeof intrinsic === 'function' && $indexOf$1(name, '.prototype.') > -1) {
    		return callBind(intrinsic);
    	}
    	return intrinsic;
    };

    var hasToStringTag$3 = shams();


    var $toString$2 = callBound('Object.prototype.toString');

    var isStandardArguments = function isArguments(value) {
    	if (hasToStringTag$3 && value && typeof value === 'object' && Symbol.toStringTag in value) {
    		return false;
    	}
    	return $toString$2(value) === '[object Arguments]';
    };

    var isLegacyArguments = function isArguments(value) {
    	if (isStandardArguments(value)) {
    		return true;
    	}
    	return value !== null &&
    		typeof value === 'object' &&
    		typeof value.length === 'number' &&
    		value.length >= 0 &&
    		$toString$2(value) !== '[object Array]' &&
    		$toString$2(value.callee) === '[object Function]';
    };

    var supportsStandardArguments = (function () {
    	return isStandardArguments(arguments);
    }());

    isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

    var isArguments$2 = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

    var toStr$3 = Object.prototype.toString;
    var fnToStr = Function.prototype.toString;
    var isFnRegex = /^\s*(?:function)?\*/;
    var hasToStringTag$2 = shams();
    var getProto = Object.getPrototypeOf;
    var getGeneratorFunc = function () { // eslint-disable-line consistent-return
    	if (!hasToStringTag$2) {
    		return false;
    	}
    	try {
    		return Function('return function*() {}')();
    	} catch (e) {
    	}
    };
    var GeneratorFunction;

    var isGeneratorFunction = function isGeneratorFunction(fn) {
    	if (typeof fn !== 'function') {
    		return false;
    	}
    	if (isFnRegex.test(fnToStr.call(fn))) {
    		return true;
    	}
    	if (!hasToStringTag$2) {
    		var str = toStr$3.call(fn);
    		return str === '[object GeneratorFunction]';
    	}
    	if (!getProto) {
    		return false;
    	}
    	if (typeof GeneratorFunction === 'undefined') {
    		var generatorFunc = getGeneratorFunc();
    		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
    	}
    	return getProto(fn) === GeneratorFunction;
    };

    var hasOwn$1 = Object.prototype.hasOwnProperty;
    var toString = Object.prototype.toString;

    var foreach = function forEach (obj, fn, ctx) {
        if (toString.call(fn) !== '[object Function]') {
            throw new TypeError('iterator must be a function');
        }
        var l = obj.length;
        if (l === +l) {
            for (var i = 0; i < l; i++) {
                fn.call(ctx, obj[i], i, obj);
            }
        } else {
            for (var k in obj) {
                if (hasOwn$1.call(obj, k)) {
                    fn.call(ctx, obj[k], k, obj);
                }
            }
        }
    };

    var possibleNames = [
    	'BigInt64Array',
    	'BigUint64Array',
    	'Float32Array',
    	'Float64Array',
    	'Int16Array',
    	'Int32Array',
    	'Int8Array',
    	'Uint16Array',
    	'Uint32Array',
    	'Uint8Array',
    	'Uint8ClampedArray'
    ];

    var g$2 = typeof globalThis === 'undefined' ? commonjsGlobal$1 : globalThis;

    var availableTypedArrays$1 = function availableTypedArrays() {
    	var out = [];
    	for (var i = 0; i < possibleNames.length; i++) {
    		if (typeof g$2[possibleNames[i]] === 'function') {
    			out[out.length] = possibleNames[i];
    		}
    	}
    	return out;
    };

    var $gOPD = getIntrinsic('%Object.getOwnPropertyDescriptor%', true);
    if ($gOPD) {
    	try {
    		$gOPD([], 'length');
    	} catch (e) {
    		// IE 8 has a broken gOPD
    		$gOPD = null;
    	}
    }

    var getOwnPropertyDescriptor = $gOPD;

    var availableTypedArrays = availableTypedArrays$1;

    var gOPD = getOwnPropertyDescriptor;

    var $toString$1 = callBound('Object.prototype.toString');
    var hasToStringTag$1 = shams();

    var g$1 = typeof globalThis === 'undefined' ? commonjsGlobal$1 : globalThis;
    var typedArrays$1 = availableTypedArrays();

    var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
    	for (var i = 0; i < array.length; i += 1) {
    		if (array[i] === value) {
    			return i;
    		}
    	}
    	return -1;
    };
    var $slice$1 = callBound('String.prototype.slice');
    var toStrTags$1 = {};

    var getPrototypeOf$1 = Object.getPrototypeOf; // require('getprototypeof');
    if (hasToStringTag$1 && gOPD && getPrototypeOf$1) {
    	foreach(typedArrays$1, function (typedArray) {
    		var arr = new g$1[typedArray]();
    		if (Symbol.toStringTag in arr) {
    			var proto = getPrototypeOf$1(arr);
    			var descriptor = gOPD(proto, Symbol.toStringTag);
    			if (!descriptor) {
    				var superProto = getPrototypeOf$1(proto);
    				descriptor = gOPD(superProto, Symbol.toStringTag);
    			}
    			toStrTags$1[typedArray] = descriptor.get;
    		}
    	});
    }

    var tryTypedArrays$1 = function tryAllTypedArrays(value) {
    	var anyTrue = false;
    	foreach(toStrTags$1, function (getter, typedArray) {
    		if (!anyTrue) {
    			try {
    				anyTrue = getter.call(value) === typedArray;
    			} catch (e) { /**/ }
    		}
    	});
    	return anyTrue;
    };

    var isTypedArray = function isTypedArray(value) {
    	if (!value || typeof value !== 'object') { return false; }
    	if (!hasToStringTag$1 || !(Symbol.toStringTag in value)) {
    		var tag = $slice$1($toString$1(value), 8, -1);
    		return $indexOf(typedArrays$1, tag) > -1;
    	}
    	if (!gOPD) { return false; }
    	return tryTypedArrays$1(value);
    };

    var $toString = callBound('Object.prototype.toString');
    var hasToStringTag = shams();

    var g = typeof globalThis === 'undefined' ? commonjsGlobal$1 : globalThis;
    var typedArrays = availableTypedArrays();

    var $slice = callBound('String.prototype.slice');
    var toStrTags = {};

    var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
    if (hasToStringTag && gOPD && getPrototypeOf) {
    	foreach(typedArrays, function (typedArray) {
    		if (typeof g[typedArray] === 'function') {
    			var arr = new g[typedArray]();
    			if (Symbol.toStringTag in arr) {
    				var proto = getPrototypeOf(arr);
    				var descriptor = gOPD(proto, Symbol.toStringTag);
    				if (!descriptor) {
    					var superProto = getPrototypeOf(proto);
    					descriptor = gOPD(superProto, Symbol.toStringTag);
    				}
    				toStrTags[typedArray] = descriptor.get;
    			}
    		}
    	});
    }

    var tryTypedArrays = function tryAllTypedArrays(value) {
    	var foundName = false;
    	foreach(toStrTags, function (getter, typedArray) {
    		if (!foundName) {
    			try {
    				var name = getter.call(value);
    				if (name === typedArray) {
    					foundName = name;
    				}
    			} catch (e) {}
    		}
    	});
    	return foundName;
    };



    var whichTypedArray = function whichTypedArray(value) {
    	if (!isTypedArray(value)) { return false; }
    	if (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }
    	return tryTypedArrays(value);
    };

    var types = createCommonjsModule(function (module, exports) {






    function uncurryThis(f) {
      return f.call.bind(f);
    }

    var BigIntSupported = typeof BigInt !== 'undefined';
    var SymbolSupported = typeof Symbol !== 'undefined';

    var ObjectToString = uncurryThis(Object.prototype.toString);

    var numberValue = uncurryThis(Number.prototype.valueOf);
    var stringValue = uncurryThis(String.prototype.valueOf);
    var booleanValue = uncurryThis(Boolean.prototype.valueOf);

    if (BigIntSupported) {
      var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
    }

    if (SymbolSupported) {
      var symbolValue = uncurryThis(Symbol.prototype.valueOf);
    }

    function checkBoxedPrimitive(value, prototypeValueOf) {
      if (typeof value !== 'object') {
        return false;
      }
      try {
        prototypeValueOf(value);
        return true;
      } catch(e) {
        return false;
      }
    }

    exports.isArgumentsObject = isArguments$2;
    exports.isGeneratorFunction = isGeneratorFunction;
    exports.isTypedArray = isTypedArray;

    // Taken from here and modified for better browser support
    // https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
    function isPromise(input) {
    	return (
    		(
    			typeof Promise !== 'undefined' &&
    			input instanceof Promise
    		) ||
    		(
    			input !== null &&
    			typeof input === 'object' &&
    			typeof input.then === 'function' &&
    			typeof input.catch === 'function'
    		)
    	);
    }
    exports.isPromise = isPromise;

    function isArrayBufferView(value) {
      if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
        return ArrayBuffer.isView(value);
      }

      return (
        isTypedArray(value) ||
        isDataView(value)
      );
    }
    exports.isArrayBufferView = isArrayBufferView;


    function isUint8Array(value) {
      return whichTypedArray(value) === 'Uint8Array';
    }
    exports.isUint8Array = isUint8Array;

    function isUint8ClampedArray(value) {
      return whichTypedArray(value) === 'Uint8ClampedArray';
    }
    exports.isUint8ClampedArray = isUint8ClampedArray;

    function isUint16Array(value) {
      return whichTypedArray(value) === 'Uint16Array';
    }
    exports.isUint16Array = isUint16Array;

    function isUint32Array(value) {
      return whichTypedArray(value) === 'Uint32Array';
    }
    exports.isUint32Array = isUint32Array;

    function isInt8Array(value) {
      return whichTypedArray(value) === 'Int8Array';
    }
    exports.isInt8Array = isInt8Array;

    function isInt16Array(value) {
      return whichTypedArray(value) === 'Int16Array';
    }
    exports.isInt16Array = isInt16Array;

    function isInt32Array(value) {
      return whichTypedArray(value) === 'Int32Array';
    }
    exports.isInt32Array = isInt32Array;

    function isFloat32Array(value) {
      return whichTypedArray(value) === 'Float32Array';
    }
    exports.isFloat32Array = isFloat32Array;

    function isFloat64Array(value) {
      return whichTypedArray(value) === 'Float64Array';
    }
    exports.isFloat64Array = isFloat64Array;

    function isBigInt64Array(value) {
      return whichTypedArray(value) === 'BigInt64Array';
    }
    exports.isBigInt64Array = isBigInt64Array;

    function isBigUint64Array(value) {
      return whichTypedArray(value) === 'BigUint64Array';
    }
    exports.isBigUint64Array = isBigUint64Array;

    function isMapToString(value) {
      return ObjectToString(value) === '[object Map]';
    }
    isMapToString.working = (
      typeof Map !== 'undefined' &&
      isMapToString(new Map())
    );

    function isMap(value) {
      if (typeof Map === 'undefined') {
        return false;
      }

      return isMapToString.working
        ? isMapToString(value)
        : value instanceof Map;
    }
    exports.isMap = isMap;

    function isSetToString(value) {
      return ObjectToString(value) === '[object Set]';
    }
    isSetToString.working = (
      typeof Set !== 'undefined' &&
      isSetToString(new Set())
    );
    function isSet(value) {
      if (typeof Set === 'undefined') {
        return false;
      }

      return isSetToString.working
        ? isSetToString(value)
        : value instanceof Set;
    }
    exports.isSet = isSet;

    function isWeakMapToString(value) {
      return ObjectToString(value) === '[object WeakMap]';
    }
    isWeakMapToString.working = (
      typeof WeakMap !== 'undefined' &&
      isWeakMapToString(new WeakMap())
    );
    function isWeakMap(value) {
      if (typeof WeakMap === 'undefined') {
        return false;
      }

      return isWeakMapToString.working
        ? isWeakMapToString(value)
        : value instanceof WeakMap;
    }
    exports.isWeakMap = isWeakMap;

    function isWeakSetToString(value) {
      return ObjectToString(value) === '[object WeakSet]';
    }
    isWeakSetToString.working = (
      typeof WeakSet !== 'undefined' &&
      isWeakSetToString(new WeakSet())
    );
    function isWeakSet(value) {
      return isWeakSetToString(value);
    }
    exports.isWeakSet = isWeakSet;

    function isArrayBufferToString(value) {
      return ObjectToString(value) === '[object ArrayBuffer]';
    }
    isArrayBufferToString.working = (
      typeof ArrayBuffer !== 'undefined' &&
      isArrayBufferToString(new ArrayBuffer())
    );
    function isArrayBuffer(value) {
      if (typeof ArrayBuffer === 'undefined') {
        return false;
      }

      return isArrayBufferToString.working
        ? isArrayBufferToString(value)
        : value instanceof ArrayBuffer;
    }
    exports.isArrayBuffer = isArrayBuffer;

    function isDataViewToString(value) {
      return ObjectToString(value) === '[object DataView]';
    }
    isDataViewToString.working = (
      typeof ArrayBuffer !== 'undefined' &&
      typeof DataView !== 'undefined' &&
      isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
    );
    function isDataView(value) {
      if (typeof DataView === 'undefined') {
        return false;
      }

      return isDataViewToString.working
        ? isDataViewToString(value)
        : value instanceof DataView;
    }
    exports.isDataView = isDataView;

    // Store a copy of SharedArrayBuffer in case it's deleted elsewhere
    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
    function isSharedArrayBufferToString(value) {
      return ObjectToString(value) === '[object SharedArrayBuffer]';
    }
    function isSharedArrayBuffer(value) {
      if (typeof SharedArrayBufferCopy === 'undefined') {
        return false;
      }

      if (typeof isSharedArrayBufferToString.working === 'undefined') {
        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
      }

      return isSharedArrayBufferToString.working
        ? isSharedArrayBufferToString(value)
        : value instanceof SharedArrayBufferCopy;
    }
    exports.isSharedArrayBuffer = isSharedArrayBuffer;

    function isAsyncFunction(value) {
      return ObjectToString(value) === '[object AsyncFunction]';
    }
    exports.isAsyncFunction = isAsyncFunction;

    function isMapIterator(value) {
      return ObjectToString(value) === '[object Map Iterator]';
    }
    exports.isMapIterator = isMapIterator;

    function isSetIterator(value) {
      return ObjectToString(value) === '[object Set Iterator]';
    }
    exports.isSetIterator = isSetIterator;

    function isGeneratorObject(value) {
      return ObjectToString(value) === '[object Generator]';
    }
    exports.isGeneratorObject = isGeneratorObject;

    function isWebAssemblyCompiledModule(value) {
      return ObjectToString(value) === '[object WebAssembly.Module]';
    }
    exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

    function isNumberObject(value) {
      return checkBoxedPrimitive(value, numberValue);
    }
    exports.isNumberObject = isNumberObject;

    function isStringObject(value) {
      return checkBoxedPrimitive(value, stringValue);
    }
    exports.isStringObject = isStringObject;

    function isBooleanObject(value) {
      return checkBoxedPrimitive(value, booleanValue);
    }
    exports.isBooleanObject = isBooleanObject;

    function isBigIntObject(value) {
      return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
    }
    exports.isBigIntObject = isBigIntObject;

    function isSymbolObject(value) {
      return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
    }
    exports.isSymbolObject = isSymbolObject;

    function isBoxedPrimitive(value) {
      return (
        isNumberObject(value) ||
        isStringObject(value) ||
        isBooleanObject(value) ||
        isBigIntObject(value) ||
        isSymbolObject(value)
      );
    }
    exports.isBoxedPrimitive = isBoxedPrimitive;

    function isAnyArrayBuffer(value) {
      return typeof Uint8Array !== 'undefined' && (
        isArrayBuffer(value) ||
        isSharedArrayBuffer(value)
      );
    }
    exports.isAnyArrayBuffer = isAnyArrayBuffer;

    ['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
      Object.defineProperty(exports, method, {
        enumerable: false,
        value: function() {
          throw new Error(method + ' is not supported in userland');
        }
      });
    });
    });

    var isBufferBrowser = function isBuffer(arg) {
      return arg && typeof arg === 'object'
        && typeof arg.copy === 'function'
        && typeof arg.fill === 'function'
        && typeof arg.readUInt8 === 'function';
    };

    var util$1 = createCommonjsModule(function (module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
      function getOwnPropertyDescriptors(obj) {
        var keys = Object.keys(obj);
        var descriptors = {};
        for (var i = 0; i < keys.length; i++) {
          descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
        }
        return descriptors;
      };

    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(' ');
      }

      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch (x) {
          case '%s': return String(args[i++]);
          case '%d': return Number(args[i++]);
          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }
          default:
            return x;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += ' ' + x;
        } else {
          str += ' ' + inspect(x);
        }
      }
      return str;
    };


    // Mark that a method should not be used.
    // Returns a modified function which warns once by default.
    // If --no-deprecation is set, then it is a no-op.
    exports.deprecate = function(fn, msg) {
      if (typeof process !== 'undefined' && process.noDeprecation === true) {
        return fn;
      }

      // Allow for deprecating things in the process of starting up.
      if (typeof process === 'undefined') {
        return function() {
          return exports.deprecate(fn, msg).apply(this, arguments);
        };
      }

      var warned = false;
      function deprecated() {
        if (!warned) {
          {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }

      return deprecated;
    };


    var debugs = {};
    var debugEnvRegex = /^$/;
    exports.debuglog = function(set) {
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error('%s %d: %s', set, pid, msg);
          };
        } else {
          debugs[set] = function() {};
        }
      }
      return debugs[set];
    };


    /**
     * Echos the value of a value. Trys to print the value out
     * in the best way possible given the different types.
     *
     * @param {Object} obj The object to print out.
     * @param {Object} opts Optional options object that alters the output.
     */
    /* legacy: obj, showHidden, depth, colors*/
    function inspect(obj, opts) {
      // default options
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      // legacy...
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        // legacy...
        ctx.showHidden = opts;
      } else if (opts) {
        // got an "options" object
        exports._extend(ctx, opts);
      }
      // set default options
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect;


    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    inspect.colors = {
      'bold' : [1, 22],
      'italic' : [3, 23],
      'underline' : [4, 24],
      'inverse' : [7, 27],
      'white' : [37, 39],
      'grey' : [90, 39],
      'black' : [30, 39],
      'blue' : [34, 39],
      'cyan' : [36, 39],
      'green' : [32, 39],
      'magenta' : [35, 39],
      'red' : [31, 39],
      'yellow' : [33, 39]
    };

    // Don't use 'blue' not visible on cmd.exe
    inspect.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      // "name": intentionally not styling
      'regexp': 'red'
    };


    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];

      if (style) {
        return '\u001b[' + inspect.colors[style][0] + 'm' + str +
               '\u001b[' + inspect.colors[style][1] + 'm';
      } else {
        return str;
      }
    }


    function stylizeNoColor(str, styleType) {
      return str;
    }


    function arrayToHash(array) {
      var hash = {};

      array.forEach(function(val, idx) {
        hash[val] = true;
      });

      return hash;
    }


    function formatValue(ctx, value, recurseTimes) {
      // Provide a hook for user-specified inspect functions.
      // Check that value is an object with an inspect function on it
      if (ctx.customInspect &&
          value &&
          isFunction(value.inspect) &&
          // Filter out the util module, it's inspect function is special
          value.inspect !== exports.inspect &&
          // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }

      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }

      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }

      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value)
          && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '', array = false, braces = ['{', '}'];

      // Make Array say that they are Array
      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      // Make functions say that they are functions
      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      // Make dates with properties first say the date
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);

      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();

      return reduceToSingleString(output, base, braces);
    }


    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize('undefined', 'undefined');
      if (isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value))
        return ctx.stylize('' + value, 'number');
      if (isBoolean(value))
        return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value))
        return ctx.stylize('null', 'null');
    }


    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }


    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              key, true));
        }
      });
      return output;
    }


    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }


    function reduceToSingleString(output, base, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf('\n') >= 0) ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }


    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    exports.types = types;

    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports.isArray = isArray;

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }
    exports.isBoolean = isBoolean;

    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;

    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;

    function isNumber(arg) {
      return typeof arg === 'number';
    }
    exports.isNumber = isNumber;

    function isString(arg) {
      return typeof arg === 'string';
    }
    exports.isString = isString;

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }
    exports.isSymbol = isSymbol;

    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }
    exports.isRegExp = isRegExp;
    exports.types.isRegExp = isRegExp;

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    exports.isObject = isObject;

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }
    exports.isDate = isDate;
    exports.types.isDate = isDate;

    function isError(e) {
      return isObject(e) &&
          (objectToString(e) === '[object Error]' || e instanceof Error);
    }
    exports.isError = isError;
    exports.types.isNativeError = isError;

    function isFunction(arg) {
      return typeof arg === 'function';
    }
    exports.isFunction = isFunction;

    function isPrimitive(arg) {
      return arg === null ||
             typeof arg === 'boolean' ||
             typeof arg === 'number' ||
             typeof arg === 'string' ||
             typeof arg === 'symbol' ||  // ES6 symbol
             typeof arg === 'undefined';
    }
    exports.isPrimitive = isPrimitive;

    exports.isBuffer = isBufferBrowser;

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }


    function pad(n) {
      return n < 10 ? '0' + n.toString(10) : n.toString(10);
    }


    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                  'Oct', 'Nov', 'Dec'];

    // 26 Feb 16:19:34
    function timestamp() {
      var d = new Date();
      var time = [pad(d.getHours()),
                  pad(d.getMinutes()),
                  pad(d.getSeconds())].join(':');
      return [d.getDate(), months[d.getMonth()], time].join(' ');
    }


    // log is just a thin wrapper to console.log that prepends a timestamp
    exports.log = function() {
      console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
    };


    /**
     * Inherit the prototype methods from one constructor into another.
     *
     * The Function.prototype.inherits from lang.js rewritten as a standalone
     * function (not on Function.prototype). NOTE: If this file is to be loaded
     * during bootstrapping this function needs to be rewritten using some native
     * functions as prototype setup using normal JavaScript does not work as
     * expected during bootstrapping (see mirror.js in r114903).
     *
     * @param {function} ctor Constructor function which needs to inherit the
     *     prototype.
     * @param {function} superCtor Constructor function to inherit prototype from.
     */
    exports.inherits = inherits_browser$1;

    exports._extend = function(origin, add) {
      // Don't do anything if add isn't an object
      if (!add || !isObject(add)) return origin;

      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    };

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

    exports.promisify = function promisify(original) {
      if (typeof original !== 'function')
        throw new TypeError('The "original" argument must be of type Function');

      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== 'function') {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn, enumerable: false, writable: false, configurable: true
        });
        return fn;
      }

      function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function (resolve, reject) {
          promiseResolve = resolve;
          promiseReject = reject;
        });

        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        args.push(function (err, value) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value);
          }
        });

        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }

        return promise;
      }

      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

      if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn, enumerable: false, writable: false, configurable: true
      });
      return Object.defineProperties(
        fn,
        getOwnPropertyDescriptors(original)
      );
    };

    exports.promisify.custom = kCustomPromisifiedSymbol;

    function callbackifyOnRejected(reason, cb) {
      // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
      // Because `null` is a special error value in callbacks which means "no error
      // occurred", we error-wrap so the callback consumer can distinguish between
      // "the promise rejected with null" or "the promise fulfilled with undefined".
      if (!reason) {
        var newReason = new Error('Promise was rejected with a falsy value');
        newReason.reason = reason;
        reason = newReason;
      }
      return cb(reason);
    }

    function callbackify(original) {
      if (typeof original !== 'function') {
        throw new TypeError('The "original" argument must be of type Function');
      }

      // We DO NOT return the promise as it gives the user a false sense that
      // the promise is actually somehow related to the callback's execution
      // and that the callback throwing will reject the promise.
      function callbackified() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }

        var maybeCb = args.pop();
        if (typeof maybeCb !== 'function') {
          throw new TypeError('The last argument must be of type Function');
        }
        var self = this;
        var cb = function() {
          return maybeCb.apply(self, arguments);
        };
        // In true node style we process the callback on `nextTick` with all the
        // implications (stack, `uncaughtException`, `async_hooks`)
        original.apply(this, args)
          .then(function(ret) { nextTick(cb.bind(null, null, ret)); },
                function(rej) { nextTick(callbackifyOnRejected.bind(null, rej, cb)); });
      }

      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(callbackified,
                              getOwnPropertyDescriptors(original));
      return callbackified;
    }
    exports.callbackify = callbackify;
    });

    var require$$0 = assert_1;

    // longer be forced to treat every error message change as a semver-major
    // change. The NodeError classes here all expose a `code` property whose
    // value statically and permanently identifies the error. While the error
    // message may change, the code should not.

    function _typeof$2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }

    function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn$1(self, call) { if (call && (_typeof$2(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$1(self); }

    function _assertThisInitialized$1(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _getPrototypeOf$1(o) { _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$1(o); }

    function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$1(subClass, superClass); }

    function _setPrototypeOf$1(o, p) { _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$1(o, p); }

    var codes = {}; // Lazy loaded

    var assert$1;
    var util;

    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }

      function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }

      var NodeError =
      /*#__PURE__*/
      function (_Base) {
        _inherits$1(NodeError, _Base);

        function NodeError(arg1, arg2, arg3) {
          var _this;

          _classCallCheck$1(this, NodeError);

          _this = _possibleConstructorReturn$1(this, _getPrototypeOf$1(NodeError).call(this, getMessage(arg1, arg2, arg3)));
          _this.code = code;
          return _this;
        }

        return NodeError;
      }(Base);

      codes[code] = NodeError;
    } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function (i) {
          return String(i);
        });

        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


    function endsWith$1(str, search, this_len) {
      if (this_len === undefined || this_len > str.length) {
        this_len = str.length;
      }

      return str.substring(this_len - search.length, this_len) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


    function includes(str, search, start) {
      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }

    createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
    createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
      if (assert$1 === undefined) assert$1 = require$$0;
      assert$1(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'

      var determiner;

      if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
      } else {
        determiner = 'must be';
      }

      var msg;

      if (endsWith$1(name, ' argument')) {
        // For cases like 'first argument'
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      } else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      } // TODO(BridgeAR): Improve the output by showing `null` and similar.


      msg += ". Received type ".concat(_typeof$2(actual));
      return msg;
    }, TypeError);
    createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
      var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
      if (util === undefined) util = util$1;
      var inspected = util.inspect(value);

      if (inspected.length > 128) {
        inspected = "".concat(inspected.slice(0, 128), "...");
      }

      return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
    }, TypeError);
    createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
      var type;

      if (value && value.constructor && value.constructor.name) {
        type = "instance of ".concat(value.constructor.name);
      } else {
        type = "type ".concat(_typeof$2(value));
      }

      return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
    }, TypeError);
    createErrorType('ERR_MISSING_ARGS', function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (assert$1 === undefined) assert$1 = require$$0;
      assert$1(args.length > 0, 'At least one arg needs to be specified');
      var msg = 'The ';
      var len = args.length;
      args = args.map(function (a) {
        return "\"".concat(a, "\"");
      });

      switch (len) {
        case 1:
          msg += "".concat(args[0], " argument");
          break;

        case 2:
          msg += "".concat(args[0], " and ").concat(args[1], " arguments");
          break;

        default:
          msg += args.slice(0, len - 1).join(', ');
          msg += ", and ".concat(args[len - 1], " arguments");
          break;
      }

      return "".concat(msg, " must be specified");
    }, TypeError);
    var codes_1 = codes;

    var errors = {
    	codes: codes_1
    };

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } return target; }

    function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof$1(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

    function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

    function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _typeof$1(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

    var inspect$2 = util$1.inspect;

    var ERR_INVALID_ARG_TYPE = errors.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


    function endsWith(str, search, this_len) {
      if (this_len === undefined || this_len > str.length) {
        this_len = str.length;
      }

      return str.substring(this_len - search.length, this_len) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat


    function repeat(str, count) {
      count = Math.floor(count);
      if (str.length == 0 || count == 0) return '';
      var maxCount = str.length * count;
      count = Math.floor(Math.log(count) / Math.log(2));

      while (count) {
        str += str;
        count--;
      }

      str += str.substring(0, maxCount - str.length);
      return str;
    }

    var blue = '';
    var green = '';
    var red = '';
    var white = '';
    var kReadableOperator = {
      deepStrictEqual: 'Expected values to be strictly deep-equal:',
      strictEqual: 'Expected values to be strictly equal:',
      strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
      deepEqual: 'Expected values to be loosely deep-equal:',
      equal: 'Expected values to be loosely equal:',
      notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
      notStrictEqual: 'Expected "actual" to be strictly unequal to:',
      notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
      notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
      notEqual: 'Expected "actual" to be loosely unequal to:',
      notIdentical: 'Values identical but not reference-equal:'
    }; // Comparing short primitives should just show === / !== instead of using the
    // diff.

    var kMaxShortLength = 10;

    function copyError(source) {
      var keys = Object.keys(source);
      var target = Object.create(Object.getPrototypeOf(source));
      keys.forEach(function (key) {
        target[key] = source[key];
      });
      Object.defineProperty(target, 'message', {
        value: source.message
      });
      return target;
    }

    function inspectValue(val) {
      // The util.inspect default values could be changed. This makes sure the
      // error messages contain the necessary information nevertheless.
      return inspect$2(val, {
        compact: false,
        customInspect: false,
        depth: 1000,
        maxArrayLength: Infinity,
        // Assert compares only enumerable properties (with a few exceptions).
        showHidden: false,
        // Having a long line as error is better than wrapping the line for
        // comparison for now.
        // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
        // have meta information about the inspected properties (i.e., know where
        // in what line the property starts and ends).
        breakLength: Infinity,
        // Assert does not detect proxies currently.
        showProxy: false,
        sorted: true,
        // Inspect getters as we also check them when comparing entries.
        getters: true
      });
    }

    function createErrDiff(actual, expected, operator) {
      var other = '';
      var res = '';
      var lastPos = 0;
      var end = '';
      var skipped = false;
      var actualInspected = inspectValue(actual);
      var actualLines = actualInspected.split('\n');
      var expectedLines = inspectValue(expected).split('\n');
      var i = 0;
      var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
      // for the `strictEqual` operator.

      if (operator === 'strictEqual' && _typeof$1(actual) === 'object' && _typeof$1(expected) === 'object' && actual !== null && expected !== null) {
        operator = 'strictEqualObject';
      } // If "actual" and "expected" fit on a single line and they are not strictly
      // equal, check further special handling.


      if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
        var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
        // kMaxShortLength and if neither is an object and at least one of them is
        // not `zero`, use the strict equal comparison to visualize the output.

        if (inputLength <= kMaxShortLength) {
          if ((_typeof$1(actual) !== 'object' || actual === null) && (_typeof$1(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
            // -0 === +0
            return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
          }
        } else if (operator !== 'strictEqualObject') {
          // If the stderr is a tty and the input length is lower than the current
          // columns per line, add a mismatch indicator below the output. If it is
          // not a tty, use a default value of 80 characters.
          var maxLength = 80;

          if (inputLength < maxLength) {
            while (actualLines[0][i] === expectedLines[0][i]) {
              i++;
            } // Ignore the first characters.


            if (i > 2) {
              // Add position indicator for the first mismatch in case it is a
              // single line and the input length is less than the column length.
              indicator = "\n  ".concat(repeat(' ', i), "^");
              i = 0;
            }
          }
        }
      } // Remove all ending lines that match (this optimizes the output for
      // readability by reducing the number of total changed lines).


      var a = actualLines[actualLines.length - 1];
      var b = expectedLines[expectedLines.length - 1];

      while (a === b) {
        if (i++ < 2) {
          end = "\n  ".concat(a).concat(end);
        } else {
          other = a;
        }

        actualLines.pop();
        expectedLines.pop();
        if (actualLines.length === 0 || expectedLines.length === 0) break;
        a = actualLines[actualLines.length - 1];
        b = expectedLines[expectedLines.length - 1];
      }

      var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
      // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })

      if (maxLines === 0) {
        // We have to get the result again. The lines were all removed before.
        var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.


        if (_actualLines.length > 30) {
          _actualLines[26] = "".concat(blue, "...").concat(white);

          while (_actualLines.length > 27) {
            _actualLines.pop();
          }
        }

        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
      }

      if (i > 3) {
        end = "\n".concat(blue, "...").concat(white).concat(end);
        skipped = true;
      }

      if (other !== '') {
        end = "\n  ".concat(other).concat(end);
        other = '';
      }

      var printedLines = 0;
      var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
      var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");

      for (i = 0; i < maxLines; i++) {
        // Only extra expected lines exist
        var cur = i - lastPos;

        if (actualLines.length < i + 1) {
          // If the last diverging line is more than one line above and the
          // current line is at least line three, add some of the former lines and
          // also add dots to indicate skipped entries.
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(expectedLines[i - 2]);
              printedLines++;
            }

            res += "\n  ".concat(expectedLines[i - 1]);
            printedLines++;
          } // Mark the current line as the last diverging one.


          lastPos = i; // Add the expected line to the cache.

          other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
          printedLines++; // Only extra actual lines exist
        } else if (expectedLines.length < i + 1) {
          // If the last diverging line is more than one line above and the
          // current line is at least line three, add some of the former lines and
          // also add dots to indicate skipped entries.
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(actualLines[i - 2]);
              printedLines++;
            }

            res += "\n  ".concat(actualLines[i - 1]);
            printedLines++;
          } // Mark the current line as the last diverging one.


          lastPos = i; // Add the actual line to the result.

          res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
          printedLines++; // Lines diverge
        } else {
          var expectedLine = expectedLines[i];
          var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
          // a trailing comma. In that case it is actually identical and we should
          // mark it as such.

          var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
          // add a comma at the end of the actual line. Otherwise the output could
          // look weird as in:
          //
          //   [
          //     1         // No comma at the end!
          // +   2
          //   ]
          //

          if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
            divergingLines = false;
            actualLine += ',';
          }

          if (divergingLines) {
            // If the last diverging line is more than one line above and the
            // current line is at least line three, add some of the former lines and
            // also add dots to indicate skipped entries.
            if (cur > 1 && i > 2) {
              if (cur > 4) {
                res += "\n".concat(blue, "...").concat(white);
                skipped = true;
              } else if (cur > 3) {
                res += "\n  ".concat(actualLines[i - 2]);
                printedLines++;
              }

              res += "\n  ".concat(actualLines[i - 1]);
              printedLines++;
            } // Mark the current line as the last diverging one.


            lastPos = i; // Add the actual line to the result and cache the expected diverging
            // line so consecutive diverging lines show up as +++--- and not +-+-+-.

            res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
            printedLines += 2; // Lines are identical
          } else {
            // Add all cached information to the result before adding other things
            // and reset the cache.
            res += other;
            other = ''; // If the last diverging line is exactly one line above or if it is the
            // very first line, add the line to the result.

            if (cur === 1 || i === 0) {
              res += "\n  ".concat(actualLine);
              printedLines++;
            }
          }
        } // Inspected object to big (Show ~20 rows max)


        if (printedLines > 20 && i < maxLines - 2) {
          return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
        }
      }

      return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
    }

    var AssertionError$1 =
    /*#__PURE__*/
    function (_Error) {
      _inherits(AssertionError, _Error);

      function AssertionError(options) {
        var _this;

        _classCallCheck(this, AssertionError);

        if (_typeof$1(options) !== 'object' || options === null) {
          throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
        }

        var message = options.message,
            operator = options.operator,
            stackStartFn = options.stackStartFn;
        var actual = options.actual,
            expected = options.expected;
        var limit = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;

        if (message != null) {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
        } else {
          // in a very close way to the original in case both sides are actually
          // instances of Error.


          if (_typeof$1(actual) === 'object' && actual !== null && _typeof$1(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
            actual = copyError(actual);
            expected = copyError(expected);
          }

          if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
            _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
          } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
            // In case the objects are equal but the operator requires unequal, show
            // the first object and say A equals B
            var base = kReadableOperator[operator];
            var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.

            if (operator === 'notStrictEqual' && _typeof$1(actual) === 'object' && actual !== null) {
              base = kReadableOperator.notStrictEqualObject;
            } // Only remove lines in case it makes sense to collapse those.
            // TODO: Accept env to always show the full error.


            if (res.length > 30) {
              res[26] = "".concat(blue, "...").concat(white);

              while (res.length > 27) {
                res.pop();
              }
            } // Only print a single input.


            if (res.length === 1) {
              _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
            } else {
              _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
            }
          } else {
            var _res = inspectValue(actual);

            var other = '';
            var knownOperators = kReadableOperator[operator];

            if (operator === 'notDeepEqual' || operator === 'notEqual') {
              _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);

              if (_res.length > 1024) {
                _res = "".concat(_res.slice(0, 1021), "...");
              }
            } else {
              other = "".concat(inspectValue(expected));

              if (_res.length > 512) {
                _res = "".concat(_res.slice(0, 509), "...");
              }

              if (other.length > 512) {
                other = "".concat(other.slice(0, 509), "...");
              }

              if (operator === 'deepEqual' || operator === 'equal') {
                _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
              } else {
                other = " ".concat(operator, " ").concat(other);
              }
            }

            _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
          }
        }

        Error.stackTraceLimit = limit;
        _this.generatedMessage = !message;
        Object.defineProperty(_assertThisInitialized(_this), 'name', {
          value: 'AssertionError [ERR_ASSERTION]',
          enumerable: false,
          writable: true,
          configurable: true
        });
        _this.code = 'ERR_ASSERTION';
        _this.actual = actual;
        _this.expected = expected;
        _this.operator = operator;

        if (Error.captureStackTrace) {
          // eslint-disable-next-line no-restricted-syntax
          Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
        } // Create error message including the error code in the name.


        _this.stack; // Reset the name.

        _this.name = 'AssertionError';
        return _possibleConstructorReturn(_this);
      }

      _createClass(AssertionError, [{
        key: "toString",
        value: function toString() {
          return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
        }
      }, {
        key: inspect$2.custom,
        value: function value(recurseTimes, ctx) {
          // This limits the `actual` and `expected` property default inspection to
          // the minimum depth. Otherwise those values would be too verbose compared
          // to the actual error message which contains a combined view of these two
          // input values.
          return inspect$2(this, _objectSpread({}, ctx, {
            customInspect: false,
            depth: 0
          }));
        }
      }]);

      return AssertionError;
    }(_wrapNativeSuper(Error));

    var assertion_error = AssertionError$1;

    /**
     * Code refactored from Mozilla Developer Network:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
     */

    function assign(target, firstSource) {
      if (target === undefined || target === null) {
        throw new TypeError('Cannot convert first argument to object');
      }

      var to = Object(target);
      for (var i = 1; i < arguments.length; i++) {
        var nextSource = arguments[i];
        if (nextSource === undefined || nextSource === null) {
          continue;
        }

        var keysArray = Object.keys(Object(nextSource));
        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
          var nextKey = keysArray[nextIndex];
          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
          if (desc !== undefined && desc.enumerable) {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
      return to;
    }

    function polyfill$4() {
      if (!Object.assign) {
        Object.defineProperty(Object, 'assign', {
          enumerable: false,
          configurable: true,
          writable: true,
          value: assign
        });
      }
    }

    var es6ObjectAssign = {
      assign: assign,
      polyfill: polyfill$4
    };

    var toStr$2 = Object.prototype.toString;

    var isArguments$1 = function isArguments(value) {
    	var str = toStr$2.call(value);
    	var isArgs = str === '[object Arguments]';
    	if (!isArgs) {
    		isArgs = str !== '[object Array]' &&
    			value !== null &&
    			typeof value === 'object' &&
    			typeof value.length === 'number' &&
    			value.length >= 0 &&
    			toStr$2.call(value.callee) === '[object Function]';
    	}
    	return isArgs;
    };

    var keysShim$1;
    if (!Object.keys) {
    	// modified from https://github.com/es-shims/es5-shim
    	var has = Object.prototype.hasOwnProperty;
    	var toStr$1 = Object.prototype.toString;
    	var isArgs = isArguments$1; // eslint-disable-line global-require
    	var isEnumerable = Object.prototype.propertyIsEnumerable;
    	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
    	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
    	var dontEnums = [
    		'toString',
    		'toLocaleString',
    		'valueOf',
    		'hasOwnProperty',
    		'isPrototypeOf',
    		'propertyIsEnumerable',
    		'constructor'
    	];
    	var equalsConstructorPrototype = function (o) {
    		var ctor = o.constructor;
    		return ctor && ctor.prototype === o;
    	};
    	var excludedKeys = {
    		$applicationCache: true,
    		$console: true,
    		$external: true,
    		$frame: true,
    		$frameElement: true,
    		$frames: true,
    		$innerHeight: true,
    		$innerWidth: true,
    		$onmozfullscreenchange: true,
    		$onmozfullscreenerror: true,
    		$outerHeight: true,
    		$outerWidth: true,
    		$pageXOffset: true,
    		$pageYOffset: true,
    		$parent: true,
    		$scrollLeft: true,
    		$scrollTop: true,
    		$scrollX: true,
    		$scrollY: true,
    		$self: true,
    		$webkitIndexedDB: true,
    		$webkitStorageInfo: true,
    		$window: true
    	};
    	var hasAutomationEqualityBug = (function () {
    		/* global window */
    		if (typeof window === 'undefined') { return false; }
    		for (var k in window) {
    			try {
    				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
    					try {
    						equalsConstructorPrototype(window[k]);
    					} catch (e) {
    						return true;
    					}
    				}
    			} catch (e) {
    				return true;
    			}
    		}
    		return false;
    	}());
    	var equalsConstructorPrototypeIfNotBuggy = function (o) {
    		/* global window */
    		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
    			return equalsConstructorPrototype(o);
    		}
    		try {
    			return equalsConstructorPrototype(o);
    		} catch (e) {
    			return false;
    		}
    	};

    	keysShim$1 = function keys(object) {
    		var isObject = object !== null && typeof object === 'object';
    		var isFunction = toStr$1.call(object) === '[object Function]';
    		var isArguments = isArgs(object);
    		var isString = isObject && toStr$1.call(object) === '[object String]';
    		var theKeys = [];

    		if (!isObject && !isFunction && !isArguments) {
    			throw new TypeError('Object.keys called on a non-object');
    		}

    		var skipProto = hasProtoEnumBug && isFunction;
    		if (isString && object.length > 0 && !has.call(object, 0)) {
    			for (var i = 0; i < object.length; ++i) {
    				theKeys.push(String(i));
    			}
    		}

    		if (isArguments && object.length > 0) {
    			for (var j = 0; j < object.length; ++j) {
    				theKeys.push(String(j));
    			}
    		} else {
    			for (var name in object) {
    				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
    					theKeys.push(String(name));
    				}
    			}
    		}

    		if (hasDontEnumBug) {
    			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

    			for (var k = 0; k < dontEnums.length; ++k) {
    				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
    					theKeys.push(dontEnums[k]);
    				}
    			}
    		}
    		return theKeys;
    	};
    }
    var implementation$2 = keysShim$1;

    var slice = Array.prototype.slice;


    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) { return origKeys(o); } : implementation$2;

    var originalKeys = Object.keys;

    keysShim.shim = function shimObjectKeys() {
    	if (Object.keys) {
    		var keysWorksWithArguments = (function () {
    			// Safari 5.0 bug
    			var args = Object.keys(arguments);
    			return args && args.length === arguments.length;
    		}(1, 2));
    		if (!keysWorksWithArguments) {
    			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
    				if (isArguments$1(object)) {
    					return originalKeys(slice.call(object));
    				}
    				return originalKeys(object);
    			};
    		}
    	} else {
    		Object.keys = keysShim;
    	}
    	return Object.keys || keysShim;
    };

    var objectKeys$1 = keysShim;

    var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

    var toStr = Object.prototype.toString;
    var concat = Array.prototype.concat;
    var origDefineProperty = Object.defineProperty;

    var isFunction$1 = function (fn) {
    	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
    };

    var arePropertyDescriptorsSupported = function () {
    	var obj = {};
    	try {
    		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
    		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
    		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
    			return false;
    		}
    		return obj.x === obj;
    	} catch (e) { /* this is IE 8. */
    		return false;
    	}
    };
    var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

    var defineProperty$1 = function (object, name, value, predicate) {
    	if (name in object && (!isFunction$1(predicate) || !predicate())) {
    		return;
    	}
    	if (supportsDescriptors) {
    		origDefineProperty(object, name, {
    			configurable: true,
    			enumerable: false,
    			value: value,
    			writable: true
    		});
    	} else {
    		object[name] = value;
    	}
    };

    var defineProperties = function (object, map) {
    	var predicates = arguments.length > 2 ? arguments[2] : {};
    	var props = objectKeys$1(map);
    	if (hasSymbols) {
    		props = concat.call(props, Object.getOwnPropertySymbols(map));
    	}
    	for (var i = 0; i < props.length; i += 1) {
    		defineProperty$1(object, props[i], map[props[i]], predicates[props[i]]);
    	}
    };

    defineProperties.supportsDescriptors = !!supportsDescriptors;

    var defineProperties_1 = defineProperties;

    var numberIsNaN$1 = function (value) {
    	return value !== value;
    };

    var implementation$1 = function is(a, b) {
    	if (a === 0 && b === 0) {
    		return 1 / a === 1 / b;
    	}
    	if (a === b) {
    		return true;
    	}
    	if (numberIsNaN$1(a) && numberIsNaN$1(b)) {
    		return true;
    	}
    	return false;
    };

    var polyfill$3 = function getPolyfill() {
    	return typeof Object.is === 'function' ? Object.is : implementation$1;
    };

    var shim$1 = function shimObjectIs() {
    	var polyfill = polyfill$3();
    	defineProperties_1(Object, { is: polyfill }, {
    		is: function testObjectIs() {
    			return Object.is !== polyfill;
    		}
    	});
    	return polyfill;
    };

    var polyfill$2 = callBind(polyfill$3(), Object);

    defineProperties_1(polyfill$2, {
    	getPolyfill: polyfill$3,
    	implementation: implementation$1,
    	shim: shim$1
    });

    var objectIs$1 = polyfill$2;

    /* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

    var implementation = function isNaN(value) {
    	return value !== value;
    };

    var polyfill$1 = function getPolyfill() {
    	if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
    		return Number.isNaN;
    	}
    	return implementation;
    };

    /* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

    var shim = function shimNumberIsNaN() {
    	var polyfill = polyfill$1();
    	defineProperties_1(Number, { isNaN: polyfill }, {
    		isNaN: function testIsNaN() {
    			return Number.isNaN !== polyfill;
    		}
    	});
    	return polyfill;
    };

    var polyfill = callBind(polyfill$1(), Number);

    /* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

    defineProperties_1(polyfill, {
    	getPolyfill: polyfill$1,
    	implementation: implementation,
    	shim: shim
    });

    var isNan = polyfill;

    function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

    function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

    function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

    function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

    function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    var regexFlagsSupported = /a/g.flags !== undefined;

    var arrayFromSet = function arrayFromSet(set) {
      var array = [];
      set.forEach(function (value) {
        return array.push(value);
      });
      return array;
    };

    var arrayFromMap = function arrayFromMap(map) {
      var array = [];
      map.forEach(function (value, key) {
        return array.push([key, value]);
      });
      return array;
    };

    var objectIs = Object.is ? Object.is : objectIs$1;
    var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
      return [];
    };
    var numberIsNaN = Number.isNaN ? Number.isNaN : isNan;

    function uncurryThis(f) {
      return f.call.bind(f);
    }

    var hasOwnProperty$1 = uncurryThis(Object.prototype.hasOwnProperty);
    var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
    var objectToString$1 = uncurryThis(Object.prototype.toString);

    var _require$types = util$1.types,
        isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
        isArrayBufferView = _require$types.isArrayBufferView,
        isDate$1 = _require$types.isDate,
        isMap = _require$types.isMap,
        isRegExp$1 = _require$types.isRegExp,
        isSet = _require$types.isSet,
        isNativeError = _require$types.isNativeError,
        isBoxedPrimitive = _require$types.isBoxedPrimitive,
        isNumberObject = _require$types.isNumberObject,
        isStringObject = _require$types.isStringObject,
        isBooleanObject = _require$types.isBooleanObject,
        isBigIntObject = _require$types.isBigIntObject,
        isSymbolObject = _require$types.isSymbolObject,
        isFloat32Array = _require$types.isFloat32Array,
        isFloat64Array = _require$types.isFloat64Array;

    function isNonIndex(key) {
      if (key.length === 0 || key.length > 10) return true;

      for (var i = 0; i < key.length; i++) {
        var code = key.charCodeAt(i);
        if (code < 48 || code > 57) return true;
      } // The maximum size for an array is 2 ** 32 -1.


      return key.length === 10 && key >= Math.pow(2, 32);
    }

    function getOwnNonIndexProperties(value) {
      return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
    } // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
    // original notice:

    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
     * @license  MIT
     */


    function compare$1(a, b) {
      if (a === b) {
        return 0;
      }

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }

      if (x < y) {
        return -1;
      }

      if (y < x) {
        return 1;
      }

      return 0;
    }
    var kStrict = true;
    var kLoose = false;
    var kNoIterator = 0;
    var kIsArray = 1;
    var kIsSet = 2;
    var kIsMap = 3; // Check if they have the same source and flags

    function areSimilarRegExps(a, b) {
      return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
    }

    function areSimilarFloatArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }

      for (var offset = 0; offset < a.byteLength; offset++) {
        if (a[offset] !== b[offset]) {
          return false;
        }
      }

      return true;
    }

    function areSimilarTypedArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }

      return compare$1(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
    }

    function areEqualArrayBuffers(buf1, buf2) {
      return buf1.byteLength === buf2.byteLength && compare$1(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
    }

    function isEqualBoxedPrimitive(val1, val2) {
      if (isNumberObject(val1)) {
        return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
      }

      if (isStringObject(val1)) {
        return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
      }

      if (isBooleanObject(val1)) {
        return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
      }

      if (isBigIntObject(val1)) {
        return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
      }

      return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
    } // Notes: Type tags are historical [[Class]] properties that can be set by
    // FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
    // and retrieved using Object.prototype.toString.call(obj) in JS
    // See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
    // for a list of tags pre-defined in the spec.
    // There are some unspecified tags in the wild too (e.g. typed array tags).
    // Since tags can be altered, they only serve fast failures
    //
    // Typed arrays and buffers are checked by comparing the content in their
    // underlying ArrayBuffer. This optimization requires that it's
    // reasonable to interpret their underlying memory in the same way,
    // which is checked by comparing their type tags.
    // (e.g. a Uint8Array and a Uint16Array with the same memory content
    // could still be different because they will be interpreted differently).
    //
    // For strict comparison, objects should have
    // a) The same built-in type tags
    // b) The same prototypes.


    function innerDeepEqual(val1, val2, strict, memos) {
      // All identical values are equivalent, as determined by ===.
      if (val1 === val2) {
        if (val1 !== 0) return true;
        return strict ? objectIs(val1, val2) : true;
      } // Check more closely if val1 and val2 are equal.


      if (strict) {
        if (_typeof(val1) !== 'object') {
          return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
        }

        if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
          return false;
        }

        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
          return false;
        }
      } else {
        if (val1 === null || _typeof(val1) !== 'object') {
          if (val2 === null || _typeof(val2) !== 'object') {
            // eslint-disable-next-line eqeqeq
            return val1 == val2;
          }

          return false;
        }

        if (val2 === null || _typeof(val2) !== 'object') {
          return false;
        }
      }

      var val1Tag = objectToString$1(val1);
      var val2Tag = objectToString$1(val2);

      if (val1Tag !== val2Tag) {
        return false;
      }

      if (Array.isArray(val1)) {
        // Check for sparse arrays and general fast path
        if (val1.length !== val2.length) {
          return false;
        }

        var keys1 = getOwnNonIndexProperties(val1);
        var keys2 = getOwnNonIndexProperties(val2);

        if (keys1.length !== keys2.length) {
          return false;
        }

        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
      } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
      // wan't to early return out of the rest of the checks. However we can check
      // if the second value is one of these values and the first isn't.


      if (val1Tag === '[object Object]') {
        // return keyCheck(val1, val2, strict, memos, kNoIterator);
        if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
          return false;
        }
      }

      if (isDate$1(val1)) {
        if (!isDate$1(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
          return false;
        }
      } else if (isRegExp$1(val1)) {
        if (!isRegExp$1(val2) || !areSimilarRegExps(val1, val2)) {
          return false;
        }
      } else if (isNativeError(val1) || val1 instanceof Error) {
        // Do not compare the stack as it might differ even though the error itself
        // is otherwise identical.
        if (val1.message !== val2.message || val1.name !== val2.name) {
          return false;
        }
      } else if (isArrayBufferView(val1)) {
        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
          if (!areSimilarFloatArrays(val1, val2)) {
            return false;
          }
        } else if (!areSimilarTypedArrays(val1, val2)) {
          return false;
        } // Buffer.compare returns true, so val1.length === val2.length. If they both
        // only contain numeric keys, we don't need to exam further than checking
        // the symbols.


        var _keys = getOwnNonIndexProperties(val1);

        var _keys2 = getOwnNonIndexProperties(val2);

        if (_keys.length !== _keys2.length) {
          return false;
        }

        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
      } else if (isSet(val1)) {
        if (!isSet(val2) || val1.size !== val2.size) {
          return false;
        }

        return keyCheck(val1, val2, strict, memos, kIsSet);
      } else if (isMap(val1)) {
        if (!isMap(val2) || val1.size !== val2.size) {
          return false;
        }

        return keyCheck(val1, val2, strict, memos, kIsMap);
      } else if (isAnyArrayBuffer(val1)) {
        if (!areEqualArrayBuffers(val1, val2)) {
          return false;
        }
      } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
        return false;
      }

      return keyCheck(val1, val2, strict, memos, kNoIterator);
    }

    function getEnumerables(val, keys) {
      return keys.filter(function (k) {
        return propertyIsEnumerable(val, k);
      });
    }

    function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
      // For all remaining Object pairs, including Array, objects and Maps,
      // equivalence is determined by having:
      // a) The same number of owned enumerable properties
      // b) The same set of keys/indexes (although not necessarily the same order)
      // c) Equivalent values for every corresponding key/index
      // d) For Sets and Maps, equal contents
      // Note: this accounts for both named and indexed properties on Arrays.
      if (arguments.length === 5) {
        aKeys = Object.keys(val1);
        var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.

        if (aKeys.length !== bKeys.length) {
          return false;
        }
      } // Cheap key test


      var i = 0;

      for (; i < aKeys.length; i++) {
        if (!hasOwnProperty$1(val2, aKeys[i])) {
          return false;
        }
      }

      if (strict && arguments.length === 5) {
        var symbolKeysA = objectGetOwnPropertySymbols(val1);

        if (symbolKeysA.length !== 0) {
          var count = 0;

          for (i = 0; i < symbolKeysA.length; i++) {
            var key = symbolKeysA[i];

            if (propertyIsEnumerable(val1, key)) {
              if (!propertyIsEnumerable(val2, key)) {
                return false;
              }

              aKeys.push(key);
              count++;
            } else if (propertyIsEnumerable(val2, key)) {
              return false;
            }
          }

          var symbolKeysB = objectGetOwnPropertySymbols(val2);

          if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
            return false;
          }
        } else {
          var _symbolKeysB = objectGetOwnPropertySymbols(val2);

          if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
            return false;
          }
        }
      }

      if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
        return true;
      } // Use memos to handle cycles.


      if (memos === undefined) {
        memos = {
          val1: new Map(),
          val2: new Map(),
          position: 0
        };
      } else {
        // We prevent up to two map.has(x) calls by directly retrieving the value
        // and checking for undefined. The map can only contain numbers, so it is
        // safe to check for undefined only.
        var val2MemoA = memos.val1.get(val1);

        if (val2MemoA !== undefined) {
          var val2MemoB = memos.val2.get(val2);

          if (val2MemoB !== undefined) {
            return val2MemoA === val2MemoB;
          }
        }

        memos.position++;
      }

      memos.val1.set(val1, memos.position);
      memos.val2.set(val2, memos.position);
      var areEq = objEquiv$1(val1, val2, strict, aKeys, memos, iterationType);
      memos.val1.delete(val1);
      memos.val2.delete(val2);
      return areEq;
    }

    function setHasEqualElement(set, val1, strict, memo) {
      // Go looking.
      var setValues = arrayFromSet(set);

      for (var i = 0; i < setValues.length; i++) {
        var val2 = setValues[i];

        if (innerDeepEqual(val1, val2, strict, memo)) {
          // Remove the matching element to make sure we do not check that again.
          set.delete(val2);
          return true;
        }
      }

      return false;
    } // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
    // Sadly it is not possible to detect corresponding values properly in case the
    // type is a string, number, bigint or boolean. The reason is that those values
    // can match lots of different string values (e.g., 1n == '+00001').


    function findLooseMatchingPrimitives(prim) {
      switch (_typeof(prim)) {
        case 'undefined':
          return null;

        case 'object':
          // Only pass in null as object!
          return undefined;

        case 'symbol':
          return false;

        case 'string':
          prim = +prim;
        // Loose equal entries exist only if the string is possible to convert to
        // a regular number and not NaN.
        // Fall through

        case 'number':
          if (numberIsNaN(prim)) {
            return false;
          }

      }

      return true;
    }

    function setMightHaveLoosePrim(a, b, prim) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) return altValue;
      return b.has(altValue) && !a.has(altValue);
    }

    function mapMightHaveLoosePrim(a, b, prim, item, memo) {
      var altValue = findLooseMatchingPrimitives(prim);

      if (altValue != null) {
        return altValue;
      }

      var curB = b.get(altValue);

      if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
        return false;
      }

      return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
    }

    function setEquiv(a, b, strict, memo) {
      // This is a lazily initiated Set of entries which have to be compared
      // pairwise.
      var set = null;
      var aValues = arrayFromSet(a);

      for (var i = 0; i < aValues.length; i++) {
        var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
        // heavy sets but it is a minor slow down for primitives. As they are fast
        // to check this improves the worst case scenario instead.

        if (_typeof(val) === 'object' && val !== null) {
          if (set === null) {
            set = new Set();
          } // If the specified value doesn't exist in the second set its an not null
          // object (or non strict only: a not matching primitive) we'll need to go
          // hunting for something thats deep-(strict-)equal to it. To make this
          // O(n log n) complexity we have to copy these values in a new set first.


          set.add(val);
        } else if (!b.has(val)) {
          if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.

          if (!setMightHaveLoosePrim(a, b, val)) {
            return false;
          }

          if (set === null) {
            set = new Set();
          }

          set.add(val);
        }
      }

      if (set !== null) {
        var bValues = arrayFromSet(b);

        for (var _i = 0; _i < bValues.length; _i++) {
          var _val = bValues[_i]; // We have to check if a primitive value is already
          // matching and only if it's not, go hunting for it.

          if (_typeof(_val) === 'object' && _val !== null) {
            if (!setHasEqualElement(set, _val, strict, memo)) return false;
          } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
            return false;
          }
        }

        return set.size === 0;
      }

      return true;
    }

    function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
      // To be able to handle cases like:
      //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
      // ... we need to consider *all* matching keys, not just the first we find.
      var setValues = arrayFromSet(set);

      for (var i = 0; i < setValues.length; i++) {
        var key2 = setValues[i];

        if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
          set.delete(key2);
          return true;
        }
      }

      return false;
    }

    function mapEquiv(a, b, strict, memo) {
      var set = null;
      var aEntries = arrayFromMap(a);

      for (var i = 0; i < aEntries.length; i++) {
        var _aEntries$i = _slicedToArray(aEntries[i], 2),
            key = _aEntries$i[0],
            item1 = _aEntries$i[1];

        if (_typeof(key) === 'object' && key !== null) {
          if (set === null) {
            set = new Set();
          }

          set.add(key);
        } else {
          // By directly retrieving the value we prevent another b.has(key) check in
          // almost all possible cases.
          var item2 = b.get(key);

          if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
            if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
            // keys.

            if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;

            if (set === null) {
              set = new Set();
            }

            set.add(key);
          }
        }
      }

      if (set !== null) {
        var bEntries = arrayFromMap(b);

        for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
          var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
              key = _bEntries$_i[0],
              item = _bEntries$_i[1];

          if (_typeof(key) === 'object' && key !== null) {
            if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
          } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
            return false;
          }
        }

        return set.size === 0;
      }

      return true;
    }

    function objEquiv$1(a, b, strict, keys, memos, iterationType) {
      // Sets and maps don't have their entries accessible via normal object
      // properties.
      var i = 0;

      if (iterationType === kIsSet) {
        if (!setEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsMap) {
        if (!mapEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsArray) {
        for (; i < a.length; i++) {
          if (hasOwnProperty$1(a, i)) {
            if (!hasOwnProperty$1(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
              return false;
            }
          } else if (hasOwnProperty$1(b, i)) {
            return false;
          } else {
            // Array is sparse.
            var keysA = Object.keys(a);

            for (; i < keysA.length; i++) {
              var key = keysA[i];

              if (!hasOwnProperty$1(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
                return false;
              }
            }

            if (keysA.length !== Object.keys(b).length) {
              return false;
            }

            return true;
          }
        }
      } // The pair must have equivalent values for every corresponding key.
      // Possibly expensive deep test:


      for (i = 0; i < keys.length; i++) {
        var _key = keys[i];

        if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
          return false;
        }
      }

      return true;
    }

    function isDeepEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kLoose);
    }

    function isDeepStrictEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kStrict);
    }

    var comparisons = {
      isDeepEqual: isDeepEqual,
      isDeepStrictEqual: isDeepStrictEqual
    };

    var assert_1 = createCommonjsModule(function (module) {

    function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var _require$codes = errors.codes,
        ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
        ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
        ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
        ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
        ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;



    var inspect = util$1.inspect;

    var _require$types = util$1.types,
        isPromise = _require$types.isPromise,
        isRegExp = _require$types.isRegExp;

    var objectAssign = Object.assign ? Object.assign : es6ObjectAssign.assign;
    var objectIs = Object.is ? Object.is : objectIs$1;
    var isDeepEqual;
    var isDeepStrictEqual;

    function lazyLoadComparison() {
      var comparison = comparisons;

      isDeepEqual = comparison.isDeepEqual;
      isDeepStrictEqual = comparison.isDeepStrictEqual;
    } // Escape control characters but not \n and \t to keep the line breaks and

    var warned = false; // The assert module provides functions that throw
    // AssertionError's when particular conditions are not met. The
    // assert module must conform to the following interface.

    var assert = module.exports = ok;
    var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
    // when a corresponding condition is not met, with a message that
    // may be undefined if not provided. All assertion methods provide
    // both the actual and expected values to the assertion error for
    // display purposes.

    function innerFail(obj) {
      if (obj.message instanceof Error) throw obj.message;
      throw new assertion_error(obj);
    }

    function fail(actual, expected, message, operator, stackStartFn) {
      var argsLen = arguments.length;
      var internalMessage;

      if (argsLen === 0) {
        internalMessage = 'Failed';
      } else if (argsLen === 1) {
        message = actual;
        actual = undefined;
      } else {
        if (warned === false) {
          warned = true;
          var warn = console.warn.bind(console);
          warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
        }

        if (argsLen === 2) operator = '!=';
      }

      if (message instanceof Error) throw message;
      var errArgs = {
        actual: actual,
        expected: expected,
        operator: operator === undefined ? 'fail' : operator,
        stackStartFn: stackStartFn || fail
      };

      if (message !== undefined) {
        errArgs.message = message;
      }

      var err = new assertion_error(errArgs);

      if (internalMessage) {
        err.message = internalMessage;
        err.generatedMessage = true;
      }

      throw err;
    }

    assert.fail = fail; // The AssertionError is defined in internal/error.

    assert.AssertionError = assertion_error;

    function innerOk(fn, argLen, value, message) {
      if (!value) {
        var generatedMessage = false;

        if (argLen === 0) {
          generatedMessage = true;
          message = 'No value argument passed to `assert.ok()`';
        } else if (message instanceof Error) {
          throw message;
        }

        var err = new assertion_error({
          actual: value,
          expected: true,
          message: message,
          operator: '==',
          stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
      }
    } // Pure assertion tests whether a value is truthy, as determined
    // by !!value.


    function ok() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      innerOk.apply(void 0, [ok, args.length].concat(args));
    }

    assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.

    /* eslint-disable no-restricted-properties */

    assert.equal = function equal(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS('actual', 'expected');
      } // eslint-disable-next-line eqeqeq


      if (actual != expected) {
        innerFail({
          actual: actual,
          expected: expected,
          message: message,
          operator: '==',
          stackStartFn: equal
        });
      }
    }; // The non-equality assertion tests for whether two objects are not
    // equal with !=.


    assert.notEqual = function notEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS('actual', 'expected');
      } // eslint-disable-next-line eqeqeq


      if (actual == expected) {
        innerFail({
          actual: actual,
          expected: expected,
          message: message,
          operator: '!=',
          stackStartFn: notEqual
        });
      }
    }; // The equivalence assertion tests a deep equality relation.


    assert.deepEqual = function deepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS('actual', 'expected');
      }

      if (isDeepEqual === undefined) lazyLoadComparison();

      if (!isDeepEqual(actual, expected)) {
        innerFail({
          actual: actual,
          expected: expected,
          message: message,
          operator: 'deepEqual',
          stackStartFn: deepEqual
        });
      }
    }; // The non-equivalence assertion tests for any deep inequality.


    assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS('actual', 'expected');
      }

      if (isDeepEqual === undefined) lazyLoadComparison();

      if (isDeepEqual(actual, expected)) {
        innerFail({
          actual: actual,
          expected: expected,
          message: message,
          operator: 'notDeepEqual',
          stackStartFn: notDeepEqual
        });
      }
    };
    /* eslint-enable */


    assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS('actual', 'expected');
      }

      if (isDeepEqual === undefined) lazyLoadComparison();

      if (!isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual: actual,
          expected: expected,
          message: message,
          operator: 'deepStrictEqual',
          stackStartFn: deepStrictEqual
        });
      }
    };

    assert.notDeepStrictEqual = notDeepStrictEqual;

    function notDeepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS('actual', 'expected');
      }

      if (isDeepEqual === undefined) lazyLoadComparison();

      if (isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual: actual,
          expected: expected,
          message: message,
          operator: 'notDeepStrictEqual',
          stackStartFn: notDeepStrictEqual
        });
      }
    }

    assert.strictEqual = function strictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS('actual', 'expected');
      }

      if (!objectIs(actual, expected)) {
        innerFail({
          actual: actual,
          expected: expected,
          message: message,
          operator: 'strictEqual',
          stackStartFn: strictEqual
        });
      }
    };

    assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS('actual', 'expected');
      }

      if (objectIs(actual, expected)) {
        innerFail({
          actual: actual,
          expected: expected,
          message: message,
          operator: 'notStrictEqual',
          stackStartFn: notStrictEqual
        });
      }
    };

    var Comparison = function Comparison(obj, keys, actual) {
      var _this = this;

      _classCallCheck(this, Comparison);

      keys.forEach(function (key) {
        if (key in obj) {
          if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
            _this[key] = actual[key];
          } else {
            _this[key] = obj[key];
          }
        }
      });
    };

    function compareExceptionKey(actual, expected, key, message, keys, fn) {
      if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
        if (!message) {
          // Create placeholder objects to create a nice output.
          var a = new Comparison(actual, keys);
          var b = new Comparison(expected, keys, actual);
          var err = new assertion_error({
            actual: a,
            expected: b,
            operator: 'deepStrictEqual',
            stackStartFn: fn
          });
          err.actual = actual;
          err.expected = expected;
          err.operator = fn.name;
          throw err;
        }

        innerFail({
          actual: actual,
          expected: expected,
          message: message,
          operator: fn.name,
          stackStartFn: fn
        });
      }
    }

    function expectedException(actual, expected, msg, fn) {
      if (typeof expected !== 'function') {
        if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.

        if (arguments.length === 2) {
          throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
        } // Handle primitives properly.


        if (_typeof(actual) !== 'object' || actual === null) {
          var err = new assertion_error({
            actual: actual,
            expected: expected,
            message: msg,
            operator: 'deepStrictEqual',
            stackStartFn: fn
          });
          err.operator = fn.name;
          throw err;
        }

        var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
        // as well.

        if (expected instanceof Error) {
          keys.push('name', 'message');
        } else if (keys.length === 0) {
          throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
        }

        if (isDeepEqual === undefined) lazyLoadComparison();
        keys.forEach(function (key) {
          if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
            return;
          }

          compareExceptionKey(actual, expected, key, msg, keys, fn);
        });
        return true;
      } // Guard instanceof against arrow functions as they don't have a prototype.


      if (expected.prototype !== undefined && actual instanceof expected) {
        return true;
      }

      if (Error.isPrototypeOf(expected)) {
        return false;
      }

      return expected.call({}, actual) === true;
    }

    function getActual(fn) {
      if (typeof fn !== 'function') {
        throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
      }

      try {
        fn();
      } catch (e) {
        return e;
      }

      return NO_EXCEPTION_SENTINEL;
    }

    function checkIsPromise(obj) {
      // Accept native ES6 promises and promises that are implemented in a similar
      // way. Do not accept thenables that use a function as `obj` and that have no
      // `catch` handler.
      // TODO: thenables are checked up until they have the correct methods,
      // but according to documentation, the `then` method should receive
      // the `fulfill` and `reject` arguments as well or it may be never resolved.
      return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
    }

    function waitForActual(promiseFn) {
      return Promise.resolve().then(function () {
        var resultPromise;

        if (typeof promiseFn === 'function') {
          // Return a rejected promise if `promiseFn` throws synchronously.
          resultPromise = promiseFn(); // Fail in case no promise is returned.

          if (!checkIsPromise(resultPromise)) {
            throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
          }
        } else if (checkIsPromise(promiseFn)) {
          resultPromise = promiseFn;
        } else {
          throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
        }

        return Promise.resolve().then(function () {
          return resultPromise;
        }).then(function () {
          return NO_EXCEPTION_SENTINEL;
        }).catch(function (e) {
          return e;
        });
      });
    }

    function expectsError(stackStartFn, actual, error, message) {
      if (typeof error === 'string') {
        if (arguments.length === 4) {
          throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
        }

        if (_typeof(actual) === 'object' && actual !== null) {
          if (actual.message === error) {
            throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
          }
        } else if (actual === error) {
          throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
        }

        message = error;
        error = undefined;
      } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
        throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
      }

      if (actual === NO_EXCEPTION_SENTINEL) {
        var details = '';

        if (error && error.name) {
          details += " (".concat(error.name, ")");
        }

        details += message ? ": ".concat(message) : '.';
        var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
        innerFail({
          actual: undefined,
          expected: error,
          operator: stackStartFn.name,
          message: "Missing expected ".concat(fnType).concat(details),
          stackStartFn: stackStartFn
        });
      }

      if (error && !expectedException(actual, error, message, stackStartFn)) {
        throw actual;
      }
    }

    function expectsNoError(stackStartFn, actual, error, message) {
      if (actual === NO_EXCEPTION_SENTINEL) return;

      if (typeof error === 'string') {
        message = error;
        error = undefined;
      }

      if (!error || expectedException(actual, error)) {
        var details = message ? ": ".concat(message) : '.';
        var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
        innerFail({
          actual: actual,
          expected: error,
          operator: stackStartFn.name,
          message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
          stackStartFn: stackStartFn
        });
      }

      throw actual;
    }

    assert.throws = function throws(promiseFn) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
    };

    assert.rejects = function rejects(promiseFn) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      return waitForActual(promiseFn).then(function (result) {
        return expectsError.apply(void 0, [rejects, result].concat(args));
      });
    };

    assert.doesNotThrow = function doesNotThrow(fn) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }

      expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
    };

    assert.doesNotReject = function doesNotReject(fn) {
      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }

      return waitForActual(fn).then(function (result) {
        return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
      });
    };

    assert.ifError = function ifError(err) {
      if (err !== null && err !== undefined) {
        var message = 'ifError got unwanted exception: ';

        if (_typeof(err) === 'object' && typeof err.message === 'string') {
          if (err.message.length === 0 && err.constructor) {
            message += err.constructor.name;
          } else {
            message += err.message;
          }
        } else {
          message += inspect(err);
        }

        var newErr = new assertion_error({
          actual: err,
          expected: null,
          operator: 'ifError',
          message: message,
          stackStartFn: ifError
        }); // Make sure we actually have a stack trace!

        var origStack = err.stack;

        if (typeof origStack === 'string') {
          // This will remove any duplicated frames from the error frames taken
          // from within `ifError` and add the original error frames to the newly
          // created ones.
          var tmp2 = origStack.split('\n');
          tmp2.shift(); // Filter all frames existing in err.stack.

          var tmp1 = newErr.stack.split('\n');

          for (var i = 0; i < tmp2.length; i++) {
            // Find the first occurrence of the frame.
            var pos = tmp1.indexOf(tmp2[i]);

            if (pos !== -1) {
              // Only keep new frames.
              tmp1 = tmp1.slice(0, pos);
              break;
            }
          }

          newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
        }

        throw newErr;
      }
    }; // Expose a strict only variant of assert


    function strict() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      innerOk.apply(void 0, [strict, args.length].concat(args));
    }

    assert.strict = objectAssign(strict, assert, {
      equal: assert.strictEqual,
      deepEqual: assert.deepStrictEqual,
      notEqual: assert.notStrictEqual,
      notDeepEqual: assert.notDeepStrictEqual
    });
    assert.strict.strict = assert.strict;
    });

    const LOG_START_INDEX = "Program log: ".length;
    class EventManager {
        constructor(programId, provider, coder) {
            this._programId = programId;
            this._provider = provider;
            this._eventParser = new EventParser(programId, coder);
            this._eventCallbacks = new Map();
            this._eventListeners = new Map();
            this._listenerIdCount = 0;
        }
        addEventListener(eventName, callback) {
            let listener = this._listenerIdCount;
            this._listenerIdCount += 1;
            // Store the listener into the event map.
            if (!(eventName in this._eventCallbacks)) {
                this._eventListeners.set(eventName, []);
            }
            this._eventListeners.set(eventName, this._eventListeners.get(eventName).concat(listener));
            // Store the callback into the listener map.
            this._eventCallbacks.set(listener, [eventName, callback]);
            // Create the subscription singleton, if needed.
            if (this._onLogsSubscriptionId !== undefined) {
                return listener;
            }
            this._onLogsSubscriptionId = this._provider.connection.onLogs(this._programId, (logs, ctx) => {
                if (logs.err) {
                    console.error(logs);
                    return;
                }
                this._eventParser.parseLogs(logs.logs, (event) => {
                    const allListeners = this._eventListeners.get(event.name);
                    if (allListeners) {
                        allListeners.forEach((listener) => {
                            const [, callback] = this._eventCallbacks.get(listener);
                            callback(event.data, ctx.slot);
                        });
                    }
                });
            });
            return listener;
        }
        async removeEventListener(listener) {
            // Get the callback.
            const callback = this._eventCallbacks.get(listener);
            if (!callback) {
                throw new Error(`Event listener ${listener} doesn't exist!`);
            }
            const [eventName] = callback;
            // Get the listeners.
            let listeners = this._eventListeners.get(eventName);
            if (!listeners) {
                throw new Error(`Event listeners don't exist for ${eventName}!`);
            }
            // Update both maps.
            this._eventCallbacks.delete(listener);
            listeners = listeners.filter((l) => l !== listener);
            if (listeners.length === 0) {
                this._eventListeners.delete(eventName);
            }
            // Kill the websocket connection if all listeners have been removed.
            if (this._eventCallbacks.size == 0) {
                assert_1.ok(this._eventListeners.size === 0);
                await this._provider.connection.removeOnLogsListener(this._onLogsSubscriptionId);
                this._onLogsSubscriptionId = undefined;
            }
        }
    }
    class EventParser {
        constructor(programId, coder) {
            this.coder = coder;
            this.programId = programId;
        }
        // Each log given, represents an array of messages emitted by
        // a single transaction, which can execute many different programs across
        // CPI boundaries. However, the subscription is only interested in the
        // events emitted by *this* program. In achieving this, we keep track of the
        // program execution context by parsing each log and looking for a CPI
        // `invoke` call. If one exists, we know a new program is executing. So we
        // push the programId onto a stack and switch the program context. This
        // allows us to track, for a given log, which program was executing during
        // its emission, thereby allowing us to know if a given log event was
        // emitted by *this* program. If it was, then we parse the raw string and
        // emit the event if the string matches the event being subscribed to.
        parseLogs(logs, callback) {
            const logScanner = new LogScanner(logs);
            const execution = new ExecutionContext(logScanner.next());
            let log = logScanner.next();
            while (log !== null) {
                let [event, newProgram, didPop] = this.handleLog(execution, log);
                if (event) {
                    callback(event);
                }
                if (newProgram) {
                    execution.push(newProgram);
                }
                if (didPop) {
                    execution.pop();
                }
                log = logScanner.next();
            }
        }
        // Main log handler. Returns a three element array of the event, the
        // next program that was invoked for CPI, and a boolean indicating if
        // a program has completed execution (and thus should be popped off the
        // execution stack).
        handleLog(execution, log) {
            // Executing program is this program.
            if (execution.stack.length > 0 &&
                execution.program() === this.programId.toString()) {
                return this.handleProgramLog(log);
            }
            // Executing program is not this program.
            else {
                return [null, ...this.handleSystemLog(log)];
            }
        }
        // Handles logs from *this* program.
        handleProgramLog(log) {
            // This is a `msg!` log.
            if (log.startsWith("Program log:")) {
                const logStr = log.slice(LOG_START_INDEX);
                const event = this.coder.events.decode(logStr);
                return [event, null, false];
            }
            // System log.
            else {
                return [null, ...this.handleSystemLog(log)];
            }
        }
        // Handles logs when the current program being executing is *not* this.
        handleSystemLog(log) {
            // System component.
            const logStart = log.split(":")[0];
            // Did the program finish executing?
            if (logStart.match(/^Program (.*) success/g) !== null) {
                return [null, true];
                // Recursive call.
            }
            else if (logStart.startsWith(`Program ${this.programId.toString()} invoke`)) {
                return [this.programId.toString(), false];
            }
            // CPI call.
            else if (logStart.includes("invoke")) {
                return ["cpi", false]; // Any string will do.
            }
            else {
                return [null, false];
            }
        }
    }
    // Stack frame execution context, allowing one to track what program is
    // executing for a given log.
    class ExecutionContext {
        constructor(log) {
            // Assumes the first log in every transaction is an `invoke` log from the
            // runtime.
            const program = /^Program (.*) invoke.*$/g.exec(log)[1];
            this.stack = [program];
        }
        program() {
            assert_1.ok(this.stack.length > 0);
            return this.stack[this.stack.length - 1];
        }
        push(newProgram) {
            this.stack.push(newProgram);
        }
        pop() {
            assert_1.ok(this.stack.length > 0);
            this.stack.pop();
        }
    }
    class LogScanner {
        constructor(logs) {
            this.logs = logs;
        }
        next() {
            if (this.logs.length === 0) {
                return null;
            }
            let l = this.logs[0];
            this.logs = this.logs.slice(1);
            return l;
        }
    }

    class SimulateFactory {
        static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {
            const simulate = async (...args) => {
                const tx = txFn(...args);
                const [, ctx] = splitArgsAndCtx(idlIx, [...args]);
                let resp = undefined;
                try {
                    resp = await provider.simulate(tx, ctx.signers, ctx.options);
                }
                catch (err) {
                    console.log("Translating error", err);
                    let translatedErr = ProgramError.parse(err, idlErrors);
                    if (translatedErr === null) {
                        throw err;
                    }
                    throw translatedErr;
                }
                if (resp === undefined) {
                    throw new Error("Unable to simulate transaction");
                }
                if (resp.value.err) {
                    throw new Error(`Simulate error: ${resp.value.err.toString()}`);
                }
                const logs = resp.value.logs;
                if (!logs) {
                    throw new Error("Simulated logs not found");
                }
                const events = [];
                if (idl.events) {
                    let parser = new EventParser(programId, coder);
                    parser.parseLogs(logs, (event) => {
                        events.push(event);
                    });
                }
                return { events, raw: logs };
            };
            return simulate;
        }
    }

    class NamespaceFactory {
        /**
         * Generates all namespaces for a given program.
         */
        static build(idl, coder, programId, provider) {
            const rpc = {};
            const instruction = {};
            const transaction = {};
            const simulate = {};
            const idlErrors = parseIdlErrors(idl);
            const state = StateFactory.build(idl, coder, programId, provider);
            idl.instructions.forEach((idlIx) => {
                const ixItem = InstructionNamespaceFactory.build(idlIx, (ixName, ix) => coder.instruction.encode(ixName, ix), programId);
                const txItem = TransactionFactory.build(idlIx, ixItem);
                const rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);
                const simulateItem = SimulateFactory.build(idlIx, txItem, idlErrors, provider, coder, programId, idl);
                const name = camelcase(idlIx.name);
                instruction[name] = ixItem;
                transaction[name] = txItem;
                rpc[name] = rpcItem;
                simulate[name] = simulateItem;
            });
            const account = idl.accounts
                ? AccountFactory.build(idl, coder, programId, provider)
                : {};
            return [rpc, instruction, transaction, account, simulate, state];
        }
    }

    function decode(array) {
        const decoder = typeof TextDecoder === "undefined"
            ? new (require("util").TextDecoder)("utf-8") // Node.
            : new TextDecoder("utf-8"); // Browser.
        return decoder.decode(array);
    }

    /**
     * ## Program
     *
     * Program provides the IDL deserialized client representation of an Anchor
     * program.
     *
     * This API is the one stop shop for all things related to communicating with
     * on-chain programs. Among other things, one can send transactions, fetch
     * deserialized accounts, decode instruction data, subscribe to account
     * changes, and listen to events.
     *
     * In addition to field accessors and methods, the object provides a set of
     * dynamically generated properties, also known as namespaces, that
     * map one-to-one to program methods and accounts. These namespaces generally
     *  can be used as follows:
     *
     * ## Usage
     *
     * ```javascript
     * program.<namespace>.<program-specific-method>
     * ```
     *
     * API specifics are namespace dependent. The examples used in the documentation
     * below will refer to the two counter examples found
     * [here](https://github.com/project-serum/anchor#examples).
     */
    class Program {
        /**
         * @param idl       The interface definition.
         * @param programId The on-chain address of the program.
         * @param provider  The network and wallet context to use. If not provided
         *                  then uses [[getProvider]].
         */
        constructor(idl, programId, provider) {
            programId = translateAddress(programId);
            // Fields.
            this._idl = idl;
            this._programId = programId;
            this._provider = provider !== null && provider !== void 0 ? provider : getProvider();
            this._coder = new Coder(idl);
            this._events = new EventManager(this._programId, this._provider, this._coder);
            // Dynamic namespaces.
            const [rpc, instruction, transaction, account, simulate, state,] = NamespaceFactory.build(idl, this._coder, programId, this._provider);
            this.rpc = rpc;
            this.instruction = instruction;
            this.transaction = transaction;
            this.account = account;
            this.simulate = simulate;
            this.state = state;
        }
        /**
         * Address of the program.
         */
        get programId() {
            return this._programId;
        }
        /**
         * IDL defining the program's interface.
         */
        get idl() {
            return this._idl;
        }
        /**
         * Coder for serializing requests.
         */
        get coder() {
            return this._coder;
        }
        /**
         * Wallet and network provider.
         */
        get provider() {
            return this._provider;
        }
        /**
         * Generates a Program client by fetching the IDL from the network.
         *
         * In order to use this method, an IDL must have been previously initialized
         * via the anchor CLI's `anchor idl init` command.
         *
         * @param programId The on-chain address of the program.
         * @param provider  The network and wallet context.
         */
        static async at(address, provider) {
            const programId = translateAddress(address);
            const idl = await Program.fetchIdl(programId, provider);
            return new Program(idl, programId, provider);
        }
        /**
         * Fetches an idl from the blockchain.
         *
         * In order to use this method, an IDL must have been previously initialized
         * via the anchor CLI's `anchor idl init` command.
         *
         * @param programId The on-chain address of the program.
         * @param provider  The network and wallet context.
         */
        static async fetchIdl(address, provider) {
            provider = provider !== null && provider !== void 0 ? provider : getProvider();
            const programId = translateAddress(address);
            const idlAddr = await idlAddress(programId);
            const accountInfo = await provider.connection.getAccountInfo(idlAddr);
            // Chop off account discriminator.
            let idlAccount = decodeIdlAccount(accountInfo.data.slice(8));
            const inflatedIdl = inflate_1(idlAccount.data);
            return JSON.parse(decode(inflatedIdl));
        }
        /**
         * Invokes the given callback every time the given event is emitted.
         *
         * @param eventName The PascalCase name of the event, provided by the IDL.
         * @param callback  The function to invoke whenever the event is emitted from
         *                  program logs.
         */
        addEventListener(eventName, callback) {
            return this._events.addEventListener(eventName, callback);
        }
        /**
         * Unsubscribes from the given eventName.
         */
        async removeEventListener(listener) {
            return await this._events.removeEventListener(listener);
        }
    }

    let _populatedWorkspace = false;
    /**
     * The `workspace` namespace provides a convenience API to automatically
     * search for and deserialize [[Program]] objects defined by compiled IDLs
     * in an Anchor workspace.
     *
     * This API is for Node only.
     */
    new Proxy({}, {
        get(workspaceCache, programName) {
            if (isBrowser) {
                console.log("Workspaces aren't available in the browser");
                return undefined;
            }
            const fs = require("fs");
            const process = require("process");
            if (!_populatedWorkspace) {
                const path = require("path");
                let projectRoot = process.cwd();
                while (!fs.existsSync(path.join(projectRoot, "Anchor.toml"))) {
                    const parentDir = path.dirname(projectRoot);
                    if (parentDir === projectRoot) {
                        projectRoot = undefined;
                    }
                    projectRoot = parentDir;
                }
                if (projectRoot === undefined) {
                    throw new Error("Could not find workspace root.");
                }
                const idlFolder = `${projectRoot}/target/idl`;
                if (!fs.existsSync(idlFolder)) {
                    throw new Error(`${idlFolder} doesn't exist. Did you use "anchor build"?`);
                }
                const idlMap = new Map();
                fs.readdirSync(idlFolder).forEach((file) => {
                    const filePath = `${idlFolder}/${file}`;
                    const idlStr = fs.readFileSync(filePath);
                    const idl = JSON.parse(idlStr);
                    idlMap.set(idl.name, idl);
                    const name = camelcase(idl.name, { pascalCase: true });
                    if (idl.metadata && idl.metadata.address) {
                        workspaceCache[name] = new Program(idl, new PublicKey(idl.metadata.address));
                    }
                });
                // Override the workspace programs if the user put them in the config.
                const anchorToml = toml.parse(fs.readFileSync(path.join(projectRoot, "Anchor.toml"), "utf-8"));
                const clusterId = anchorToml.provider.cluster;
                if (anchorToml.programs && anchorToml.programs[clusterId]) {
                    attachWorkspaceOverride(workspaceCache, anchorToml.programs[clusterId], idlMap);
                }
                _populatedWorkspace = true;
            }
            return workspaceCache[programName];
        },
    });
    function attachWorkspaceOverride(workspaceCache, overrideConfig, idlMap) {
        Object.keys(overrideConfig).forEach((programName) => {
            const wsProgramName = camelcase(programName, { pascalCase: true });
            const entry = overrideConfig[programName];
            const overrideAddress = new PublicKey(typeof entry === "string" ? entry : entry.address);
            let idl = idlMap.get(programName);
            if (typeof entry !== "string" && entry.idl) {
                idl = JSON.parse(require("fs").readFileSync(entry.idl, "utf-8"));
            }
            workspaceCache[wsProgramName] = new Program(idl, overrideAddress);
        });
    }

    new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
    new PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");

    var defineProperty = createCommonjsModule(function (module) {
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    module.exports = _defineProperty;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    });

    var _defineProperty = /*@__PURE__*/getDefaultExportFromCjs$1(defineProperty);

    var buffer = {};

    var base64Js = {};

    base64Js.byteLength = byteLength;
    base64Js.toByteArray = toByteArray;
    base64Js.fromByteArray = fromByteArray;

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;

    function getLens (b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;

      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4);

      return [validLen, placeHoldersLen]
    }

    // base64 is 4/3 + up to two characters of the original data
    function byteLength (b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function _byteLength (b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function toByteArray (b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];

      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

      var curByte = 0;

      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen;

      var i;
      for (i = 0; i < len; i += 4) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 18) |
          (revLookup[b64.charCodeAt(i + 1)] << 12) |
          (revLookup[b64.charCodeAt(i + 2)] << 6) |
          revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = (tmp >> 16) & 0xFF;
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 2) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 2) |
          (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 1) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 10) |
          (revLookup[b64.charCodeAt(i + 1)] << 4) |
          (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] +
        lookup[num >> 12 & 0x3F] +
        lookup[num >> 6 & 0x3F] +
        lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(
          lookup[tmp >> 2] +
          lookup[(tmp << 4) & 0x3F] +
          '=='
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(
          lookup[tmp >> 10] +
          lookup[(tmp >> 4) & 0x3F] +
          lookup[(tmp << 2) & 0x3F] +
          '='
        );
      }

      return parts.join('')
    }

    var ieee754 = {};

    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

    ieee754.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    };

    ieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = ((value * c) - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    };

    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */

    (function (exports) {

    const base64 = base64Js;
    const ieee754$1 = ieee754;
    const customInspectSymbol =
      (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
        ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
        : null;

    exports.Buffer = Buffer;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;

    const K_MAX_LENGTH = 0x7fffffff;
    exports.kMaxLength = K_MAX_LENGTH;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Print warning and recommend using `buffer` v4.x which has an Object
     *               implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * We report that the browser does not support typed arrays if the are not subclassable
     * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
     * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
     * for __proto__ and has a buggy typed array implementation.
     */
    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
        typeof console.error === 'function') {
      console.error(
        'This browser lacks typed array (Uint8Array) support which is required by ' +
        '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
      );
    }

    function typedArraySupport () {
      // Can typed array instances can be augmented?
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function () { return 42 } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42
      } catch (e) {
        return false
      }
    }

    Object.defineProperty(Buffer.prototype, 'parent', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.buffer
      }
    });

    Object.defineProperty(Buffer.prototype, 'offset', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.byteOffset
      }
    });

    function createBuffer (length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"')
      }
      // Return an augmented `Uint8Array` instance
      const buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer.prototype);
      return buf
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          )
        }
        return allocUnsafe(arg)
      }
      return from(arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    function from (value, encodingOrOffset, length) {
      if (typeof value === 'string') {
        return fromString(value, encodingOrOffset)
      }

      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value)
      }

      if (value == null) {
        throw new TypeError(
          'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
          'or Array-like Object. Received type ' + (typeof value)
        )
      }

      if (isInstance(value, ArrayBuffer) ||
          (value && isInstance(value.buffer, ArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }

      if (typeof SharedArrayBuffer !== 'undefined' &&
          (isInstance(value, SharedArrayBuffer) ||
          (value && isInstance(value.buffer, SharedArrayBuffer)))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }

      if (typeof value === 'number') {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        )
      }

      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer.from(valueOf, encodingOrOffset, length)
      }

      const b = fromObject(value);
      if (b) return b

      if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
          typeof value[Symbol.toPrimitive] === 'function') {
        return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
      }

      throw new TypeError(
        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
        'or Array-like Object. Received type ' + (typeof value)
      )
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length)
    };

    // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
    // https://github.com/feross/buffer/pull/148
    Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer, Uint8Array);

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be of type number')
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"')
      }
    }

    function alloc (size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpreted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(size).fill(fill, encoding)
          : createBuffer(size).fill(fill)
      }
      return createBuffer(size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(size, fill, encoding)
    };

    function allocUnsafe (size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0)
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(size)
    };

    function fromString (string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }

      const length = byteLength(string, encoding) | 0;
      let buf = createBuffer(length);

      const actual = buf.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        buf = buf.slice(0, actual);
      }

      return buf
    }

    function fromArrayLike (array) {
      const length = array.length < 0 ? 0 : checked(array.length) | 0;
      const buf = createBuffer(length);
      for (let i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf
    }

    function fromArrayView (arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
      }
      return fromArrayLike(arrayView)
    }

    function fromArrayBuffer (array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds')
      }

      let buf;
      if (byteOffset === undefined && length === undefined) {
        buf = new Uint8Array(array);
      } else if (length === undefined) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }

      // Return an augmented `Uint8Array` instance
      Object.setPrototypeOf(buf, Buffer.prototype);

      return buf
    }

    function fromObject (obj) {
      if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);

        if (buf.length === 0) {
          return buf
        }

        obj.copy(buf, 0, 0, len);
        return buf
      }

      if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
          return createBuffer(0)
        }
        return fromArrayLike(obj)
      }

      if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data)
      }
    }

    function checked (length) {
      // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= K_MAX_LENGTH) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
      }
      return length | 0
    }

    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0;
      }
      return Buffer.alloc(+length)
    }

    Buffer.isBuffer = function isBuffer (b) {
      return b != null && b._isBuffer === true &&
        b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    };

    Buffer.compare = function compare (a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        )
      }

      if (a === b) return 0

      let x = a.length;
      let y = b.length;

      for (let i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      let i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      const buffer = Buffer.allocUnsafe(length);
      let pos = 0;
      for (i = 0; i < list.length; ++i) {
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
            buf.copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer,
              buf,
              pos
            );
          }
        } else if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
          'Received type ' + typeof string
        )
      }

      const len = string.length;
      const mustMatch = (arguments.length > 2 && arguments[2] === true);
      if (!mustMatch && len === 0) return 0

      // Use a for loop to avoid recursion
      let loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            }
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      let loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
    // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
    // reliably in a browserify context because there could be multiple different
    // copies of the 'buffer' package in use. This method works even for Buffer
    // instances that were created from another copy of the `buffer` package.
    // See: https://github.com/feross/buffer/issues/154
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      const i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      const len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (let i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      const len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (let i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      const len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (let i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      const length = this.length;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.toLocaleString = Buffer.prototype.toString;

    Buffer.prototype.equals = function equals (b) {
      if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      let str = '';
      const max = exports.INSPECT_MAX_BYTES;
      str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
      if (this.length > max) str += ' ... ';
      return '<Buffer ' + str + '>'
    };
    if (customInspectSymbol) {
      Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
    }

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer.from(target, target.offset, target.byteLength);
      }
      if (!Buffer.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. ' +
          'Received type ' + (typeof target)
        )
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      let x = thisEnd - thisStart;
      let y = end - start;
      const len = Math.min(x, y);

      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);

      for (let i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset; // Coerce to Number.
      if (numberIsNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      let i;
      if (dir) {
        let foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          let found = true;
          for (let j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      const strLen = string.length;

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i;
      for (i = 0; i < length; ++i) {
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      const remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      let loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
          case 'latin1':
          case 'binary':
            return asciiWrite(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf)
      } else {
        return base64.fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];

      let i = start;
      while (i < end) {
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = (firstByte > 0xEF)
          ? 4
          : (firstByte > 0xDF)
              ? 3
              : (firstByte > 0xBF)
                  ? 2
                  : 1;

        if (i + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    const MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      const len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      let res = '';
      let i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      let ret = '';
      end = Math.min(buf.length, end);

      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      let ret = '';
      end = Math.min(buf.length, end);

      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      const len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      let out = '';
      for (let i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      const bytes = buf.slice(start, end);
      let res = '';
      // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
      for (let i = 0; i < bytes.length - 1; i += 2) {
        res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      const len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      const newBuf = this.subarray(start, end);
      // Return an augmented `Uint8Array` instance
      Object.setPrototypeOf(newBuf, Buffer.prototype);

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUintLE =
    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUintBE =
    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      let val = this[offset + --byteLength];
      let mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUint8 =
    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUint16LE =
    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUint16BE =
    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUint32LE =
    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUint32BE =
    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
      offset = offset >>> 0;
      validateNumber(offset, 'offset');
      const first = this[offset];
      const last = this[offset + 7];
      if (first === undefined || last === undefined) {
        boundsError(offset, this.length - 8);
      }

      const lo = first +
        this[++offset] * 2 ** 8 +
        this[++offset] * 2 ** 16 +
        this[++offset] * 2 ** 24;

      const hi = this[++offset] +
        this[++offset] * 2 ** 8 +
        this[++offset] * 2 ** 16 +
        last * 2 ** 24;

      return BigInt(lo) + (BigInt(hi) << BigInt(32))
    });

    Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
      offset = offset >>> 0;
      validateNumber(offset, 'offset');
      const first = this[offset];
      const last = this[offset + 7];
      if (first === undefined || last === undefined) {
        boundsError(offset, this.length - 8);
      }

      const hi = first * 2 ** 24 +
        this[++offset] * 2 ** 16 +
        this[++offset] * 2 ** 8 +
        this[++offset];

      const lo = this[++offset] * 2 ** 24 +
        this[++offset] * 2 ** 16 +
        this[++offset] * 2 ** 8 +
        last;

      return (BigInt(hi) << BigInt(32)) + BigInt(lo)
    });

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      let i = byteLength;
      let mul = 1;
      let val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
      offset = offset >>> 0;
      validateNumber(offset, 'offset');
      const first = this[offset];
      const last = this[offset + 7];
      if (first === undefined || last === undefined) {
        boundsError(offset, this.length - 8);
      }

      const val = this[offset + 4] +
        this[offset + 5] * 2 ** 8 +
        this[offset + 6] * 2 ** 16 +
        (last << 24); // Overflow

      return (BigInt(val) << BigInt(32)) +
        BigInt(first +
        this[++offset] * 2 ** 8 +
        this[++offset] * 2 ** 16 +
        this[++offset] * 2 ** 24)
    });

    Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
      offset = offset >>> 0;
      validateNumber(offset, 'offset');
      const first = this[offset];
      const last = this[offset + 7];
      if (first === undefined || last === undefined) {
        boundsError(offset, this.length - 8);
      }

      const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 +
        this[++offset] * 2 ** 8 +
        this[++offset];

      return (BigInt(val) << BigInt(32)) +
        BigInt(this[++offset] * 2 ** 24 +
        this[++offset] * 2 ** 16 +
        this[++offset] * 2 ** 8 +
        last)
    });

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754$1.read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754$1.read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754$1.read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754$1.read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUintLE =
    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      let mul = 1;
      let i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUintBE =
    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      let i = byteLength - 1;
      let mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUint8 =
    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeUint16LE =
    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      return offset + 2
    };

    Buffer.prototype.writeUint16BE =
    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
      return offset + 2
    };

    Buffer.prototype.writeUint32LE =
    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
      return offset + 4
    };

    Buffer.prototype.writeUint32BE =
    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
      return offset + 4
    };

    function wrtBigUInt64LE (buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);

      let lo = Number(value & BigInt(0xffffffff));
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset
    }

    function wrtBigUInt64BE (buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);

      let lo = Number(value & BigInt(0xffffffff));
      buf[offset + 7] = lo;
      lo = lo >> 8;
      buf[offset + 6] = lo;
      lo = lo >> 8;
      buf[offset + 5] = lo;
      lo = lo >> 8;
      buf[offset + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8
    }

    Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
    });

    Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
    });

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, (8 * byteLength) - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      let i = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, (8 * byteLength) - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      let i = byteLength - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
      return offset + 4
    };

    Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
    });

    Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
    });

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      const len = end - start;

      if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
        // Use built-in when available, missing from IE11
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
        if (val.length === 1) {
          const code = val.charCodeAt(0);
          if ((encoding === 'utf8' && code < 128) ||
              encoding === 'latin1') {
            // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
          }
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      } else if (typeof val === 'boolean') {
        val = Number(val);
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      let i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        const bytes = Buffer.isBuffer(val)
          ? val
          : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val +
            '" is invalid for argument "value"')
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // CUSTOM ERRORS
    // =============

    // Simplified versions from Node, changed for Buffer-only usage
    const errors = {};
    function E (sym, getMessage, Base) {
      errors[sym] = class NodeError extends Base {
        constructor () {
          super();

          Object.defineProperty(this, 'message', {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });

          // Add the error code to the name to include it in the stack trace.
          this.name = `${this.name} [${sym}]`;
          // Access the stack to generate the error message including the error code
          // from the name.
          this.stack; // eslint-disable-line no-unused-expressions
          // Reset the name to the actual name.
          delete this.name;
        }

        get code () {
          return sym
        }

        set code (value) {
          Object.defineProperty(this, 'code', {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }

        toString () {
          return `${this.name} [${sym}]: ${this.message}`
        }
      };
    }

    E('ERR_BUFFER_OUT_OF_BOUNDS',
      function (name) {
        if (name) {
          return `${name} is outside of buffer bounds`
        }

        return 'Attempt to access memory outside buffer bounds'
      }, RangeError);
    E('ERR_INVALID_ARG_TYPE',
      function (name, actual) {
        return `The "${name}" argument must be of type number. Received type ${typeof actual}`
      }, TypeError);
    E('ERR_OUT_OF_RANGE',
      function (str, range, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === 'bigint') {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += 'n';
        }
        msg += ` It must be ${range}. Received ${received}`;
        return msg
      }, RangeError);

    function addNumericalSeparator (val) {
      let res = '';
      let i = val.length;
      const start = val[0] === '-' ? 1 : 0;
      for (; i >= start + 4; i -= 3) {
        res = `_${val.slice(i - 3, i)}${res}`;
      }
      return `${val.slice(0, i)}${res}`
    }

    // CHECK FUNCTIONS
    // ===============

    function checkBounds (buf, offset, byteLength) {
      validateNumber(offset, 'offset');
      if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
        boundsError(offset, buf.length - (byteLength + 1));
      }
    }

    function checkIntBI (value, min, max, buf, offset, byteLength) {
      if (value > max || value < min) {
        const n = typeof min === 'bigint' ? 'n' : '';
        let range;
        if (byteLength > 3) {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
          } else {
            range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                    `${(byteLength + 1) * 8 - 1}${n}`;
          }
        } else {
          range = `>= ${min}${n} and <= ${max}${n}`;
        }
        throw new errors.ERR_OUT_OF_RANGE('value', range, value)
      }
      checkBounds(buf, offset, byteLength);
    }

    function validateNumber (value, name) {
      if (typeof value !== 'number') {
        throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
      }
    }

    function boundsError (value, length, type) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
      }

      if (length < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
      }

      throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                        `>= ${type ? 1 : 0} and <= ${length}`,
                                        value)
    }

    // HELPER FUNCTIONS
    // ================

    const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node takes equal signs as end of the Base64 encoding
      str = str.split('=')[0];
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = str.trim().replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      let codePoint;
      const length = string.length;
      let leadSurrogate = null;
      const bytes = [];

      for (let i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      let c, hi, lo;
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }

    function base64ToBytes (str) {
      return base64.toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      let i;
      for (i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
    // the `instanceof` check but they should be treated as of that type.
    // See: https://github.com/feross/buffer/issues/166
    function isInstance (obj, type) {
      return obj instanceof type ||
        (obj != null && obj.constructor != null && obj.constructor.name != null &&
          obj.constructor.name === type.name)
    }
    function numberIsNaN (obj) {
      // For IE11 support
      return obj !== obj // eslint-disable-line no-self-compare
    }

    // Create lookup table for `toString('hex')`
    // See: https://github.com/feross/buffer/issues/219
    const hexSliceLookupTable = (function () {
      const alphabet = '0123456789abcdef';
      const table = new Array(256);
      for (let i = 0; i < 16; ++i) {
        const i16 = i * 16;
        for (let j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i] + alphabet[j];
        }
      }
      return table
    })();

    // Return not function with Error if BigInt not supported
    function defineBigIntMethod (fn) {
      return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
    }

    function BufferBigIntNotDefined () {
      throw new Error('BigInt not supported')
    }
    }(buffer));

    var global$1$1 = (typeof global$2 !== "undefined" ? global$2 :
      typeof self !== "undefined" ? self :
      typeof window !== "undefined" ? window : {});

    var inherits;
    if (typeof Object.create === 'function'){
      inherits = function inherits(ctor, superCtor) {
        // implementation from standard node.js 'util' module
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      inherits = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
    var inherits$1 = inherits;

    /**
     * Echos the value of a value. Trys to print the value out
     * in the best way possible given the different types.
     *
     * @param {Object} obj The object to print out.
     * @param {Object} opts Optional options object that alters the output.
     */
    /* legacy: obj, showHidden, depth, colors*/
    function inspect$1(obj, opts) {
      // default options
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      // legacy...
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        // legacy...
        ctx.showHidden = opts;
      } else if (opts) {
        // got an "options" object
        _extend(ctx, opts);
      }
      // set default options
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }

    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    inspect$1.colors = {
      'bold' : [1, 22],
      'italic' : [3, 23],
      'underline' : [4, 24],
      'inverse' : [7, 27],
      'white' : [37, 39],
      'grey' : [90, 39],
      'black' : [30, 39],
      'blue' : [34, 39],
      'cyan' : [36, 39],
      'green' : [32, 39],
      'magenta' : [35, 39],
      'red' : [31, 39],
      'yellow' : [33, 39]
    };

    // Don't use 'blue' not visible on cmd.exe
    inspect$1.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      // "name": intentionally not styling
      'regexp': 'red'
    };


    function stylizeWithColor(str, styleType) {
      var style = inspect$1.styles[styleType];

      if (style) {
        return '\u001b[' + inspect$1.colors[style][0] + 'm' + str +
               '\u001b[' + inspect$1.colors[style][1] + 'm';
      } else {
        return str;
      }
    }


    function stylizeNoColor(str, styleType) {
      return str;
    }


    function arrayToHash(array) {
      var hash = {};

      array.forEach(function(val, idx) {
        hash[val] = true;
      });

      return hash;
    }


    function formatValue(ctx, value, recurseTimes) {
      // Provide a hook for user-specified inspect functions.
      // Check that value is an object with an inspect function on it
      if (ctx.customInspect &&
          value &&
          isFunction(value.inspect) &&
          // Filter out the util module, it's inspect function is special
          value.inspect !== inspect$1 &&
          // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString$1(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }

      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }

      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }

      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value)
          && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '', array = false, braces = ['{', '}'];

      // Make Array say that they are Array
      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      // Make functions say that they are functions
      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      // Make dates with properties first say the date
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);

      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();

      return reduceToSingleString(output, base, braces);
    }


    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize('undefined', 'undefined');
      if (isString$1(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value))
        return ctx.stylize('' + value, 'number');
      if (isBoolean(value))
        return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value))
        return ctx.stylize('null', 'null');
    }


    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }


    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              key, true));
        }
      });
      return output;
    }


    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }


    function reduceToSingleString(output, base, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf('\n') >= 0) ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }


    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString$1(arg) {
      return typeof arg === 'string';
    }

    function isUndefined(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject$1(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject$1(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject$1(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject$1(e) &&
          (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function isPrimitive(arg) {
      return arg === null ||
             typeof arg === 'boolean' ||
             typeof arg === 'number' ||
             typeof arg === 'string' ||
             typeof arg === 'symbol' ||  // ES6 symbol
             typeof arg === 'undefined';
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    function _extend(origin, add) {
      // Don't do anything if add isn't an object
      if (!add || !isObject$1(add)) return origin;

      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    }
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    function compare(a, b) {
      if (a === b) {
        return 0;
      }

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }

      if (x < y) {
        return -1;
      }
      if (y < x) {
        return 1;
      }
      return 0;
    }
    var hasOwn = Object.prototype.hasOwnProperty;

    var objectKeys = Object.keys || function (obj) {
      var keys = [];
      for (var key in obj) {
        if (hasOwn.call(obj, key)) keys.push(key);
      }
      return keys;
    };
    var pSlice = Array.prototype.slice;
    var _functionsHaveNames;
    function functionsHaveNames() {
      if (typeof _functionsHaveNames !== 'undefined') {
        return _functionsHaveNames;
      }
      return _functionsHaveNames = (function () {
        return function foo() {}.name === 'foo';
      }());
    }
    function pToString (obj) {
      return Object.prototype.toString.call(obj);
    }
    function isView(arrbuf) {
      if (buffer.isBuffer(arrbuf)) {
        return false;
      }
      if (typeof global$1$1.ArrayBuffer !== 'function') {
        return false;
      }
      if (typeof ArrayBuffer.isView === 'function') {
        return ArrayBuffer.isView(arrbuf);
      }
      if (!arrbuf) {
        return false;
      }
      if (arrbuf instanceof DataView) {
        return true;
      }
      if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
        return true;
      }
      return false;
    }
    // 1. The assert module provides functions that throw
    // AssertionError's when particular conditions are not met. The
    // assert module must conform to the following interface.

    function assert(value, message) {
      if (!value) fail(value, true, message, '==', ok);
    }

    // 2. The AssertionError is defined in assert.
    // new assert.AssertionError({ message: message,
    //                             actual: actual,
    //                             expected: expected })

    var regex = /\s*function\s+([^\(\s]*)\s*/;
    // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
    function getName(func) {
      if (!isFunction(func)) {
        return;
      }
      if (functionsHaveNames()) {
        return func.name;
      }
      var str = func.toString();
      var match = str.match(regex);
      return match && match[1];
    }
    assert.AssertionError = AssertionError;
    function AssertionError(options) {
      this.name = 'AssertionError';
      this.actual = options.actual;
      this.expected = options.expected;
      this.operator = options.operator;
      if (options.message) {
        this.message = options.message;
        this.generatedMessage = false;
      } else {
        this.message = getMessage(this);
        this.generatedMessage = true;
      }
      var stackStartFunction = options.stackStartFunction || fail;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, stackStartFunction);
      } else {
        // non v8 browsers so we can have a stacktrace
        var err = new Error();
        if (err.stack) {
          var out = err.stack;

          // try to strip useless frames
          var fn_name = getName(stackStartFunction);
          var idx = out.indexOf('\n' + fn_name);
          if (idx >= 0) {
            // once we have located the function frame
            // we need to strip out everything before it (and its line)
            var next_line = out.indexOf('\n', idx + 1);
            out = out.substring(next_line + 1);
          }

          this.stack = out;
        }
      }
    }

    // assert.AssertionError instanceof Error
    inherits$1(AssertionError, Error);

    function truncate(s, n) {
      if (typeof s === 'string') {
        return s.length < n ? s : s.slice(0, n);
      } else {
        return s;
      }
    }
    function inspect(something) {
      if (functionsHaveNames() || !isFunction(something)) {
        return inspect$1(something);
      }
      var rawname = getName(something);
      var name = rawname ? ': ' + rawname : '';
      return '[Function' +  name + ']';
    }
    function getMessage(self) {
      return truncate(inspect(self.actual), 128) + ' ' +
             self.operator + ' ' +
             truncate(inspect(self.expected), 128);
    }

    // At present only the three keys mentioned above are used and
    // understood by the spec. Implementations or sub modules can pass
    // other keys to the AssertionError's constructor - they will be
    // ignored.

    // 3. All of the following functions must throw an AssertionError
    // when a corresponding condition is not met, with a message that
    // may be undefined if not provided.  All assertion methods provide
    // both the actual and expected values to the assertion error for
    // display purposes.

    function fail(actual, expected, message, operator, stackStartFunction) {
      throw new AssertionError({
        message: message,
        actual: actual,
        expected: expected,
        operator: operator,
        stackStartFunction: stackStartFunction
      });
    }

    // EXTENSION! allows for well behaved errors defined elsewhere.
    assert.fail = fail;

    // 4. Pure assertion tests whether a value is truthy, as determined
    // by !!guard.
    // assert.ok(guard, message_opt);
    // This statement is equivalent to assert.equal(true, !!guard,
    // message_opt);. To test strictly for the value true, use
    // assert.strictEqual(true, guard, message_opt);.

    function ok(value, message) {
      if (!value) fail(value, true, message, '==', ok);
    }
    assert.ok = ok;

    // 5. The equality assertion tests shallow, coercive equality with
    // ==.
    // assert.equal(actual, expected, message_opt);
    assert.equal = equal;
    function equal(actual, expected, message) {
      if (actual != expected) fail(actual, expected, message, '==', equal);
    }

    // 6. The non-equality assertion tests for whether two objects are not equal
    // with != assert.notEqual(actual, expected, message_opt);
    assert.notEqual = notEqual;
    function notEqual(actual, expected, message) {
      if (actual == expected) {
        fail(actual, expected, message, '!=', notEqual);
      }
    }

    // 7. The equivalence assertion tests a deep equality relation.
    // assert.deepEqual(actual, expected, message_opt);
    assert.deepEqual = deepEqual;
    function deepEqual(actual, expected, message) {
      if (!_deepEqual(actual, expected, false)) {
        fail(actual, expected, message, 'deepEqual', deepEqual);
      }
    }
    assert.deepStrictEqual = deepStrictEqual;
    function deepStrictEqual(actual, expected, message) {
      if (!_deepEqual(actual, expected, true)) {
        fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
      }
    }

    function _deepEqual(actual, expected, strict, memos) {
      // 7.1. All identical values are equivalent, as determined by ===.
      if (actual === expected) {
        return true;
      } else if (buffer.isBuffer(actual) && buffer.isBuffer(expected)) {
        return compare(actual, expected) === 0;

      // 7.2. If the expected value is a Date object, the actual value is
      // equivalent if it is also a Date object that refers to the same time.
      } else if (isDate(actual) && isDate(expected)) {
        return actual.getTime() === expected.getTime();

      // 7.3 If the expected value is a RegExp object, the actual value is
      // equivalent if it is also a RegExp object with the same source and
      // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
      } else if (isRegExp(actual) && isRegExp(expected)) {
        return actual.source === expected.source &&
               actual.global === expected.global &&
               actual.multiline === expected.multiline &&
               actual.lastIndex === expected.lastIndex &&
               actual.ignoreCase === expected.ignoreCase;

      // 7.4. Other pairs that do not both pass typeof value == 'object',
      // equivalence is determined by ==.
      } else if ((actual === null || typeof actual !== 'object') &&
                 (expected === null || typeof expected !== 'object')) {
        return strict ? actual === expected : actual == expected;

      // If both values are instances of typed arrays, wrap their underlying
      // ArrayBuffers in a Buffer each to increase performance
      // This optimization requires the arrays to have the same type as checked by
      // Object.prototype.toString (aka pToString). Never perform binary
      // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
      // bit patterns are not identical.
      } else if (isView(actual) && isView(expected) &&
                 pToString(actual) === pToString(expected) &&
                 !(actual instanceof Float32Array ||
                   actual instanceof Float64Array)) {
        return compare(new Uint8Array(actual.buffer),
                       new Uint8Array(expected.buffer)) === 0;

      // 7.5 For all other Object pairs, including Array objects, equivalence is
      // determined by having the same number of owned properties (as verified
      // with Object.prototype.hasOwnProperty.call), the same set of keys
      // (although not necessarily the same order), equivalent values for every
      // corresponding key, and an identical 'prototype' property. Note: this
      // accounts for both named and indexed properties on Arrays.
      } else if (buffer.isBuffer(actual) !== buffer.isBuffer(expected)) {
        return false;
      } else {
        memos = memos || {actual: [], expected: []};

        var actualIndex = memos.actual.indexOf(actual);
        if (actualIndex !== -1) {
          if (actualIndex === memos.expected.indexOf(expected)) {
            return true;
          }
        }

        memos.actual.push(actual);
        memos.expected.push(expected);

        return objEquiv(actual, expected, strict, memos);
      }
    }

    function isArguments(object) {
      return Object.prototype.toString.call(object) == '[object Arguments]';
    }

    function objEquiv(a, b, strict, actualVisitedObjects) {
      if (a === null || a === undefined || b === null || b === undefined)
        return false;
      // if one is a primitive, the other must be same
      if (isPrimitive(a) || isPrimitive(b))
        return a === b;
      if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
        return false;
      var aIsArgs = isArguments(a);
      var bIsArgs = isArguments(b);
      if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
        return false;
      if (aIsArgs) {
        a = pSlice.call(a);
        b = pSlice.call(b);
        return _deepEqual(a, b, strict);
      }
      var ka = objectKeys(a);
      var kb = objectKeys(b);
      var key, i;
      // having the same number of owned properties (keys incorporates
      // hasOwnProperty)
      if (ka.length !== kb.length)
        return false;
      //the same set of keys (although not necessarily the same order),
      ka.sort();
      kb.sort();
      //~~~cheap key test
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] !== kb[i])
          return false;
      }
      //equivalent values for every corresponding key, and
      //~~~possibly expensive deep test
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
          return false;
      }
      return true;
    }

    // 8. The non-equivalence assertion tests for any deep inequality.
    // assert.notDeepEqual(actual, expected, message_opt);
    assert.notDeepEqual = notDeepEqual;
    function notDeepEqual(actual, expected, message) {
      if (_deepEqual(actual, expected, false)) {
        fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
      }
    }

    assert.notDeepStrictEqual = notDeepStrictEqual;
    function notDeepStrictEqual(actual, expected, message) {
      if (_deepEqual(actual, expected, true)) {
        fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
      }
    }


    // 9. The strict equality assertion tests strict equality, as determined by ===.
    // assert.strictEqual(actual, expected, message_opt);
    assert.strictEqual = strictEqual;
    function strictEqual(actual, expected, message) {
      if (actual !== expected) {
        fail(actual, expected, message, '===', strictEqual);
      }
    }

    // 10. The strict non-equality assertion tests for strict inequality, as
    // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
    assert.notStrictEqual = notStrictEqual;
    function notStrictEqual(actual, expected, message) {
      if (actual === expected) {
        fail(actual, expected, message, '!==', notStrictEqual);
      }
    }

    function expectedException(actual, expected) {
      if (!actual || !expected) {
        return false;
      }

      if (Object.prototype.toString.call(expected) == '[object RegExp]') {
        return expected.test(actual);
      }

      try {
        if (actual instanceof expected) {
          return true;
        }
      } catch (e) {
        // Ignore.  The instanceof check doesn't work for arrow functions.
      }

      if (Error.isPrototypeOf(expected)) {
        return false;
      }

      return expected.call({}, actual) === true;
    }

    function _tryBlock(block) {
      var error;
      try {
        block();
      } catch (e) {
        error = e;
      }
      return error;
    }

    function _throws(shouldThrow, block, expected, message) {
      var actual;

      if (typeof block !== 'function') {
        throw new TypeError('"block" argument must be a function');
      }

      if (typeof expected === 'string') {
        message = expected;
        expected = null;
      }

      actual = _tryBlock(block);

      message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
                (message ? ' ' + message : '.');

      if (shouldThrow && !actual) {
        fail(actual, expected, 'Missing expected exception' + message);
      }

      var userProvidedMessage = typeof message === 'string';
      var isUnwantedException = !shouldThrow && isError(actual);
      var isUnexpectedException = !shouldThrow && actual && !expected;

      if ((isUnwantedException &&
          userProvidedMessage &&
          expectedException(actual, expected)) ||
          isUnexpectedException) {
        fail(actual, expected, 'Got unwanted exception' + message);
      }

      if ((shouldThrow && actual && expected &&
          !expectedException(actual, expected)) || (!shouldThrow && actual)) {
        throw actual;
      }
    }

    // 11. Expected to throw an error:
    // assert.throws(block, Error_opt, message_opt);
    assert.throws = throws;
    function throws(block, /*optional*/error, /*optional*/message) {
      _throws(true, block, error, message);
    }

    // EXTENSION! This is annoying to write outside this module.
    assert.doesNotThrow = doesNotThrow;
    function doesNotThrow(block, /*optional*/error, /*optional*/message) {
      _throws(false, block, error, message);
    }

    assert.ifError = ifError;
    function ifError(err) {
      if (err) throw err;
    }

    /**
     * Base class for layout objects.
     *
     * **NOTE** This is an abstract base class; you can create instances
     * if it amuses you, but they won't support the {@link
     * Layout#encode|encode} or {@link Layout#decode|decode} functions.
     *
     * @param {Number} span - Initializer for {@link Layout#span|span}.  The
     * parameter must be an integer; a negative value signifies that the
     * span is {@link Layout#getSpan|value-specific}.
     *
     * @param {string} [property] - Initializer for {@link
     * Layout#property|property}.
     *
     * @abstract
     */
    class Layout {
      constructor(span, property) {
        if (!Number.isInteger(span)) {
          throw new TypeError('span must be an integer');
        }

        /** The span of the layout in bytes.
         *
         * Positive values are generally expected.
         *
         * Zero will only appear in {@link Constant}s and in {@link
         * Sequence}s where the {@link Sequence#count|count} is zero.
         *
         * A negative value indicates that the span is value-specific, and
         * must be obtained using {@link Layout#getSpan|getSpan}. */
        this.span = span;

        /** The property name used when this layout is represented in an
         * Object.
         *
         * Used only for layouts that {@link Layout#decode|decode} to Object
         * instances.  If left undefined the span of the unnamed layout will
         * be treated as padding: it will not be mutated by {@link
         * Layout#encode|encode} nor represented as a property in the
         * decoded Object. */
        this.property = property;
      }

      /** Function to create an Object into which decoded properties will
       * be written.
       *
       * Used only for layouts that {@link Layout#decode|decode} to Object
       * instances, which means:
       * * {@link Structure}
       * * {@link Union}
       * * {@link VariantLayout}
       * * {@link BitStructure}
       *
       * If left undefined the JavaScript representation of these layouts
       * will be Object instances.
       *
       * See {@link bindConstructorLayout}.
       */
      makeDestinationObject() {
        return {};
      }

      /**
       * Decode from a Buffer into an JavaScript value.
       *
       * @param {Buffer} b - the buffer from which encoded data is read.
       *
       * @param {Number} [offset] - the offset at which the encoded data
       * starts.  If absent a zero offset is inferred.
       *
       * @returns {(Number|Array|Object)} - the value of the decoded data.
       *
       * @abstract
       */
      decode(b, offset) {
        throw new Error('Layout is abstract');
      }

      /**
       * Encode a JavaScript value into a Buffer.
       *
       * @param {(Number|Array|Object)} src - the value to be encoded into
       * the buffer.  The type accepted depends on the (sub-)type of {@link
       * Layout}.
       *
       * @param {Buffer} b - the buffer into which encoded data will be
       * written.
       *
       * @param {Number} [offset] - the offset at which the encoded data
       * starts.  If absent a zero offset is inferred.
       *
       * @returns {Number} - the number of bytes encoded, including the
       * space skipped for internal padding, but excluding data such as
       * {@link Sequence#count|lengths} when stored {@link
       * ExternalLayout|externally}.  This is the adjustment to `offset`
       * producing the offset where data for the next layout would be
       * written.
       *
       * @abstract
       */
      encode(src, b, offset) {
        throw new Error('Layout is abstract');
      }

      /**
       * Calculate the span of a specific instance of a layout.
       *
       * @param {Buffer} b - the buffer that contains an encoded instance.
       *
       * @param {Number} [offset] - the offset at which the encoded instance
       * starts.  If absent a zero offset is inferred.
       *
       * @return {Number} - the number of bytes covered by the layout
       * instance.  If this method is not overridden in a subclass the
       * definition-time constant {@link Layout#span|span} will be
       * returned.
       *
       * @throws {RangeError} - if the length of the value cannot be
       * determined.
       */
      getSpan(b, offset) {
        if (0 > this.span) {
          throw new RangeError('indeterminate span');
        }
        return this.span;
      }

      /**
       * Replicate the layout using a new property.
       *
       * This function must be used to get a structurally-equivalent layout
       * with a different name since all {@link Layout} instances are
       * immutable.
       *
       * **NOTE** This is a shallow copy.  All fields except {@link
       * Layout#property|property} are strictly equal to the origin layout.
       *
       * @param {String} property - the value for {@link
       * Layout#property|property} in the replica.
       *
       * @returns {Layout} - the copy with {@link Layout#property|property}
       * set to `property`.
       */
      replicate(property) {
        const rv = Object.create(this.constructor.prototype);
        Object.assign(rv, this);
        rv.property = property;
        return rv;
      }

      /**
       * Create an object from layout properties and an array of values.
       *
       * **NOTE** This function returns `undefined` if invoked on a layout
       * that does not return its value as an Object.  Objects are
       * returned for things that are a {@link Structure}, which includes
       * {@link VariantLayout|variant layouts} if they are structures, and
       * excludes {@link Union}s.  If you want this feature for a union
       * you must use {@link Union.getVariant|getVariant} to select the
       * desired layout.
       *
       * @param {Array} values - an array of values that correspond to the
       * default order for properties.  As with {@link Layout#decode|decode}
       * layout elements that have no property name are skipped when
       * iterating over the array values.  Only the top-level properties are
       * assigned; arguments are not assigned to properties of contained
       * layouts.  Any unused values are ignored.
       *
       * @return {(Object|undefined)}
       */
      fromArray(values) {
        return undefined;
      }
    }

    /* Provide text that carries a name (such as for a function that will
     * be throwing an error) annotated with the property of a given layout
     * (such as one for which the value was unacceptable).
     *
     * @ignore */
    function nameWithProperty(name, lo) {
      if (lo.property) {
        return name + '[' + lo.property + ']';
      }
      return name;
    }

    /**
     * An object that behaves like a layout but does not consume space
     * within its containing layout.
     *
     * This is primarily used to obtain metadata about a member, such as a
     * {@link OffsetLayout} that can provide data about a {@link
     * Layout#getSpan|value-specific span}.
     *
     * **NOTE** This is an abstract base class; you can create instances
     * if it amuses you, but they won't support {@link
     * ExternalLayout#isCount|isCount} or other {@link Layout} functions.
     *
     * @param {Number} span - initializer for {@link Layout#span|span}.
     * The parameter can range from 1 through 6.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @abstract
     * @augments {Layout}
     */
    class ExternalLayout extends Layout {
      /**
       * Return `true` iff the external layout decodes to an unsigned
       * integer layout.
       *
       * In that case it can be used as the source of {@link
       * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},
       * or as {@link UnionLayoutDiscriminator#layout|external union
       * discriminators}.
       *
       * @abstract
       */
      isCount() {
        throw new Error('ExternalLayout is abstract');
      }
    }

    /**
     * Represent an unsigned integer in little-endian format.
     *
     * *Factory*: {@link module:Layout.u8|u8}, {@link
     *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link
     *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link
     *  module:Layout.u48|u48}
     *
     * @param {Number} span - initializer for {@link Layout#span|span}.
     * The parameter can range from 1 through 6.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class UInt extends Layout {
      constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
          throw new RangeError('span must not exceed 6 bytes');
        }
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        return b.readUIntLE(offset, this.span);
      }

      /** @override */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        b.writeUIntLE(src, offset, this.span);
        return this.span;
      }
    }

    /**
     * Represent a contiguous sequence of arbitrary layout elements as an
     * Object.
     *
     * *Factory*: {@link module:Layout.struct|struct}
     *
     * **NOTE** The {@link Layout#span|span} of the structure is variable
     * if any layout in {@link Structure#fields|fields} has a variable
     * span.  When {@link Layout#encode|encoding} we must have a value for
     * all variable-length fields, or we wouldn't be able to figure out
     * how much space to use for storage.  We can only identify the value
     * for a field when it has a {@link Layout#property|property}.  As
     * such, although a structure may contain both unnamed fields and
     * variable-length fields, it cannot contain an unnamed
     * variable-length field.
     *
     * @param {Layout[]} fields - initializer for {@link
     * Structure#fields|fields}.  An error is raised if this contains a
     * variable-length field for which a {@link Layout#property|property}
     * is not defined.
     *
     * @param {string} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @param {Boolean} [decodePrefixes] - initializer for {@link
     * Structure#decodePrefixes|property}.
     *
     * @throws {Error} - if `fields` contains an unnamed variable-length
     * layout.
     *
     * @augments {Layout}
     */
    class Structure extends Layout {
      constructor(fields, property, decodePrefixes) {
        if (!(Array.isArray(fields)
              && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {
          throw new TypeError('fields must be array of Layout instances');
        }
        if (('boolean' === typeof property)
            && (undefined === decodePrefixes)) {
          decodePrefixes = property;
          property = undefined;
        }

        /* Verify absence of unnamed variable-length fields. */
        for (const fd of fields) {
          if ((0 > fd.span)
              && (undefined === fd.property)) {
            throw new Error('fields cannot contain unnamed variable-length layout');
          }
        }

        let span = -1;
        try {
          span = fields.reduce((span, fd) => span + fd.getSpan(), 0);
        } catch (e) {
        }
        super(span, property);

        /** The sequence of {@link Layout} values that comprise the
         * structure.
         *
         * The individual elements need not be the same type, and may be
         * either scalar or aggregate layouts.  If a member layout leaves
         * its {@link Layout#property|property} undefined the
         * corresponding region of the buffer associated with the element
         * will not be mutated.
         *
         * @type {Layout[]} */
        this.fields = fields;

        /** Control behavior of {@link Layout#decode|decode()} given short
         * buffers.
         *
         * In some situations a structure many be extended with additional
         * fields over time, with older installations providing only a
         * prefix of the full structure.  If this property is `true`
         * decoding will accept those buffers and leave subsequent fields
         * undefined, as long as the buffer ends at a field boundary.
         * Defaults to `false`. */
        this.decodePrefixes = !!decodePrefixes;
      }

      /** @override */
      getSpan(b, offset) {
        if (0 <= this.span) {
          return this.span;
        }
        if (undefined === offset) {
          offset = 0;
        }
        let span = 0;
        try {
          span = this.fields.reduce((span, fd) => {
            const fsp = fd.getSpan(b, offset);
            offset += fsp;
            return span + fsp;
          }, 0);
        } catch (e) {
          throw new RangeError('indeterminate span');
        }
        return span;
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const dest = this.makeDestinationObject();
        for (const fd of this.fields) {
          if (undefined !== fd.property) {
            dest[fd.property] = fd.decode(b, offset);
          }
          offset += fd.getSpan(b, offset);
          if (this.decodePrefixes
              && (b.length === offset)) {
            break;
          }
        }
        return dest;
      }

      /** Implement {@link Layout#encode|encode} for {@link Structure}.
       *
       * If `src` is missing a property for a member with a defined {@link
       * Layout#property|property} the corresponding region of the buffer is
       * left unmodified. */
      encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        const firstOffset = offset;
        let lastOffset = 0;
        let lastWrote = 0;
        for (const fd of this.fields) {
          let span = fd.span;
          lastWrote = (0 < span) ? span : 0;
          if (undefined !== fd.property) {
            const fv = src[fd.property];
            if (undefined !== fv) {
              lastWrote = fd.encode(fv, b, offset);
              if (0 > span) {
                /* Read the as-encoded span, which is not necessarily the
                 * same as what we wrote. */
                span = fd.getSpan(b, offset);
              }
            }
          }
          lastOffset = offset;
          offset += span;
        }
        /* Use (lastOffset + lastWrote) instead of offset because the last
         * item may have had a dynamic length and we don't want to include
         * the padding between it and the end of the space reserved for
         * it. */
        return (lastOffset + lastWrote) - firstOffset;
      }

      /** @override */
      fromArray(values) {
        const dest = this.makeDestinationObject();
        for (const fd of this.fields) {
          if ((undefined !== fd.property)
              && (0 < values.length)) {
            dest[fd.property] = values.shift();
          }
        }
        return dest;
      }

      /**
       * Get access to the layout of a given property.
       *
       * @param {String} property - the structure member of interest.
       *
       * @return {Layout} - the layout associated with `property`, or
       * undefined if there is no such property.
       */
      layoutFor(property) {
        if ('string' !== typeof property) {
          throw new TypeError('property must be string');
        }
        for (const fd of this.fields) {
          if (fd.property === property) {
            return fd;
          }
        }
      }

      /**
       * Get the offset of a structure member.
       *
       * @param {String} property - the structure member of interest.
       *
       * @return {Number} - the offset in bytes to the start of `property`
       * within the structure, or undefined if `property` is not a field
       * within the structure.  If the property is a member but follows a
       * variable-length structure member a negative number will be
       * returned.
       */
      offsetOf(property) {
        if ('string' !== typeof property) {
          throw new TypeError('property must be string');
        }
        let offset = 0;
        for (const fd of this.fields) {
          if (fd.property === property) {
            return offset;
          }
          if (0 > fd.span) {
            offset = -1;
          } else if (0 <= offset) {
            offset += fd.span;
          }
        }
      }
    }
    /* eslint-enable no-extend-native */

    /**
     * Contain a fixed-length block of arbitrary data, represented as a
     * Buffer.
     *
     * *Factory*: {@link module:Layout.blob|blob}
     *
     * @param {(Number|ExternalLayout)} length - initializes {@link
     * Blob#length|length}.
     *
     * @param {String} [property] - initializer for {@link
     * Layout#property|property}.
     *
     * @augments {Layout}
     */
    class Blob$1 extends Layout {
      constructor(length, property) {
        if (!(((length instanceof ExternalLayout) && length.isCount())
              || (Number.isInteger(length) && (0 <= length)))) {
          throw new TypeError('length must be positive integer '
                              + 'or an unsigned integer ExternalLayout');
        }

        let span = -1;
        if (!(length instanceof ExternalLayout)) {
          span = length;
        }
        super(span, property);

        /** The number of bytes in the blob.
         *
         * This may be a non-negative integer, or an instance of {@link
         * ExternalLayout} that satisfies {@link
         * ExternalLayout#isCount|isCount()}. */
        this.length = length;
      }

      /** @override */
      getSpan(b, offset) {
        let span = this.span;
        if (0 > span) {
          span = this.length.decode(b, offset);
        }
        return span;
      }

      /** @override */
      decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        let span = this.span;
        if (0 > span) {
          span = this.length.decode(b, offset);
        }
        return b.slice(offset, offset + span);
      }

      /** Implement {@link Layout#encode|encode} for {@link Blob}.
       *
       * **NOTE** If {@link Layout#count|count} is an instance of {@link
       * ExternalLayout} then the length of `src` will be encoded as the
       * count after `src` is encoded. */
      encode(src, b, offset) {
        let span = this.length;
        if (this.length instanceof ExternalLayout) {
          span = src.length;
        }
        if (!(buffer.Buffer.isBuffer(src)
              && (span === src.length))) {
          throw new TypeError(nameWithProperty('Blob.encode', this)
                              + ' requires (length ' + span + ') Buffer as src');
        }
        if ((offset + span) > b.length) {
          throw new RangeError('encoding overruns Buffer');
        }
        b.write(src.toString('hex'), offset, span, 'hex');
        if (this.length instanceof ExternalLayout) {
          this.length.encode(span, b, offset);
        }
        return span;
      }
    }

    /** Factory for {@link UInt|unsigned int layouts} spanning one
     * byte. */
    var u8 = (property => new UInt(1, property));

    /** Factory for {@link UInt|little-endian unsigned int layouts}
     * spanning four bytes. */
    var u32 = (property => new UInt(4, property));

    /** Factory for {@link Structure} values. */
    var struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));

    /** Factory for {@link Blob} values. */
    var blob = ((length, property) => new Blob$1(length, property));

    //      
    /**
     * Layout for a public key
     */

    const publicKey = (property = 'publicKey') => {
      return blob(32, property);
    };
    /**
     * Layout for a 64bit unsigned value
     */

    const uint64 = (property = 'uint64') => {
      return blob(8, property);
    };

    //      
    function sendAndConfirmTransaction(title, connection, transaction, ...signers) {
      return sendAndConfirmTransaction$1(connection, transaction, signers, {
        skipPreflight: false
      });
    }

    const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
    const FAILED_TO_FIND_ACCOUNT = 'Failed to find account';
    const INVALID_ACCOUNT_OWNER = 'Invalid account owner';
    /**
     * Unfortunately, BufferLayout.encode uses an `instanceof` check for `Buffer`
     * which fails when using `publicKey.toBuffer()` directly because the bundled `Buffer`
     * class in `@solana/web3.js` is different from the bundled `Buffer` class in this package
     */

    function pubkeyToBuffer(publicKey) {
      return buffer.Buffer.from(publicKey.toBuffer());
    }
    /**
     * 64-bit value
     */


    class u64 extends bn$1 {
      /**
       * Convert to Buffer representation
       */
      toBuffer() {
        const a = super.toArray().reverse();
        const b = buffer.Buffer.from(a);

        if (b.length === 8) {
          return b;
        }

        assert(b.length < 8, 'u64 too large');
        const zeroPad = buffer.Buffer.alloc(8);
        b.copy(zeroPad);
        return zeroPad;
      }
      /**
       * Construct a u64 from Buffer representation
       */


      static fromBuffer(buffer) {
        assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);
        return new u64([...buffer].reverse().map(i => `00${i.toString(16)}`.slice(-2)).join(''), 16);
      }

    }

    function isAccount(accountOrPublicKey) {
      return 'publicKey' in accountOrPublicKey;
    }

    const AuthorityTypeCodes = {
      MintTokens: 0,
      FreezeAccount: 1,
      AccountOwner: 2,
      CloseAccount: 3
    }; // The address of the special mint for wrapped native token.

    const NATIVE_MINT = new PublicKey('So11111111111111111111111111111111111111112');
    /**
     * Information about the mint
     */

    const MintLayout = struct([u32('mintAuthorityOption'), publicKey('mintAuthority'), uint64('supply'), u8('decimals'), u8('isInitialized'), u32('freezeAuthorityOption'), publicKey('freezeAuthority')]);
    /**
     * Information about an account
     */

    /**
     * @private
     */

    const AccountLayout = struct([publicKey('mint'), publicKey('owner'), uint64('amount'), u32('delegateOption'), publicKey('delegate'), u8('state'), u32('isNativeOption'), uint64('isNative'), uint64('delegatedAmount'), u32('closeAuthorityOption'), publicKey('closeAuthority')]);
    /**
     * Information about an multisig
     */

    /**
     * @private
     */

    const MultisigLayout = struct([u8('m'), u8('n'), u8('is_initialized'), publicKey('signer1'), publicKey('signer2'), publicKey('signer3'), publicKey('signer4'), publicKey('signer5'), publicKey('signer6'), publicKey('signer7'), publicKey('signer8'), publicKey('signer9'), publicKey('signer10'), publicKey('signer11')]);
    /**
     * An ERC20-like Token
     */

    class Token {
      /**
       * @private
       */

      /**
       * The public key identifying this mint
       */

      /**
       * Program Identifier for the Token program
       */

      /**
       * Program Identifier for the Associated Token program
       */

      /**
       * Fee payer
       */

      /**
       * Create a Token object attached to the specific mint
       *
       * @param connection The connection to use
       * @param token Public key of the mint
       * @param programId token programId
       * @param payer Payer of fees
       */
      constructor(connection, publicKey, programId, payer) {
        _defineProperty(this, "connection", void 0);

        _defineProperty(this, "publicKey", void 0);

        _defineProperty(this, "programId", void 0);

        _defineProperty(this, "associatedProgramId", void 0);

        _defineProperty(this, "payer", void 0);

        Object.assign(this, {
          connection,
          publicKey,
          programId,
          payer,
          // Hard code is ok; Overriding is needed only for tests
          associatedProgramId: ASSOCIATED_TOKEN_PROGRAM_ID
        });
      }
      /**
       * Get the minimum balance for the mint to be rent exempt
       *
       * @return Number of lamports required
       */


      static async getMinBalanceRentForExemptMint(connection) {
        return await connection.getMinimumBalanceForRentExemption(MintLayout.span);
      }
      /**
       * Get the minimum balance for the account to be rent exempt
       *
       * @return Number of lamports required
       */


      static async getMinBalanceRentForExemptAccount(connection) {
        return await connection.getMinimumBalanceForRentExemption(AccountLayout.span);
      }
      /**
       * Get the minimum balance for the multsig to be rent exempt
       *
       * @return Number of lamports required
       */


      static async getMinBalanceRentForExemptMultisig(connection) {
        return await connection.getMinimumBalanceForRentExemption(MultisigLayout.span);
      }
      /**
       * Create and initialize a token.
       *
       * @param connection The connection to use
       * @param payer Fee payer for transaction
       * @param mintAuthority Account or multisig that will control minting
       * @param freezeAuthority Optional account or multisig that can freeze token accounts
       * @param decimals Location of the decimal place
       * @param programId Optional token programId, uses the system programId by default
       * @return Token object for the newly minted token
       */


      static async createMint(connection, payer, mintAuthority, freezeAuthority, decimals, programId) {
        const mintAccount = Keypair.generate();
        const token = new Token(connection, mintAccount.publicKey, programId, payer); // Allocate memory for the account

        const balanceNeeded = await Token.getMinBalanceRentForExemptMint(connection);
        const transaction = new Transaction();
        transaction.add(SystemProgram.createAccount({
          fromPubkey: payer.publicKey,
          newAccountPubkey: mintAccount.publicKey,
          lamports: balanceNeeded,
          space: MintLayout.span,
          programId
        }));
        transaction.add(Token.createInitMintInstruction(programId, mintAccount.publicKey, decimals, mintAuthority, freezeAuthority)); // Send the two instructions

        await sendAndConfirmTransaction('createAccount and InitializeMint', connection, transaction, payer, mintAccount);
        return token;
      }
      /**
       * Create and initialize a new account.
       *
       * This account may then be used as a `transfer()` or `approve()` destination
       *
       * @param owner User account that will own the new account
       * @return Public key of the new empty account
       */


      async createAccount(owner) {
        // Allocate memory for the account
        const balanceNeeded = await Token.getMinBalanceRentForExemptAccount(this.connection);
        const newAccount = Keypair.generate();
        const transaction = new Transaction();
        transaction.add(SystemProgram.createAccount({
          fromPubkey: this.payer.publicKey,
          newAccountPubkey: newAccount.publicKey,
          lamports: balanceNeeded,
          space: AccountLayout.span,
          programId: this.programId
        }));
        const mintPublicKey = this.publicKey;
        transaction.add(Token.createInitAccountInstruction(this.programId, mintPublicKey, newAccount.publicKey, owner)); // Send the two instructions

        await sendAndConfirmTransaction('createAccount and InitializeAccount', this.connection, transaction, this.payer, newAccount);
        return newAccount.publicKey;
      }
      /**
       * Create and initialize the associated account.
       *
       * This account may then be used as a `transfer()` or `approve()` destination
       *
       * @param owner User account that will own the new account
       * @return Public key of the new associated account
       */


      async createAssociatedTokenAccount(owner) {
        const associatedAddress = await Token.getAssociatedTokenAddress(this.associatedProgramId, this.programId, this.publicKey, owner);
        return this.createAssociatedTokenAccountInternal(owner, associatedAddress);
      }

      async createAssociatedTokenAccountInternal(owner, associatedAddress) {
        await sendAndConfirmTransaction('CreateAssociatedTokenAccount', this.connection, new Transaction().add(Token.createAssociatedTokenAccountInstruction(this.associatedProgramId, this.programId, this.publicKey, associatedAddress, owner, this.payer.publicKey)), this.payer);
        return associatedAddress;
      }
      /**
       * Retrieve the associated account or create one if not found.
       *
       * This account may then be used as a `transfer()` or `approve()` destination
       *
       * @param owner User account that will own the new account
       * @return The new associated account
       */


      async getOrCreateAssociatedAccountInfo(owner) {
        const associatedAddress = await Token.getAssociatedTokenAddress(this.associatedProgramId, this.programId, this.publicKey, owner); // This is the optimum logic, considering TX fee, client-side computation,
        // RPC roundtrips and guaranteed idempotent.
        // Sadly we can't do this atomically;

        try {
          return await this.getAccountInfo(associatedAddress);
        } catch (err) {
          // INVALID_ACCOUNT_OWNER can be possible if the associatedAddress has
          // already been received some lamports (= became system accounts).
          // Assuming program derived addressing is safe, this is the only case
          // for the INVALID_ACCOUNT_OWNER in this code-path
          if (err.message === FAILED_TO_FIND_ACCOUNT || err.message === INVALID_ACCOUNT_OWNER) {
            // as this isn't atomic, it's possible others can create associated
            // accounts meanwhile
            try {
              await this.createAssociatedTokenAccountInternal(owner, associatedAddress);
            } catch (err) {// ignore all errors; for now there is no API compatible way to
              // selectively ignore the expected instruction error if the
              // associated account is existing already.
            } // Now this should always succeed


            return await this.getAccountInfo(associatedAddress);
          } else {
            throw err;
          }
        }
      }
      /**
       * Create and initialize a new account on the special native token mint.
       *
       * In order to be wrapped, the account must have a balance of native tokens
       * when it is initialized with the token program.
       *
       * This function sends lamports to the new account before initializing it.
       *
       * @param connection A solana web3 connection
       * @param programId The token program ID
       * @param owner The owner of the new token account
       * @param payer The source of the lamports to initialize, and payer of the initialization fees.
       * @param amount The amount of lamports to wrap
       * @return {Promise<PublicKey>} The new token account
       */


      static async createWrappedNativeAccount(connection, programId, owner, payer, amount) {
        // Allocate memory for the account
        const balanceNeeded = await Token.getMinBalanceRentForExemptAccount(connection); // Create a new account

        const newAccount = Keypair.generate();
        const transaction = new Transaction();
        transaction.add(SystemProgram.createAccount({
          fromPubkey: payer.publicKey,
          newAccountPubkey: newAccount.publicKey,
          lamports: balanceNeeded,
          space: AccountLayout.span,
          programId
        })); // Send lamports to it (these will be wrapped into native tokens by the token program)

        transaction.add(SystemProgram.transfer({
          fromPubkey: payer.publicKey,
          toPubkey: newAccount.publicKey,
          lamports: amount
        })); // Assign the new account to the native token mint.
        // the account will be initialized with a balance equal to the native token balance.
        // (i.e. amount)

        transaction.add(Token.createInitAccountInstruction(programId, NATIVE_MINT, newAccount.publicKey, owner)); // Send the three instructions

        await sendAndConfirmTransaction('createAccount, transfer, and initializeAccount', connection, transaction, payer, newAccount);
        return newAccount.publicKey;
      }
      /**
       * Create and initialize a new multisig.
       *
       * This account may then be used for multisignature verification
       *
       * @param m Number of required signatures
       * @param signers Full set of signers
       * @return Public key of the new multisig account
       */


      async createMultisig(m, signers) {
        const multisigAccount = Keypair.generate(); // Allocate memory for the account

        const balanceNeeded = await Token.getMinBalanceRentForExemptMultisig(this.connection);
        const transaction = new Transaction();
        transaction.add(SystemProgram.createAccount({
          fromPubkey: this.payer.publicKey,
          newAccountPubkey: multisigAccount.publicKey,
          lamports: balanceNeeded,
          space: MultisigLayout.span,
          programId: this.programId
        })); // create the new account

        let keys = [{
          pubkey: multisigAccount.publicKey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: SYSVAR_RENT_PUBKEY,
          isSigner: false,
          isWritable: false
        }];
        signers.forEach(signer => keys.push({
          pubkey: signer,
          isSigner: false,
          isWritable: false
        }));
        const dataLayout = struct([u8('instruction'), u8('m')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 2,
          // InitializeMultisig instruction
          m
        }, data);
        transaction.add({
          keys,
          programId: this.programId,
          data
        }); // Send the two instructions

        await sendAndConfirmTransaction('createAccount and InitializeMultisig', this.connection, transaction, this.payer, multisigAccount);
        return multisigAccount.publicKey;
      }
      /**
       * Retrieve mint information
       */


      async getMintInfo() {
        const info = await this.connection.getAccountInfo(this.publicKey);

        if (info === null) {
          throw new Error('Failed to find mint account');
        }

        if (!info.owner.equals(this.programId)) {
          throw new Error(`Invalid mint owner: ${JSON.stringify(info.owner)}`);
        }

        if (info.data.length != MintLayout.span) {
          throw new Error(`Invalid mint size`);
        }

        const data = buffer.Buffer.from(info.data);
        const mintInfo = MintLayout.decode(data);

        if (mintInfo.mintAuthorityOption === 0) {
          mintInfo.mintAuthority = null;
        } else {
          mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);
        }

        mintInfo.supply = u64.fromBuffer(mintInfo.supply);
        mintInfo.isInitialized = mintInfo.isInitialized != 0;

        if (mintInfo.freezeAuthorityOption === 0) {
          mintInfo.freezeAuthority = null;
        } else {
          mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);
        }

        return mintInfo;
      }
      /**
       * Retrieve account information
       *
       * @param account Public key of the account
       */


      async getAccountInfo(account, commitment) {
        const info = await this.connection.getAccountInfo(account, commitment);

        if (info === null) {
          throw new Error(FAILED_TO_FIND_ACCOUNT);
        }

        if (!info.owner.equals(this.programId)) {
          throw new Error(INVALID_ACCOUNT_OWNER);
        }

        if (info.data.length != AccountLayout.span) {
          throw new Error(`Invalid account size`);
        }

        const data = buffer.Buffer.from(info.data);
        const accountInfo = AccountLayout.decode(data);
        accountInfo.address = account;
        accountInfo.mint = new PublicKey(accountInfo.mint);
        accountInfo.owner = new PublicKey(accountInfo.owner);
        accountInfo.amount = u64.fromBuffer(accountInfo.amount);

        if (accountInfo.delegateOption === 0) {
          accountInfo.delegate = null;
          accountInfo.delegatedAmount = new u64();
        } else {
          accountInfo.delegate = new PublicKey(accountInfo.delegate);
          accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);
        }

        accountInfo.isInitialized = accountInfo.state !== 0;
        accountInfo.isFrozen = accountInfo.state === 2;

        if (accountInfo.isNativeOption === 1) {
          accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);
          accountInfo.isNative = true;
        } else {
          accountInfo.rentExemptReserve = null;
          accountInfo.isNative = false;
        }

        if (accountInfo.closeAuthorityOption === 0) {
          accountInfo.closeAuthority = null;
        } else {
          accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);
        }

        if (!accountInfo.mint.equals(this.publicKey)) {
          throw new Error(`Invalid account mint: ${JSON.stringify(accountInfo.mint)} !== ${JSON.stringify(this.publicKey)}`);
        }

        return accountInfo;
      }
      /**
       * Retrieve Multisig information
       *
       * @param multisig Public key of the account
       */


      async getMultisigInfo(multisig) {
        const info = await this.connection.getAccountInfo(multisig);

        if (info === null) {
          throw new Error('Failed to find multisig');
        }

        if (!info.owner.equals(this.programId)) {
          throw new Error(`Invalid multisig owner`);
        }

        if (info.data.length != MultisigLayout.span) {
          throw new Error(`Invalid multisig size`);
        }

        const data = buffer.Buffer.from(info.data);
        const multisigInfo = MultisigLayout.decode(data);
        multisigInfo.signer1 = new PublicKey(multisigInfo.signer1);
        multisigInfo.signer2 = new PublicKey(multisigInfo.signer2);
        multisigInfo.signer3 = new PublicKey(multisigInfo.signer3);
        multisigInfo.signer4 = new PublicKey(multisigInfo.signer4);
        multisigInfo.signer5 = new PublicKey(multisigInfo.signer5);
        multisigInfo.signer6 = new PublicKey(multisigInfo.signer6);
        multisigInfo.signer7 = new PublicKey(multisigInfo.signer7);
        multisigInfo.signer8 = new PublicKey(multisigInfo.signer8);
        multisigInfo.signer9 = new PublicKey(multisigInfo.signer9);
        multisigInfo.signer10 = new PublicKey(multisigInfo.signer10);
        multisigInfo.signer11 = new PublicKey(multisigInfo.signer11);
        return multisigInfo;
      }
      /**
       * Transfer tokens to another account
       *
       * @param source Source account
       * @param destination Destination account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Number of tokens to transfer
       */


      async transfer(source, destination, owner, multiSigners, amount) {
        let ownerPublicKey;
        let signers;

        if (isAccount(owner)) {
          ownerPublicKey = owner.publicKey;
          signers = [owner];
        } else {
          ownerPublicKey = owner;
          signers = multiSigners;
        }

        return await sendAndConfirmTransaction('Transfer', this.connection, new Transaction().add(Token.createTransferInstruction(this.programId, source, destination, ownerPublicKey, multiSigners, amount)), this.payer, ...signers);
      }
      /**
       * Grant a third-party permission to transfer up the specified number of tokens from an account
       *
       * @param account Public key of the account
       * @param delegate Account authorized to perform a transfer tokens from the source account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Maximum number of tokens the delegate may transfer
       */


      async approve(account, delegate, owner, multiSigners, amount) {
        let ownerPublicKey;
        let signers;

        if (isAccount(owner)) {
          ownerPublicKey = owner.publicKey;
          signers = [owner];
        } else {
          ownerPublicKey = owner;
          signers = multiSigners;
        }

        await sendAndConfirmTransaction('Approve', this.connection, new Transaction().add(Token.createApproveInstruction(this.programId, account, delegate, ownerPublicKey, multiSigners, amount)), this.payer, ...signers);
      }
      /**
       * Remove approval for the transfer of any remaining tokens
       *
       * @param account Public key of the account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       */


      async revoke(account, owner, multiSigners) {
        let ownerPublicKey;
        let signers;

        if (isAccount(owner)) {
          ownerPublicKey = owner.publicKey;
          signers = [owner];
        } else {
          ownerPublicKey = owner;
          signers = multiSigners;
        }

        await sendAndConfirmTransaction('Revoke', this.connection, new Transaction().add(Token.createRevokeInstruction(this.programId, account, ownerPublicKey, multiSigners)), this.payer, ...signers);
      }
      /**
       * Assign a new authority to the account
       *
       * @param account Public key of the account
       * @param newAuthority New authority of the account
       * @param authorityType Type of authority to set
       * @param currentAuthority Current authority of the account
       * @param multiSigners Signing accounts if `currentAuthority` is a multiSig
       */


      async setAuthority(account, newAuthority, authorityType, currentAuthority, multiSigners) {
        let currentAuthorityPublicKey;
        let signers;

        if (isAccount(currentAuthority)) {
          currentAuthorityPublicKey = currentAuthority.publicKey;
          signers = [currentAuthority];
        } else {
          currentAuthorityPublicKey = currentAuthority;
          signers = multiSigners;
        }

        await sendAndConfirmTransaction('SetAuthority', this.connection, new Transaction().add(Token.createSetAuthorityInstruction(this.programId, account, newAuthority, authorityType, currentAuthorityPublicKey, multiSigners)), this.payer, ...signers);
      }
      /**
       * Mint new tokens
       *
       * @param dest Public key of the account to mint to
       * @param authority Minting authority
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount Amount to mint
       */


      async mintTo(dest, authority, multiSigners, amount) {
        let ownerPublicKey;
        let signers;

        if (isAccount(authority)) {
          ownerPublicKey = authority.publicKey;
          signers = [authority];
        } else {
          ownerPublicKey = authority;
          signers = multiSigners;
        }

        await sendAndConfirmTransaction('MintTo', this.connection, new Transaction().add(Token.createMintToInstruction(this.programId, this.publicKey, dest, ownerPublicKey, multiSigners, amount)), this.payer, ...signers);
      }
      /**
       * Burn tokens
       *
       * @param account Account to burn tokens from
       * @param owner Account owner
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Amount to burn
       */


      async burn(account, owner, multiSigners, amount) {
        let ownerPublicKey;
        let signers;

        if (isAccount(owner)) {
          ownerPublicKey = owner.publicKey;
          signers = [owner];
        } else {
          ownerPublicKey = owner;
          signers = multiSigners;
        }

        await sendAndConfirmTransaction('Burn', this.connection, new Transaction().add(Token.createBurnInstruction(this.programId, this.publicKey, account, ownerPublicKey, multiSigners, amount)), this.payer, ...signers);
      }
      /**
       * Close account
       *
       * @param account Account to close
       * @param dest Account to receive the remaining balance of the closed account
       * @param authority Authority which is allowed to close the account
       * @param multiSigners Signing accounts if `authority` is a multiSig
       */


      async closeAccount(account, dest, authority, multiSigners) {
        let authorityPublicKey;
        let signers;

        if (isAccount(authority)) {
          authorityPublicKey = authority.publicKey;
          signers = [authority];
        } else {
          authorityPublicKey = authority;
          signers = multiSigners;
        }

        await sendAndConfirmTransaction('CloseAccount', this.connection, new Transaction().add(Token.createCloseAccountInstruction(this.programId, account, dest, authorityPublicKey, multiSigners)), this.payer, ...signers);
      }
      /**
       * Freeze account
       *
       * @param account Account to freeze
       * @param authority The mint freeze authority
       * @param multiSigners Signing accounts if `authority` is a multiSig
       */


      async freezeAccount(account, authority, multiSigners) {
        let authorityPublicKey;
        let signers;

        if (isAccount(authority)) {
          authorityPublicKey = authority.publicKey;
          signers = [authority];
        } else {
          authorityPublicKey = authority;
          signers = multiSigners;
        }

        await sendAndConfirmTransaction('FreezeAccount', this.connection, new Transaction().add(Token.createFreezeAccountInstruction(this.programId, account, this.publicKey, authorityPublicKey, multiSigners)), this.payer, ...signers);
      }
      /**
       * Thaw account
       *
       * @param account Account to thaw
       * @param authority The mint freeze authority
       * @param multiSigners Signing accounts if `authority` is a multiSig
       */


      async thawAccount(account, authority, multiSigners) {
        let authorityPublicKey;
        let signers;

        if (isAccount(authority)) {
          authorityPublicKey = authority.publicKey;
          signers = [authority];
        } else {
          authorityPublicKey = authority;
          signers = multiSigners;
        }

        await sendAndConfirmTransaction('ThawAccount', this.connection, new Transaction().add(Token.createThawAccountInstruction(this.programId, account, this.publicKey, authorityPublicKey, multiSigners)), this.payer, ...signers);
      }
      /**
       * Transfer tokens to another account, asserting the token mint and decimals
       *
       * @param source Source account
       * @param destination Destination account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Number of tokens to transfer
       * @param decimals Number of decimals in transfer amount
       */


      async transferChecked(source, destination, owner, multiSigners, amount, decimals) {
        let ownerPublicKey;
        let signers;

        if (isAccount(owner)) {
          ownerPublicKey = owner.publicKey;
          signers = [owner];
        } else {
          ownerPublicKey = owner;
          signers = multiSigners;
        }

        return await sendAndConfirmTransaction('TransferChecked', this.connection, new Transaction().add(Token.createTransferCheckedInstruction(this.programId, source, this.publicKey, destination, ownerPublicKey, multiSigners, amount, decimals)), this.payer, ...signers);
      }
      /**
       * Grant a third-party permission to transfer up the specified number of tokens from an account,
       * asserting the token mint and decimals
       *
       * @param account Public key of the account
       * @param delegate Account authorized to perform a transfer tokens from the source account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Maximum number of tokens the delegate may transfer
       * @param decimals Number of decimals in approve amount
       */


      async approveChecked(account, delegate, owner, multiSigners, amount, decimals) {
        let ownerPublicKey;
        let signers;

        if (isAccount(owner)) {
          ownerPublicKey = owner.publicKey;
          signers = [owner];
        } else {
          ownerPublicKey = owner;
          signers = multiSigners;
        }

        await sendAndConfirmTransaction('ApproveChecked', this.connection, new Transaction().add(Token.createApproveCheckedInstruction(this.programId, account, this.publicKey, delegate, ownerPublicKey, multiSigners, amount, decimals)), this.payer, ...signers);
      }
      /**
       * Mint new tokens, asserting the token mint and decimals
       *
       * @param dest Public key of the account to mint to
       * @param authority Minting authority
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount Amount to mint
       * @param decimals Number of decimals in amount to mint
       */


      async mintToChecked(dest, authority, multiSigners, amount, decimals) {
        let ownerPublicKey;
        let signers;

        if (isAccount(authority)) {
          ownerPublicKey = authority.publicKey;
          signers = [authority];
        } else {
          ownerPublicKey = authority;
          signers = multiSigners;
        }

        await sendAndConfirmTransaction('MintToChecked', this.connection, new Transaction().add(Token.createMintToCheckedInstruction(this.programId, this.publicKey, dest, ownerPublicKey, multiSigners, amount, decimals)), this.payer, ...signers);
      }
      /**
       * Burn tokens, asserting the token mint and decimals
       *
       * @param account Account to burn tokens from
       * @param owner Account owner
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Amount to burn
       * @param decimals Number of decimals in amount to burn
       */


      async burnChecked(account, owner, multiSigners, amount, decimals) {
        let ownerPublicKey;
        let signers;

        if (isAccount(owner)) {
          ownerPublicKey = owner.publicKey;
          signers = [owner];
        } else {
          ownerPublicKey = owner;
          signers = multiSigners;
        }

        await sendAndConfirmTransaction('BurnChecked', this.connection, new Transaction().add(Token.createBurnCheckedInstruction(this.programId, this.publicKey, account, ownerPublicKey, multiSigners, amount, decimals)), this.payer, ...signers);
      }
      /**
       * Sync amount in native SPL token account to underlying lamports
       *
       * @param nativeAccount Account to sync
       */


      async syncNative(nativeAccount) {
        await sendAndConfirmTransaction('SyncNative', this.connection, new Transaction().add(Token.createSyncNativeInstruction(this.programId, nativeAccount)), this.payer);
      }
      /**
       * Construct an InitializeMint instruction
       *
       * @param programId SPL Token program account
       * @param mint Token mint account
       * @param decimals Number of decimals in token account amounts
       * @param mintAuthority Minting authority
       * @param freezeAuthority Optional authority that can freeze token accounts
       */


      static createInitMintInstruction(programId, mint, decimals, mintAuthority, freezeAuthority) {
        let keys = [{
          pubkey: mint,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: SYSVAR_RENT_PUBKEY,
          isSigner: false,
          isWritable: false
        }];
        const commandDataLayout = struct([u8('instruction'), u8('decimals'), publicKey('mintAuthority'), u8('option'), publicKey('freezeAuthority')]);
        let data = buffer.Buffer.alloc(1024);
        {
          const encodeLength = commandDataLayout.encode({
            instruction: 0,
            // InitializeMint instruction
            decimals,
            mintAuthority: pubkeyToBuffer(mintAuthority),
            option: freezeAuthority === null ? 0 : 1,
            freezeAuthority: pubkeyToBuffer(freezeAuthority || new PublicKey(0))
          }, data);
          data = data.slice(0, encodeLength);
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct an InitializeAccount instruction
       *
       * @param programId SPL Token program account
       * @param mint Token mint account
       * @param account New account
       * @param owner Owner of the new account
       */


      static createInitAccountInstruction(programId, mint, account, owner) {
        const keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: owner,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: SYSVAR_RENT_PUBKEY,
          isSigner: false,
          isWritable: false
        }];
        const dataLayout = struct([u8('instruction')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 1 // InitializeAccount instruction

        }, data);
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct a Transfer instruction
       *
       * @param programId SPL Token program account
       * @param source Source account
       * @param destination Destination account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount Number of tokens to transfer
       */


      static createTransferInstruction(programId, source, destination, owner, multiSigners, amount) {
        const dataLayout = struct([u8('instruction'), uint64('amount')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 3,
          // Transfer instruction
          amount: new u64(amount).toBuffer()
        }, data);
        let keys = [{
          pubkey: source,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: destination,
          isSigner: false,
          isWritable: true
        }];

        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach(signer => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }

        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Construct an Approve instruction
       *
       * @param programId SPL Token program account
       * @param account Public key of the account
       * @param delegate Account authorized to perform a transfer of tokens from the source account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Maximum number of tokens the delegate may transfer
       */


      static createApproveInstruction(programId, account, delegate, owner, multiSigners, amount) {
        const dataLayout = struct([u8('instruction'), uint64('amount')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 4,
          // Approve instruction
          amount: new u64(amount).toBuffer()
        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: delegate,
          isSigner: false,
          isWritable: false
        }];

        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach(signer => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }

        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Construct a Revoke instruction
       *
       * @param programId SPL Token program account
       * @param account Public key of the account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       */


      static createRevokeInstruction(programId, account, owner, multiSigners) {
        const dataLayout = struct([u8('instruction')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 5 // Approve instruction

        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }];

        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach(signer => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }

        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Construct a SetAuthority instruction
       *
       * @param programId SPL Token program account
       * @param account Public key of the account
       * @param newAuthority New authority of the account
       * @param authorityType Type of authority to set
       * @param currentAuthority Current authority of the specified type
       * @param multiSigners Signing accounts if `currentAuthority` is a multiSig
       */


      static createSetAuthorityInstruction(programId, account, newAuthority, authorityType, currentAuthority, multiSigners) {
        const commandDataLayout = struct([u8('instruction'), u8('authorityType'), u8('option'), publicKey('newAuthority')]);
        let data = buffer.Buffer.alloc(1024);
        {
          const encodeLength = commandDataLayout.encode({
            instruction: 6,
            // SetAuthority instruction
            authorityType: AuthorityTypeCodes[authorityType],
            option: newAuthority === null ? 0 : 1,
            newAuthority: pubkeyToBuffer(newAuthority || new PublicKey(0))
          }, data);
          data = data.slice(0, encodeLength);
        }
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }];

        if (multiSigners.length === 0) {
          keys.push({
            pubkey: currentAuthority,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: currentAuthority,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach(signer => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }

        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Construct a MintTo instruction
       *
       * @param programId SPL Token program account
       * @param mint Public key of the mint
       * @param dest Public key of the account to mint to
       * @param authority The mint authority
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount Amount to mint
       */


      static createMintToInstruction(programId, mint, dest, authority, multiSigners, amount) {
        const dataLayout = struct([u8('instruction'), uint64('amount')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 7,
          // MintTo instruction
          amount: new u64(amount).toBuffer()
        }, data);
        let keys = [{
          pubkey: mint,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: dest,
          isSigner: false,
          isWritable: true
        }];

        if (multiSigners.length === 0) {
          keys.push({
            pubkey: authority,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: authority,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach(signer => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }

        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Construct a Burn instruction
       *
       * @param programId SPL Token program account
       * @param mint Mint for the account
       * @param account Account to burn tokens from
       * @param owner Owner of the account
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount amount to burn
       */


      static createBurnInstruction(programId, mint, account, owner, multiSigners, amount) {
        const dataLayout = struct([u8('instruction'), uint64('amount')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 8,
          // Burn instruction
          amount: new u64(amount).toBuffer()
        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: true
        }];

        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach(signer => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }

        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Construct a Close instruction
       *
       * @param programId SPL Token program account
       * @param account Account to close
       * @param dest Account to receive the remaining balance of the closed account
       * @param authority Account Close authority
       * @param multiSigners Signing accounts if `owner` is a multiSig
       */


      static createCloseAccountInstruction(programId, account, dest, owner, multiSigners) {
        const dataLayout = struct([u8('instruction')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 9 // CloseAccount instruction

        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: dest,
          isSigner: false,
          isWritable: true
        }];

        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach(signer => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }

        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Construct a Freeze instruction
       *
       * @param programId SPL Token program account
       * @param account Account to freeze
       * @param mint Mint account
       * @param authority Mint freeze authority
       * @param multiSigners Signing accounts if `owner` is a multiSig
       */


      static createFreezeAccountInstruction(programId, account, mint, authority, multiSigners) {
        const dataLayout = struct([u8('instruction')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 10 // FreezeAccount instruction

        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: false
        }];

        if (multiSigners.length === 0) {
          keys.push({
            pubkey: authority,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: authority,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach(signer => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }

        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Construct a Thaw instruction
       *
       * @param programId SPL Token program account
       * @param account Account to thaw
       * @param mint Mint account
       * @param authority Mint freeze authority
       * @param multiSigners Signing accounts if `owner` is a multiSig
       */


      static createThawAccountInstruction(programId, account, mint, authority, multiSigners) {
        const dataLayout = struct([u8('instruction')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 11 // ThawAccount instruction

        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: false
        }];

        if (multiSigners.length === 0) {
          keys.push({
            pubkey: authority,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: authority,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach(signer => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }

        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Construct a TransferChecked instruction
       *
       * @param programId SPL Token program account
       * @param source Source account
       * @param mint Mint account
       * @param destination Destination account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount Number of tokens to transfer
       * @param decimals Number of decimals in transfer amount
       */


      static createTransferCheckedInstruction(programId, source, mint, destination, owner, multiSigners, amount, decimals) {
        const dataLayout = struct([u8('instruction'), uint64('amount'), u8('decimals')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 12,
          // TransferChecked instruction
          amount: new u64(amount).toBuffer(),
          decimals
        }, data);
        let keys = [{
          pubkey: source,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: destination,
          isSigner: false,
          isWritable: true
        }];

        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach(signer => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }

        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Construct an ApproveChecked instruction
       *
       * @param programId SPL Token program account
       * @param account Public key of the account
       * @param mint Mint account
       * @param delegate Account authorized to perform a transfer of tokens from the source account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Maximum number of tokens the delegate may transfer
       * @param decimals Number of decimals in approve amount
       */


      static createApproveCheckedInstruction(programId, account, mint, delegate, owner, multiSigners, amount, decimals) {
        const dataLayout = struct([u8('instruction'), uint64('amount'), u8('decimals')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 13,
          // ApproveChecked instruction
          amount: new u64(amount).toBuffer(),
          decimals
        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: delegate,
          isSigner: false,
          isWritable: false
        }];

        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach(signer => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }

        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Construct a MintToChecked instruction
       *
       * @param programId SPL Token program account
       * @param mint Public key of the mint
       * @param dest Public key of the account to mint to
       * @param authority The mint authority
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount Amount to mint
       * @param decimals Number of decimals in amount to mint
       */


      static createMintToCheckedInstruction(programId, mint, dest, authority, multiSigners, amount, decimals) {
        const dataLayout = struct([u8('instruction'), uint64('amount'), u8('decimals')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 14,
          // MintToChecked instruction
          amount: new u64(amount).toBuffer(),
          decimals
        }, data);
        let keys = [{
          pubkey: mint,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: dest,
          isSigner: false,
          isWritable: true
        }];

        if (multiSigners.length === 0) {
          keys.push({
            pubkey: authority,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: authority,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach(signer => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }

        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Construct a BurnChecked instruction
       *
       * @param programId SPL Token program account
       * @param mint Mint for the account
       * @param account Account to burn tokens from
       * @param owner Owner of the account
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount amount to burn
       */


      static createBurnCheckedInstruction(programId, mint, account, owner, multiSigners, amount, decimals) {
        const dataLayout = struct([u8('instruction'), uint64('amount'), u8('decimals')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 15,
          // BurnChecked instruction
          amount: new u64(amount).toBuffer(),
          decimals
        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: true
        }];

        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach(signer => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }

        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Construct a SyncNative instruction
       *
       * @param programId SPL Token program account
       * @param nativeAccount Account to sync lamports from
       */


      static createSyncNativeInstruction(programId, nativeAccount) {
        const dataLayout = struct([u8('instruction')]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 17 // SyncNative instruction

        }, data);
        let keys = [{
          pubkey: nativeAccount,
          isSigner: false,
          isWritable: true
        }];
        return new TransactionInstruction({
          keys,
          programId: programId,
          data
        });
      }
      /**
       * Get the address for the associated token account
       *
       * @param associatedProgramId SPL Associated Token program account
       * @param programId SPL Token program account
       * @param mint Token mint account
       * @param owner Owner of the new account
       * @return Public key of the associated token account
       */


      static async getAssociatedTokenAddress(associatedProgramId, programId, mint, owner, allowOwnerOffCurve = false) {
        if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) {
          throw new Error(`Owner cannot sign: ${owner.toString()}`);
        }

        return (await PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedProgramId))[0];
      }
      /**
       * Construct the AssociatedTokenProgram instruction to create the associated
       * token account
       *
       * @param associatedProgramId SPL Associated Token program account
       * @param programId SPL Token program account
       * @param mint Token mint account
       * @param associatedAccount New associated account
       * @param owner Owner of the new account
       * @param payer Payer of fees
       */


      static createAssociatedTokenAccountInstruction(associatedProgramId, programId, mint, associatedAccount, owner, payer) {
        const data = buffer.Buffer.alloc(0);
        let keys = [{
          pubkey: payer,
          isSigner: true,
          isWritable: true
        }, {
          pubkey: associatedAccount,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: owner,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: SystemProgram.programId,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: programId,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: SYSVAR_RENT_PUBKEY,
          isSigner: false,
          isWritable: false
        }];
        return new TransactionInstruction({
          keys,
          programId: associatedProgramId,
          data
        });
      }

    }

    var rollbar_umd_min = createCommonjsModule(function (module, exports) {
    !function(t,e){module.exports=e();}(commonjsGlobal$1,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n});},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0});},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=6)}([function(t,e,r){var n=r(12),o={};function i(t,e){return e===s(t)}function s(t){var e=typeof t;return "object"!==e?e:t?t instanceof Error?"error":{}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase():"null"}function a(t){return i(t,"function")}function u(t){var e=Function.prototype.toString.call(Object.prototype.hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?"),r=RegExp("^"+e+"$");return c(t)&&r.test(t)}function c(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function l(){var t=v();return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var r=(t+16*Math.random())%16|0;return t=Math.floor(t/16),("x"===e?r:7&r|8).toString(16)}))}var p={strictMode:!1,key:["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],q:{name:"queryKey",parser:/(?:^|&)([^&=]*)=?([^&]*)/g},parser:{strict:/^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,loose:/^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/}};function f(t,e){var r,n;try{r=o.stringify(t);}catch(o){if(e&&a(e))try{r=e(t);}catch(t){n=t;}else n=o;}return {error:n,value:r}}function h(t,e){return function(r,n){try{e(r,n);}catch(e){t.error(e);}}}var d=["log","network","dom","navigation","error","manual"],m=["critical","error","warning","info","debug"];function g(t,e){for(var r=0;r<t.length;++r)if(t[r]===e)return !0;return !1}function v(){return Date.now?+Date.now():+new Date}t.exports={addParamsAndAccessTokenToPath:function(t,e,r){(r=r||{}).access_token=t;var n,o=[];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&o.push([n,r[n]].join("="));var i="?"+o.sort().join("&");(e=e||{}).path=e.path||"";var s,a=e.path.indexOf("?"),u=e.path.indexOf("#");-1!==a&&(-1===u||u>a)?(s=e.path,e.path=s.substring(0,a)+i+"&"+s.substring(a+1)):-1!==u?(s=e.path,e.path=s.substring(0,u)+i+s.substring(u)):e.path=e.path+i;},createItem:function(t,e,r,o,i){for(var a,u,c,p,f,d,m=[],g=[],y=0,b=t.length;y<b;++y){var w=s(d=t[y]);switch(g.push(w),w){case"undefined":break;case"string":a?m.push(d):a=d;break;case"function":p=h(e,d);break;case"date":m.push(d);break;case"error":case"domexception":case"exception":u?m.push(d):u=d;break;case"object":case"array":if(d instanceof Error||"undefined"!=typeof DOMException&&d instanceof DOMException){u?m.push(d):u=d;break}if(o&&"object"===w&&!f){for(var _=0,x=o.length;_<x;++_)if(void 0!==d[o[_]]){f=d;break}if(f)break}c?m.push(d):c=d;break;default:if(d instanceof Error||"undefined"!=typeof DOMException&&d instanceof DOMException){u?m.push(d):u=d;break}m.push(d);}}m.length>0&&((c=n(c)).extraArgs=m);var k={message:a,err:u,custom:c,timestamp:v(),callback:p,notifier:r,diagnostic:{},uuid:l()};return function(t,e){e&&void 0!==e.level&&(t.level=e.level,delete e.level);e&&void 0!==e.skipFrames&&(t.skipFrames=e.skipFrames,delete e.skipFrames);}(k,c),o&&f&&(k.request=f),i&&(k.lambdaContext=i),k._originalArgs=t,k.diagnostic.original_arg_types=g,k},addErrorContext:function(t,e){var r=t.data.custom||{},o=!1;try{for(var i=0;i<e.length;++i)e[i].hasOwnProperty("rollbarContext")&&(r=n(r,e[i].rollbarContext),o=!0);o&&(t.data.custom=r);}catch(e){t.diagnostic.error_context="Failed: "+e.message;}},createTelemetryEvent:function(t){for(var e,r,n,o,i=0,a=t.length;i<a;++i){switch(s(o=t[i])){case"string":!e&&g(d,o)?e=o:!n&&g(m,o)&&(n=o);break;case"object":r=o;}}return {type:e||"manual",metadata:r||{},level:n}},filterIp:function(t,e){if(t&&t.user_ip&&!0!==e){var r=t.user_ip;if(e)try{var n;if(-1!==r.indexOf("."))(n=r.split(".")).pop(),n.push("0"),r=n.join(".");else if(-1!==r.indexOf(":")){if((n=r.split(":")).length>2){var o=n.slice(0,3),i=o[2].indexOf("/");-1!==i&&(o[2]=o[2].substring(0,i));r=o.concat("0000:0000:0000:0000:0000").join(":");}}else r=null;}catch(t){r=null;}else r=null;t.user_ip=r;}},formatArgsAsString:function(t){var e,r,n,o=[];for(e=0,r=t.length;e<r;++e){switch(s(n=t[e])){case"object":(n=(n=f(n)).error||n.value).length>500&&(n=n.substr(0,497)+"...");break;case"null":n="null";break;case"undefined":n="undefined";break;case"symbol":n=n.toString();}o.push(n);}return o.join(" ")},formatUrl:function(t,e){if(!(e=e||t.protocol)&&t.port&&(80===t.port?e="http:":443===t.port&&(e="https:")),e=e||"https:",!t.hostname)return null;var r=e+"//"+t.hostname;return t.port&&(r=r+":"+t.port),t.path&&(r+=t.path),r},get:function(t,e){if(t){var r=e.split("."),n=t;try{for(var o=0,i=r.length;o<i;++o)n=n[r[o]];}catch(t){n=void 0;}return n}},handleOptions:function(t,e,r,o){var i=n(t,e,r);return i=function(t,e){t.hostWhiteList&&!t.hostSafeList&&(t.hostSafeList=t.hostWhiteList,t.hostWhiteList=void 0,e&&e.log("hostWhiteList is deprecated. Use hostSafeList."));t.hostBlackList&&!t.hostBlockList&&(t.hostBlockList=t.hostBlackList,t.hostBlackList=void 0,e&&e.log("hostBlackList is deprecated. Use hostBlockList."));return t}(i,o),!e||e.overwriteScrubFields||e.scrubFields&&(i.scrubFields=(t.scrubFields||[]).concat(e.scrubFields)),i},isError:function(t){return i(t,"error")||i(t,"exception")},isFiniteNumber:function(t){return Number.isFinite(t)},isFunction:a,isIterable:function(t){var e=s(t);return "object"===e||"array"===e},isNativeFunction:u,isObject:c,isString:function(t){return "string"==typeof t||t instanceof String},isType:i,isPromise:function(t){return c(t)&&i(t.then,"function")},jsonParse:function(t){var e,r;try{e=o.parse(t);}catch(t){r=t;}return {error:r,value:e}},LEVELS:{debug:0,info:1,warning:2,error:3,critical:4},makeUnhandledStackInfo:function(t,e,r,n,o,i,s,a){var u={url:e||"",line:r,column:n};u.func=a.guessFunctionName(u.url,u.line),u.context=a.gatherContext(u.url,u.line);var c="undefined"!=typeof document&&document&&document.location&&document.location.href,l="undefined"!=typeof window&&window&&window.navigator&&window.navigator.userAgent;return {mode:i,message:o?String(o):t||s,url:c,stack:[u],useragent:l}},merge:n,now:v,redact:function(){return "********"},RollbarJSON:o,sanitizeUrl:function(t){var e=function(t){if(!i(t,"string"))return;for(var e=p,r=e.parser[e.strictMode?"strict":"loose"].exec(t),n={},o=0,s=e.key.length;o<s;++o)n[e.key[o]]=r[o]||"";return n[e.q.name]={},n[e.key[12]].replace(e.q.parser,(function(t,r,o){r&&(n[e.q.name][r]=o);})),n}(t);return e?(""===e.anchor&&(e.source=e.source.replace("#","")),t=e.source.replace("?"+e.query,"")):"(unknown)"},set:function(t,e,r){if(t){var n=e.split("."),o=n.length;if(!(o<1))if(1!==o)try{for(var i=t[n[0]]||{},s=i,a=1;a<o-1;++a)i[n[a]]=i[n[a]]||{},i=i[n[a]];i[n[o-1]]=r,t[n[0]]=s;}catch(t){return}else t[n[0]]=r;}},setupJSON:function(t){a(o.stringify)&&a(o.parse)||(i(JSON,"undefined")||(t?(u(JSON.stringify)&&(o.stringify=JSON.stringify),u(JSON.parse)&&(o.parse=JSON.parse)):(a(JSON.stringify)&&(o.stringify=JSON.stringify),a(JSON.parse)&&(o.parse=JSON.parse))),a(o.stringify)&&a(o.parse)||t&&t(o));},stringify:f,maxByteSize:function(t){for(var e=0,r=t.length,n=0;n<r;n++){var o=t.charCodeAt(n);o<128?e+=1:o<2048?e+=2:o<65536&&(e+=3);}return e},typeName:s,uuid4:l};},function(t,e,r){r(17);var n=r(18),o=r(0);t.exports={error:function(){var t=Array.prototype.slice.call(arguments,0);t.unshift("Rollbar:"),n.ieVersion()<=8?console.error(o.formatArgsAsString(t)):console.error.apply(console,t);},info:function(){var t=Array.prototype.slice.call(arguments,0);t.unshift("Rollbar:"),n.ieVersion()<=8?console.info(o.formatArgsAsString(t)):console.info.apply(console,t);},log:function(){var t=Array.prototype.slice.call(arguments,0);t.unshift("Rollbar:"),n.ieVersion()<=8?console.log(o.formatArgsAsString(t)):console.log.apply(console,t);}};},function(t,e,r){t.exports={parse:function(t){var e,r,n={protocol:null,auth:null,host:null,path:null,hash:null,href:t,hostname:null,port:null,pathname:null,search:null,query:null};if(-1!==(e=t.indexOf("//"))?(n.protocol=t.substring(0,e),r=e+2):r=0,-1!==(e=t.indexOf("@",r))&&(n.auth=t.substring(r,e),r=e+1),-1===(e=t.indexOf("/",r))){if(-1===(e=t.indexOf("?",r)))return -1===(e=t.indexOf("#",r))?n.host=t.substring(r):(n.host=t.substring(r,e),n.hash=t.substring(e)),n.hostname=n.host.split(":")[0],n.port=n.host.split(":")[1],n.port&&(n.port=parseInt(n.port,10)),n;n.host=t.substring(r,e),n.hostname=n.host.split(":")[0],n.port=n.host.split(":")[1],n.port&&(n.port=parseInt(n.port,10)),r=e;}else n.host=t.substring(r,e),n.hostname=n.host.split(":")[0],n.port=n.host.split(":")[1],n.port&&(n.port=parseInt(n.port,10)),r=e;if(-1===(e=t.indexOf("#",r))?n.path=t.substring(r):(n.path=t.substring(r,e),n.hash=t.substring(e)),n.path){var o=n.path.split("?");n.pathname=o[0],n.query=o[1],n.search=n.query?"?"+n.query:null;}return n}};},function(t,e,r){var n=r(22),o=new RegExp("^(([a-zA-Z0-9-_$ ]*): *)?(Uncaught )?([a-zA-Z0-9-_$ ]*): ");function i(){return null}function s(t){var e={};return e._stackFrame=t,e.url=t.fileName,e.line=t.lineNumber,e.func=t.functionName,e.column=t.columnNumber,e.args=t.args,e.context=null,e}function a(t,e){return {stack:function(){var r=[];e=e||0;try{r=n.parse(t);}catch(t){r=[];}for(var o=[],i=e;i<r.length;i++)o.push(new s(r[i]));return o}(),message:t.message,name:u(t),rawStack:t.stack,rawException:t}}function u(t){var e=t.name&&t.name.length&&t.name,r=t.constructor.name&&t.constructor.name.length&&t.constructor.name;return e&&r?"Error"===e?r:e:e||r}t.exports={guessFunctionName:function(){return "?"},guessErrorClass:function(t){if(!t||!t.match)return ["Unknown error. There was no error message to display.",""];var e=t.match(o),r="(unknown)";return e&&(r=e[e.length-1],t=(t=t.replace((e[e.length-2]||"")+r+":","")).replace(/(^[\s]+|[\s]+$)/g,"")),[r,t]},gatherContext:i,parse:function(t,e){var r=t;if(r.nested){for(var n=[];r;)n.push(new a(r,e)),r=r.nested,e=0;return n[0].traceChain=n,n[0]}return new a(r,e)},Stack:a,Frame:s};},function(t,e,r){var n=r(0),o=r(5);function i(t,e){var r=e.split("."),o=r.length-1;try{for(var i=0;i<=o;++i)i<o?t=t[r[i]]:t[r[i]]=n.redact();}catch(t){}}t.exports=function(t,e,r){if(e=e||[],r)for(var s=0;s<r.length;++s)i(t,r[s]);var a=function(t){for(var e,r=[],n=0;n<t.length;++n)e="^\\[?(%5[bB])?"+t[n]+"\\[?(%5[bB])?\\]?(%5[dD])?$",r.push(new RegExp(e,"i"));return r}(e),u=function(t){for(var e,r=[],n=0;n<t.length;++n)e="\\[?(%5[bB])?"+t[n]+"\\[?(%5[bB])?\\]?(%5[dD])?",r.push(new RegExp("("+e+"=)([^&\\n]+)","igm"));return r}(e);function c(t,e){return e+n.redact()}return o(t,(function t(e,r,i){var s=function(t,e){var r;for(r=0;r<a.length;++r)if(a[r].test(t)){e=n.redact();break}return e}(e,r);return s===r?n.isType(r,"object")||n.isType(r,"array")?o(r,t,i):function(t){var e;if(n.isType(t,"string"))for(e=0;e<u.length;++e)t=t.replace(u[e],c);return t}(s):s}))};},function(t,e,r){var n=r(0);t.exports=function(t,e,r){var o,i,s,a,u=n.isType(t,"object"),c=n.isType(t,"array"),l=[];if(r=r||{obj:[],mapped:[]},u){if(a=r.obj.indexOf(t),u&&-1!==a)return r.mapped[a]||r.obj[a];r.obj.push(t),a=r.obj.length-1;}if(u)for(o in t)Object.prototype.hasOwnProperty.call(t,o)&&l.push(o);else if(c)for(s=0;s<t.length;++s)l.push(s);var p=u?{}:[],f=!0;for(s=0;s<l.length;++s)i=t[o=l[s]],p[o]=e(o,i,r),f=f&&p[o]===t[o];return u&&!f&&(r.mapped[a]=p),f?t:p};},function(t,e,r){t.exports=r(7);},function(t,e,r){var n=r(8),o="undefined"!=typeof window&&window._rollbarConfig,i=o&&o.globalAlias||"Rollbar",s="undefined"!=typeof window&&window[i]&&"function"==typeof window[i].shimId&&void 0!==window[i].shimId();if("undefined"==typeof window||window._rollbarStartTime||(window._rollbarStartTime=(new Date).getTime()),!s&&o){var a=new n(o);window[i]=a;}else "undefined"!=typeof window?(window.rollbar=n,window._rollbarDidLoad=!0):"undefined"!=typeof self&&(self.rollbar=n,self._rollbarDidLoad=!0);t.exports=n;},function(t,e,r){var n=r(9),o=r(29),i=r(30),s=r(32),a=r(34),u=r(4),c=r(35);n.setComponents({telemeter:o,instrumenter:i,polyfillJSON:s,wrapGlobals:a,scrub:u,truncation:c}),t.exports=n;},function(t,e,r){var n=r(10),o=r(0),i=r(15),s=r(1),a=r(19),u=r(20),c=r(2),l=r(21),p=r(24),f=r(25),h=r(26),d=r(3);function m(t,e){this.options=o.handleOptions(x,t,null,s),this.options._configuredOptions=t;var r=this.components.telemeter,a=this.components.instrumenter,d=this.components.polyfillJSON;this.wrapGlobals=this.components.wrapGlobals,this.scrub=this.components.scrub;var m=this.components.truncation,g=new u(m),v=new i(this.options,g,c,m);r&&(this.telemeter=new r(this.options)),this.client=e||new n(this.options,v,s,this.telemeter,"browser");var y=b(),w="undefined"!=typeof document&&document;this.isChrome=y.chrome&&y.chrome.runtime,this.anonymousErrorsPending=0,function(t,e,r){t.addTransform(l.handleDomException).addTransform(l.handleItemWithError).addTransform(l.ensureItemHasSomethingToSay).addTransform(l.addBaseInfo).addTransform(l.addRequestInfo(r)).addTransform(l.addClientInfo(r)).addTransform(l.addPluginInfo(r)).addTransform(l.addBody).addTransform(p.addMessageWithError).addTransform(p.addTelemetryData).addTransform(p.addConfigToPayload).addTransform(l.addScrubber(e.scrub)).addTransform(p.userTransform(s)).addTransform(p.addConfiguredOptions).addTransform(p.addDiagnosticKeys).addTransform(p.itemToPayload);}(this.client.notifier,this,y),this.client.queue.addPredicate(h.checkLevel).addPredicate(f.checkIgnore).addPredicate(h.userCheckIgnore(s)).addPredicate(h.urlIsNotBlockListed(s)).addPredicate(h.urlIsSafeListed(s)).addPredicate(h.messageIsIgnored(s)),this.setupUnhandledCapture(),a&&(this.instrumenter=new a(this.options,this.client.telemeter,this,y,w),this.instrumenter.instrument()),o.setupJSON(d);}var g=null;function v(t){var e="Rollbar is not initialized";s.error(e),t&&t(new Error(e));}function y(t){for(var e=0,r=t.length;e<r;++e)if(o.isFunction(t[e]))return t[e]}function b(){return "undefined"!=typeof window&&window||"undefined"!=typeof self&&self}m.init=function(t,e){return g?g.global(t).configure(t):g=new m(t,e)},m.prototype.components={},m.setComponents=function(t){m.prototype.components=t;},m.prototype.global=function(t){return this.client.global(t),this},m.global=function(t){if(g)return g.global(t);v();},m.prototype.configure=function(t,e){var r=this.options,n={};return e&&(n={payload:e}),this.options=o.handleOptions(r,t,n,s),this.options._configuredOptions=o.handleOptions(r._configuredOptions,t,n),this.client.configure(this.options,e),this.instrumenter&&this.instrumenter.configure(this.options),this.setupUnhandledCapture(),this},m.configure=function(t,e){if(g)return g.configure(t,e);v();},m.prototype.lastError=function(){return this.client.lastError},m.lastError=function(){if(g)return g.lastError();v();},m.prototype.log=function(){var t=this._createItem(arguments),e=t.uuid;return this.client.log(t),{uuid:e}},m.log=function(){if(g)return g.log.apply(g,arguments);var t=y(arguments);v(t);},m.prototype.debug=function(){var t=this._createItem(arguments),e=t.uuid;return this.client.debug(t),{uuid:e}},m.debug=function(){if(g)return g.debug.apply(g,arguments);var t=y(arguments);v(t);},m.prototype.info=function(){var t=this._createItem(arguments),e=t.uuid;return this.client.info(t),{uuid:e}},m.info=function(){if(g)return g.info.apply(g,arguments);var t=y(arguments);v(t);},m.prototype.warn=function(){var t=this._createItem(arguments),e=t.uuid;return this.client.warn(t),{uuid:e}},m.warn=function(){if(g)return g.warn.apply(g,arguments);var t=y(arguments);v(t);},m.prototype.warning=function(){var t=this._createItem(arguments),e=t.uuid;return this.client.warning(t),{uuid:e}},m.warning=function(){if(g)return g.warning.apply(g,arguments);var t=y(arguments);v(t);},m.prototype.error=function(){var t=this._createItem(arguments),e=t.uuid;return this.client.error(t),{uuid:e}},m.error=function(){if(g)return g.error.apply(g,arguments);var t=y(arguments);v(t);},m.prototype.critical=function(){var t=this._createItem(arguments),e=t.uuid;return this.client.critical(t),{uuid:e}},m.critical=function(){if(g)return g.critical.apply(g,arguments);var t=y(arguments);v(t);},m.prototype.buildJsonPayload=function(t){return this.client.buildJsonPayload(t)},m.buildJsonPayload=function(){if(g)return g.buildJsonPayload.apply(g,arguments);v();},m.prototype.sendJsonPayload=function(t){return this.client.sendJsonPayload(t)},m.sendJsonPayload=function(){if(g)return g.sendJsonPayload.apply(g,arguments);v();},m.prototype.setupUnhandledCapture=function(){var t=b();this.unhandledExceptionsInitialized||(this.options.captureUncaught||this.options.handleUncaughtExceptions)&&(a.captureUncaughtExceptions(t,this),this.wrapGlobals&&this.options.wrapGlobalEventHandlers&&this.wrapGlobals(t,this),this.unhandledExceptionsInitialized=!0),this.unhandledRejectionsInitialized||(this.options.captureUnhandledRejections||this.options.handleUnhandledRejections)&&(a.captureUnhandledRejections(t,this),this.unhandledRejectionsInitialized=!0);},m.prototype.handleUncaughtException=function(t,e,r,n,i,s){if(this.options.captureUncaught||this.options.handleUncaughtExceptions){if(this.options.inspectAnonymousErrors&&this.isChrome&&null===i&&""===e)return "anonymous";var a,u=o.makeUnhandledStackInfo(t,e,r,n,i,"onerror","uncaught exception",d);o.isError(i)?(a=this._createItem([t,i,s]))._unhandledStackInfo=u:o.isError(e)?(a=this._createItem([t,e,s]))._unhandledStackInfo=u:(a=this._createItem([t,s])).stackInfo=u,a.level=this.options.uncaughtErrorLevel,a._isUncaught=!0,this.client.log(a);}},m.prototype.handleAnonymousErrors=function(){if(this.options.inspectAnonymousErrors&&this.isChrome){var t=this;try{Error.prepareStackTrace=function(e,r){if(t.options.inspectAnonymousErrors&&t.anonymousErrorsPending){if(t.anonymousErrorsPending-=1,!e)return;e._isAnonymous=!0,t.handleUncaughtException(e.message,null,null,null,e);}return e.stack};}catch(t){this.options.inspectAnonymousErrors=!1,this.error("anonymous error handler failed",t);}}},m.prototype.handleUnhandledRejection=function(t,e){if(this.options.captureUnhandledRejections||this.options.handleUnhandledRejections){var r="unhandled rejection was null or undefined!";if(t)if(t.message)r=t.message;else {var n=o.stringify(t);n.value&&(r=n.value);}var i,s=t&&t._rollbarContext||e&&e._rollbarContext;o.isError(t)?i=this._createItem([r,t,s]):(i=this._createItem([r,t,s])).stackInfo=o.makeUnhandledStackInfo(r,"",0,0,null,"unhandledrejection","",d),i.level=this.options.uncaughtErrorLevel,i._isUncaught=!0,i._originalArgs=i._originalArgs||[],i._originalArgs.push(e),this.client.log(i);}},m.prototype.wrap=function(t,e,r){try{var n;if(n=o.isFunction(e)?e:function(){return e||{}},!o.isFunction(t))return t;if(t._isWrap)return t;if(!t._rollbar_wrapped&&(t._rollbar_wrapped=function(){r&&o.isFunction(r)&&r.apply(this,arguments);try{return t.apply(this,arguments)}catch(r){var e=r;throw e&&window._rollbarWrappedError!==e&&(o.isType(e,"string")&&(e=new String(e)),e._rollbarContext=n()||{},e._rollbarContext._wrappedSource=t.toString(),window._rollbarWrappedError=e),e}},t._rollbar_wrapped._isWrap=!0,t.hasOwnProperty))for(var i in t)t.hasOwnProperty(i)&&"_rollbar_wrapped"!==i&&(t._rollbar_wrapped[i]=t[i]);return t._rollbar_wrapped}catch(e){return t}},m.wrap=function(t,e){if(g)return g.wrap(t,e);v();},m.prototype.captureEvent=function(){var t=o.createTelemetryEvent(arguments);return this.client.captureEvent(t.type,t.metadata,t.level)},m.captureEvent=function(){if(g)return g.captureEvent.apply(g,arguments);v();},m.prototype.captureDomContentLoaded=function(t,e){return e||(e=new Date),this.client.captureDomContentLoaded(e)},m.prototype.captureLoad=function(t,e){return e||(e=new Date),this.client.captureLoad(e)},m.prototype.loadFull=function(){s.info("Unexpected Rollbar.loadFull() called on a Notifier instance. This can happen when Rollbar is loaded multiple times.");},m.prototype._createItem=function(t){return o.createItem(t,s,this)};var w=r(27),_=r(28),x={version:w.version,scrubFields:_.scrubFields,logLevel:w.logLevel,reportLevel:w.reportLevel,uncaughtErrorLevel:w.uncaughtErrorLevel,endpoint:w.endpoint,verbose:!1,enabled:!0,transmit:!0,sendConfig:!1,includeItemsInTelemetry:!0,captureIp:!0,inspectAnonymousErrors:!0,ignoreDuplicateErrors:!0,wrapGlobalEventHandlers:!1};t.exports=m;},function(t,e,r){var n=r(11),o=r(13),i=r(14),s=r(0);function a(t,e,r,n,l){this.options=s.merge(t),this.logger=r,a.rateLimiter.configureGlobal(this.options),a.rateLimiter.setPlatformOptions(l,this.options),this.api=e,this.queue=new o(a.rateLimiter,e,r,this.options);var p=this.options.tracer||null;c(p)?(this.tracer=p,this.options.tracer="opentracing-tracer-enabled",this.options._configuredOptions.tracer="opentracing-tracer-enabled"):this.tracer=null,this.notifier=new i(this.queue,this.options),this.telemeter=n,u(t),this.lastError=null,this.lastErrorHash="none";}function u(t){t.stackTraceLimit&&(Error.stackTraceLimit=t.stackTraceLimit);}function c(t){if(!t)return !1;if(!t.scope||"function"!=typeof t.scope)return !1;var e=t.scope();return !(!e||!e.active||"function"!=typeof e.active)}a.rateLimiter=new n({maxItems:0,itemsPerMinute:60}),a.prototype.global=function(t){return a.rateLimiter.configureGlobal(t),this},a.prototype.configure=function(t,e){var r=this.options,n={};e&&(n={payload:e}),this.options=s.merge(r,t,n);var o=this.options.tracer||null;return c(o)?(this.tracer=o,this.options.tracer="opentracing-tracer-enabled",this.options._configuredOptions.tracer="opentracing-tracer-enabled"):this.tracer=null,this.notifier&&this.notifier.configure(this.options),this.telemeter&&this.telemeter.configure(this.options),u(t),this.global(this.options),c(t.tracer)&&(this.tracer=t.tracer),this},a.prototype.log=function(t){var e=this._defaultLogLevel();return this._log(e,t)},a.prototype.debug=function(t){this._log("debug",t);},a.prototype.info=function(t){this._log("info",t);},a.prototype.warn=function(t){this._log("warning",t);},a.prototype.warning=function(t){this._log("warning",t);},a.prototype.error=function(t){this._log("error",t);},a.prototype.critical=function(t){this._log("critical",t);},a.prototype.wait=function(t){this.queue.wait(t);},a.prototype.captureEvent=function(t,e,r){return this.telemeter&&this.telemeter.captureEvent(t,e,r)},a.prototype.captureDomContentLoaded=function(t){return this.telemeter&&this.telemeter.captureDomContentLoaded(t)},a.prototype.captureLoad=function(t){return this.telemeter&&this.telemeter.captureLoad(t)},a.prototype.buildJsonPayload=function(t){return this.api.buildJsonPayload(t)},a.prototype.sendJsonPayload=function(t){this.api.postJsonPayload(t);},a.prototype._log=function(t,e){var r;if(e.callback&&(r=e.callback,delete e.callback),this.options.ignoreDuplicateErrors&&this._sameAsLastError(e)){if(r){var n=new Error("ignored identical item");n.item=e,r(n);}}else try{this._addTracingInfo(e),e.level=e.level||t,this.telemeter&&this.telemeter._captureRollbarItem(e),e.telemetryEvents=this.telemeter&&this.telemeter.copyEvents()||[],this.notifier.log(e,r);}catch(t){r&&r(t),this.logger.error(t);}},a.prototype._defaultLogLevel=function(){return this.options.logLevel||"debug"},a.prototype._sameAsLastError=function(t){if(!t._isUncaught)return !1;var e=function(t){var e=t.message||"",r=(t.err||{}).stack||String(t.err);return e+"::"+r}(t);return this.lastErrorHash===e||(this.lastError=t.err,this.lastErrorHash=e,!1)},a.prototype._addTracingInfo=function(t){if(this.tracer){var e=this.tracer.scope().active();if(function(t){if(!t||!t.context||"function"!=typeof t.context)return !1;var e=t.context();if(!e||!e.toSpanId||!e.toTraceId||"function"!=typeof e.toSpanId||"function"!=typeof e.toTraceId)return !1;return !0}(e)){e.setTag("rollbar.error_uuid",t.uuid),e.setTag("rollbar.has_error",!0),e.setTag("error",!0),e.setTag("rollbar.item_url","https://rollbar.com/item/uuid/?uuid="+t.uuid),e.setTag("rollbar.occurrence_url","https://rollbar.com/occurrence/uuid/?uuid="+t.uuid);var r=e.context().toSpanId(),n=e.context().toTraceId();t.custom?(t.custom.opentracing_span_id=r,t.custom.opentracing_trace_id=n):t.custom={opentracing_span_id:r,opentracing_trace_id:n};}}},t.exports=a;},function(t,e,r){var n=r(0);function o(t){this.startTime=n.now(),this.counter=0,this.perMinCounter=0,this.platform=null,this.platformOptions={},this.configureGlobal(t);}function i(t,e,r){return !t.ignoreRateLimit&&e>=1&&r>e}function s(t,e,r,n,o,i,s){var a=null;return r&&(r=new Error(r)),r||n||(a=function(t,e,r,n,o){var i,s=e.environment||e.payload&&e.payload.environment;i=o?"item per minute limit reached, ignoring errors until timeout":"maxItems has been hit, ignoring errors until reset.";var a={body:{message:{body:i,extra:{maxItems:r,itemsPerMinute:n}}},language:"javascript",environment:s,notifier:{version:e.notifier&&e.notifier.version||e.version}};"browser"===t?(a.platform="browser",a.framework="browser-js",a.notifier.name="rollbar-browser-js"):"server"===t?(a.framework=e.framework||"node-js",a.notifier.name=e.notifier.name):"react-native"===t&&(a.framework=e.framework||"react-native",a.notifier.name=e.notifier.name);return a}(t,e,o,i,s)),{error:r,shouldSend:n,payload:a}}o.globalSettings={startTime:n.now(),maxItems:void 0,itemsPerMinute:void 0},o.prototype.configureGlobal=function(t){void 0!==t.startTime&&(o.globalSettings.startTime=t.startTime),void 0!==t.maxItems&&(o.globalSettings.maxItems=t.maxItems),void 0!==t.itemsPerMinute&&(o.globalSettings.itemsPerMinute=t.itemsPerMinute);},o.prototype.shouldSend=function(t,e){var r=(e=e||n.now())-this.startTime;(r<0||r>=6e4)&&(this.startTime=e,this.perMinCounter=0);var a=o.globalSettings.maxItems,u=o.globalSettings.itemsPerMinute;if(i(t,a,this.counter))return s(this.platform,this.platformOptions,a+" max items reached",!1);if(i(t,u,this.perMinCounter))return s(this.platform,this.platformOptions,u+" items per minute reached",!1);this.counter++,this.perMinCounter++;var c=!i(t,a,this.counter),l=c;return c=c&&!i(t,u,this.perMinCounter),s(this.platform,this.platformOptions,null,c,a,u,l)},o.prototype.setPlatformOptions=function(t,e){this.platform=t,this.platformOptions=e;},t.exports=o;},function(t,e,r){var n=Object.prototype.hasOwnProperty,o=Object.prototype.toString,i=function(t){if(!t||"[object Object]"!==o.call(t))return !1;var e,r=n.call(t,"constructor"),i=t.constructor&&t.constructor.prototype&&n.call(t.constructor.prototype,"isPrototypeOf");if(t.constructor&&!r&&!i)return !1;for(e in t);return void 0===e||n.call(t,e)};t.exports=function t(){var e,r,n,o,s,a={},u=null,c=arguments.length;for(e=0;e<c;e++)if(null!=(u=arguments[e]))for(s in u)r=a[s],a!==(n=u[s])&&(n&&i(n)?(o=r&&i(r)?r:{},a[s]=t(o,n)):void 0!==n&&(a[s]=n));return a};},function(t,e,r){var n=r(0);function o(t,e,r,n){this.rateLimiter=t,this.api=e,this.logger=r,this.options=n,this.predicates=[],this.pendingItems=[],this.pendingRequests=[],this.retryQueue=[],this.retryHandle=null,this.waitCallback=null,this.waitIntervalID=null;}o.prototype.configure=function(t){this.api&&this.api.configure(t);var e=this.options;return this.options=n.merge(e,t),this},o.prototype.addPredicate=function(t){return n.isFunction(t)&&this.predicates.push(t),this},o.prototype.addPendingItem=function(t){this.pendingItems.push(t);},o.prototype.removePendingItem=function(t){var e=this.pendingItems.indexOf(t);-1!==e&&this.pendingItems.splice(e,1);},o.prototype.addItem=function(t,e,r,o){e&&n.isFunction(e)||(e=function(){});var i=this._applyPredicates(t);if(i.stop)return this.removePendingItem(o),void e(i.err);if(this._maybeLog(t,r),this.removePendingItem(o),this.options.transmit){this.pendingRequests.push(t);try{this._makeApiRequest(t,function(r,n){this._dequeuePendingRequest(t),e(r,n);}.bind(this));}catch(r){this._dequeuePendingRequest(t),e(r);}}else e(new Error("Transmit disabled"));},o.prototype.wait=function(t){n.isFunction(t)&&(this.waitCallback=t,this._maybeCallWait()||(this.waitIntervalID&&(this.waitIntervalID=clearInterval(this.waitIntervalID)),this.waitIntervalID=setInterval(function(){this._maybeCallWait();}.bind(this),500)));},o.prototype._applyPredicates=function(t){for(var e=null,r=0,n=this.predicates.length;r<n;r++)if(!(e=this.predicates[r](t,this.options))||void 0!==e.err)return {stop:!0,err:e.err};return {stop:!1,err:null}},o.prototype._makeApiRequest=function(t,e){var r=this.rateLimiter.shouldSend(t);r.shouldSend?this.api.postItem(t,function(r,n){r?this._maybeRetry(r,t,e):e(r,n);}.bind(this)):r.error?e(r.error):this.api.postItem(r.payload,e);};var i=["ECONNRESET","ENOTFOUND","ESOCKETTIMEDOUT","ETIMEDOUT","ECONNREFUSED","EHOSTUNREACH","EPIPE","EAI_AGAIN"];o.prototype._maybeRetry=function(t,e,r){var o=!1;if(this.options.retryInterval){for(var s=0,a=i.length;s<a;s++)if(t.code===i[s]){o=!0;break}o&&n.isFiniteNumber(this.options.maxRetries)&&(e.retries=e.retries?e.retries+1:1,e.retries>this.options.maxRetries&&(o=!1));}o?this._retryApiRequest(e,r):r(t);},o.prototype._retryApiRequest=function(t,e){this.retryQueue.push({item:t,callback:e}),this.retryHandle||(this.retryHandle=setInterval(function(){for(;this.retryQueue.length;){var t=this.retryQueue.shift();this._makeApiRequest(t.item,t.callback);}}.bind(this),this.options.retryInterval));},o.prototype._dequeuePendingRequest=function(t){var e=this.pendingRequests.indexOf(t);-1!==e&&(this.pendingRequests.splice(e,1),this._maybeCallWait());},o.prototype._maybeLog=function(t,e){if(this.logger&&this.options.verbose){var r=e;if(r=(r=r||n.get(t,"body.trace.exception.message"))||n.get(t,"body.trace_chain.0.exception.message"))return void this.logger.error(r);(r=n.get(t,"body.message.body"))&&this.logger.log(r);}},o.prototype._maybeCallWait=function(){return !(!n.isFunction(this.waitCallback)||0!==this.pendingItems.length||0!==this.pendingRequests.length)&&(this.waitIntervalID&&(this.waitIntervalID=clearInterval(this.waitIntervalID)),this.waitCallback(),!0)},t.exports=o;},function(t,e,r){var n=r(0);function o(t,e){this.queue=t,this.options=e,this.transforms=[],this.diagnostic={};}o.prototype.configure=function(t){this.queue&&this.queue.configure(t);var e=this.options;return this.options=n.merge(e,t),this},o.prototype.addTransform=function(t){return n.isFunction(t)&&this.transforms.push(t),this},o.prototype.log=function(t,e){if(e&&n.isFunction(e)||(e=function(){}),!this.options.enabled)return e(new Error("Rollbar is not enabled"));this.queue.addPendingItem(t);var r=t.err;this._applyTransforms(t,function(n,o){if(n)return this.queue.removePendingItem(t),e(n,null);this.queue.addItem(o,e,r,t);}.bind(this));},o.prototype._applyTransforms=function(t,e){var r=-1,n=this.transforms.length,o=this.transforms,i=this.options,s=function(t,a){t?e(t,null):++r!==n?o[r](a,i,s):e(null,a);};s(null,t);},t.exports=o;},function(t,e,r){var n=r(0),o=r(16),i={hostname:"api.rollbar.com",path:"/api/1/item/",search:null,version:"1",protocol:"https:",port:443};function s(t,e,r,n,o){this.options=t,this.transport=e,this.url=r,this.truncation=n,this.jsonBackup=o,this.accessToken=t.accessToken,this.transportOptions=a(t,r);}function a(t,e){return o.getTransportFromOptions(t,i,e)}s.prototype.postItem=function(t,e){var r=o.transportOptions(this.transportOptions,"POST"),n=o.buildPayload(this.accessToken,t,this.jsonBackup);this.transport.post(this.accessToken,r,n,e);},s.prototype.buildJsonPayload=function(t,e){var r,i=o.buildPayload(this.accessToken,t,this.jsonBackup);return (r=this.truncation?this.truncation.truncate(i):n.stringify(i)).error?(e&&e(r.error),null):r.value},s.prototype.postJsonPayload=function(t,e){var r=o.transportOptions(this.transportOptions,"POST");this.transport.postJsonPayload(this.accessToken,r,t,e);},s.prototype.configure=function(t){var e=this.oldOptions;return this.options=n.merge(e,t),this.transportOptions=a(this.options,this.url),void 0!==this.options.accessToken&&(this.accessToken=this.options.accessToken),this},t.exports=s;},function(t,e,r){var n=r(0);t.exports={buildPayload:function(t,e,r){if(!n.isType(e.context,"string")){var o=n.stringify(e.context,r);o.error?e.context="Error: could not serialize 'context'":e.context=o.value||"",e.context.length>255&&(e.context=e.context.substr(0,255));}return {access_token:t,data:e}},getTransportFromOptions:function(t,e,r){var n=e.hostname,o=e.protocol,i=e.port,s=e.path,a=e.search,u=t.timeout,c=t.proxy;if(t.endpoint){var l=r.parse(t.endpoint);n=l.hostname,o=l.protocol,i=l.port,s=l.pathname,a=l.search;}return {timeout:u,hostname:n,protocol:o,port:i,path:s,search:a,proxy:c}},transportOptions:function(t,e){var r=t.protocol||"https:",n=t.port||("http:"===r?80:"https:"===r?443:void 0),o=t.hostname,i=t.path,s=t.timeout;return t.search&&(i+=t.search),t.proxy&&(i=r+"//"+o+i,o=t.proxy.host||t.proxy.hostname,n=t.proxy.port,r=t.proxy.protocol||r),{timeout:s,protocol:r,hostname:o,path:i,port:n,method:e}},appendPathToPath:function(t,e){var r=/\/$/.test(t),n=/^\//.test(e);return r&&n?e=e.substring(1):r||n||(e="/"+e),t+e}};},function(t,e){!function(t){t.console||(t.console={});for(var e,r,n=t.console,o=function(){},i=["memory"],s="assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn".split(",");e=i.pop();)n[e]||(n[e]={});for(;r=s.pop();)n[r]||(n[r]=o);}("undefined"==typeof window?this:window);},function(t,e,r){var n={ieVersion:function(){if("undefined"!=typeof document){for(var t=3,e=document.createElement("div"),r=e.getElementsByTagName("i");e.innerHTML="\x3c!--[if gt IE "+ ++t+"]><i></i><![endif]--\x3e",r[0];);return t>4?t:void 0}}};t.exports=n;},function(t,e,r){function n(t,e,r,n){t._rollbarWrappedError&&(n[4]||(n[4]=t._rollbarWrappedError),n[5]||(n[5]=t._rollbarWrappedError._rollbarContext),t._rollbarWrappedError=null);var o=e.handleUncaughtException.apply(e,n);r&&r.apply(t,n),"anonymous"===o&&(e.anonymousErrorsPending+=1);}t.exports={captureUncaughtExceptions:function(t,e,r){if(t){var o;if("function"==typeof e._rollbarOldOnError)o=e._rollbarOldOnError;else if(t.onerror){for(o=t.onerror;o._rollbarOldOnError;)o=o._rollbarOldOnError;e._rollbarOldOnError=o;}e.handleAnonymousErrors();var i=function(){var r=Array.prototype.slice.call(arguments,0);n(t,e,o,r);};r&&(i._rollbarOldOnError=o),t.onerror=i;}},captureUnhandledRejections:function(t,e,r){if(t){"function"==typeof t._rollbarURH&&t._rollbarURH.belongsToShim&&t.removeEventListener("unhandledrejection",t._rollbarURH);var n=function(t){var r,n,o;try{r=t.reason;}catch(t){r=void 0;}try{n=t.promise;}catch(t){n="[unhandledrejection] error getting `promise` from event";}try{o=t.detail,!r&&o&&(r=o.reason,n=o.promise);}catch(t){}r||(r="[unhandledrejection] error getting `reason` from event"),e&&e.handleUnhandledRejection&&e.handleUnhandledRejection(r,n);};n.belongsToShim=r,t._rollbarURH=n,t.addEventListener("unhandledrejection",n);}}};},function(t,e,r){var n=r(0),o=r(1);function i(t){this.truncation=t;}function s(){var t="undefined"!=typeof window&&window||"undefined"!=typeof self&&self,e=t&&t.Zone&&t.Zone.current,r=Array.prototype.slice.call(arguments);if(e&&"angular"===e._name){var n=e._parent;n.run((function(){a.apply(void 0,r);}));}else a.apply(void 0,r);}function a(t,e,r,i,s,a,c){if("undefined"!=typeof RollbarProxy)return function(t,e){(new RollbarProxy).sendJsonPayload(t,(function(t){}),(function(t){e(new Error(t));}));}(i,s);var l;if(!(l=a?a():function(){var t,e,r=[function(){return new XMLHttpRequest},function(){return new ActiveXObject("Msxml2.XMLHTTP")},function(){return new ActiveXObject("Msxml3.XMLHTTP")},function(){return new ActiveXObject("Microsoft.XMLHTTP")}],n=r.length;for(e=0;e<n;e++)try{t=r[e]();break}catch(t){}return t}()))return s(new Error("No way to send a request"));try{try{var p=function(){try{if(p&&4===l.readyState){p=void 0;var t=n.jsonParse(l.responseText);if((i=l)&&i.status&&200===i.status)return void s(t.error,t.value);if(function(t){return t&&n.isType(t.status,"number")&&t.status>=400&&t.status<600}(l)){if(403===l.status){var e=t.value&&t.value.message;o.error(e);}s(new Error(String(l.status)));}else {s(u("XHR response had no status code (likely connection failure)"));}}}catch(t){var r;r=t&&t.stack?t:new Error(t),s(r);}var i;};l.open(r,e,!0),l.setRequestHeader&&(l.setRequestHeader("Content-Type","application/json"),l.setRequestHeader("X-Rollbar-Access-Token",t)),n.isFiniteNumber(c)&&(l.timeout=c),l.onreadystatechange=p,l.send(i);}catch(t){if("undefined"!=typeof XDomainRequest){if(!window||!window.location)return s(new Error("No window available during request, unknown environment"));"http:"===window.location.href.substring(0,5)&&"https"===e.substring(0,5)&&(e="http"+e.substring(5));var f=new XDomainRequest;f.onprogress=function(){},f.ontimeout=function(){s(u("Request timed out","ETIMEDOUT"));},f.onerror=function(){s(new Error("Error during request"));},f.onload=function(){var t=n.jsonParse(f.responseText);s(t.error,t.value);},f.open(r,e,!0),f.send(i);}else s(new Error("Cannot find a method to transport a request"));}}catch(t){s(t);}}function u(t,e){var r=new Error(t);return r.code=e||"ENOTFOUND",r}i.prototype.get=function(t,e,r,o,i){o&&n.isFunction(o)||(o=function(){}),n.addParamsAndAccessTokenToPath(t,e,r);s(t,n.formatUrl(e),"GET",null,o,i,e.timeout);},i.prototype.post=function(t,e,r,o,i){if(o&&n.isFunction(o)||(o=function(){}),!r)return o(new Error("Cannot send empty request"));var a;if((a=this.truncation?this.truncation.truncate(r):n.stringify(r)).error)return o(a.error);var u=a.value;s(t,n.formatUrl(e),"POST",u,o,i,e.timeout);},i.prototype.postJsonPayload=function(t,e,r,o,i){o&&n.isFunction(o)||(o=function(){});s(t,n.formatUrl(e),"POST",r,o,i,e.timeout);},t.exports=i;},function(t,e,r){var n=r(0),o=r(3),i=r(1);function s(t,e,r){var o=t.message,i=t.custom;o||(o="Item sent with null or missing arguments.");var s={body:o};i&&(s.extra=n.merge(i)),n.set(t,"data.body",{message:s}),r(null,t);}function a(t){var e=t.stackInfo.stack;return e&&0===e.length&&t._unhandledStackInfo&&t._unhandledStackInfo.stack&&(e=t._unhandledStackInfo.stack),e}function u(t,e,r){var i=t&&t.data.description,s=t&&t.custom,u=a(t),l=o.guessErrorClass(e.message),p={exception:{class:c(e,l[0],r),message:l[1]}};if(i&&(p.exception.description=i),u){var f,h,d,m,g,v,y,b;for(0===u.length&&(p.exception.stack=e.rawStack,p.exception.raw=String(e.rawException)),p.frames=[],y=0;y<u.length;++y)h={filename:(f=u[y]).url?n.sanitizeUrl(f.url):"(unknown)",lineno:f.line||null,method:f.func&&"?"!==f.func?f.func:"[anonymous]",colno:f.column},r.sendFrameUrl&&(h.url=f.url),h.method&&h.method.endsWith&&h.method.endsWith("_rollbar_wrapped")||(d=m=g=null,(v=f.context?f.context.length:0)&&(b=Math.floor(v/2),m=f.context.slice(0,b),d=f.context[b],g=f.context.slice(b)),d&&(h.code=d),(m||g)&&(h.context={},m&&m.length&&(h.context.pre=m),g&&g.length&&(h.context.post=g)),f.args&&(h.args=f.args),p.frames.push(h));p.frames.reverse(),s&&(p.extra=n.merge(s));}return p}function c(t,e,r){return t.name?t.name:r.guessErrorClass?e:"(unknown)"}t.exports={handleDomException:function(t,e,r){if(t.err&&"DOMException"===o.Stack(t.err).name){var n=new Error;n.name=t.err.name,n.message=t.err.message,n.stack=t.err.stack,n.nested=t.err,t.err=n;}r(null,t);},handleItemWithError:function(t,e,r){if(t.data=t.data||{},t.err)try{t.stackInfo=t.err._savedStackTrace||o.parse(t.err,t.skipFrames),e.addErrorContext&&function(t){var e=[],r=t.err;e.push(r);for(;r.nested;)r=r.nested,e.push(r);n.addErrorContext(t,e);}(t);}catch(e){i.error("Error while parsing the error object.",e);try{t.message=t.err.message||t.err.description||t.message||String(t.err);}catch(e){t.message=String(t.err)||String(e);}delete t.err;}r(null,t);},ensureItemHasSomethingToSay:function(t,e,r){t.message||t.stackInfo||t.custom||r(new Error("No message, stack info, or custom data"),null),r(null,t);},addBaseInfo:function(t,e,r){var o=e.payload&&e.payload.environment||e.environment;t.data=n.merge(t.data,{environment:o,level:t.level,endpoint:e.endpoint,platform:"browser",framework:"browser-js",language:"javascript",server:{},uuid:t.uuid,notifier:{name:"rollbar-browser-js",version:e.version},custom:t.custom}),r(null,t);},addRequestInfo:function(t){return function(e,r,o){if(!t||!t.location)return o(null,e);var i="$remote_ip";r.captureIp?!0!==r.captureIp&&(i+="_anonymize"):i=null,n.set(e,"data.request",{url:t.location.href,query_string:t.location.search,user_ip:i}),o(null,e);}},addClientInfo:function(t){return function(e,r,o){if(!t)return o(null,e);var i=t.navigator||{},s=t.screen||{};n.set(e,"data.client",{runtime_ms:e.timestamp-t._rollbarStartTime,timestamp:Math.round(e.timestamp/1e3),javascript:{browser:i.userAgent,language:i.language,cookie_enabled:i.cookieEnabled,screen:{width:s.width,height:s.height}}}),o(null,e);}},addPluginInfo:function(t){return function(e,r,o){if(!t||!t.navigator)return o(null,e);for(var i,s=[],a=t.navigator.plugins||[],u=0,c=a.length;u<c;++u)i=a[u],s.push({name:i.name,description:i.description});n.set(e,"data.client.javascript.plugins",s),o(null,e);}},addBody:function(t,e,r){t.stackInfo?t.stackInfo.traceChain?function(t,e,r){for(var o=t.stackInfo.traceChain,i=[],s=o.length,a=0;a<s;a++){var c=u(t,o[a],e);i.push(c);}n.set(t,"data.body",{trace_chain:i}),r(null,t);}(t,e,r):function(t,e,r){if(a(t)){var i=u(t,t.stackInfo,e);n.set(t,"data.body",{trace:i}),r(null,t);}else {var l=t.stackInfo,p=o.guessErrorClass(l.message),f=c(l,p[0],e),h=p[1];t.message=f+": "+h,s(t,e,r);}}(t,e,r):s(t,e,r);},addScrubber:function(t){return function(e,r,n){if(t){var o=r.scrubFields||[],i=r.scrubPaths||[];e.data=t(e.data,o,i);}n(null,e);}}};},function(t,e,r){var n,o,i;!function(s,a){o=[r(23)],void 0===(i="function"==typeof(n=function(t){var e=/(^|@)\S+:\d+/,r=/^\s*at .*(\S+:\d+|\(native\))/m,n=/^(eval@)?(\[native code])?$/;return {parse:function(t){if(void 0!==t.stacktrace||void 0!==t["opera#sourceloc"])return this.parseOpera(t);if(t.stack&&t.stack.match(r))return this.parseV8OrIE(t);if(t.stack)return this.parseFFOrSafari(t);throw new Error("Cannot parse given Error object")},extractLocation:function(t){if(-1===t.indexOf(":"))return [t];var e=/(.+?)(?::(\d+))?(?::(\d+))?$/.exec(t.replace(/[()]/g,""));return [e[1],e[2]||void 0,e[3]||void 0]},parseV8OrIE:function(e){return e.stack.split("\n").filter((function(t){return !!t.match(r)}),this).map((function(e){e.indexOf("(eval ")>-1&&(e=e.replace(/eval code/g,"eval").replace(/(\(eval at [^()]*)|(\),.*$)/g,""));var r=e.replace(/^\s+/,"").replace(/\(eval code/g,"("),n=r.match(/ (\((.+):(\d+):(\d+)\)$)/),o=(r=n?r.replace(n[0],""):r).split(/\s+/).slice(1),i=this.extractLocation(n?n[1]:o.pop()),s=o.join(" ")||void 0,a=["eval","<anonymous>"].indexOf(i[0])>-1?void 0:i[0];return new t({functionName:s,fileName:a,lineNumber:i[1],columnNumber:i[2],source:e})}),this)},parseFFOrSafari:function(e){return e.stack.split("\n").filter((function(t){return !t.match(n)}),this).map((function(e){if(e.indexOf(" > eval")>-1&&(e=e.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g,":$1")),-1===e.indexOf("@")&&-1===e.indexOf(":"))return new t({functionName:e});var r=/((.*".+"[^@]*)?[^@]*)(?:@)/,n=e.match(r),o=n&&n[1]?n[1]:void 0,i=this.extractLocation(e.replace(r,""));return new t({functionName:o,fileName:i[0],lineNumber:i[1],columnNumber:i[2],source:e})}),this)},parseOpera:function(t){return !t.stacktrace||t.message.indexOf("\n")>-1&&t.message.split("\n").length>t.stacktrace.split("\n").length?this.parseOpera9(t):t.stack?this.parseOpera11(t):this.parseOpera10(t)},parseOpera9:function(e){for(var r=/Line (\d+).*script (?:in )?(\S+)/i,n=e.message.split("\n"),o=[],i=2,s=n.length;i<s;i+=2){var a=r.exec(n[i]);a&&o.push(new t({fileName:a[2],lineNumber:a[1],source:n[i]}));}return o},parseOpera10:function(e){for(var r=/Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i,n=e.stacktrace.split("\n"),o=[],i=0,s=n.length;i<s;i+=2){var a=r.exec(n[i]);a&&o.push(new t({functionName:a[3]||void 0,fileName:a[2],lineNumber:a[1],source:n[i]}));}return o},parseOpera11:function(r){return r.stack.split("\n").filter((function(t){return !!t.match(e)&&!t.match(/^Error created at/)}),this).map((function(e){var r,n=e.split("@"),o=this.extractLocation(n.pop()),i=n.shift()||"",s=i.replace(/<anonymous function(: (\w+))?>/,"$2").replace(/\([^)]*\)/g,"")||void 0;i.match(/\(([^)]*)\)/)&&(r=i.replace(/^[^(]+\(([^)]*)\)$/,"$1"));var a=void 0===r||"[arguments not available]"===r?void 0:r.split(",");return new t({functionName:s,args:a,fileName:o[0],lineNumber:o[1],columnNumber:o[2],source:e})}),this)}}})?n.apply(e,o):n)||(t.exports=i);}();},function(t,e,r){var n,o,i;!function(r,s){o=[],void 0===(i="function"==typeof(n=function(){function t(t){return t.charAt(0).toUpperCase()+t.substring(1)}function e(t){return function(){return this[t]}}var r=["isConstructor","isEval","isNative","isToplevel"],n=["columnNumber","lineNumber"],o=["fileName","functionName","source"],i=r.concat(n,o,["args"],["evalOrigin"]);function s(e){if(e)for(var r=0;r<i.length;r++)void 0!==e[i[r]]&&this["set"+t(i[r])](e[i[r]]);}s.prototype={getArgs:function(){return this.args},setArgs:function(t){if("[object Array]"!==Object.prototype.toString.call(t))throw new TypeError("Args must be an Array");this.args=t;},getEvalOrigin:function(){return this.evalOrigin},setEvalOrigin:function(t){if(t instanceof s)this.evalOrigin=t;else {if(!(t instanceof Object))throw new TypeError("Eval Origin must be an Object or StackFrame");this.evalOrigin=new s(t);}},toString:function(){var t=this.getFileName()||"",e=this.getLineNumber()||"",r=this.getColumnNumber()||"",n=this.getFunctionName()||"";return this.getIsEval()?t?"[eval] ("+t+":"+e+":"+r+")":"[eval]:"+e+":"+r:n?n+" ("+t+":"+e+":"+r+")":t+":"+e+":"+r}},s.fromString=function(t){var e=t.indexOf("("),r=t.lastIndexOf(")"),n=t.substring(0,e),o=t.substring(e+1,r).split(","),i=t.substring(r+1);if(0===i.indexOf("@"))var a=/@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(i,""),u=a[1],c=a[2],l=a[3];return new s({functionName:n,args:o||void 0,fileName:u,lineNumber:c||void 0,columnNumber:l||void 0})};for(var a=0;a<r.length;a++)s.prototype["get"+t(r[a])]=e(r[a]),s.prototype["set"+t(r[a])]=function(t){return function(e){this[t]=Boolean(e);}}(r[a]);for(var u=0;u<n.length;u++)s.prototype["get"+t(n[u])]=e(n[u]),s.prototype["set"+t(n[u])]=function(t){return function(e){if(r=e,isNaN(parseFloat(r))||!isFinite(r))throw new TypeError(t+" must be a Number");var r;this[t]=Number(e);}}(n[u]);for(var c=0;c<o.length;c++)s.prototype["get"+t(o[c])]=e(o[c]),s.prototype["set"+t(o[c])]=function(t){return function(e){this[t]=String(e);}}(o[c]);return s})?n.apply(e,o):n)||(t.exports=i);}();},function(t,e,r){var n=r(0);function o(t,e){n.isFunction(t[e])&&(t[e]=t[e].toString());}t.exports={itemToPayload:function(t,e,r){var o=e.payload||{};o.body&&delete o.body;var i=n.merge(t.data,o);t._isUncaught&&(i._isUncaught=!0),t._originalArgs&&(i._originalArgs=t._originalArgs),r(null,i);},addTelemetryData:function(t,e,r){t.telemetryEvents&&n.set(t,"data.body.telemetry",t.telemetryEvents),r(null,t);},addMessageWithError:function(t,e,r){if(t.message){var o="data.body.trace_chain.0",i=n.get(t,o);if(i||(o="data.body.trace",i=n.get(t,o)),i){if(!i.exception||!i.exception.description)return n.set(t,o+".exception.description",t.message),void r(null,t);var s=n.get(t,o+".extra")||{},a=n.merge(s,{message:t.message});n.set(t,o+".extra",a);}r(null,t);}else r(null,t);},userTransform:function(t){return function(e,r,o){var i=n.merge(e),s=null;try{n.isFunction(r.transform)&&(s=r.transform(i.data,e));}catch(n){return r.transform=null,t.error("Error while calling custom transform() function. Removing custom transform().",n),void o(null,e)}n.isPromise(s)?s.then((function(t){t&&(i.data=t),o(null,i);}),(function(t){o(t,e);})):o(null,i);}},addConfigToPayload:function(t,e,r){if(!e.sendConfig)return r(null,t);var o=n.get(t,"data.custom")||{};o._rollbarConfig=e,t.data.custom=o,r(null,t);},addConfiguredOptions:function(t,e,r){var n=e._configuredOptions;o(n,"transform"),o(n,"checkIgnore"),o(n,"onSendCallback"),delete n.accessToken,t.data.notifier.configured_options=n,r(null,t);},addDiagnosticKeys:function(t,e,r){var o=n.merge(t.notifier.client.notifier.diagnostic,t.diagnostic);if(n.get(t,"err._isAnonymous")&&(o.is_anonymous=!0),t._isUncaught&&(o.is_uncaught=t._isUncaught),t.err)try{o.raw_error={message:t.err.message,name:t.err.name,constructor_name:t.err.constructor&&t.err.constructor.name,filename:t.err.fileName,line:t.err.lineNumber,column:t.err.columnNumber,stack:t.err.stack};}catch(t){o.raw_error={failed:String(t)};}t.data.notifier.diagnostic=n.merge(t.data.notifier.diagnostic,o),r(null,t);}};},function(t,e,r){var n=r(0);t.exports={checkIgnore:function(t,e){return !n.get(e,"plugins.jquery.ignoreAjaxErrors")||!n.get(t,"body.message.extra.isAjax")}};},function(t,e,r){var n=r(0);function o(t,e,r){if(!t)return !r;var o,i,s=t.frames;if(!s||0===s.length)return !r;for(var a=e.length,u=s.length,c=0;c<u;c++){if(o=s[c].filename,!n.isType(o,"string"))return !r;for(var l=0;l<a;l++)if(i=e[l],new RegExp(i).test(o))return !0}return !1}function i(t,e,r,i){var s,a,u=!1;"blocklist"===r&&(u=!0);try{if(s=u?e.hostBlockList:e.hostSafeList,a=n.get(t,"body.trace_chain")||[n.get(t,"body.trace")],!s||0===s.length)return !u;if(0===a.length||!a[0])return !u;for(var c=a.length,l=0;l<c;l++)if(o(a[l],s,u))return !0}catch(t){u?e.hostBlockList=null:e.hostSafeList=null;var p=u?"hostBlockList":"hostSafeList";return i.error("Error while reading your configuration's "+p+" option. Removing custom "+p+".",t),!u}return !1}t.exports={checkLevel:function(t,e){var r=t.level,o=n.LEVELS[r]||0,i=e.reportLevel;return !(o<(n.LEVELS[i]||0))},userCheckIgnore:function(t){return function(e,r){var o=!!e._isUncaught;delete e._isUncaught;var i=e._originalArgs;delete e._originalArgs;try{n.isFunction(r.onSendCallback)&&r.onSendCallback(o,i,e);}catch(e){r.onSendCallback=null,t.error("Error while calling onSendCallback, removing",e);}try{if(n.isFunction(r.checkIgnore)&&r.checkIgnore(o,i,e))return !1}catch(e){r.checkIgnore=null,t.error("Error while calling custom checkIgnore(), removing",e);}return !0}},urlIsNotBlockListed:function(t){return function(e,r){return !i(e,r,"blocklist",t)}},urlIsSafeListed:function(t){return function(e,r){return i(e,r,"safelist",t)}},messageIsIgnored:function(t){return function(e,r){var o,i,s,a,u,c;try{if(!1,!(s=r.ignoredMessages)||0===s.length)return !0;if(0===(c=function(t){var e=t.body,r=[];if(e.trace_chain)for(var o=e.trace_chain,i=0;i<o.length;i++){var s=o[i];r.push(n.get(s,"exception.message"));}e.trace&&r.push(n.get(e,"trace.exception.message"));e.message&&r.push(n.get(e,"message.body"));return r}(e)).length)return !0;for(a=s.length,o=0;o<a;o++)for(u=new RegExp(s[o],"gi"),i=0;i<c.length;i++)if(u.test(c[i]))return !1}catch(e){r.ignoredMessages=null,t.error("Error while reading your configuration's ignoredMessages option. Removing custom ignoredMessages.");}return !0}}};},function(t,e,r){t.exports={version:"2.24.0",endpoint:"api.rollbar.com/api/1/item/",logLevel:"debug",reportLevel:"debug",uncaughtErrorLevel:"error",maxItems:0,itemsPerMin:60};},function(t,e,r){t.exports={scrubFields:["pw","pass","passwd","password","secret","confirm_password","confirmPassword","password_confirmation","passwordConfirmation","access_token","accessToken","X-Rollbar-Access-Token","secret_key","secretKey","secretToken","cc-number","card number","cardnumber","cardnum","ccnum","ccnumber","cc num","creditcardnumber","credit card number","newcreditcardnumber","new credit card","creditcardno","credit card no","card#","card #","cc-csc","cvc","cvc2","cvv2","ccv2","security code","card verification","name on credit card","name on card","nameoncard","cardholder","card holder","name des karteninhabers","ccname","card type","cardtype","cc type","cctype","payment type","expiration date","expirationdate","expdate","cc-exp","ccmonth","ccyear"]};},function(t,e,r){var n=r(0);function o(t){this.queue=[],this.options=n.merge(t);var e=this.options.maxTelemetryEvents||100;this.maxQueueSize=Math.max(0,Math.min(e,100));}function i(t,e){if(e)return e;return {error:"error",manual:"info"}[t]||"info"}o.prototype.configure=function(t){var e=this.options;this.options=n.merge(e,t);var r=this.options.maxTelemetryEvents||100,o=Math.max(0,Math.min(r,100)),i=0;this.maxQueueSize>o&&(i=this.maxQueueSize-o),this.maxQueueSize=o,this.queue.splice(0,i);},o.prototype.copyEvents=function(){var t=Array.prototype.slice.call(this.queue,0);if(n.isFunction(this.options.filterTelemetry))try{for(var e=t.length;e--;)this.options.filterTelemetry(t[e])&&t.splice(e,1);}catch(t){this.options.filterTelemetry=null;}return t},o.prototype.capture=function(t,e,r,o,s){var a={level:i(t,r),type:t,timestamp_ms:s||n.now(),body:e,source:"client"};o&&(a.uuid=o);try{if(n.isFunction(this.options.filterTelemetry)&&this.options.filterTelemetry(a))return !1}catch(t){this.options.filterTelemetry=null;}return this.push(a),a},o.prototype.captureEvent=function(t,e,r,n){return this.capture(t,e,r,n)},o.prototype.captureError=function(t,e,r,n){var o={message:t.message||String(t)};return t.stack&&(o.stack=t.stack),this.capture("error",o,e,r,n)},o.prototype.captureLog=function(t,e,r,n){return this.capture("log",{message:t},e,r,n)},o.prototype.captureNetwork=function(t,e,r,n){e=e||"xhr",t.subtype=t.subtype||e,n&&(t.request=n);var o=this.levelFromStatus(t.status_code);return this.capture("network",t,o,r)},o.prototype.levelFromStatus=function(t){return t>=200&&t<400?"info":0===t||t>=400?"error":"info"},o.prototype.captureDom=function(t,e,r,n,o){var i={subtype:t,element:e};return void 0!==r&&(i.value=r),void 0!==n&&(i.checked=n),this.capture("dom",i,"info",o)},o.prototype.captureNavigation=function(t,e,r){return this.capture("navigation",{from:t,to:e},"info",r)},o.prototype.captureDomContentLoaded=function(t){return this.capture("navigation",{subtype:"DOMContentLoaded"},"info",void 0,t&&t.getTime())},o.prototype.captureLoad=function(t){return this.capture("navigation",{subtype:"load"},"info",void 0,t&&t.getTime())},o.prototype.captureConnectivityChange=function(t,e){return this.captureNetwork({change:t},"connectivity",e)},o.prototype._captureRollbarItem=function(t){if(this.options.includeItemsInTelemetry)return t.err?this.captureError(t.err,t.level,t.uuid,t.timestamp):t.message?this.captureLog(t.message,t.level,t.uuid,t.timestamp):t.custom?this.capture("log",t.custom,t.level,t.uuid,t.timestamp):void 0},o.prototype.push=function(t){this.queue.push(t),this.queue.length>this.maxQueueSize&&this.queue.shift();},t.exports=o;},function(t,e,r){var n=r(0),o=r(4),i=r(2),s=r(31),a={network:!0,networkResponseHeaders:!1,networkResponseBody:!1,networkRequestHeaders:!1,networkRequestBody:!1,networkErrorOnHttp5xx:!1,networkErrorOnHttp4xx:!1,networkErrorOnHttp0:!1,log:!0,dom:!0,navigation:!0,connectivity:!0,contentSecurityPolicy:!0,errorOnContentSecurityPolicy:!1};function u(t,e,r,n,o){var i=t[e];t[e]=r(i),n&&n[o].push([t,e,i]);}function c(t,e){for(var r;t[e].length;)(r=t[e].shift())[0][r[1]]=r[2];}function l(t,e,r,o,i){this.options=t;var s=t.autoInstrument;!1===t.enabled||!1===s?this.autoInstrument={}:(n.isType(s,"object")||(s=a),this.autoInstrument=n.merge(a,s)),this.scrubTelemetryInputs=!!t.scrubTelemetryInputs,this.telemetryScrubber=t.telemetryScrubber,this.defaultValueScrubber=function(t){for(var e=[],r=0;r<t.length;++r)e.push(new RegExp(t[r],"i"));return function(t){var r=function(t){if(!t||!t.attributes)return null;for(var e=t.attributes,r=0;r<e.length;++r)if("name"===e[r].key)return e[r].value;return null}(t);if(!r)return !1;for(var n=0;n<e.length;++n)if(e[n].test(r))return !0;return !1}}(t.scrubFields),this.telemeter=e,this.rollbar=r,this.diagnostic=r.client.notifier.diagnostic,this._window=o||{},this._document=i||{},this.replacements={network:[],log:[],navigation:[],connectivity:[]},this.eventRemovers={dom:[],connectivity:[],contentsecuritypolicy:[]},this._location=this._window.location,this._lastHref=this._location&&this._location.href;}l.prototype.configure=function(t){this.options=n.merge(this.options,t);var e=t.autoInstrument,r=n.merge(this.autoInstrument);!1===t.enabled||!1===e?this.autoInstrument={}:(n.isType(e,"object")||(e=a),this.autoInstrument=n.merge(a,e)),this.instrument(r),void 0!==t.scrubTelemetryInputs&&(this.scrubTelemetryInputs=!!t.scrubTelemetryInputs),void 0!==t.telemetryScrubber&&(this.telemetryScrubber=t.telemetryScrubber);},l.prototype.instrument=function(t){!this.autoInstrument.network||t&&t.network?!this.autoInstrument.network&&t&&t.network&&this.deinstrumentNetwork():this.instrumentNetwork(),!this.autoInstrument.log||t&&t.log?!this.autoInstrument.log&&t&&t.log&&this.deinstrumentConsole():this.instrumentConsole(),!this.autoInstrument.dom||t&&t.dom?!this.autoInstrument.dom&&t&&t.dom&&this.deinstrumentDom():this.instrumentDom(),!this.autoInstrument.navigation||t&&t.navigation?!this.autoInstrument.navigation&&t&&t.navigation&&this.deinstrumentNavigation():this.instrumentNavigation(),!this.autoInstrument.connectivity||t&&t.connectivity?!this.autoInstrument.connectivity&&t&&t.connectivity&&this.deinstrumentConnectivity():this.instrumentConnectivity(),!this.autoInstrument.contentSecurityPolicy||t&&t.contentSecurityPolicy?!this.autoInstrument.contentSecurityPolicy&&t&&t.contentSecurityPolicy&&this.deinstrumentContentSecurityPolicy():this.instrumentContentSecurityPolicy();},l.prototype.deinstrumentNetwork=function(){c(this.replacements,"network");},l.prototype.instrumentNetwork=function(){var t=this;function e(e,r){e in r&&n.isFunction(r[e])&&u(r,e,(function(e){return t.rollbar.wrap(e)}));}if("XMLHttpRequest"in this._window){var r=this._window.XMLHttpRequest.prototype;u(r,"open",(function(t){return function(e,r){return n.isType(r,"string")&&(this.__rollbar_xhr?(this.__rollbar_xhr.method=e,this.__rollbar_xhr.url=r,this.__rollbar_xhr.status_code=null,this.__rollbar_xhr.start_time_ms=n.now(),this.__rollbar_xhr.end_time_ms=null):this.__rollbar_xhr={method:e,url:r,status_code:null,start_time_ms:n.now(),end_time_ms:null}),t.apply(this,arguments)}}),this.replacements,"network"),u(r,"setRequestHeader",(function(e){return function(r,o){return this.__rollbar_xhr||(this.__rollbar_xhr={}),n.isType(r,"string")&&n.isType(o,"string")&&(t.autoInstrument.networkRequestHeaders&&(this.__rollbar_xhr.request_headers||(this.__rollbar_xhr.request_headers={}),this.__rollbar_xhr.request_headers[r]=o),"content-type"===r.toLowerCase()&&(this.__rollbar_xhr.request_content_type=o)),e.apply(this,arguments)}}),this.replacements,"network"),u(r,"send",(function(r){return function(o){var i=this;function s(){if(i.__rollbar_xhr&&(null===i.__rollbar_xhr.status_code&&(i.__rollbar_xhr.status_code=0,t.autoInstrument.networkRequestBody&&(i.__rollbar_xhr.request=o),i.__rollbar_event=t.captureNetwork(i.__rollbar_xhr,"xhr",void 0)),i.readyState<2&&(i.__rollbar_xhr.start_time_ms=n.now()),i.readyState>3)){i.__rollbar_xhr.end_time_ms=n.now();var e=null;if(i.__rollbar_xhr.response_content_type=i.getResponseHeader("Content-Type"),t.autoInstrument.networkResponseHeaders){var r=t.autoInstrument.networkResponseHeaders;e={};try{var s,a;if(!0===r){var u=i.getAllResponseHeaders();if(u){var c,l,p=u.trim().split(/[\r\n]+/);for(a=0;a<p.length;a++)s=(c=p[a].split(": ")).shift(),l=c.join(": "),e[s]=l;}}else for(a=0;a<r.length;a++)e[s=r[a]]=i.getResponseHeader(s);}catch(t){}}var f=null;if(t.autoInstrument.networkResponseBody)try{f=i.responseText;}catch(t){}var h=null;(f||e)&&(h={},f&&(t.isJsonContentType(i.__rollbar_xhr.response_content_type)?h.body=t.scrubJson(f):h.body=f),e&&(h.headers=e)),h&&(i.__rollbar_xhr.response=h);try{var d=i.status;d=1223===d?204:d,i.__rollbar_xhr.status_code=d,i.__rollbar_event.level=t.telemeter.levelFromStatus(d),t.errorOnHttpStatus(i.__rollbar_xhr);}catch(t){}}}return e("onload",i),e("onerror",i),e("onprogress",i),"onreadystatechange"in i&&n.isFunction(i.onreadystatechange)?u(i,"onreadystatechange",(function(e){return t.rollbar.wrap(e,void 0,s)})):i.onreadystatechange=s,i.__rollbar_xhr&&t.trackHttpErrors()&&(i.__rollbar_xhr.stack=(new Error).stack),r.apply(this,arguments)}}),this.replacements,"network");}"fetch"in this._window&&u(this._window,"fetch",(function(e){return function(r,o){for(var i=new Array(arguments.length),s=0,a=i.length;s<a;s++)i[s]=arguments[s];var u,c=i[0],l="GET";n.isType(c,"string")?u=c:c&&(u=c.url,c.method&&(l=c.method)),i[1]&&i[1].method&&(l=i[1].method);var p={method:l,url:u,status_code:null,start_time_ms:n.now(),end_time_ms:null};if(i[1]&&i[1].headers){var f=new Headers(i[1].headers);p.request_content_type=f.get("Content-Type"),t.autoInstrument.networkRequestHeaders&&(p.request_headers=t.fetchHeaders(f,t.autoInstrument.networkRequestHeaders));}return t.autoInstrument.networkRequestBody&&(i[1]&&i[1].body?p.request=i[1].body:i[0]&&!n.isType(i[0],"string")&&i[0].body&&(p.request=i[0].body)),t.captureNetwork(p,"fetch",void 0),t.trackHttpErrors()&&(p.stack=(new Error).stack),e.apply(this,i).then((function(e){p.end_time_ms=n.now(),p.status_code=e.status,p.response_content_type=e.headers.get("Content-Type");var r=null;t.autoInstrument.networkResponseHeaders&&(r=t.fetchHeaders(e.headers,t.autoInstrument.networkResponseHeaders));var o=null;return t.autoInstrument.networkResponseBody&&"function"==typeof e.text&&(o=e.clone().text()),(r||o)&&(p.response={},o&&("function"==typeof o.then?o.then((function(e){t.isJsonContentType(p.response_content_type)&&(p.response.body=t.scrubJson(e));})):p.response.body=o),r&&(p.response.headers=r)),t.errorOnHttpStatus(p),e}))}}),this.replacements,"network");},l.prototype.captureNetwork=function(t,e,r){return t.request&&this.isJsonContentType(t.request_content_type)&&(t.request=this.scrubJson(t.request)),this.telemeter.captureNetwork(t,e,r)},l.prototype.isJsonContentType=function(t){return !!(t&&n.isType(t,"string")&&t.toLowerCase().includes("json"))},l.prototype.scrubJson=function(t){return JSON.stringify(o(JSON.parse(t),this.options.scrubFields))},l.prototype.fetchHeaders=function(t,e){var r={};try{var n;if(!0===e){if("function"==typeof t.entries)for(var o=t.entries(),i=o.next();!i.done;)r[i.value[0]]=i.value[1],i=o.next();}else for(n=0;n<e.length;n++){var s=e[n];r[s]=t.get(s);}}catch(t){}return r},l.prototype.trackHttpErrors=function(){return this.autoInstrument.networkErrorOnHttp5xx||this.autoInstrument.networkErrorOnHttp4xx||this.autoInstrument.networkErrorOnHttp0},l.prototype.errorOnHttpStatus=function(t){var e=t.status_code;if(e>=500&&this.autoInstrument.networkErrorOnHttp5xx||e>=400&&this.autoInstrument.networkErrorOnHttp4xx||0===e&&this.autoInstrument.networkErrorOnHttp0){var r=new Error("HTTP request failed with Status "+e);r.stack=t.stack,this.rollbar.error(r,{skipFrames:1});}},l.prototype.deinstrumentConsole=function(){if("console"in this._window&&this._window.console.log)for(var t;this.replacements.log.length;)t=this.replacements.log.shift(),this._window.console[t[0]]=t[1];},l.prototype.instrumentConsole=function(){if("console"in this._window&&this._window.console.log){var t=this,e=this._window.console,r=["debug","info","warn","error","log"];try{for(var o=0,i=r.length;o<i;o++)s(r[o]);}catch(t){this.diagnostic.instrumentConsole={error:t.message};}}function s(r){var o=e[r],i=e,s="warn"===r?"warning":r;e[r]=function(){var e=Array.prototype.slice.call(arguments),r=n.formatArgsAsString(e);t.telemeter.captureLog(r,s),o&&Function.prototype.apply.call(o,i,e);},t.replacements.log.push([r,o]);}},l.prototype.deinstrumentDom=function(){("addEventListener"in this._window||"attachEvent"in this._window)&&this.removeListeners("dom");},l.prototype.instrumentDom=function(){if("addEventListener"in this._window||"attachEvent"in this._window){var t=this.handleClick.bind(this),e=this.handleBlur.bind(this);this.addListener("dom",this._window,"click","onclick",t,!0),this.addListener("dom",this._window,"blur","onfocusout",e,!0);}},l.prototype.handleClick=function(t){try{var e=s.getElementFromEvent(t,this._document),r=e&&e.tagName,n=s.isDescribedElement(e,"a")||s.isDescribedElement(e,"button");r&&(n||s.isDescribedElement(e,"input",["button","submit"]))?this.captureDomEvent("click",e):s.isDescribedElement(e,"input",["checkbox","radio"])&&this.captureDomEvent("input",e,e.value,e.checked);}catch(t){}},l.prototype.handleBlur=function(t){try{var e=s.getElementFromEvent(t,this._document);e&&e.tagName&&(s.isDescribedElement(e,"textarea")?this.captureDomEvent("input",e,e.value):s.isDescribedElement(e,"select")&&e.options&&e.options.length?this.handleSelectInputChanged(e):s.isDescribedElement(e,"input")&&!s.isDescribedElement(e,"input",["button","submit","hidden","checkbox","radio"])&&this.captureDomEvent("input",e,e.value));}catch(t){}},l.prototype.handleSelectInputChanged=function(t){if(t.multiple)for(var e=0;e<t.options.length;e++)t.options[e].selected&&this.captureDomEvent("input",t,t.options[e].value);else t.selectedIndex>=0&&t.options[t.selectedIndex]&&this.captureDomEvent("input",t,t.options[t.selectedIndex].value);},l.prototype.captureDomEvent=function(t,e,r,n){if(void 0!==r)if(this.scrubTelemetryInputs||"password"===s.getElementType(e))r="[scrubbed]";else {var o=s.describeElement(e);this.telemetryScrubber?this.telemetryScrubber(o)&&(r="[scrubbed]"):this.defaultValueScrubber(o)&&(r="[scrubbed]");}var i=s.elementArrayToString(s.treeToArray(e));this.telemeter.captureDom(t,i,r,n);},l.prototype.deinstrumentNavigation=function(){var t=this._window.chrome;!(t&&t.app&&t.app.runtime)&&this._window.history&&this._window.history.pushState&&c(this.replacements,"navigation");},l.prototype.instrumentNavigation=function(){var t=this._window.chrome;if(!(t&&t.app&&t.app.runtime)&&this._window.history&&this._window.history.pushState){var e=this;u(this._window,"onpopstate",(function(t){return function(){var r=e._location.href;e.handleUrlChange(e._lastHref,r),t&&t.apply(this,arguments);}}),this.replacements,"navigation"),u(this._window.history,"pushState",(function(t){return function(){var r=arguments.length>2?arguments[2]:void 0;return r&&e.handleUrlChange(e._lastHref,r+""),t.apply(this,arguments)}}),this.replacements,"navigation");}},l.prototype.handleUrlChange=function(t,e){var r=i.parse(this._location.href),n=i.parse(e),o=i.parse(t);this._lastHref=e,r.protocol===n.protocol&&r.host===n.host&&(e=n.path+(n.hash||"")),r.protocol===o.protocol&&r.host===o.host&&(t=o.path+(o.hash||"")),this.telemeter.captureNavigation(t,e);},l.prototype.deinstrumentConnectivity=function(){("addEventListener"in this._window||"body"in this._document)&&(this._window.addEventListener?this.removeListeners("connectivity"):c(this.replacements,"connectivity"));},l.prototype.instrumentConnectivity=function(){if("addEventListener"in this._window||"body"in this._document)if(this._window.addEventListener)this.addListener("connectivity",this._window,"online",void 0,function(){this.telemeter.captureConnectivityChange("online");}.bind(this),!0),this.addListener("connectivity",this._window,"offline",void 0,function(){this.telemeter.captureConnectivityChange("offline");}.bind(this),!0);else {var t=this;u(this._document.body,"ononline",(function(e){return function(){t.telemeter.captureConnectivityChange("online"),e&&e.apply(this,arguments);}}),this.replacements,"connectivity"),u(this._document.body,"onoffline",(function(e){return function(){t.telemeter.captureConnectivityChange("offline"),e&&e.apply(this,arguments);}}),this.replacements,"connectivity");}},l.prototype.handleCspEvent=function(t){var e="Security Policy Violation: blockedURI: "+t.blockedURI+", violatedDirective: "+t.violatedDirective+", effectiveDirective: "+t.effectiveDirective+", ";t.sourceFile&&(e+="location: "+t.sourceFile+", line: "+t.lineNumber+", col: "+t.columnNumber+", "),e+="originalPolicy: "+t.originalPolicy,this.telemeter.captureLog(e,"error"),this.handleCspError(e);},l.prototype.handleCspError=function(t){this.autoInstrument.errorOnContentSecurityPolicy&&this.rollbar.error(t);},l.prototype.deinstrumentContentSecurityPolicy=function(){"addEventListener"in this._window&&this.removeListeners("contentsecuritypolicy");},l.prototype.instrumentContentSecurityPolicy=function(){if("addEventListener"in this._window){var t=this.handleCspEvent.bind(this);this.addListener("contentsecuritypolicy",this._window,"securitypolicyviolation",null,t,!1);}},l.prototype.addListener=function(t,e,r,n,o,i){e.addEventListener?(e.addEventListener(r,o,i),this.eventRemovers[t].push((function(){e.removeEventListener(r,o,i);}))):n&&(e.attachEvent(n,o),this.eventRemovers[t].push((function(){e.detachEvent(n,o);})));},l.prototype.removeListeners=function(t){for(;this.eventRemovers[t].length;)this.eventRemovers[t].shift()();},t.exports=l;},function(t,e,r){function n(t){return (t.getAttribute("type")||"").toLowerCase()}function o(t){if(!t||!t.tagName)return "";var e=[t.tagName];t.id&&e.push("#"+t.id),t.classes&&e.push("."+t.classes.join("."));for(var r=0;r<t.attributes.length;r++)e.push("["+t.attributes[r].key+'="'+t.attributes[r].value+'"]');return e.join("")}function i(t){if(!t||!t.tagName)return null;var e,r,n,o,i={};i.tagName=t.tagName.toLowerCase(),t.id&&(i.id=t.id),(e=t.className)&&"string"==typeof e&&(i.classes=e.split(/\s+/));var s=["type","name","title","alt"];for(i.attributes=[],o=0;o<s.length;o++)r=s[o],(n=t.getAttribute(r))&&i.attributes.push({key:r,value:n});return i}t.exports={describeElement:i,descriptionToString:o,elementArrayToString:function(t){for(var e,r,n=" > ".length,i=[],s=0,a=t.length-1;a>=0;a--){if(e=o(t[a]),r=s+i.length*n+e.length,a<t.length-1&&r>=83){i.unshift("...");break}i.unshift(e),s+=e.length;}return i.join(" > ")},treeToArray:function(t){for(var e,r=[],n=0;t&&n<5&&"html"!==(e=i(t)).tagName;n++)r.unshift(e),t=t.parentNode;return r},getElementFromEvent:function(t,e){return t.target?t.target:e&&e.elementFromPoint?e.elementFromPoint(t.clientX,t.clientY):void 0},isDescribedElement:function(t,e,r){if(t.tagName.toLowerCase()!==e.toLowerCase())return !1;if(!r)return !0;t=n(t);for(var o=0;o<r.length;o++)if(r[o]===t)return !0;return !1},getElementType:n};},function(t,e,r){var n=r(33);t.exports=n;},function(t,e){t.exports=function(t){var e,r,n,o,i,s,a,u,c,l,p,f,h,d=/[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;function m(t){return t<10?"0"+t:t}function g(){return this.valueOf()}function v(t){return d.lastIndex=0,d.test(t)?'"'+t.replace(d,(function(t){var e=n[t];return "string"==typeof e?e:"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)}))+'"':'"'+t+'"'}"function"!=typeof Date.prototype.toJSON&&(Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+m(this.getUTCMonth()+1)+"-"+m(this.getUTCDate())+"T"+m(this.getUTCHours())+":"+m(this.getUTCMinutes())+":"+m(this.getUTCSeconds())+"Z":null},Boolean.prototype.toJSON=g,Number.prototype.toJSON=g,String.prototype.toJSON=g),"function"!=typeof t.stringify&&(n={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},t.stringify=function(t,n,i){var s;if(e="",r="","number"==typeof i)for(s=0;s<i;s+=1)r+=" ";else "string"==typeof i&&(r=i);if(o=n,n&&"function"!=typeof n&&("object"!=typeof n||"number"!=typeof n.length))throw new Error("JSON.stringify");return function t(n,i){var s,a,u,c,l,p=e,f=i[n];switch(f&&"object"==typeof f&&"function"==typeof f.toJSON&&(f=f.toJSON(n)),"function"==typeof o&&(f=o.call(i,n,f)),typeof f){case"string":return v(f);case"number":return isFinite(f)?String(f):"null";case"boolean":case"null":return String(f);case"object":if(!f)return "null";if(e+=r,l=[],"[object Array]"===Object.prototype.toString.apply(f)){for(c=f.length,s=0;s<c;s+=1)l[s]=t(s,f)||"null";return u=0===l.length?"[]":e?"[\n"+e+l.join(",\n"+e)+"\n"+p+"]":"["+l.join(",")+"]",e=p,u}if(o&&"object"==typeof o)for(c=o.length,s=0;s<c;s+=1)"string"==typeof o[s]&&(u=t(a=o[s],f))&&l.push(v(a)+(e?": ":":")+u);else for(a in f)Object.prototype.hasOwnProperty.call(f,a)&&(u=t(a,f))&&l.push(v(a)+(e?": ":":")+u);return u=0===l.length?"{}":e?"{\n"+e+l.join(",\n"+e)+"\n"+p+"}":"{"+l.join(",")+"}",e=p,u}}("",{"":t})}),"function"!=typeof t.parse&&(t.parse=(l={"\\":"\\",'"':'"',"/":"/",t:"\t",n:"\n",r:"\r",f:"\f",b:"\b"},p={go:function(){i="ok";},firstokey:function(){u=c,i="colon";},okey:function(){u=c,i="colon";},ovalue:function(){i="ocomma";},firstavalue:function(){i="acomma";},avalue:function(){i="acomma";}},f={go:function(){i="ok";},ovalue:function(){i="ocomma";},firstavalue:function(){i="acomma";},avalue:function(){i="acomma";}},h={"{":{go:function(){s.push({state:"ok"}),a={},i="firstokey";},ovalue:function(){s.push({container:a,state:"ocomma",key:u}),a={},i="firstokey";},firstavalue:function(){s.push({container:a,state:"acomma"}),a={},i="firstokey";},avalue:function(){s.push({container:a,state:"acomma"}),a={},i="firstokey";}},"}":{firstokey:function(){var t=s.pop();c=a,a=t.container,u=t.key,i=t.state;},ocomma:function(){var t=s.pop();a[u]=c,c=a,a=t.container,u=t.key,i=t.state;}},"[":{go:function(){s.push({state:"ok"}),a=[],i="firstavalue";},ovalue:function(){s.push({container:a,state:"ocomma",key:u}),a=[],i="firstavalue";},firstavalue:function(){s.push({container:a,state:"acomma"}),a=[],i="firstavalue";},avalue:function(){s.push({container:a,state:"acomma"}),a=[],i="firstavalue";}},"]":{firstavalue:function(){var t=s.pop();c=a,a=t.container,u=t.key,i=t.state;},acomma:function(){var t=s.pop();a.push(c),c=a,a=t.container,u=t.key,i=t.state;}},":":{colon:function(){if(Object.hasOwnProperty.call(a,u))throw new SyntaxError("Duplicate key '"+u+'"');i="ovalue";}},",":{ocomma:function(){a[u]=c,i="okey";},acomma:function(){a.push(c),i="avalue";}},true:{go:function(){c=!0,i="ok";},ovalue:function(){c=!0,i="ocomma";},firstavalue:function(){c=!0,i="acomma";},avalue:function(){c=!0,i="acomma";}},false:{go:function(){c=!1,i="ok";},ovalue:function(){c=!1,i="ocomma";},firstavalue:function(){c=!1,i="acomma";},avalue:function(){c=!1,i="acomma";}},null:{go:function(){c=null,i="ok";},ovalue:function(){c=null,i="ocomma";},firstavalue:function(){c=null,i="acomma";},avalue:function(){c=null,i="acomma";}}},function(t,e){var r,n,o=/^[\u0020\t\n\r]*(?:([,:\[\]{}]|true|false|null)|(-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)|"((?:[^\r\n\t\\\"]|\\(?:["\\\/trnfb]|u[0-9a-fA-F]{4}))*)")/;i="go",s=[];try{for(;r=o.exec(t);)r[1]?h[r[1]][i]():r[2]?(c=+r[2],f[i]()):(n=r[3],c=n.replace(/\\(?:u(.{4})|([^u]))/g,(function(t,e,r){return e?String.fromCharCode(parseInt(e,16)):l[r]})),p[i]()),t=t.slice(r[0].length);}catch(t){i=t;}if("ok"!==i||/[^\u0020\t\n\r]/.test(t))throw i instanceof SyntaxError?i:new SyntaxError("JSON");return "function"==typeof e?function t(r,n){var o,i,s=r[n];if(s&&"object"==typeof s)for(o in c)Object.prototype.hasOwnProperty.call(s,o)&&(void 0!==(i=t(s,o))?s[o]=i:delete s[o]);return e.call(r,n,s)}({"":c},""):c}));};},function(t,e,r){function n(t,e,r){if(e.hasOwnProperty&&e.hasOwnProperty("addEventListener")){for(var n=e.addEventListener;n._rollbarOldAdd&&n.belongsToShim;)n=n._rollbarOldAdd;var o=function(e,r,o){n.call(this,e,t.wrap(r),o);};o._rollbarOldAdd=n,o.belongsToShim=r,e.addEventListener=o;for(var i=e.removeEventListener;i._rollbarOldRemove&&i.belongsToShim;)i=i._rollbarOldRemove;var s=function(t,e,r){i.call(this,t,e&&e._rollbar_wrapped||e,r);};s._rollbarOldRemove=i,s.belongsToShim=r,e.removeEventListener=s;}}t.exports=function(t,e,r){if(t){var o,i,s="EventTarget,Window,Node,ApplicationCache,AudioTrackList,ChannelMergerNode,CryptoOperation,EventSource,FileReader,HTMLUnknownElement,IDBDatabase,IDBRequest,IDBTransaction,KeyOperation,MediaController,MessagePort,ModalWindow,Notification,SVGElementInstance,Screen,TextTrack,TextTrackCue,TextTrackList,WebSocket,WebSocketWorker,Worker,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload".split(",");for(o=0;o<s.length;++o)t[i=s[o]]&&t[i].prototype&&n(e,t[i].prototype,r);}};},function(t,e,r){var n=r(0),o=r(5);function i(t,e){return [t,n.stringify(t,e)]}function s(t,e){var r=t.length;return r>2*e?t.slice(0,e).concat(t.slice(r-e)):t}function a(t,e,r){r=void 0===r?30:r;var o,i=t.data.body;if(i.trace_chain)for(var a=i.trace_chain,u=0;u<a.length;u++)o=s(o=a[u].frames,r),a[u].frames=o;else i.trace&&(o=s(o=i.trace.frames,r),i.trace.frames=o);return [t,n.stringify(t,e)]}function u(t,e){return e&&e.length>t?e.slice(0,t-3).concat("..."):e}function c(t,e,r){return [e=o(e,(function e(r,i,s){switch(n.typeName(i)){case"string":return u(t,i);case"object":case"array":return o(i,e,s);default:return i}})),n.stringify(e,r)]}function l(t){return t.exception&&(delete t.exception.description,t.exception.message=u(255,t.exception.message)),t.frames=s(t.frames,1),t}function p(t,e){var r=t.data.body;if(r.trace_chain)for(var o=r.trace_chain,i=0;i<o.length;i++)o[i]=l(o[i]);else r.trace&&(r.trace=l(r.trace));return [t,n.stringify(t,e)]}function f(t,e){return n.maxByteSize(t)>e}t.exports={truncate:function(t,e,r){r=void 0===r?524288:r;for(var n,o,s,u=[i,a,c.bind(null,1024),c.bind(null,512),c.bind(null,256),p];n=u.shift();)if(t=(o=n(t,e))[0],(s=o[1]).error||!f(s.value,r))return s;return s},raw:i,truncateFrames:a,truncateStrings:c,maybeTruncateValue:u};}])}));

    });

    var Rollbar = /*@__PURE__*/getDefaultExportFromCjs$1(rollbar_umd_min);

    class WalletAdapter extends eventemitter3 {
        constructor(provider, _network) {
            super();
            this._network = _network;
            this._publicKey = null;
            this._popup = null;
            this._handlerAdded = false;
            this._nextRequestId = 1;
            this._autoApprove = false;
            this._responsePromises = new Map();
            this.handleMessage = (e) => {
                if ((this._injectedProvider && e.source === window) ||
                    (e.origin === this._providerUrl?.origin && e.source === this._popup)) {
                    if (e.data.method === 'connected') {
                        const newPublicKey = new PublicKey(e.data.params.publicKey);
                        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {
                            if (this._publicKey && !this._publicKey.equals(newPublicKey)) {
                                this.handleDisconnect();
                            }
                            this._publicKey = newPublicKey;
                            this._autoApprove = !!e.data.params.autoApprove;
                            this.emit('connect', this._publicKey);
                        }
                    }
                    else if (e.data.method === 'disconnected') {
                        this.handleDisconnect();
                    }
                    else if (e.data.result || e.data.error) {
                        const promises = this._responsePromises.get(e.data.id);
                        if (promises) {
                            const [resolve, reject] = promises;
                            if (e.data.result) {
                                resolve(e.data.result);
                            }
                            else {
                                reject(new Error(e.data.error));
                            }
                        }
                    }
                }
            };
            this._beforeUnload = () => {
                void this.disconnect();
            };
            if (isInjectedProvider(provider)) {
                this._injectedProvider = provider;
            }
            else if (isString(provider)) {
                this._providerUrl = new URL(provider);
                this._providerUrl.hash = new URLSearchParams({
                    origin: window.location.origin,
                    network: this._network,
                }).toString();
            }
            else {
                throw new Error('provider parameter must be an injected provider or a URL string.');
            }
        }
        handleConnect() {
            if (!this._handlerAdded) {
                this._handlerAdded = true;
                window.addEventListener('message', this.handleMessage);
                window.addEventListener('beforeunload', this._beforeUnload);
            }
            if (this._injectedProvider) {
                return new Promise((resolve) => {
                    void this.sendRequest('connect', {});
                    resolve();
                });
            }
            else {
                window.name = 'parent';
                this._popup = window.open(this._providerUrl?.toString(), '_blank', 'location,resizable,width=460,height=675');
                return new Promise((resolve) => {
                    this.once('connect', resolve);
                });
            }
        }
        handleDisconnect() {
            if (this._handlerAdded) {
                this._handlerAdded = false;
                window.removeEventListener('message', this.handleMessage);
                window.removeEventListener('beforeunload', this._beforeUnload);
            }
            if (this._publicKey) {
                this._publicKey = null;
                this.emit('disconnect');
            }
            this._responsePromises.forEach(([, reject], id) => {
                this._responsePromises.delete(id);
                reject(new Error('Wallet disconnected'));
            });
        }
        async sendRequest(method, params) {
            if (method !== 'connect' && !this.connected) {
                throw new Error('Wallet not connected');
            }
            const requestId = this._nextRequestId;
            ++this._nextRequestId;
            return new Promise((resolve, reject) => {
                this._responsePromises.set(requestId, [resolve, reject]);
                if (this._injectedProvider) {
                    this._injectedProvider.postMessage({
                        jsonrpc: '2.0',
                        id: requestId,
                        method,
                        params: {
                            network: this._network,
                            ...params,
                        },
                    });
                }
                else {
                    this._popup?.postMessage({
                        jsonrpc: '2.0',
                        id: requestId,
                        method,
                        params,
                    }, this._providerUrl?.origin ?? '');
                    if (!this.autoApprove) {
                        this._popup?.focus();
                    }
                }
            });
        }
        get publicKey() {
            return this._publicKey;
        }
        get connected() {
            return this._publicKey !== null;
        }
        get autoApprove() {
            return this._autoApprove;
        }
        async connect() {
            if (this._popup) {
                this._popup.close();
            }
            await this.handleConnect();
        }
        async disconnect() {
            if (this._injectedProvider) {
                await this.sendRequest('disconnect', {});
            }
            if (this._popup) {
                this._popup.close();
            }
            this.handleDisconnect();
        }
        async sign(data, display) {
            if (!(data instanceof Uint8Array)) {
                throw new Error('Data must be an instance of Uint8Array');
            }
            const response = (await this.sendRequest('sign', {
                data,
                display,
            }));
            const signature = bs58.decode(response.signature);
            const publicKey = new PublicKey(response.publicKey);
            return {
                signature,
                publicKey,
            };
        }
        async signTransaction(transaction) {
            const response = (await this.sendRequest('signTransaction', {
                message: bs58.encode(transaction.serializeMessage()),
            }));
            const signature = bs58.decode(response.signature);
            const publicKey = new PublicKey(response.publicKey);
            transaction.addSignature(publicKey, signature);
            return transaction;
        }
        async signAllTransactions(transactions) {
            const response = (await this.sendRequest('signAllTransactions', {
                messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),
            }));
            const signatures = response.signatures.map((s) => bs58.decode(s));
            const publicKey = new PublicKey(response.publicKey);
            transactions = transactions.map((tx, idx) => {
                tx.addSignature(publicKey, signatures[idx]);
                return tx;
            });
            return transactions;
        }
    }
    function isString(a) {
        return typeof a === 'string';
    }
    function isInjectedProvider(a) {
        return (isObject(a) && 'postMessage' in a && typeof a.postMessage === 'function');
    }
    function isObject(a) {
        return typeof a === 'object' && a !== null;
    }

    var TxnResponse;
    (function (TxnResponse) {
        TxnResponse["Success"] = "SUCCESS";
        TxnResponse["Failed"] = "FAILED";
        TxnResponse["Cancelled"] = "CANCELLED";
    })(TxnResponse || (TxnResponse = {}));

    // Overall app init
    const INIT_FAILED = writable(false);
    // Market
    const MARKET = writable({
        // Accounts
        accountPubkey: {},
        authorityPubkey: {},
        // Hardcode minimum c-ratio to 130% for now
        minColRatio: 1.3,
        // Total value of all reserves
        totalValueLocked: 0,
        // Reserves
        reserves: {},
        reservesArray: [],
        currentReserve: {},
        // Native vs USD UI values
        nativeValues: true,
    });
    // User
    let user$4;
    const USER = writable({
        // Locale
        locale: null,
        geobanned: false,
        // Wallet
        connectingWallet: true,
        wallet: null,
        walletInit: false,
        tradeAction: 'deposit',
        // Assets and position
        assets: null,
        walletBalances: {},
        collateralBalances: {},
        loanBalances: {},
        position: {
            depositedValue: 0,
            borrowedValue: 0,
            colRatio: 0,
            utilizationRate: 0
        },
        // Transaction Logs
        transactionLogs: [],
        transactionLogsInit: true,
        // Notifications
        notifications: [],
        // Add notification
        addNotification: (n) => {
            const notifs = user$4.notifications ?? [];
            notifs.push(n);
            const index = notifs.indexOf(n);
            USER.update(user => {
                user.notifications = notifs;
                return user;
            });
            setTimeout(() => {
                if (user$4.notifications[index] && user$4.notifications[index].text === n.text) {
                    user$4.clearNotification(index);
                }
            }, 5000);
        },
        // Clear notification
        clearNotification: (i) => {
            const notifs = user$4.notifications;
            notifs.splice(i, 1);
            USER.update(user => {
                user.notifications = notifs;
                return user;
            });
        },
        // Settings
        darkTheme: localStorage.getItem('jetDark') === 'true',
        navExpanded: localStorage.getItem('jetNavExpanded') === 'true',
        language: localStorage.getItem('jetPreferredLanguage') ?? 'en',
        rpcNode: localStorage.getItem('jetPreferredNode') ?? '',
        rpcPing: 0,
    });
    USER.subscribe(data => user$4 = data);
    // Copilot
    const COPILOT = writable(null);
    // Program
    const PROGRAM = writable(null);
    const CUSTOM_PROGRAM_ERRORS = writable([]);
    const ANCHOR_WEB3_CONNECTION = writable(undefined);
    const ANCHOR_CODER = writable(undefined);
    const IDL_METADATA = writable(undefined);

    var readBig = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readBigUInt64LE = exports.readBigInt64LE = void 0;
    // https://github.com/nodejs/node/blob/v14.17.0/lib/internal/errors.js#L758
    var ERR_BUFFER_OUT_OF_BOUNDS = function () { return new Error('Attempt to access memory outside buffer bounds'); };
    // https://github.com/nodejs/node/blob/v14.17.0/lib/internal/errors.js#L968
    var ERR_INVALID_ARG_TYPE = function (name, expected, actual) {
        return new Error("The \"" + name + "\" argument must be of type " + expected + ". Received " + actual);
    };
    // https://github.com/nodejs/node/blob/v14.17.0/lib/internal/errors.js#L1262
    var ERR_OUT_OF_RANGE = function (str, range, received) {
        return new Error("The value of \"" + str + " is out of range. It must be " + range + ". Received " + received);
    };
    // https://github.com/nodejs/node/blob/v14.17.0/lib/internal/validators.js#L127-L130
    function validateNumber(value, name) {
        if (typeof value !== 'number')
            throw ERR_INVALID_ARG_TYPE(name, 'number', value);
    }
    // https://github.com/nodejs/node/blob/v14.17.0/lib/internal/buffer.js#L68-L80
    function boundsError(value, length) {
        if (Math.floor(value) !== value) {
            validateNumber(value, 'offset');
            throw ERR_OUT_OF_RANGE('offset', 'an integer', value);
        }
        if (length < 0)
            throw ERR_BUFFER_OUT_OF_BOUNDS();
        throw ERR_OUT_OF_RANGE('offset', ">= 0 and <= " + length, value);
    }
    // https://github.com/nodejs/node/blob/v14.17.0/lib/internal/buffer.js#L129-L145
    function readBigInt64LE(buffer, offset) {
        if (offset === void 0) { offset = 0; }
        validateNumber(offset, 'offset');
        var first = buffer[offset];
        var last = buffer[offset + 7];
        if (first === undefined || last === undefined)
            boundsError(offset, buffer.length - 8);
        // tslint:disable-next-line:no-bitwise
        var val = buffer[offset + 4] + buffer[offset + 5] * Math.pow(2, 8) + buffer[offset + 6] * Math.pow(2, 16) + (last << 24); // Overflow
        return ((BigInt(val) << BigInt(32)) + // tslint:disable-line:no-bitwise
            BigInt(first + buffer[++offset] * Math.pow(2, 8) + buffer[++offset] * Math.pow(2, 16) + buffer[++offset] * Math.pow(2, 24)));
    }
    exports.readBigInt64LE = readBigInt64LE;
    // https://github.com/nodejs/node/blob/v14.17.0/lib/internal/buffer.js#L89-L107
    function readBigUInt64LE(buffer, offset) {
        if (offset === void 0) { offset = 0; }
        validateNumber(offset, 'offset');
        var first = buffer[offset];
        var last = buffer[offset + 7];
        if (first === undefined || last === undefined)
            boundsError(offset, buffer.length - 8);
        var lo = first + buffer[++offset] * Math.pow(2, 8) + buffer[++offset] * Math.pow(2, 16) + buffer[++offset] * Math.pow(2, 24);
        var hi = buffer[++offset] + buffer[++offset] * Math.pow(2, 8) + buffer[++offset] * Math.pow(2, 16) + last * Math.pow(2, 24);
        return BigInt(lo) + (BigInt(hi) << BigInt(32)); // tslint:disable-line:no-bitwise
    }
    exports.readBigUInt64LE = readBigUInt64LE;
    });

    var index_1 = lib;

    var PythConnection_1 = createCommonjsModule(function (module, exports) {
    var __awaiter = (commonjsGlobal$1 && commonjsGlobal$1.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (commonjsGlobal$1 && commonjsGlobal$1.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PythConnection = void 0;

    var ONES = '11111111111111111111111111111111';
    /**
     * Reads Pyth price data from a solana web3 connection. This class uses a callback-driven model,
     * similar to the solana web3 methods for tracking updates to accounts.
     */
    var PythConnection = /** @class */ (function () {
        /** Create a PythConnection that reads its data from an underlying solana web3 connection.
         *  pythProgramKey is the public key of the Pyth program running on the chosen solana cluster.
         */
        function PythConnection(connection, pythProgramKey, commitment) {
            if (commitment === void 0) { commitment = 'finalized'; }
            this.productAccountKeyToProduct = {};
            this.priceAccountKeyToProductAccountKey = {};
            this.callbacks = [];
            this.connection = connection;
            this.pythProgramKey = pythProgramKey;
            this.commitment = commitment;
        }
        PythConnection.prototype.handleProductAccount = function (key, account) {
            var _a = index_1.parseProductData(account.data), priceAccountKey = _a.priceAccountKey; _a.type; var product = _a.product;
            this.productAccountKeyToProduct[key.toString()] = product;
            if (priceAccountKey.toString() !== ONES) {
                this.priceAccountKeyToProductAccountKey[priceAccountKey.toString()] = key.toString();
            }
        };
        PythConnection.prototype.handlePriceAccount = function (key, account) {
            var product = this.productAccountKeyToProduct[this.priceAccountKeyToProductAccountKey[key.toString()]];
            if (product === undefined) {
                // This shouldn't happen since we're subscribed to all of the program's accounts,
                // but let's be good defensive programmers.
                throw new Error('Got a price update for an unknown product. This is a bug in the library, please report it to the developers.');
            }
            var priceData = index_1.parsePriceData(account.data);
            for (var _i = 0, _a = this.callbacks; _i < _a.length; _i++) {
                var callback = _a[_i];
                callback(product, priceData);
            }
        };
        PythConnection.prototype.handleAccount = function (key, account, productOnly) {
            var base = index_1.parseBaseData(account.data);
            // The pyth program owns accounts that don't contain pyth data, which we can safely ignore.
            if (base) {
                switch (index_1.AccountType[base.type]) {
                    case 'Mapping':
                        // We can skip these because we're going to get every account owned by this program anyway.
                        break;
                    case 'Product':
                        this.handleProductAccount(key, account);
                        break;
                    case 'Price':
                        if (!productOnly) {
                            this.handlePriceAccount(key, account);
                        }
                        break;
                    case 'Test':
                        break;
                    default:
                        throw new Error("Unknown account type: " + base.type + ". Try upgrading pyth-client.");
                }
            }
        };
        /** Start receiving price updates. Once this method is called, any registered callbacks will be invoked
         *  each time a Pyth price account is updated.
         */
        PythConnection.prototype.start = function () {
            return __awaiter(this, void 0, void 0, function () {
                var accounts, _i, accounts_1, account;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.connection.getProgramAccounts(this.pythProgramKey, this.commitment)];
                        case 1:
                            accounts = _a.sent();
                            for (_i = 0, accounts_1 = accounts; _i < accounts_1.length; _i++) {
                                account = accounts_1[_i];
                                this.handleAccount(account.pubkey, account.account, true);
                            }
                            this.connection.onProgramAccountChange(this.pythProgramKey, function (keyedAccountInfo, context) {
                                _this.handleAccount(keyedAccountInfo.accountId, keyedAccountInfo.accountInfo, false);
                            }, this.commitment);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /** Register callback to receive price updates. */
        PythConnection.prototype.onPriceChange = function (callback) {
            this.callbacks.push(callback);
        };
        /** Stop receiving price updates. Note that this also currently deletes all registered callbacks. */
        PythConnection.prototype.stop = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    // There's no way to actually turn off the solana web3 subscription x_x, but there should be.
                    // Leave this method in so we don't have to update our API when solana fixes theirs.
                    // In the interim, delete callbacks.
                    this.callbacks = [];
                    return [2 /*return*/];
                });
            });
        };
        return PythConnection;
    }());
    exports.PythConnection = PythConnection;
    });

    var cluster = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPythProgramKeyForCluster = void 0;

    /** Mapping from solana clusters to the public key of the pyth program. */
    var clusterToPythProgramKey = {
        'mainnet-beta': 'FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH',
        devnet: 'gSbePebfvPy7tRqimPoVecS2UsBvYv46ynrzWocc92s',
        testnet: '8tfDNiaEyrV6Q1U4DEXrEigs9DoDtkugzFbybENEbCDz',
    };
    /** Gets the public key of the Pyth program running on the given cluster. */
    function getPythProgramKeyForCluster(cluster) {
        if (clusterToPythProgramKey[cluster] !== undefined) {
            return new web3_js_1.PublicKey(clusterToPythProgramKey[cluster]);
        }
        else {
            throw new Error("Invalid Solana cluster name: " + cluster + ". Valid options are: " + JSON.stringify(Object.keys(clusterToPythProgramKey)));
        }
    }
    exports.getPythProgramKeyForCluster = getPythProgramKeyForCluster;
    });

    var lib = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPythProgramKeyForCluster = exports.PythConnection = exports.parsePriceData = exports.parseProductData = exports.parseMappingData = exports.parseBaseData = exports.MAX_SLOT_DIFFERENCE = exports.AccountType = exports.DeriveType = exports.PriceType = exports.CorpAction = exports.PriceStatus = exports.Version = exports.Version2 = exports.Magic = void 0;



    /** Constants. This section must be kept in sync with the on-chain program. */
    exports.Magic = 0xa1b2c3d4;
    exports.Version2 = 2;
    exports.Version = exports.Version2;
    exports.PriceStatus = ['Unknown', 'Trading', 'Halted', 'Auction'];
    exports.CorpAction = ['NoCorpAct'];
    exports.PriceType = ['Unknown', 'Price'];
    exports.DeriveType = ['Unknown', 'TWAP', 'Volatility'];
    exports.AccountType = ['Unknown', 'Mapping', 'Product', 'Price', 'Test'];
    /** Number of slots that can pass before a publisher's price is no longer included in the aggregate. */
    exports.MAX_SLOT_DIFFERENCE = 25;
    var empty32Buffer = buffer_1.Buffer.alloc(32);
    var PKorNull = function (data) { return (data.equals(empty32Buffer) ? null : new web3_js_1.PublicKey(data)); };
    /** Parse data as a generic Pyth account. Use this method if you don't know the account type. */
    function parseBaseData(data) {
        // data is too short to have the magic number.
        if (data.byteLength < 4) {
            return undefined;
        }
        var magic = data.readUInt32LE(0);
        if (magic === exports.Magic) {
            // program version
            var version = data.readUInt32LE(4);
            // account type
            var type = data.readUInt32LE(8);
            // account used size
            var size = data.readUInt32LE(12);
            return { magic: magic, version: version, type: type, size: size };
        }
        else {
            return undefined;
        }
    }
    exports.parseBaseData = parseBaseData;
    var parseMappingData = function (data) {
        // pyth magic number
        var magic = data.readUInt32LE(0);
        // program version
        var version = data.readUInt32LE(4);
        // account type
        var type = data.readUInt32LE(8);
        // account used size
        var size = data.readUInt32LE(12);
        // number of product accounts
        var numProducts = data.readUInt32LE(16);
        // unused
        // const unused = accountInfo.data.readUInt32LE(20)
        // next mapping account (if any)
        var nextMappingAccount = PKorNull(data.slice(24, 56));
        // read each symbol account
        var offset = 56;
        var productAccountKeys = [];
        for (var i = 0; i < numProducts; i++) {
            var productAccountBytes = data.slice(offset, offset + 32);
            var productAccountKey = new web3_js_1.PublicKey(productAccountBytes);
            offset += 32;
            productAccountKeys.push(productAccountKey);
        }
        return {
            magic: magic,
            version: version,
            type: type,
            size: size,
            nextMappingAccount: nextMappingAccount,
            productAccountKeys: productAccountKeys,
        };
    };
    exports.parseMappingData = parseMappingData;
    var parseProductData = function (data) {
        // pyth magic number
        var magic = data.readUInt32LE(0);
        // program version
        var version = data.readUInt32LE(4);
        // account type
        var type = data.readUInt32LE(8);
        // price account size
        var size = data.readUInt32LE(12);
        // first price account in list
        var priceAccountBytes = data.slice(16, 48);
        var priceAccountKey = new web3_js_1.PublicKey(priceAccountBytes);
        var product = {};
        var idx = 48;
        while (idx < size) {
            var keyLength = data[idx];
            idx++;
            if (keyLength) {
                var key = data.slice(idx, idx + keyLength).toString();
                idx += keyLength;
                var valueLength = data[idx];
                idx++;
                var value = data.slice(idx, idx + valueLength).toString();
                idx += valueLength;
                product[key] = value;
            }
        }
        return { magic: magic, version: version, type: type, size: size, priceAccountKey: priceAccountKey, product: product };
    };
    exports.parseProductData = parseProductData;
    var parseEma = function (data, exponent) {
        // current value of ema
        var valueComponent = readBig.readBigInt64LE(data, 0);
        var value = Number(valueComponent) * Math.pow(10, exponent);
        // numerator state for next update
        var numerator = readBig.readBigInt64LE(data, 8);
        // denominator state for next update
        var denominator = readBig.readBigInt64LE(data, 16);
        return { valueComponent: valueComponent, value: value, numerator: numerator, denominator: denominator };
    };
    var parsePriceInfo = function (data, exponent) {
        // aggregate price
        var priceComponent = readBig.readBigInt64LE(data, 0);
        var price = Number(priceComponent) * Math.pow(10, exponent);
        // aggregate confidence
        var confidenceComponent = readBig.readBigUInt64LE(data, 8);
        var confidence = Number(confidenceComponent) * Math.pow(10, exponent);
        // aggregate status
        var status = data.readUInt32LE(16);
        // aggregate corporate action
        var corporateAction = data.readUInt32LE(20);
        // aggregate publish slot
        var publishSlot = readBig.readBigUInt64LE(data, 24);
        return {
            priceComponent: priceComponent,
            price: price,
            confidenceComponent: confidenceComponent,
            confidence: confidence,
            status: status,
            corporateAction: corporateAction,
            publishSlot: publishSlot,
        };
    };
    var parsePriceData = function (data) {
        // pyth magic number
        var magic = data.readUInt32LE(0);
        // program version
        var version = data.readUInt32LE(4);
        // account type
        var type = data.readUInt32LE(8);
        // price account size
        var size = data.readUInt32LE(12);
        // price or calculation type
        var priceType = data.readUInt32LE(16);
        // price exponent
        var exponent = data.readInt32LE(20);
        // number of component prices
        var numComponentPrices = data.readUInt32LE(24);
        // number of quoters that make up aggregate
        var numQuoters = data.readUInt32LE(28);
        // slot of last valid (not unknown) aggregate price
        var lastSlot = readBig.readBigUInt64LE(data, 32);
        // valid on-chain slot of aggregate price
        var validSlot = readBig.readBigUInt64LE(data, 40);
        // time-weighted average price
        var twap = parseEma(data.slice(48, 72), exponent);
        // time-weighted average confidence interval
        var twac = parseEma(data.slice(72, 96), exponent);
        // space for future derived values
        var drv1Component = readBig.readBigInt64LE(data, 96);
        var drv1 = Number(drv1Component) * Math.pow(10, exponent);
        // minimum number of publishers for status to be TRADING
        var minPublishers = data.readUInt8(104);
        // space for future derived values
        var drv2 = data.readInt8(105);
        // space for future derived values
        var drv3 = data.readInt16LE(106);
        // space for future derived values
        var drv4 = data.readInt32LE(108);
        // product id / reference account
        var productAccountKey = new web3_js_1.PublicKey(data.slice(112, 144));
        // next price account in list
        var nextPriceAccountKey = PKorNull(data.slice(144, 176));
        // valid slot of previous update
        var previousSlot = readBig.readBigUInt64LE(data, 176);
        // aggregate price of previous update
        var previousPriceComponent = readBig.readBigInt64LE(data, 184);
        var previousPrice = Number(previousPriceComponent) * Math.pow(10, exponent);
        // confidence interval of previous update
        var previousConfidenceComponent = readBig.readBigUInt64LE(data, 192);
        var previousConfidence = Number(previousConfidenceComponent) * Math.pow(10, exponent);
        // space for future derived values
        var drv5Component = readBig.readBigInt64LE(data, 200);
        var drv5 = Number(drv5Component) * Math.pow(10, exponent);
        var aggregate = parsePriceInfo(data.slice(208, 240), exponent);
        var price;
        var confidence;
        if (aggregate.status === 1) {
            price = aggregate.price;
            confidence = aggregate.confidence;
        }
        // price components - up to 32
        var priceComponents = [];
        var offset = 240;
        var shouldContinue = true;
        while (offset < data.length && shouldContinue) {
            var publisher = PKorNull(data.slice(offset, offset + 32));
            offset += 32;
            if (publisher) {
                var componentAggregate = parsePriceInfo(data.slice(offset, offset + 32), exponent);
                offset += 32;
                var latest = parsePriceInfo(data.slice(offset, offset + 32), exponent);
                offset += 32;
                priceComponents.push({ publisher: publisher, aggregate: componentAggregate, latest: latest });
            }
            else {
                shouldContinue = false;
            }
        }
        return {
            magic: magic,
            version: version,
            type: type,
            size: size,
            priceType: priceType,
            exponent: exponent,
            numComponentPrices: numComponentPrices,
            numQuoters: numQuoters,
            lastSlot: lastSlot,
            validSlot: validSlot,
            twap: twap,
            twac: twac,
            drv1Component: drv1Component,
            drv1: drv1,
            minPublishers: minPublishers,
            drv2: drv2,
            drv3: drv3,
            drv4: drv4,
            productAccountKey: productAccountKey,
            nextPriceAccountKey: nextPriceAccountKey,
            previousSlot: previousSlot,
            previousPriceComponent: previousPriceComponent,
            previousPrice: previousPrice,
            previousConfidenceComponent: previousConfidenceComponent,
            previousConfidence: previousConfidence,
            drv5Component: drv5Component,
            drv5: drv5,
            aggregate: aggregate,
            priceComponents: priceComponents,
            price: price,
            confidence: confidence,
        };
    };
    exports.parsePriceData = parsePriceData;

    Object.defineProperty(exports, "PythConnection", { enumerable: true, get: function () { return PythConnection_1.PythConnection; } });

    Object.defineProperty(exports, "getPythProgramKeyForCluster", { enumerable: true, get: function () { return cluster.getPythProgramKeyForCluster; } });
    });

    class NumberField extends Layout_1$1.Layout {
        constructor(span, property) {
            super(span, property);
        }
        decode(b, offset) {
            const start = offset == undefined ? 0 : offset;
            const data = b.slice(start, start + this.span);
            return new bn$1(data, undefined, "le");
        }
        encode(src, b, offset) {
            const start = offset == undefined ? 0 : offset;
            b.set(src.toArray("le"), start);
            return this.span;
        }
    }
    class SignedNumberField extends Layout_1$1.Layout {
        constructor(span, property) {
            super(span, property);
        }
        decode(b, offset) {
            const start = offset == undefined ? 0 : offset;
            const data = b.slice(start, start + this.span);
            return new bn$1(data, undefined, "le").fromTwos(this.span * 8);
        }
        encode(src, b, offset) {
            const start = offset == undefined ? 0 : offset;
            b.set(src.toTwos(this.span * 8).toArray("le"), start);
            return this.span;
        }
    }
    class PubkeyField extends Layout_1$1.Layout {
        constructor(property) {
            super(32, property);
        }
        decode(b, offset) {
            const start = offset == undefined ? 0 : offset;
            const data = b.slice(start, start + this.span);
            return new PublicKey(data);
        }
        encode(src, b, offset) {
            const start = offset == undefined ? 0 : offset;
            b.set(src.toBytes(), start);
            return this.span;
        }
    }
    function numberField(property) {
        return new NumberField(24, property);
    }
    function u64Field(property) {
        return new NumberField(8, property);
    }
    function i64Field(property) {
        return new SignedNumberField(8, property);
    }
    function pubkeyField(property) {
        return new PubkeyField(property);
    }
    const MAX_RESERVES = 32;
    const ReserveInfoStruct = Layout_1$1.struct([
        pubkeyField("reserve"),
        Layout_1$1.blob(80, "_UNUSED_0_"),
        numberField("price"),
        numberField("depositNoteExchangeRate"),
        numberField("loanNoteExchangeRate"),
        numberField("minCollateralRatio"),
        Layout_1$1.u16("liquidationBonus"),
        Layout_1$1.blob(158, "_UNUSED_1_"),
        u64Field("lastUpdated"),
        Layout_1$1.u8("invalidated"),
        Layout_1$1.blob(7, "_UNUSED_1_"),
    ]);
    const MarketReserveInfoList = Layout_1$1.seq(ReserveInfoStruct, MAX_RESERVES);
    /// Reserve
    const ReserveStateLayout = Layout_1$1.struct([
        i64Field("accruedUntil"),
        numberField("outstandingDebt"),
        numberField("uncollectedFees"),
        u64Field("totalDeposits"),
        u64Field("totalDepositNotes"),
        u64Field("totalLoanNotes"),
        Layout_1$1.blob(416, "_UNUSED_0_"),
        u64Field("lastUpdated"),
        Layout_1$1.u8("invalidated"),
        Layout_1$1.blob(7, "_UNUSED_1_")
    ]);
    /// Obligation
    const PositionInfo = Layout_1$1.struct([
        pubkeyField("account"),
        numberField("amount"),
        Layout_1$1.u32("side"),
        Layout_1$1.u16("reserveIndex"),
        Layout_1$1.blob(66, "_reserved"),
    ]);
    const PositionInfoList = Layout_1$1.seq(PositionInfo, 16, "positions");

    // Check for localStorage dark theme preference
    // and set if necessary
    const checkDarkTheme = async () => {
        const darkTheme = localStorage.getItem('jetDark') === 'true';
        if (darkTheme) {
            setDark(darkTheme);
        }
    };
    // Toggle dark theme root CSS attributes
    const setDark = (darkTheme) => {
        if (darkTheme) {
            document.documentElement.style.setProperty('--jet-green', '#ba63ff');
            document.documentElement.style.setProperty('--jet-blue', '#32a5d3');
            document.documentElement.style.setProperty('--black', '#ffffff');
            document.documentElement.style.setProperty('--dark-grey', '#e1e7f1');
            document.documentElement.style.setProperty('--grey', '#504f4f');
            document.documentElement.style.setProperty('--light-grey', '#494848');
            document.documentElement.style.setProperty('--white', '#444444');
            document.documentElement.style.setProperty('--light-shadow', 'rgba(82, 82, 82, 0.8)');
            document.documentElement.style.setProperty('--dark-shadow', 'rgba(54, 54, 54, 0.8)');
            document.documentElement.style.setProperty('--input-color', 'rgba(255, 255, 255, 0.8)');
            document.documentElement.style.setProperty('--range-slider-bg', 'rgba(0, 0, 0, 0.25)');
        }
        else {
            document.documentElement.style.setProperty('--jet-green', '#ba63ff');
            document.documentElement.style.setProperty('--jet-blue', '#278db6');
            document.documentElement.style.setProperty('--black', '#1a495e');
            document.documentElement.style.setProperty('--dark-grey', '#949494');
            document.documentElement.style.setProperty('--grey', '#d8dfec');
            document.documentElement.style.setProperty('--light-grey', '#e1e7f1');
            document.documentElement.style.setProperty('--white', '#e5ebf4');
            document.documentElement.style.setProperty('--light-shadow', 'rgba(255, 255, 255, 0.8)');
            document.documentElement.style.setProperty('--dark-shadow', 'rgba(175, 186, 214, 0.8)');
            document.documentElement.style.setProperty('--input-color', 'rgba(26, 73, 94, 0.8)');
            document.documentElement.style.setProperty('--range-slider-bg', 'rgba(255, 255, 255, 0.25)');
        }
        localStorage.setItem('jetDark', JSON.stringify(darkTheme));
        USER.update(user => {
            user.darkTheme = darkTheme;
            return user;
        });
    };
    // Format USD or crypto with default or desired decimals
    const currencyFormatter = (value, usd, digits) => {
        let currencyFormat;
        let uiCurrency;
        if (usd) {
            currencyFormat = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 2, maximumFractionDigits: digits ?? 2 });
        }
        else {
            currencyFormat = new Intl.NumberFormat('en-US', { minimumFractionDigits: digits ?? 8, maximumFractionDigits: digits ?? 8 });
        }
        // Set and strip trailing 0's / unnecessary decimal if not USD
        uiCurrency = currencyFormat.format(value);
        if (!usd) {
            while (uiCurrency.indexOf('.') !== -1 && (uiCurrency[uiCurrency.length - 1] === '0' || uiCurrency[uiCurrency.length - 1] === '.')) {
                uiCurrency = uiCurrency.substring(0, uiCurrency.length - 1);
            }
        }
        return uiCurrency;
    };
    // Abbreviate large totals
    const totalAbbrev = (total, price, native, digits) => {
        let t = total;
        if (price && native === false) {
            t = total * price;
        }
        if (t > 10) {
            return `${native ? '' : '$'}${(t / 10).toFixed(1)}B`;
        }
        else if (t > 10) {
            return `${native ? '' : '$'}${(t / 1).toFixed(1)}M`;
        }
        else {
            return currencyFormatter(t, !native, native ? digits : 2);
        }
    };
    // Shorten a pubkey with ellipses
    const shortenPubkey = (pubkey, halfLength) => {
        return `${pubkey.substring(0, halfLength)}...${pubkey.substring(pubkey.length - halfLength)}`;
    };
    // Manual timeout promise to pause program execution
    const timeout = (ms) => {
        return new Promise((res) => {
            setTimeout(() => res(true), ms);
        });
    };
    // Token Amounts
    class TokenAmount {
        constructor(amount, decimals) {
            if (!bn$1.isBN(amount)) {
                console.warn("Amount is not a BN", amount);
                amount = new bn$1(0);
            }
            this.amount = amount;
            this.decimals = decimals;
            this.uiAmountFloat = TokenAmount.tokenAmount(amount, decimals);
            this.uiAmount = this.uiAmountFloat.toString();
        }
        static zero(decimals) {
            return new TokenAmount(new bn$1(0), decimals ?? 0);
        }
        static tokenAccount(tokenAccount, decimals) {
            return new TokenAmount(tokenAccount.amount, decimals);
        }
        static mint(mint) {
            return new TokenAmount(new bn$1(mint.supply), mint.decimals);
        }
        static tokens(tokenAmount, decimals) {
            return new TokenAmount(TokenAmount.tokensToLamports(tokenAmount, decimals), decimals);
        }
        static tokenAmount(lamports, decimals) {
            const str = lamports.toString(10, decimals);
            return parseFloat(str.slice(0, -decimals) + "." + str.slice(-decimals));
        }
        static tokenPrice(marketValue, price, decimals) {
            const tokens = price !== 0
                ? marketValue / price
                : 0;
            return TokenAmount.tokens(tokens.toFixed(decimals), decimals);
        }
        // Convert a uiAmount string into lamports BN
        static tokensToLamports(uiAmount, decimals) {
            // Convert from exponential notation (7.46e-7) to regular
            if (uiAmount.indexOf("e+") !== -1 || uiAmount.indexOf("e-") !== -1) {
                uiAmount = Number(uiAmount).toLocaleString('fullwide', { useGrouping: false });
            }
            let lamports = uiAmount;
            // Remove commas
            while (lamports.indexOf(',') !== -1) {
                lamports = lamports.replace(',', '');
            }
            // Determine if there's a decimal, take number of 
            // characters after it as fractionalValue
            let fractionalValue = 0;
            let initialPlace = lamports.indexOf('.');
            if (initialPlace !== -1) {
                fractionalValue = lamports.length - (initialPlace + 1);
                // If fractional value is lesser than a lamport, round to nearest lamport
                if (fractionalValue > decimals) {
                    lamports = String(parseFloat(lamports).toFixed(decimals));
                }
                // Remove decimal
                lamports = lamports.replace('.', '');
            }
            // Append zeros
            for (let i = 0; i < decimals - fractionalValue; i++) {
                lamports += '0';
            }
            // Return BN value in lamports
            return new bn$1(lamports);
        }
        ;
        add(b) {
            return this.do(b, bn$1.prototype.add);
        }
        addb(b) {
            return new TokenAmount(this.amount.add(b), this.decimals);
        }
        addn(b) {
            return new TokenAmount(this.amount.addn(b), this.decimals);
        }
        sub(b) {
            return this.do(b, bn$1.prototype.sub);
        }
        subb(b) {
            return new TokenAmount(this.amount.sub(b), this.decimals);
        }
        subn(b) {
            return new TokenAmount(this.amount.subn(b), this.decimals);
        }
        mul(b) {
            return this.do(b, bn$1.prototype.mul);
        }
        mulb(b) {
            return new TokenAmount(this.amount.mul(b), this.decimals);
        }
        muln(b) {
            return new TokenAmount(this.amount.muln(b), this.decimals);
        }
        div(b) {
            return this.do(b, bn$1.prototype.div);
        }
        divb(b) {
            return new TokenAmount(this.amount.div(b), this.decimals);
        }
        divn(b) {
            return new TokenAmount(this.amount.divn(b), this.decimals);
        }
        lt(b) {
            return this.amount.lt(b.amount);
        }
        gt(b) {
            return this.amount.gt(b.amount);
        }
        eq(b) {
            return this.amount.eq(b.amount);
        }
        isZero() {
            return this.amount.isZero();
        }
        do(b, fn) {
            if (this.decimals !== b.decimals) {
                console.warn("Decimal mismatch");
                return TokenAmount.zero(this.decimals);
            }
            let amount = fn.call(this.amount, b.amount);
            return new TokenAmount(amount, this.decimals);
        }
    }
    class Amount {
        constructor(units, value) {
            this.units = units;
            this.value = value;
        }
        static tokens(amount) {
            return new Amount({ tokens: {} }, new bn$1(amount));
        }
        static depositNotes(amount) {
            return new Amount({ depositNotes: {} }, new bn$1(amount));
        }
        static loanNotes(amount) {
            return new Amount({ loanNotes: {} }, new bn$1(amount));
        }
    }

    let user$3;
    USER.subscribe((data) => {
        user$3 = data;
    });
    // Find PDA functions and jet algorithms that are reimplemented here
    const SOL_DECIMALS = 9;
    new PublicKey("11111111111111111111111111111111");
    /** Find reserve deposit note destination account for wallet. */
    const findDepositNoteDestAddress = async (program, reserve, wallet) => {
        return await findProgramAddress(program.programId, [reserve, wallet]);
    };
    /** Find reserve deposit note account for wallet */
    const findDepositNoteAddress = async (program, reserve, wallet) => {
        return await findProgramAddress(program.programId, ["deposits", reserve, wallet]);
    };
    /**
     * Find the obligation for the wallet.
     */
    const findObligationAddress = async (program, market, wallet) => {
        return await findProgramAddress(program.programId, ["obligation", market, wallet]);
    };
    /** Find loan note token account for the reserve, obligation and wallet. */
    const findLoanNoteAddress = async (program, reserve, obligation, wallet) => {
        return await findProgramAddress(program.programId, ["loan", reserve, obligation, wallet]);
    };
    /** Find collateral account for the reserve, obligation and wallet. */
    const findCollateralAddress = async (program, reserve, obligation, wallet) => {
        return await findProgramAddress(program.programId, ["collateral", reserve, obligation, wallet]);
    };
    /**
     * Find a program derived address
     * @param programId The program the address is being derived for
     * @param seeds The seeds to find the address
     * @returns The address found and the bump seed required
     */
    const findProgramAddress = async (programId, seeds) => {
        const seed_bytes = seeds.map((s) => {
            if (typeof s == "string") {
                return new TextEncoder().encode(s);
            }
            else if ("publicKey" in s) {
                return s.publicKey.toBytes();
            }
            else if ("toBytes" in s) {
                return s.toBytes();
            }
            else {
                return s;
            }
        });
        return await PublicKey.findProgramAddress(seed_bytes, programId);
    };
    /**
     * Fetch an account for the specified public key and subscribe a callback
     * to be invoked whenever the specified account changes.
     *
     * @param connection Connection to use
     * @param publicKey Public key of the account to monitor
     * @param callback Function to invoke whenever the account is changed
     * @param commitment Specify the commitment level account changes must reach before notification
     * @return subscription id
     */
    const getTokenAccountAndSubscribe = async function (connection, publicKey, decimals, callback, commitment) {
        return await getAccountInfoAndSubscribe(connection, publicKey, (account, context) => {
            if (account != null) {
                if (account.data.length != 165) {
                    console.log('account data length', account.data.length);
                }
                const decoded = parseTokenAccount(account, publicKey);
                const amount = TokenAmount.tokenAccount(decoded.data, decimals);
                callback(amount, context);
            }
            else {
                callback(undefined, context);
            }
        }, commitment);
    };
    /**
     * Fetch an account for the specified public key and subscribe a callback
     * to be invoked whenever the specified account changes.
     *
     * @param connection Connection to use
     * @param publicKey Public key of the account to monitor
     * @param callback Function to invoke whenever the account is changed
     * @param commitment Specify the commitment level account changes must reach before notification
     * @return subscription id
     */
    const getMintInfoAndSubscribe = async function (connection, publicKey, callback, commitment) {
        return await getAccountInfoAndSubscribe(connection, publicKey, (account, context) => {
            if (account != null) {
                let mintInfo = MintLayout.decode(account.data);
                let amount = TokenAmount.mint(mintInfo);
                callback(amount, context);
            }
            else {
                callback(undefined, context);
            }
        }, commitment);
    };
    /**
     * Fetch an account for the specified public key and subscribe a callback
     * to be invoked whenever the specified account changes.
     *
     * @param connection Connection to use
     * @param publicKey Public key of the account to monitor
     * @param callback Function to invoke whenever the account is changed
     * @param commitment Specify the commitment level account changes must reach before notification
     * @return subscription id
     */
    const getAccountInfoAndSubscribe = async function (connection, publicKey, callback, commitment) {
        let latestSlot = -1;
        let subscriptionId = connection.onAccountChange(publicKey, (account, context) => {
            if (context.slot >= latestSlot) {
                latestSlot = context.slot;
                callback(account, context);
            }
        }, commitment);
        const response = await connection.getAccountInfoAndContext(publicKey, commitment);
        if (response.context.slot >= latestSlot) {
            latestSlot = response.context.slot;
            if (response.value != null) {
                callback(response.value, response.context);
            }
            else {
                callback(null, response.context);
            }
        }
        return subscriptionId;
    };
    const sendTransaction = async (provider, instructions, signers, skipConfirmation) => {
        if (!provider.wallet?.publicKey) {
            throw new Error("Wallet is not connected");
        }
        // Building phase
        let transaction = new Transaction();
        transaction.instructions = instructions;
        transaction.recentBlockhash = (await provider.connection.getRecentBlockhash()).blockhash;
        transaction.feePayer = provider.wallet.publicKey;
        // Signing phase
        if (signers && signers.length > 0) {
            transaction.partialSign(...signers);
        }
        //Slope wallet funcs only take bs58 strings
        if (user$3.wallet?.name === 'Slope') {
            try {
                const { msg, data } = await provider.wallet.signTransaction(bs58.encode(transaction.serializeMessage()));
                if (!data.publicKey || !data.signature) {
                    throw new Error("Transaction Signing Failed");
                }
                transaction.addSignature(new PublicKey(data.publicKey), bs58.decode(data.signature));
            }
            catch (err) {
                console.log('Signing Transactions Failed', err);
                return [TxnResponse.Cancelled, null];
            }
        }
        else {
            try {
                transaction = await provider.wallet.signTransaction(transaction);
            }
            catch (err) {
                console.log('Signing Transactions Failed', err, [TxnResponse.Failed, null]);
                // wallet refused to sign
                return [TxnResponse.Cancelled, null];
            }
        }
        // Sending phase
        const rawTransaction = transaction.serialize();
        const txid = await provider.connection.sendRawTransaction(rawTransaction, provider.opts);
        console.log(`Transaction ${explorerUrl(txid)} ${rawTransaction.byteLength} of 1232 bytes...`, transaction);
        // Confirming phase
        let res = TxnResponse.Success;
        if (!skipConfirmation) {
            const status = (await provider.connection.confirmTransaction(txid, provider.opts.commitment)).value;
            if (status?.err) {
                res = TxnResponse.Failed;
            }
        }
        return [res, txid];
    };
    const sendAllTransactions = async (provider, transactions, skipConfirmation) => {
        if (!provider.wallet?.publicKey) {
            throw new Error("Wallet is not connected");
        }
        // Building and partial sign phase
        const recentBlockhash = await provider.connection.getRecentBlockhash();
        const txs = [];
        for (const tx of transactions) {
            if (tx.ix.length == 0) {
                continue;
            }
            let transaction = new Transaction();
            transaction.instructions = tx.ix;
            transaction.recentBlockhash = recentBlockhash.blockhash;
            transaction.feePayer = provider.wallet.publicKey;
            if (tx.signers && tx.signers.length > 0) {
                transaction.partialSign(...tx.signers);
            }
            txs.push(transaction);
        }
        // Signing phase
        let signedTransactions = [];
        //Slope wallet funcs only take bs58 strings
        if (user$3.wallet?.name === 'Slope') {
            try {
                const { msg, data } = await provider.wallet.signAllTransactions(txs.map((txn) => bs58.encode(txn.serializeMessage())));
                const txnsLen = txs.length;
                if (!data.publicKey || data.signatures?.length !== txnsLen) {
                    throw new Error("Transactions Signing Failed");
                }
                for (let i = 0; i < txnsLen; i++) {
                    txs[i].addSignature(new PublicKey(data.publicKey), bs58.decode(data.signatures[i]));
                    signedTransactions.push(txs[i]);
                }
            }
            catch (err) {
                console.log('Signing All Transactions Failed', err);
                // wallet refused to sign
                return [TxnResponse.Cancelled, null];
            }
        }
        else {
            try {
                //solong does not have a signAllTransactions Func so we sign one by one
                if (!provider.wallet.signAllTransactions) {
                    for (let i = 0; i < txs.length; i++) {
                        const signedTxn = await provider.wallet.signTransaction(txs[i]);
                        signedTransactions.push(signedTxn);
                    }
                }
                else {
                    signedTransactions = await provider.wallet.signAllTransactions(txs);
                }
            }
            catch (err) {
                console.log('Signing All Transactions Failed', err);
                // wallet refused to sign
                return [TxnResponse.Cancelled, null];
            }
        }
        // Sending phase
        console.log("Transactions", txs);
        let res = TxnResponse.Success;
        const txids = [];
        for (let i = 0; i < signedTransactions.length; i++) {
            const transaction = signedTransactions[i];
            // Transactions can be simulated against an old slot that
            // does not include previously sent transactions. In most
            // conditions only the first transaction can be simulated
            // safely
            const skipPreflightSimulation = i !== 0;
            const opts = {
                ...provider.opts,
                skipPreflight: skipPreflightSimulation
            };
            const rawTransaction = transaction.serialize();
            const txid = await provider.connection.sendRawTransaction(rawTransaction, opts);
            console.log(`Transaction ${explorerUrl(txid)} ${rawTransaction.byteLength} of 1232 bytes...`);
            txids.push(txid);
            // Confirming phase
            if (!skipConfirmation) {
                const status = (await provider.connection.confirmTransaction(txid, provider.opts.commitment)).value;
                if (status?.err) {
                    res = TxnResponse.Failed;
                }
            }
        }
        return [res, txids];
    };
    const explorerUrl = (txid) => {
        const clusterParam = `?cluster=devnet` ;
        return `https://explorer.solana.com/transaction/${txid}${clusterParam}`;
    };
    /**
     * Transaction errors contain extra goodies like a message and error code. Log them
     * @param error An error object from anchor.
     * @returns A stringified error.
     */
    const transactionErrorToString = (error) => {
        if (error.code) {
            return `Code ${error.code}: ${error.msg}\n${error.logs}\n${error.stack}`;
        }
        else {
            return `${error} ${getErrNameAndMsg(Number(getCustomProgramErrorCode(JSON.stringify(error))[1]))}`;
        }
    };
    const parseTokenAccount = (account, accountPubkey) => {
        const data = AccountLayout.decode(account.data);
        // PublicKeys and BNs are currently Uint8 arrays and
        // booleans are really Uint8s. Convert them
        const decoded = {
            ...account,
            data: {
                address: accountPubkey,
                mint: new PublicKey(data.mint),
                owner: new PublicKey(data.owner),
                amount: new bn$1(data.amount, undefined, "le"),
                delegate: data.delegateOption ? new PublicKey(data.delegate) : null,
                delegatedAmount: new bn$1(data.delegatedAmount, undefined, "le"),
                isInitialized: data.state != 0,
                isFrozen: data.state == 2,
                isNative: !!data.isNativeOption,
                rentExemptReserve: new bn$1(0, undefined, "le"),
                closeAuthority: data.closeAuthorityOption ? new PublicKey(data.closeAuthority) : null,
            }
        };
        return decoded;
    };
    const parseMarketAccount = (account, coder) => {
        let market = coder.accounts.decode("Market", account);
        let reserveInfoData = new Uint8Array(market.reserves);
        let reserveInfoList = MarketReserveInfoList.decode(reserveInfoData);
        market.reserves = reserveInfoList;
        return market;
    };
    const parseReserveAccount = (account, coder) => {
        let reserve = coder.accounts.decode("Reserve", account);
        const reserveState = ReserveStateLayout.decode(Buffer.from(reserve.state));
        reserve.state = reserveState;
        return reserve;
    };
    const parseObligationAccount = (account, coder) => {
        let obligation = coder.accounts.decode("Obligation", account);
        const parsePosition = (position) => {
            const pos = {
                account: new PublicKey(position.account),
                amount: new bn$1(position.amount),
                side: position.side,
                reserveIndex: position.reserveIndex,
                _reserved: [],
            };
            return pos;
        };
        obligation.collateral = PositionInfoList
            .decode(Buffer.from(obligation.collateral))
            .map(parsePosition);
        obligation.loans = PositionInfoList
            .decode(Buffer.from(obligation.loans))
            .map(parsePosition);
        return obligation;
    };
    const parseIdlMetadata = (idlMetadata) => {
        return {
            ...idlMetadata,
            address: new PublicKey(idlMetadata.address),
            market: toPublicKeys(idlMetadata.market),
            reserves: idlMetadata.reserves.map(reserve => {
                return {
                    ...reserve,
                    accounts: toPublicKeys(reserve.accounts),
                };
            })
        };
    };
    /**
     * Convert some object of fields with address-like values,
     * such that the values are converted to their `PublicKey` form.
     * @param obj The object to convert
     */
    function toPublicKeys(obj) {
        const newObj = {};
        for (const key in obj) {
            const value = obj[key];
            if (typeof value == "string") {
                newObj[key] = new PublicKey(value);
            }
            else if ('publicKey' in value) {
                newObj[key] = value.publicKey;
            }
            else {
                newObj[key] = value;
            }
        }
        return newObj;
    }
    /** Linear interpolation between (x0, y0) and (x1, y1)
    */
    const interpolate = (x, x0, x1, y0, y1) => {
        console.assert(x >= x0);
        console.assert(x <= x1);
        return y0 + ((x - x0) * (y1 - y0)) / (x1 - x0);
    };
    /** Continuous Compounding Rate
    */
    const getCcRate = (reserveConfig, utilRate) => {
        const basisPointFactor = 10000;
        let util1 = reserveConfig.utilizationRate1 / basisPointFactor;
        let util2 = reserveConfig.utilizationRate2 / basisPointFactor;
        let borrow0 = reserveConfig.borrowRate0 / basisPointFactor;
        let borrow1 = reserveConfig.borrowRate1 / basisPointFactor;
        let borrow2 = reserveConfig.borrowRate2 / basisPointFactor;
        let borrow3 = reserveConfig.borrowRate3 / basisPointFactor;
        if (utilRate <= util1) {
            return interpolate(utilRate, 0, util1, borrow0, borrow1);
        }
        else if (utilRate <= util2) {
            return interpolate(utilRate, util1, util2, borrow1, borrow2);
        }
        else {
            return interpolate(utilRate, util2, 1, borrow2, borrow3);
        }
    };
    /** Borrow rate
    */
    const getBorrowRate = (ccRate, fee) => {
        const basisPointFactor = 10000;
        fee = fee / basisPointFactor;
        const secondsPerYear = 365 * 24 * 60 * 60;
        const rt = ccRate / secondsPerYear;
        return Math.log1p((1 + fee) * Math.expm1(rt)) * secondsPerYear;
    };
    /** Deposit rate
    */
    const getDepositRate = (ccRate, utilRatio) => {
        const secondsPerYear = 365 * 24 * 60 * 60;
        const rt = ccRate / secondsPerYear;
        return Math.log1p(Math.expm1(rt)) * secondsPerYear * utilRatio;
    };

    let market$2;
    let user$2;
    MARKET.subscribe(data => market$2 = data);
    USER.subscribe(data => user$2 = data);
    const subscribeToMarket = async (idlMeta, connection, coder) => {
        let promise;
        const promises = [];
        // Market subscription 
        let timeStart = Date.now();
        promise = getAccountInfoAndSubscribe(connection, idlMeta.market.market, account => {
            if (account != null) {
                MARKET.update(market => {
                    console.assert(MarketReserveInfoList.span == 12288);
                    const decoded = parseMarketAccount(account.data, coder);
                    for (const reserveStruct of decoded.reserves) {
                        for (const abbrev in market.reserves) {
                            if (market.reserves[abbrev].accountPubkey.equals(reserveStruct.reserve)) {
                                const reserve = market.reserves[abbrev];
                                reserve.liquidationPremium = reserveStruct.liquidationBonus;
                                reserve.depositNoteExchangeRate = reserveStruct.depositNoteExchangeRate;
                                reserve.loanNoteExchangeRate = reserveStruct.loanNoteExchangeRate;
                                deriveValues(reserve, user$2.assets?.tokens[reserve.abbrev]);
                                break;
                            }
                        }
                    }
                    return market;
                });
            }
        });
        // Set ping of RPC call
        promise.then(() => {
            let timeEnd = Date.now();
            USER.update(user => {
                user.rpcPing = timeEnd - timeStart;
                return user;
            });
        });
        promises.push(promise);
        for (const reserveMeta of idlMeta.reserves) {
            // Reserve
            promise = getAccountInfoAndSubscribe(connection, reserveMeta.accounts.reserve, account => {
                if (account != null) {
                    MARKET.update(market => {
                        const decoded = parseReserveAccount(account.data, coder);
                        // Hardcoding min c-ratio to 130% for now
                        // market.minColRatio = decoded.config.minCollateralRatio / 10000;
                        const reserve = market.reserves[reserveMeta.abbrev];
                        reserve.maximumLTV = decoded.config.minCollateralRatio;
                        reserve.liquidationPremium = decoded.config.liquidationPremium;
                        reserve.outstandingDebt = new TokenAmount(decoded.state.outstandingDebt, reserveMeta.decimals).divb(new bn$1(Math.pow(10, 15)));
                        reserve.accruedUntil = decoded.state.accruedUntil;
                        reserve.config = decoded.config;
                        deriveValues(reserve, user$2.assets?.tokens[reserve.abbrev]);
                        return market;
                    });
                }
            });
            promises.push(promise);
            // Deposit Note Mint
            promise = getMintInfoAndSubscribe(connection, reserveMeta.accounts.depositNoteMint, amount => {
                if (amount != null) {
                    MARKET.update(market => {
                        let reserve = market.reserves[reserveMeta.abbrev];
                        reserve.depositNoteMint = amount;
                        deriveValues(reserve, user$2.assets?.tokens[reserve.abbrev]);
                        return market;
                    });
                }
            });
            promises.push(promise);
            // Loan Note Mint
            promise = getMintInfoAndSubscribe(connection, reserveMeta.accounts.loanNoteMint, amount => {
                if (amount != null) {
                    MARKET.update(market => {
                        let reserve = market.reserves[reserveMeta.abbrev];
                        reserve.loanNoteMint = amount;
                        deriveValues(reserve, user$2.assets?.tokens[reserve.abbrev]);
                        return market;
                    });
                }
            });
            promises.push(promise);
            // Reserve Vault
            promise = getTokenAccountAndSubscribe(connection, reserveMeta.accounts.vault, reserveMeta.decimals, amount => {
                if (amount != null) {
                    MARKET.update(market => {
                        let reserve = market.reserves[reserveMeta.abbrev];
                        reserve.availableLiquidity = amount;
                        deriveValues(reserve, user$2.assets?.tokens[reserve.abbrev]);
                        return market;
                    });
                }
            });
            promises.push(promise);
            // Reserve Token Mint
            promise = getMintInfoAndSubscribe(connection, reserveMeta.accounts.tokenMint, amount => {
                if (amount != null) {
                    MARKET.update(market => {
                        let reserve = market.reserves[reserveMeta.abbrev];
                        reserve.tokenMint = amount;
                        deriveValues(reserve, user$2.assets?.tokens[reserve.abbrev]);
                        return market;
                    });
                }
            });
            promises.push(promise);
            // Pyth Price
            promise = getAccountInfoAndSubscribe(connection, reserveMeta.accounts.pythPrice, account => {
                if (account != null) {
                    MARKET.update(market => {
                        let reserve = market.reserves[reserveMeta.abbrev];
                        reserve.price = lib.parsePriceData(account.data).price;
                        deriveValues(reserve, user$2.assets?.tokens[reserve.abbrev]);
                        return market;
                    });
                }
            });
            promises.push(promise);
        }
        return await Promise.all(promises);
    };
    const subscribeToAssets = async (connection, coder, wallet) => {
        let promise;
        let promises = [];
        if (!user$2.assets) {
            return;
        }
        // Obligation
        promise = getAccountInfoAndSubscribe(connection, user$2.assets.obligationPubkey, account => {
            if (account != null) {
                USER.update(user => {
                    if (user.assets) {
                        user.assets.obligation = {
                            ...account,
                            data: parseObligationAccount(account.data, coder),
                        };
                    }
                    return user;
                });
            }
        });
        promises.push(promise);
        // Wallet native SOL balance
        promise = getAccountInfoAndSubscribe(connection, wallet, account => {
            USER.update(user => {
                if (user.assets) {
                    // Need to be careful constructing a BN from a number.
                    // If the user has more than 2^53 lamports it will throw for not having enough precision.
                    user.assets.sol = new TokenAmount(new bn$1(account?.lamports.toString() ?? "0"), SOL_DECIMALS);
                    // Update wallet SOL balance
                    user.walletBalances.SOL = user.assets.sol.uiAmountFloat;
                }
                return user;
            });
        });
        promises.push(promise);
        for (const abbrev in user$2.assets.tokens) {
            const asset = user$2.assets.tokens[abbrev];
            const reserve = market$2.reserves[abbrev];
            // Wallet token account
            promise = getTokenAccountAndSubscribe(connection, asset.walletTokenPubkey, reserve.decimals, amount => {
                USER.update(user => {
                    if (user.assets) {
                        user.assets.tokens[reserve.abbrev].walletTokenBalance = amount ?? new TokenAmount(new bn$1(0), reserve.decimals);
                        user.assets.tokens[reserve.abbrev].walletTokenExists = !!amount;
                        // Update wallet token balance
                        if (!asset.tokenMintPubkey.equals(NATIVE_MINT)) {
                            user.walletBalances[reserve.abbrev] = asset.walletTokenBalance.uiAmountFloat;
                        }
                        deriveValues(reserve, user.assets.tokens[reserve.abbrev]);
                    }
                    return user;
                });
            });
            promises.push(promise);
            // Reserve deposit notes
            promise = getTokenAccountAndSubscribe(connection, asset.depositNoteDestPubkey, reserve.decimals, amount => {
                USER.update(user => {
                    if (user.assets) {
                        user.assets.tokens[reserve.abbrev].depositNoteDestBalance = amount ?? TokenAmount.zero(reserve.decimals);
                        user.assets.tokens[reserve.abbrev].depositNoteDestExists = !!amount;
                        deriveValues(reserve, user.assets.tokens[reserve.abbrev]);
                    }
                    return user;
                });
            });
            promises.push(promise);
            // Deposit notes account
            promise = getTokenAccountAndSubscribe(connection, asset.depositNotePubkey, reserve.decimals, amount => {
                USER.update(user => {
                    if (user.assets) {
                        user.assets.tokens[reserve.abbrev].depositNoteBalance = amount ?? TokenAmount.zero(reserve.decimals);
                        user.assets.tokens[reserve.abbrev].depositNoteExists = !!amount;
                        deriveValues(reserve, user.assets.tokens[reserve.abbrev]);
                    }
                    return user;
                });
            });
            promises.push(promise);
            // Obligation loan notes
            promise = getTokenAccountAndSubscribe(connection, asset.loanNotePubkey, reserve.decimals, amount => {
                USER.update(user => {
                    if (user.assets) {
                        user.assets.tokens[reserve.abbrev].loanNoteBalance = amount ?? TokenAmount.zero(reserve.decimals);
                        user.assets.tokens[reserve.abbrev].loanNoteExists = !!amount;
                        deriveValues(reserve, user.assets.tokens[reserve.abbrev]);
                    }
                    return user;
                });
            });
            promises.push(promise);
            // Obligation collateral notes
            promise = getTokenAccountAndSubscribe(connection, asset.collateralNotePubkey, reserve.decimals, amount => {
                USER.update(user => {
                    if (user.assets) {
                        user.assets.tokens[reserve.abbrev].collateralNoteBalance = amount ?? TokenAmount.zero(reserve.decimals);
                        user.assets.tokens[reserve.abbrev].collateralNoteExists = !!amount;
                        deriveValues(reserve, user.assets.tokens[reserve.abbrev]);
                    }
                    return user;
                });
            });
            promises.push(promise);
        }
        return await Promise.all(promises);
    };
    // Derive market reserve and user asset values, update global objects
    const deriveValues = (reserve, asset) => {
        // Derive market reserve values
        reserve.marketSize = reserve.outstandingDebt.add(reserve.availableLiquidity);
        reserve.utilizationRate = reserve.marketSize.isZero() ? 0
            : reserve.outstandingDebt.uiAmountFloat / reserve.marketSize.uiAmountFloat;
        const ccRate = getCcRate(reserve.config, reserve.utilizationRate);
        reserve.borrowRate = getBorrowRate(ccRate, reserve.config.manageFeeRate);
        reserve.depositRate = getDepositRate(ccRate, reserve.utilizationRate);
        // Update market total value locked and reserve array from new values
        let tvl = 0;
        let reservesArray = [];
        for (let r in market$2.reserves) {
            tvl += market$2.reserves[r].marketSize.muln(market$2.reserves[r].price)?.uiAmountFloat;
            reservesArray.push(market$2.reserves[r]);
        }
        MARKET.update(market => {
            market.totalValueLocked = tvl;
            market.reservesArray = reservesArray;
            return market;
        });
        // Derive user asset values
        if (asset) {
            asset.depositBalance = asset.depositNoteBalance.mulb(reserve.depositNoteExchangeRate).divb(new bn$1(Math.pow(10, 15)));
            asset.loanBalance = asset.loanNoteBalance.mulb(reserve.loanNoteExchangeRate).divb(new bn$1(Math.pow(10, 15)));
            asset.collateralBalance = asset.collateralNoteBalance.mulb(reserve.depositNoteExchangeRate).divb(new bn$1(Math.pow(10, 15)));
            // Update user obligation balances
            user$2.collateralBalances[reserve.abbrev] = asset.collateralBalance.uiAmountFloat;
            user$2.loanBalances[reserve.abbrev] = asset.loanBalance.uiAmountFloat;
            // Update user position object for UI
            user$2.position = {
                depositedValue: 0,
                borrowedValue: 0,
                colRatio: 0,
                utilizationRate: 0
            };
            for (let t in user$2.assets?.tokens) {
                user$2.position.depositedValue += user$2.collateralBalances[t] * market$2.reserves[t].price;
                user$2.position.borrowedValue += user$2.loanBalances[t] * market$2.reserves[t].price;
                user$2.position.colRatio = user$2.position.borrowedValue ? user$2.position.depositedValue / user$2.position.borrowedValue : 0;
                user$2.position.utilizationRate = user$2.position.depositedValue ? user$2.position.borrowedValue / user$2.position.depositedValue : 0;
            }
            // Max deposit
            asset.maxDepositAmount = user$2.walletBalances[reserve.abbrev];
            // Max withdraw
            asset.maxWithdrawAmount = user$2.position.borrowedValue
                ? (user$2.position.depositedValue - (market$2.minColRatio * user$2.position.borrowedValue)) / reserve.price
                : asset.collateralBalance.uiAmountFloat;
            if (asset.maxWithdrawAmount > asset.collateralBalance.uiAmountFloat) {
                asset.maxWithdrawAmount = asset.collateralBalance.uiAmountFloat;
            }
            // Max borrow
            asset.maxBorrowAmount = ((user$2.position.depositedValue / market$2.minColRatio) - user$2.position.borrowedValue) / reserve.price;
            if (asset.maxBorrowAmount > reserve.availableLiquidity.uiAmountFloat) {
                asset.maxBorrowAmount = reserve.availableLiquidity.uiAmountFloat;
            }
            // Max repay
            if (user$2.walletBalances[reserve.abbrev] < asset.loanBalance.uiAmountFloat) {
                asset.maxRepayAmount = user$2.walletBalances[reserve.abbrev];
            }
            else {
                asset.maxRepayAmount = asset.loanBalance.uiAmountFloat;
            }
        }
    };

    var language$4="English";var loading$4={transactions:"Sending Transactions...",connectingWallet:"Connecting Wallet...",initializing:"Starting Jet Engines",fetchingReserves:"Fetching Reserve Data",fetchingAccount:"Fetching Account Data"};var nav$4={cockpit:"NEXFIN",settings:"Settings",collapse:"Collapse",getCopilotSuggestion:"Get Copilot Suggestion",transactions:"Flight Logs"};var cockpit$4={title:"NEXFIN",asset:"Asset",detail:"Detail",native:"Native",totalValueLocked:"Locked Market Value",totalBorrowed:"Total Borrowed",availableLiquidity:"Available Liquidity",amountDeposited:"Deposited",amountBorrowed:"Borrowed",depositRate:"Deposit Rate",borrowRate:"Borrow Rate",airdrop:"Airdrop",totalDepositedValue:"Your Deposited Value",totalBorrowedValue:"Your Borrowed Value",yourRatio:"Your C-Ratio",collateralizationRatio:"Collateralization Ratio",noInputAmount:"Enter amount.",adjustedCollateralization:"Adjusted C-Ratio",deposit:"Deposit",walletBalance:"Wallet Balance",noDepositAmount:"Enter amount",notEnoughAsset:"Not enough {{ASSET}}.",withdraw:"Withdraw",availableFunds:"Available Funds",lessFunds:"Not enough funds",borrow:"Borrow",maxBorrowAmount:"Maximum Borrow",assetIsCurrentDeposit:"You've deposited {{ASSET}} and therefore can't borrow it.",noLiquidity:"Not enough liquidity.",minCRatio:"This will put your position at our minimum collateralization ratio, therefore placing your account in liquidation territory. Are you sure?",belowMinRatio:"You are undercollateralized. Deposit or repay your debt to avoid liquidation.",subjectToLiquidation:"This trade lowers your collateralization ratio to {{NEW-C-RATIO}}%, which makes you subject to liquidation. Would you still like to borrow?",confirm:"Confirm",repay:"Repay",amountOwed:"Amount Owed",oweLess:"You owe less.",geobanned:"Jet Protocol is not available in your region.",noMarket:"We were unable to initialize the Jet marketplace.",txSuccess:"Your {{TRADE ACTION}} of {{AMOUNT AND ASSET}} was received.",txFailed:"Transaction failed.",max:"Max",assetIsCurrentBorrow:"You've borrowed {{ASSET}} and therefore can't deposit it.",belowMinCRatio:"You are undercollateralized. Deposit or repay your debt to avoid liquidation.",search:"Search Market...",noBalanceForDeposit:"You have no {{ASSET}} in your wallet to deposit.",noDepositsForBorrow:"You must deposit collateral in order to borrow.",noDepositsForWithdraw:"You have not deposited any {{ASSET}} to withdraw.",noDebtForRepay:"You don't owe any {{ASSET}}.",rejectTrade:"This trade would lower your collateralization ratio to {{NEW-C-RATIO}}%, which would be below our minimum ratio of {{JET MIN C-RATIO}}. Would you still like to borrow?",insufficientLamports:"You are depositing all your SOL leaving you no lamports for transaction fees! Please try again with a slightly lower input amount.",stillUndercollateralized:"Your new C-ratio of {{NEW-C-RATIO}}% is still under Jet's minimum marketplace collateralization ratio of {{JET MIN C-RATIO}}%. Please consider repaying more to avoid liquidation."};var settings$4={title:"Settings",wallet:"Wallet",connect:"Connect Wallet",worldOfDefi:"Connect your wallet to the world of DeFi.",theme:"Theme",light:"Light",dark:"Dark",language:"Language",rpcNode:"RPC Node",current:"Current",defaultNode:"Jet Default",reset:"Reset",noUrl:"Enter a URL",disconnect:"Disconnect Wallet",connected:"Connected"};var reserveDetail$4={reserveSize:"Reserve Size",availableLiquidity:"Available Liquidity",utilisationRate:"Utilisation Rate",viewHistory:"View History",totalBorrowed:"Total Borrowed",maximumLTV:"Maximum LTV",liquidationPremium:"Liquidation Premium",tradeAsset:"Trade {{ASSET}}",minimumCollateralizationRatio:"Minimum C-Ratio"};var copilot$4={name:"Copilot",header:"Hey, Copilot here.",okay:"Okay",suggestions:{unhealthy:{overview:"Your account is unhealthy.",detail:"Your Collateralization Ratio (your total deposited value divided by your total borrowed value) is {{C-RATIO}}% which is {{RATIO BELOW AMOUNT}}% less than Jet marketplace's minimum collateralization ratio of {{JET MIN C-RATIO}}%.",solution:"In order to correct your position, you can deposit more collateral, but I suggest you repay your debt in the Cockpit.",actionText:"Go To Cockpit"},warning:{tenPercent:{overview:"You are dangerously close to liquidation.",detail:"Your Collateralization Ratio (your total deposited value divided by your total borrowed value) is {{C-RATIO}}% which is within 10% of Jet marketplace's minimum collateralization ratio of {{JET MIN C-RATIO}}%.",solution:"In order to avoid liquidation, you can deposit more collateral.",actionText:"Deposit"},twentyPercent:{overview:"Keep an eye on your collateralization ratio.",detail:"Your Collateralization Ratio (your total deposited value divided by your total borrowed value) is {{C-RATIO}}% which is less than 20% above Jet marketplace's minimum collateralization ratio of {{JET MIN C-RATIO}}%.",solution:"Raise your collateralization ratio to healthy levels of 20% or more by depositing more collateral.",actionText:"Deposit"}},deposit:{overview:"{{BEST DEPOSIT RATE NAME}} is lookin' good right now.",detail:"<b class='bold'>{{BEST DEPOSIT RATE ABBREV}}</b> has the best deposit <b class='bold'>rate</b> in the market right now at <b class='bold'>{{DEPOSIT RATE}}%</b>, and your account is in good standing so we recommend adding some collateral by depositing a portion of your <b class='bold'>{{USER BALANCE}} {{BEST DEPOSIT RATE ABBREV}}</b>.",actionText:"Let's Do It"},healthy:{overview:"Skies are clear.",detail:"Your account is in good standing and is healthily over-collateralized, let me take a look at the market and see if I can suggest some good moves for you. Check back with me later!"}},alert:{failed:"Mayday!",success:"Success!",airdropSuccess:"We have Airdropped you {{UI AMOUNT}} {{RESERVE ABBREV}}.",refresh:"Refresh",originationFee:"There is a fee of {{ORIGINATION FEE}}% attached to this loan.",headsup:"Heads up!",disclaimer:"You are about to enter the Jet Protocol Mainnet. Do not proceed if you do not understand and accept the Terms of Use, and potential for financial loss. <br/><br/><a href=\"https://www.jetprotocol.io/terms-of-use\" target=\"_blank\" class=\"bicyclette-bold text-gradient\">TERMS OF USE</a> <a href=\"https://www.jetprotocol.io/privacy-policy\" target=\"_blank\" class=\"bicyclette-bold text-gradient\">PRIVACY POLICY</a>",accept:"Accept",warning:"WARNING"}};var transactions$4={title:"Flight Logs",date:"Date",signature:"Signature",tradeAction:"Transaction",tradeAmount:"Amount",noTrades:"You have no logged transactions with Jet.",entries:"{start} to {end} of {rows}",deposit:"Deposit",withdraw:"Withdraw",borrow:"Borrow",repay:"Repay"};var Jet_UI_EN = {language:language$4,loading:loading$4,nav:nav$4,cockpit:cockpit$4,settings:settings$4,reserveDetail:reserveDetail$4,copilot:copilot$4,transactions:transactions$4};

    var Jet_UI_EN$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        language: language$4,
        loading: loading$4,
        nav: nav$4,
        cockpit: cockpit$4,
        settings: settings$4,
        reserveDetail: reserveDetail$4,
        copilot: copilot$4,
        transactions: transactions$4,
        'default': Jet_UI_EN
    });

    var collateral$4={term:"Collateral",definition:"The asset deposited with the protocol to secure a loan."};var debt$4={term:"Debt",definition:"The value of the loan that is owed or due to the Protocol."};var collateralizationRatio$4={term:"Collateralization Ratio",definition:"The value of your collateral divided by the value of your debt. You are required to over-collateralize your loan, i.e. the fair market value of your deposited assets must exceed the value of the amount you are allowed to borrow. This provides for a reduction because the Protocol may seize this collateral in order to recoup the value of the loan in the event of default on a loan. See also, Maximum LTV."};var adjustedCollateralizationRatio$4={term:"Adjusted Collateralization Ratio",definition:"A real-time representation of what your collateralization ratio would potentially be if the current trade is submitted."};var depositRate$4={term:"Deposit Interest Rate",definition:"The instantaneous interest rate being earned by depositors. This rate is expressed in annualized form, does not reflect the effects of compounding, and is inclusive of any protocol fees that may be in place. The rate changes as the utilization ratio of the deposited asset changes."};var borrowRate$4={term:"Borrow Interest Rate",definition:"The instantaneous interest rate being paid by borrowers. This rate is expressed in annualized form, does not reflect the effects of compounding, and is inclusive of any protocol fees that may be in place. The rate changes as the utilization ratio of the borrowed asset changes."};var maximumLtv$4={term:"Maximum LTV",definition:"The maximum ratio of a loan allowed by the Protocol. The Loan-to-value ratio (LTV), is a measure of risk used by the Jet Protocol when deciding how large of a loan to approve. Your LTV represents the relationship between the size of the loan you take out and the value of the property that secures the loan. See also, Collateralization Ratio."};var utilisationRate$4={term:"Utilization Ratio",definition:"The fraction of a reserve’s assets that have been borrowed. For example, if the USDC reserve is worth $100,000,and the amount owed to the reserve by borrowers is $65,000, then the utilization ratio is 65%. There would be $35,000 available for further borrowing."};var availLiquidity$4={term:"Liquidity",definition:"The efficiency or ease with which an asset can be converted into stablecoins without affecting the asset’s market price."};var liquidationPremium$4={term:"Liquidation Premium",definition:"Additional collateral is delivered to liquidators who repay the debt of accounts that have fallen below the minimum collateralization ratio. The dollar value of this additional collateral is equal to the Liquidation Premium times the dollar value of the repaid debt. The additional collateral is paid from the account of the user being liquidated."};var Jet_Definitions_EN = {collateral:collateral$4,debt:debt$4,collateralizationRatio:collateralizationRatio$4,adjustedCollateralizationRatio:adjustedCollateralizationRatio$4,depositRate:depositRate$4,borrowRate:borrowRate$4,maximumLtv:maximumLtv$4,utilisationRate:utilisationRate$4,availLiquidity:availLiquidity$4,liquidationPremium:liquidationPremium$4};

    var Jet_Definitions_EN$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        collateral: collateral$4,
        debt: debt$4,
        collateralizationRatio: collateralizationRatio$4,
        adjustedCollateralizationRatio: adjustedCollateralizationRatio$4,
        depositRate: depositRate$4,
        borrowRate: borrowRate$4,
        maximumLtv: maximumLtv$4,
        utilisationRate: utilisationRate$4,
        availLiquidity: availLiquidity$4,
        liquidationPremium: liquidationPremium$4,
        'default': Jet_Definitions_EN
    });

    var language$3="中文";var loading$3={transactions:"交易发送中。。。",connectingWallet:"钱包连结中。。。",initializing:"启动JET发动机中",fetchingReserves:"获取储备数据中",fetchingAccount:"获取账户数据中"};var nav$3={cockpit:"驾驶舱",settings:"设定",collapse:"缩起",getCopilotSuggestion:"获取副驾驶建议",transactions:"飞行日志"};var cockpit$3={title:"驾驶舱",asset:"资产",detail:"详细",native:"原生",totalValueLocked:"总锁仓量",totalBorrowed:"借贷总额",availableLiquidity:"可用流动性",amountDeposited:"存款金额",amountBorrowed:"借贷金额",depositRate:"存款率",borrowRate:"借贷率",airdrop:"Airdrop",totalDepositedValue:"存款总价值",totalBorrowedValue:"借贷总额",yourRatio:"您的质押率",collateralizationRatio:"质押率",noInputAmount:"输入金额",adjustedCollateralization:"调整过质押率",deposit:"存款",walletBalance:"你的钱包余额",noDepositAmount:"输入金额",notEnoughAsset:"{{ASSET}} 不够",withdraw:"取款",availableFunds:"可用资产",lessFunds:"资产不够",borrow:"借贷",maxBorrowAmount:"最高可借贷金额",assetIsCurrentDeposit:"您已存入 {{ASSET}}，因此无法借用。",noLiquidity:"流动性不足",minCRatio:"这将使您的头寸处于我们的最低抵押率，从而使您的账户处于清算区域。 你确定吗？",belowMinRatio:"您已低于最小质押率。请多存一些抵押物或偿还一些债务",subjectToLiquidation:"您这个交易会降低质押率到 {{NEW-C-RATIO}}% 比 Jet 要求的质押率还低 从而使您的账户处于清算区域。你确定吗？",confirm:"确认",repay:"偿还",amountOwed:"以借贷金额",oweLess:"借贷金额减少",geobanned:"您住的地方不尊许您用 Jet Protocol。",noMarket:"我们没办法开启Jet的交易市场",txSuccess:"成功了! 我们收到您的 {{AMOUNT AND ASSET}} {{TRADE ACTION}}。您可以在這查看您的交易 <a href='{{EXPLORER LINK}}' class='text-gradient' target='_blank' style='margin: unset; font-weight: bold;'>explorer</a>。",txFailed:"交易失败。失败原因不太清楚， 请您再试一次或是跟我们联系。",max:"全部",assetIsCurrentBorrow:"你已经借了{{ASSET}} 所以无法存入此资产。",belowMinCRatio:"您已低于最小质押率。请多存一些抵押物或偿还一些债务。",search:"搜索市场",noBalanceForDeposit:"您钱包里没有任何 {{ASSET}} 来存款.",noDepositsForBorrow:"您需要存抵押物才能再借款",noDepositsForWithdraw:"您没有存任何 {{ASSET}} 来提款.",noDebtForRepay:"您不欠任何 {{ASSET}}.",rejectTrade:"这个交易手续会降低您的质押率到 {{NEW-C-RATIO}}%, 而且会比我们的对低质押率限制 {{JET MIN C-RATIO}} 还低.",insufficientLamports:"您这交易会存进您全部的SOL 您的交易费会不够! 请您输入低一点的金额",stillUndercollateralized:"您的新 {{NEW-C-RATIO}}% C-Ratio 仍低于 Jet 的最低市场抵押比率 {{JET MIN C-RATIO}}% 。 请考虑偿还更多，以避免清算。"};var settings$3={title:"设定",wallet:"钱包",connect:"连结钱包",worldOfDefi:"连结到 DeFi 世界",theme:"模式",light:"明亮",dark:"黑暗",language:"语言",rpcNode:"RPC Node",current:"当前的",defaultNode:"JET 默认",reset:"重新设定",noUrl:"输入网址",disconnect:"Disconnect Wallet",connected:"Connected"};var reserveDetail$3={reserveSize:"储备规模",availableLiquidity:"可用流动性",utilisationRate:"使用率",viewHistory:"查看历史",totalBorrowed:"总借贷金额",maximumLTV:"最高LTV",liquidationPremium:"清算溢价",tradeAsset:"交易 {{ASSET}}",minimumCollateralizationRatio:"最低质押率限制"};var copilot$3={name:"副驾驶",header:"嘿 我是你的副驾驶。",okay:"Okay",suggestions:{unhealthy:{overview:"您的帐号健康度不良",detail:"您的质押率 {{C-RATIO}}% 比 Jet 要求的质押率还低 {{RATIO BELOW AMOUNT}}%。Jet 要求的最低质押率是 {{JET MIN C-RATIO}}%",solution:"为了更正您的仓位，您可以存入更多的抵押品，但我建议您在 \"驾驶舱\" 中偿还您的债务。",actionText:"去驾驶舱"},warning:{tenPercent:{overview:"小心 您快被清算了！",detail:"您的质押率 {{C-RATIO}}% 比 Jet 要求的质押率还低 10%。Jet 要求的质押率是 {{JET MIN C-RATIO}}%",solution:"为了避免您被清算 我建议您多存一点抵押物",actionText:"再存抵押物"},twentyPercent:{overview:"注意您的质押率！",detail:"您的质押率 {{C-RATIO}}% 比 Jet 要求的质押率还低 20%。Jet 要求的质押率是 {{JET MIN C-RATIO}}%",solution:"多存一点抵押物来增加你的质押率，将您的质押率提高到 20% 或更高的健康水平",actionText:"再存抵押物"}},deposit:{overview:"{{BEST DEPOSIT RATE NAME}} 看起来不错",detail:"<b class='bold'>{{BEST DEPOSIT RATE ABBREV}}</b> 现在有市场上最高的 <b class='bold'>借贷率</b>。您的帐号健康度不错 我建议您多存一点您的 <b class='bold'>{{USER BALANCE}} {{BEST DEPOSIT RATE ABBREV}}</b>。",actionText:"再存抵押物"},healthy:{overview:"天气晴朗",detail:"您的帐号现在健康度不错 我去看看现在的市场 看可不可您做几个建议"}},alert:{failed:"失败了!",success:"成功了!",airdropSuccess:"我们已经寄给您 {{AMOUNT}} {{RESERVE ABBREV}}。请更新您到网页。",refresh:"更新网页",originationFee:"这笔贷款会收取 {{ORIGINATION FEE}}% 发起费用.",headsup:"小心!",disclaimer:"You are about to enter the Jet Protocol Mainnet. Do not proceed if you do not understand and accept the Terms of Use, and potential for financial loss. <br/><br/><a href=\"https://www.jetprotocol.io/terms-of-use\" target=\"_blank\" class=\"bicyclette-bold text-gradient\">TERMS OF USE</a> <a href=\"https://www.jetprotocol.io/privacy-policy\" target=\"_blank\" class=\"bicyclette-bold text-gradient\">PRIVACY POLICY</a>",accept:"Accept",warning:"WARNING"}};var transactions$3={title:"飞行日志",date:"日期",signature:"签章",tradeAction:"交易",tradeAmount:"金额",noTrades:"您在 Jet 没有交易的记录。",entries:"显示 {start} 到 {end} 的 {row} 条目",deposit:"存款",withdraw:"借贷",borrow:"借贷",repay:"偿还"};var Jet_UI_ZH = {language:language$3,loading:loading$3,nav:nav$3,cockpit:cockpit$3,settings:settings$3,reserveDetail:reserveDetail$3,copilot:copilot$3,transactions:transactions$3};

    var Jet_UI_ZH$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        language: language$3,
        loading: loading$3,
        nav: nav$3,
        cockpit: cockpit$3,
        settings: settings$3,
        reserveDetail: reserveDetail$3,
        copilot: copilot$3,
        transactions: transactions$3,
        'default': Jet_UI_ZH
    });

    var collateral$3={term:"抵押物",definition:"您存在Jet的资产以保障您的借贷款。 您必须要过度抵押您的借贷款。 您存在Jet的资产市场价值必须要比您的借贷款还高"};var debt$3={term:"债务",definition:"您在Jet借的贷款价值"};var collateralizationRatio$3={term:"质押率",definition:"您的抵押品价值除以您的债务价值。 您必须要超额抵押您的借贷款。 您存在Jet的资产市场价值必须要比您的借贷款还高。因为Jet可能会扣押这些抵押品，以便在贷款违约的情况下收回贷款价值。 另请参阅最大 LTV。"};var adjustedCollateralizationRatio$3={term:"调整后的质押率",definition:"如果這筆交易成功後的实时质押率"};var depositRate$3={term:"存款率",definition:"存款人赚取的即时利率。 该费率以年化形式表示，不反映复利的影响，并且包括可能存在的任何协议费用。 费率变化会随着存入资产利用率而变化。"};var borrowRate$3={term:"借贷率",definition:"借款人支付的即时利率。 该费率以年化形式表示，不反映复利的影响，并且包括可能存在的任何协议费用。 利率变化会随着借入资产利用率而变化。"};var maximumLtv$3={term:"最高LTV",definition:"贷款价值比（loan to value,简写LTV）是指贷款金额和抵押品价值的比例。 是Jet使用的一种风险度量来决定批准的贷款规模。 您的 LTV 代表您贷款的规模与为贷款提供担保的财产价值之间的关系。 您可以去查看质押率。"};var utilisationRate$3={term:"使用率",definition:"已借用储备资产的比例。 例如，如果 USDC 的储备资产价值 100,000 美元，借款人以借用 65,000 美元，则利用率为 65%。 剩下的 35,000 美元可用于进一步借款。"};var availLiquidity$3={term:"可用流动性",definition:"资产可以在不影响其市场价格的情况下转换为现成现金的效率或容易程度，或以反映其内在价值的价格在市场上快速买卖"};var liquidationPremium$3={term:"清算溢价",definition:"清算溢价是向清算人提供额外的抵押物，清算人偿还低于最低抵押率的账户债务。此额外抵押物的美元价值等于清算溢价乘以已偿还债务的美元价值。 额外的抵押物从被清算用户的账户中支付。"};var Jet_Definitions_ZH = {collateral:collateral$3,debt:debt$3,collateralizationRatio:collateralizationRatio$3,adjustedCollateralizationRatio:adjustedCollateralizationRatio$3,depositRate:depositRate$3,borrowRate:borrowRate$3,maximumLtv:maximumLtv$3,utilisationRate:utilisationRate$3,availLiquidity:availLiquidity$3,liquidationPremium:liquidationPremium$3};

    var Jet_Definitions_ZH$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        collateral: collateral$3,
        debt: debt$3,
        collateralizationRatio: collateralizationRatio$3,
        adjustedCollateralizationRatio: adjustedCollateralizationRatio$3,
        depositRate: depositRate$3,
        borrowRate: borrowRate$3,
        maximumLtv: maximumLtv$3,
        utilisationRate: utilisationRate$3,
        availLiquidity: availLiquidity$3,
        liquidationPremium: liquidationPremium$3,
        'default': Jet_Definitions_ZH
    });

    var language$2="한국인";var loading$2={transactions:"거래 보내는중...",connectingWallet:"지갑 연결중...",initializing:"Starting Jet Engines",fetchingReserves:"Fetching Reserve Data",fetchingAccount:"Fetching Account Data"};var nav$2={cockpit:"조종실",settings:"설정",collapse:"붕괴",getCopilotSuggestion:"부조종사 의견 받기",transactions:"Flight Logs"};var cockpit$2={title:"조종실",asset:"자산",detail:"자세히",native:"네이티브",totalValueLocked:"Locked Market Value",totalBorrowed:"총 대출량",availableLiquidity:"사용 가능한 유동성",amountDeposited:"예치된 수량",amountBorrowed:"대출된 수량",depositRate:"예치율",borrowRate:"대출율",airdrop:"에어드랍",totalDepositedValue:"나의 예치 금액",totalBorrowedValue:"나의 대출 금액",yourRatio:"나의 C-Ratio",collateralizationRatio:"담보율",noInputAmount:"금액 입력.",adjustedCollateralization:"조절된 C-Ratio",deposit:"예치",walletBalance:"지갑 잔액",noDepositAmount:"금액 입력",notEnoughAsset:"충분하지 않은 {{ASSET}}.",withdraw:"출금",availableFunds:"이용가능한 Funds",lessFunds:"충분하지 않은 funds",borrow:"대출",maxBorrowAmount:"최대 대출",assetIsCurrentDeposit:"{{ASSET}}을 예치했으므로 대출할 수 없습니다.",noLiquidity:"유동성이 충분하지 않습니다",minCRatio:"이것은 귀하의 포지션을 Jet Protocol의 최소 담보 비율로 설정하여, 귀하의 계정을 청산 영역에 놓이게 할 것입니다. 확실하십니까?",belowMinRatio:"귀하의 담보가 부족합니다. 청산을 피하기 위해 예치하거나 빚을 상환하십시오.",subjectToLiquidation:"이 거래는 담보 비율을 {{NEW-C-RATIO}}%로 낮추어 청산 대상이 되고, 이 대출에는 {{ORIGINATION FEE}}%의 수수료가 부과됩니다. 그래도 대출 하시겠습니까?",confirm:"확인",repay:"상환",amountOwed:"빚진 금액",oweLess:"덜 빚지고 있습니다.",geobanned:"귀하의 지역에서는 Jet Protocol을 사용할 수 없습니다.",noMarket:"Jet marketplace를 초기화하지 못했습니다.",txSuccess:"성공적입니다! {{AMOUNT AND ASSET}} 중 {{TRADE ACTION}}이 접수되었습니다. 거래를 확인해보세요 <a href='{{EXPLORER LINK}}' class='text-gradient' target='_blank' style='margin: unset; font-weight: bold;'>explorer</a>.",txFailed:"거래를 실패하였습니다. 무엇이 잘못되었는지 확인이 불가하므로, 나중에 다시 시도하거나 저희에게 문의하세요.",max:"최대",assetIsCurrentBorrow:"{{ASSET}}을 대출했으므로 예치할 수 없습니다.",belowMinCRatio:"귀화의 담보가 부족합니다. 청산을 피하기 위해 예치하거나 빚을 상환하십시오.",search:"마켓 검색..",noBalanceForDeposit:"지갑에 예치할 {{ASSET}}이 없습니다.",noDepositsForBorrow:"대출을 받기 위해서는 담보를 예치해야 합니다.",noDepositsForWithdraw:"출금할 {{ASSET}}을 예치하지 않았습니다.",noDebtForRepay:"귀하는 {{ASSET}}의 빚이 없습니다.",rejectTrade:"이 거래는 담보 비율을 {{NEW-C-RATIO}}%로 낮추어서, 이는 {{JET MIN C-RATIO}}의 최소 비율보다 낮을 것입니다. 이 대출에는 {{ORIGINATION FEE}}%의 수수료가 부과됩니다. 그래도 대출 하시겠습니까?",insufficientLamports:"거래 수수료에 대한 부담 없이 모든 SOL을 예치하고 있습니다! 약간 낮은 양으로 다시 시도하십시오.",stillUndercollateralized:"Your new C-ratio of {{NEW-C-RATIO}}% is still under Jet's minimum marketplace collateralization ratio of {{JET MIN C-RATIO}}%. Please consider repaying more to avoid liquidation."};var settings$2={title:"설정",wallet:"지갑",connect:"연결",worldOfDefi:"지갑을 연결해서 Defi의 세계로 오세요.",theme:"테마",light:"Light",dark:"Dark",language:"언어",rpcNode:"RPC Node",current:"Current",defaultNode:"Jet Default",reset:"Reset",noUrl:"Enter a URL",disconnect:"Disconnect Wallet",connected:"Connected"};var reserveDetail$2={reserveSize:"비축 규모",availableLiquidity:"사용가능한 유동성",utilisationRate:"이용 비율",viewHistory:"내역 보기",totalBorrowed:"총 대출한 금액",maximumLTV:"최대 LTV",liquidationPremium:"유동성 프리미엄",tradeAsset:"{{ASSET}} 트레이드",minimumCollateralizationRatio:"최소 C-Ratio"};var copilot$2={name:"부조종사",header:"부조종사 왔습니다.",okay:"알겠습니다",suggestions:{unhealthy:{overview:"귀하의 계정이 정상적이지 않습니다.",detail:"담보 비율(총 예치 금액을 총 대출 금액으로 나눈 값)은 {{C-RATIO}}%로 Jet 마켓플레이스의 최소 담보 비율인 {{JET MIN C-RATIO}보다 {{RATIO BELOW AMOUNT}}% 낮습니다. }%.",solution:"귀화의 포지션을 바로잡기 위해 담보를 추가로 예치할 수 있지만, 빚을 조종실에서 상환하는 것이 좋습니다.",actionText:"조종실로 가세요"},warning:{tenPercent:{overview:"귀하는 위험할 정도로 청산에 가깝습니다.",detail:"담보 비율(총 예치 금액을 총 대출 금액으로 나눈 값)은 {{C-RATIO}}%로 Jet 마켓플레이스의 최소 담보 비율인 {{JET MIN C-RATIO}}%의 10% 이내입니다.",solution:"청산을 피하기 위해 더 많은 담보를 예치할 수 있습니다.",actionText:"출금"},twentyPercent:{overview:"담보 비율을 주시하십시오.",detail:"귀하의 담보 비율(총 예치 금액을 총 대출 금액으로 나눈 값)은 Jet 마켓플레이스의 최소 담보 비율인 {{JET MIN C-RATIO}}%보다 20% 미만인 {{C-RATIO}}%입니다.",solution:"더 많은 담보를 예치하여 담보 비율을 20% 이상의 정상적인 수준으로 올리십시오.",actionText:"출금"}},deposit:{overview:"현재 {{BEST DEPOSIT RATE NAME}}이 좋아 보입니다.",detail:"<b class='bold'>{{BEST DEPOSIT RATE ABBREV}}</b> has the best deposit <b class='bold'>rate</b> in the market right now at <b class='bold'>{{DEPOSIT RATE}}%</b>, and your account is in good standing so we recommend adding some collateral by depositing a portion of your <b class='bold'>{{USER BALANCE}} {{BEST DEPOSIT RATE ABBREV}}</b>.",actionText:"Let's Do It"},healthy:{overview:"하늘은 맑습니다.",detail:"귀하의 계정은 양호한 상태이며 정상적인 양의 담보가 확보되어 있습니다. 시장을 살펴보고 귀하를 위한 좋은 움직임을 제안할 수 있는지 확인하겠습니다. 나중에 저희에게 확인해주세요!"}},alert:{failed:"메이데이!",success:"성공적!",airdropSuccess:"{{UI AMOUNT}} {{RESERVE ABBREV}} 에어드랍했습니다. 최신화된 잔액을 보려면 앱을 새로고침하세요.",refresh:"새로고침",originationFee:"이 대출에는 {{ORIGINATION FEE}}%의 수수료가 부과됩니다.",headsup:"예의주시하세요!",disclaimer:"You are about to enter the Jet Protocol Mainnet. Do not proceed if you do not understand and accept the Terms of Use, and potential for financial loss. <br/><br/><a href=\"https://www.jetprotocol.io/terms-of-use\" target=\"_blank\" class=\"bicyclette-bold text-gradient\">TERMS OF USE</a> <a href=\"https://www.jetprotocol.io/privacy-policy\" target=\"_blank\" class=\"bicyclette-bold text-gradient\">PRIVACY POLICY</a>",accept:"Accept",warning:"WARNING"}};var transactions$2={title:"Flight Logs",date:"Date",signature:"Signature",tradeAction:"Transaction",tradeAmount:"Amount",noTrades:"You have no logged transactions with Jet.",entries:"{start} to {end} of {rows}",deposit:"Deposit",withdraw:"Withdraw",borrow:"Borrow",repay:"Repay"};var Jet_UI_KR = {language:language$2,loading:loading$2,nav:nav$2,cockpit:cockpit$2,settings:settings$2,reserveDetail:reserveDetail$2,copilot:copilot$2,transactions:transactions$2};

    var Jet_UI_KR$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        language: language$2,
        loading: loading$2,
        nav: nav$2,
        cockpit: cockpit$2,
        settings: settings$2,
        reserveDetail: reserveDetail$2,
        copilot: copilot$2,
        transactions: transactions$2,
        'default': Jet_UI_KR
    });

    var collateral$2={term:"담보",definition:"대출을 확보하기 위해 protocol에 예치된 자산."};var debt$2={term:"빚",definition:"대출의 가치에 대한 빚이 있거나 프로토콜로 인한것 같습니다."};var collateralizationRatio$2={term:"담보 비율",definition:""};var adjustedCollateralizationRatio$2={term:"조절된 담보 비율",definition:"현재 거래가 제출된 경우, 담보 비율이 얼마인지 실시간으로 표시된 수치."};var depositRate$2={term:"예치 이자율",definition:"예금자가 적립하는 순간 이자율. 이 비율은 연간 형식으로 표시되며 복리의 영향을 반영하지 않으며 적용될 수 있는 모든 프로토콜 수수료를 포함합니다. 예치된 자산의 이용 비율이 변함에 따라 비율이 변경됩니다."};var borrowRate$2={term:"대출 이자율",definition:"대출인이 지불하는 즉시 이자율. 이 비율은 연간 형식으로 표시되며 복리의 영향을 반영하지 않으며 적용될 수 있는 모든 프로토콜 수수료를 포함합니다. 예치된 자산의 이용 비율이 변함에 따라 비율이 변경됩니다."};var maximumLtv$2={term:"최대 LTV",definition:""};var utilisationRate$2={term:"이용 비율",definition:""};var availLiquidity$2={term:"유동성",definition:"자산의 시장 가격에 영향을 미치지 않고 자산을 스테이블 코인으로 전환할 수 있는 효율성 또는 용이성."};var liquidationPremium$2={term:"유동성 프리미엄",definition:""};var Jet_Definitions_KR = {collateral:collateral$2,debt:debt$2,collateralizationRatio:collateralizationRatio$2,adjustedCollateralizationRatio:adjustedCollateralizationRatio$2,depositRate:depositRate$2,borrowRate:borrowRate$2,maximumLtv:maximumLtv$2,utilisationRate:utilisationRate$2,availLiquidity:availLiquidity$2,liquidationPremium:liquidationPremium$2};

    var Jet_Definitions_KR$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        collateral: collateral$2,
        debt: debt$2,
        collateralizationRatio: collateralizationRatio$2,
        adjustedCollateralizationRatio: adjustedCollateralizationRatio$2,
        depositRate: depositRate$2,
        borrowRate: borrowRate$2,
        maximumLtv: maximumLtv$2,
        utilisationRate: utilisationRate$2,
        availLiquidity: availLiquidity$2,
        liquidationPremium: liquidationPremium$2,
        'default': Jet_Definitions_KR
    });

    var language$1="Русский";var loading$1={transactions:"Транзакции отправляются...",connectingWallet:"Кошелёк подключается...",initializing:"Завести Jet двигатели",fetchingReserves:"Получение резервных данных ",fetchingAccount:"Получение учётных данных "};var nav$1={cockpit:"Кабина",settings:"Настройки",collapse:"Свернуть",getCopilotSuggestion:"Получить помощь Второго пилота",transactions:"Бортовой журнал"};var cockpit$1={title:"Кабина",asset:"Актив",detail:"Подробнее",native:"Базовая",totalValueLocked:"Зарезервированная рыночная стоимость активов",totalBorrowed:"Общая сумма займов",availableLiquidity:"Доступная ликвидность",amountDeposited:"Депозит",amountBorrowed:"Займ",depositRate:"ГПД депозита",borrowRate:"ГПС займа",airdrop:"Airdrop",totalDepositedValue:"Сумма ваших депозитов",totalBorrowedValue:"Сумма ваших займов",yourRatio:"Ваш КО",collateralizationRatio:"Коэффициент обеспечения",noInputAmount:"Введите сумму.",adjustedCollateralization:"Скорректированный КО",deposit:"Пополнить",walletBalance:"Баланс кошелька",noDepositAmount:"Введите сумму",notEnoughAsset:"Недостаточно {{ASSET}}.",withdraw:"вывести",availableFunds:"Доступные средства",lessFunds:"Недостаточно средств",borrow:"Занять",maxBorrowAmount:"Максимальный займ",assetIsCurrentDeposit:"Вы предоставили {{ASSET}} и вы не можете занять его же.",noLiquidity:"Недостаточно ликвидности.",minCRatio:"Это действие приведёт к тому, что ваша позиция достигнет минимума коэффициента обеспечения, и ваш счёт может быть подвергнут ликвидации. Вы уверены?",belowMinRatio:"У вас недостаточно средств в залоге. Пополните залог или верните долг чтобы избежать ликвидации.",subjectToLiquidation:"Эта сделка понизит ваш коэффициент обеспечения до {{NEW-C-RATIO}}%, после чего ваш счёт может быть подвергнут ликвидации. Вы всё-равно хотите занять?",confirm:"Подтвердить",repay:"Вернуть",amountOwed:"Сумма долга",oweLess:"Вы должны меньше.",geobanned:"Jet протокол не доступен в вашем регионе.",noMarket:"площадка Jet не смогла запуститься.",txSuccess:"Успех! Ваш(а) {{TRADE ACTION}} на {{AMOUNT AND ASSET}} получен(а). Проверить транзакцию в <a href='{{EXPLORER LINK}}' class='text-gradient' target='_blank' style='margin: unset; font-weight: bold;'>обозревателе</a>.",txFailed:"Транзакция не прошла. Мы не уверены, что пошло не так. Попробуйте еще раз позже или свяжитесь с нами.",max:"Максимум",assetIsCurrentBorrow:"Вы одолжили {{ASSET}}, поэтому не можете его внести на депозит",belowMinCRatio:"У вас недостаточно средств в залоге. Пополните залог или верните долг чтобы избежать ликвидации.",search:"Поиск валюты",noBalanceForDeposit:"У Вас нету {{ASSET}} в кошельке, чтобы внести на депозит",noDepositsForBorrow:"Вы должны предоставить залог, чтобы вы могли занять.",noDepositsForWithdraw:"Вы не внесли на депозит {{ASSET}} чтобы вывести",noDebtForRepay:"Вы не дожны {{ASSET}}.",rejectTrade:"Сделка понизит ваш коэфициент залог {{NEW-C-RATIO}}%, что будет ниже \n минимального уровня {{JET MIN C-RATIO}}.",insufficientLamports:"Вы пытаетесь внести на депозит все Sol. У Вас не останется \"лампорт\" на комиссию. Уменьшите сумму Sol и попытайтесь снова ",stillUndercollateralized:"Ваш новый К-рейтинг {{NEW-C-RATIO}}% ниже минимального уровня на Jet's протоколе-  {{JET MIN C-RATIO}}%. Пожалуйста, оплатите больше, чтобы избежать ликвидации."};var settings$1={title:"Настройки",wallet:"Кошелёк",connect:"Подключиться",worldOfDefi:"Подключить ваш кошелек к миру DeFi.",theme:"Тема",light:"Светлая",dark:"Тёмная",language:"Язык",rpcNode:"RPC нода",current:"Текущая",defaultNode:"Jet Default",reset:"Перезагрузка",noUrl:"Ввести URL",disconnect:"Отключить кошелёк",connected:"Соединено"};var reserveDetail$1={reserveSize:"Размер резерва",availableLiquidity:"Доступная ликвидность",utilisationRate:"Коэффициент использования",viewHistory:"Показать историю",totalBorrowed:"Всего занято",maximumLTV:"Максимальный КДЗ",liquidationPremium:"Ликвидационная надбавка",tradeAsset:"Торговать {{ASSET}}",minimumCollateralizationRatio:"Минимальный КО"};var copilot$1={name:"Второй пилот",header:"Привет от второго пилота.",okay:"Хорошо",suggestions:{unhealthy:{overview:"Ваш счёт нездоров.",detail:"Ваш коэффициент обеспечения (сумма вашего залога поделённая на сумму ваших займов) сейчас {{C-RATIO}}%, что на {{RATIO BELOW AMOUNT}}% меньше, чем минимальный КО {{JET MIN C-RATIO}}% на торговой площадке Jet.",solution:"Чтобы исправить ваше положение, вы можете внести больше залога, но я вам рекомендую лучше вернуть долг в Кабине.",actionText:"Перейти в Кабину"},warning:{tenPercent:{overview:"Вы опасно близки к ликвидации.",detail:"Ваш коэффициент обеспечения (сумма вашего залога поделённая на сумму ваших займов) сейчас {{C-RATIO}}%, что в пределах 10% минимального КО {{JET MIN C-RATIO}}% на торговой площадке Jet.",solution:"Чтобы избежать ликвидации, вы можете пополнить ваш залог.",actionText:"Пополнить"},twentyPercent:{overview:"Уделите внимание вашему коэффициенту обеспечения.",detail:"Ваш коэффициент обеспечения (сумма вашего залога поделённая на сумму ваших займов) сейчас {{C-RATIO}}%, что менее чем на 20% выше минимального КО {{JET MIN C-RATIO}}% на торговой площадке Jet.",solution:"Повысьте ваш коэффициент обеспечения до здорового уровня 20% или более посредством пополнения вашего залога.",actionText:"Пополнить"}},deposit:{overview:"{{BEST DEPOSIT RATE NAME}} в данный момент выглядит неплохо.",detail:"<b class='bold'>{{BEST DEPOSIT RATE ABBREV}}</b> сейчас предлагает лучшую <b class='bold'>ГПД (годовую процентную доходность)</b> депозита на рынке в <b class='bold'>{{DEPOSIT RATE}}%</b>, и ваш счёт находится в хорошем состоянии, так что мы рекомендуем пополнить ваш залог, используя часть вашего <b class='bold'>{{USER BALANCE}} {{BEST DEPOSIT RATE ABBREV}}</b>.",actionText:"Полетели"},healthy:{overview:"Небо чистое.",detail:"Ваш счёт в хорошем состоянии и имеет здоровый уровень залога, так что я просмотрю рынок и попробую предложить вам какие-то хорошие варианты. Загляните сюда еще раз попозже!"}},alert:{failed:"Неудача!",success:"Успех!",airdropSuccess:"Вы получили Airdrop {{UI AMOUNT}} {{RESERVE ABBREV}}.\nПожалуйста, обновите страницу чтобы увидеть новый баланс.",refresh:"Обновить",originationFee:"Этот займ выдается с комиссией {{ORIGINATION FEE}}%",headsup:"Внимание!",disclaimer:"Вы подключились к Jet Protocol mainnet. Не продолжайте, если Вы не ознакомились или не приняли условия пользования, или не готовы к потенциальным финансовым убыткам.  <br/><br/><a href=\"https://www.jetprotocol.io/terms-of-use\" target=\"_blank\" class=\"bicyclette-bold text-gradient\">TERMS OF USE</a> <a href=\"https://www.jetprotocol.io/privacy-policy\" target=\"_blank\" class=\"bicyclette-bold text-gradient\">PRIVACY POLICY</a>",accept:"Принять",warning:"Внимание"}};var transactions$1={title:"Бортовой журнал",date:"Дата",signature:"Подпись",tradeAction:"Транзакция",tradeAmount:"Сумма",noTrades:"У Вас нету зарегистрированных транзакций в Jet",entries:"{start} до {end} из {rows}",deposit:"Пополнить",withdraw:"Вывести",borrow:"Одолжить",repay:"Оплатить"};var Jet_UI_RU = {language:language$1,loading:loading$1,nav:nav$1,cockpit:cockpit$1,settings:settings$1,reserveDetail:reserveDetail$1,copilot:copilot$1,transactions:transactions$1};

    var Jet_UI_RU$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        language: language$1,
        loading: loading$1,
        nav: nav$1,
        cockpit: cockpit$1,
        settings: settings$1,
        reserveDetail: reserveDetail$1,
        copilot: copilot$1,
        transactions: transactions$1,
        'default': Jet_UI_RU
    });

    var collateral$1={term:"Залог",definition:"Актив, который вы предоставляете нам для обеспечения вашего займа. В случае невыполнения обязательств, Jet протокол конфискует и использует этот актив, чтобы возместить стоимость вашего займа."};var debt$1={term:"Долг",definition:"Сумма, которую вы должны, или которая подлежит возврату Jet протоколу."};var collateralizationRatio$1={term:"Коэффициент обеспечения или КО",definition:"Стоимость вашего залога, разделенная на стоимость вашего долга. Вы должны предоставить залог больше, чем размер вашего долга, то есть справедливая рыночная стоимость ваших активов в залоге должна превышать сумму, которую вам разрешено брать в долг."};var adjustedCollateralizationRatio$1={term:"Скорректированный коэффициент обеспечения",definition:"Прогноз в реальном времени того, каким примерно будет ваш коэффициент обеспечения, если будет совершена текущая сделка."};var depositRate$1={term:"ГПД депозита",definition:"Общая сумма процентов, которые вы зарабатываете на депозитном счете за один год, при условии, что вы не добавляете и не снимаете средства в течение всего года. Годовая процентная доходность (ГПД) включает вашу процентную ставку и частоту начисления сложных процентов, то есть процент, который вы зарабатываете на свою основную сумму, плюс проценты с вашей прибыли."};var borrowRate$1={term:"ГПС займа",definition:"Годовая процентная ставка (ГПС), взимаемая по займу сроком на один год. При этом учитывается эффект начисления сложных процентов в течение периода займа, что означает, что он отражает проценты, и также начисления на ранее накопленные проценты."};var maximumLtv$1={term:"Максимальный КДЗ",definition:"Коэффициент долг/залог (КДЗ) - мера риска, используемая программой Jet при принятии решения об утверждении размера займа. Коэффициент вашего долга к залогу (КДЗ) представляет собой отношение между размером займа, который вы берете, и стоимостью имущества (залога), обеспечивающего займ. См. также: коэффициент обеспечения."};var utilisationRate$1={term:"Коэффициент использования",definition:"Фактически используемая часть потенциального выхода этой пары ликвидности в рамках программы Jet. Это функция от общей заёмной стоимости по отношению к размеру резерва."};var availLiquidity$1={term:"Ликвидность",definition:"Эффективность или легкость, с которой актив можно конвертировать в наличные деньги, не влияя на его рыночную цену, или быстро купить или продать на рынке по цене, отражающей его внутреннюю стоимость."};var liquidationPremium$1={term:"Ликвидационная надбавка",definition:"Процент (%) надбавки к дефициту обеспечения займа, применяемый к ликвидационной стоимости пользовательского залога."};var Jet_Definitions_RU = {collateral:collateral$1,debt:debt$1,collateralizationRatio:collateralizationRatio$1,adjustedCollateralizationRatio:adjustedCollateralizationRatio$1,depositRate:depositRate$1,borrowRate:borrowRate$1,maximumLtv:maximumLtv$1,utilisationRate:utilisationRate$1,availLiquidity:availLiquidity$1,liquidationPremium:liquidationPremium$1};

    var Jet_Definitions_RU$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        collateral: collateral$1,
        debt: debt$1,
        collateralizationRatio: collateralizationRatio$1,
        adjustedCollateralizationRatio: adjustedCollateralizationRatio$1,
        depositRate: depositRate$1,
        borrowRate: borrowRate$1,
        maximumLtv: maximumLtv$1,
        utilisationRate: utilisationRate$1,
        availLiquidity: availLiquidity$1,
        liquidationPremium: liquidationPremium$1,
        'default': Jet_Definitions_RU
    });

    var language="Türkçe\n";var loading={transactions:"İşleminiz yapılıyor...",connectingWallet:"Cüzdan bağlanıyor...",initializing:"Jet Motorları Çalıştırılıyor",fetchingReserves:"Yedek Veriler Sağlanıyor",fetchingAccount:"Hesap Bilgisi Sağlanıyor"};var nav={cockpit:"Kokpit",settings:"Ayarlar",collapse:"Daralt",getCopilotSuggestion:"Yardımcı pilot önerisi alın.",transactions:"Uçuş Kayıtları"};var cockpit={title:"Kokpit",asset:"Varlık",detail:"Detay",native:"Özgün",totalValueLocked:"Kilitli Piyasa Değeri",totalBorrowed:"Toplam Ödünç Alınan",availableLiquidity:"Uygun Likidite",amountDeposited:"Yatırılan",amountBorrowed:"Ödünç alınmış",depositRate:"Yatırma Oranı",borrowRate:"Borç alma Oranı",airdrop:"Airdrop",totalDepositedValue:"Yatırılan varlık değeriniz",totalBorrowedValue:"Ödünç Aldığınız Varlık",yourRatio:"C-Oranınız",collateralizationRatio:"Teminat Oranı",noInputAmount:"Miktar girin",adjustedCollateralization:"Düzeltilmiş C-Oranı",deposit:"Yatırma",walletBalance:"Cüzdan Bakiyesi",noDepositAmount:"Miktar girin",notEnoughAsset:"Yeterli {{ASSET}} yok.",withdraw:"Çekim",availableFunds:"Kullanılabilir Fonlar",lessFunds:"Yeterli fon yok",borrow:"Borç al",maxBorrowAmount:"Maksimum Borç",assetIsCurrentDeposit:"{{ASSET}} yatırdığınız için ödünç alamazsınız.",noLiquidity:"Yeterli likidite yok.",minCRatio:"Bu işlem, pozisyonunuzu minimum teminat oranına alacaktır. Dolayısıyla hesabınız, likidasyon bölgesine girecektir. Bu işlemi yapmayı istediğinize emin misiniz?",belowMinRatio:"Yeterli teminata sahip değilsiniz. Likidasyondan kaçınmak için para yatırın veya borcunuzu geri ödeyin.",subjectToLiquidation:"Bu işlem, likidasyon oranınızı %{{NEW-C-RATIO}} 'ya düşürür ve bu da sizi likidasyona tabi kılar. Yine de ödünç almak ister misin?",confirm:"Onayla",repay:"Geri öde",amountOwed:"Borçlu Tutar",oweLess:"Daha az borçlusun.",geobanned:"Jet Protocol bölgenizde kullanılamıyor.",noMarket:"Jet pazaryerini başlatamadık.",txSuccess:"Başarılı! {{AMOUNT AND ASSET}} tutarındaki  {{TRADE ACTION}} alındı. <a href='{{EXPLORER LINK}}' class='text-gradient' target='_blank' style='margin: unset; font-weight: bold;'>explorer</a>'da işleme göz atın.",txFailed:"İşlem başarısız. Neyin yanlış gittiğinden emin değilim, lütfen daha sonra tekrar deneyin veya bizimle iletişime geçin.",max:"Maksimum",assetIsCurrentBorrow:"{{ASSET}} ödünç aldınız ve bu nedenle yatıramazsınız.",belowMinCRatio:"Teminatınız yetersiz. Likidasyondan kaçınmak için para yatırın veya borcunuzu geri ödeyin.",search:"Pazar arama..",noBalanceForDeposit:"Yatırmak istediğiniz {{ASSET}} varlığı cüzdanınızda bulunmuyor. ",noDepositsForBorrow:"Ödünç almak için teminat yatırmanız gerekiyor.",noDepositsForWithdraw:"Çekme istediğiniz herhangi bir {{ASSET}} yatırımınız yok. ",noDebtForRepay:"Hiç {{ASSET}} borcunuz yok.",rejectTrade:"Bu ticaret, sizin yeni teminat oranınızı {{NEW-C-RATIO}}% minimum oranımız olan {{JET MIN C-RATIO}} altına düşürebilir. Borcun oluşturulması için ayrıca bir komisyon daha bulunmaktadır {{ORIGINATION FEE}}%. Hala borç almak istediğinize emin misiniz?",insufficientLamports:"İşlem ücretlerini dahi karşılamayacak kadar çok SOL yatırıyorsunuz. Şu ankinden daha az bir miktar kullanarak yeniden deneyin. ",stillUndercollateralized:"Yeni C-oranınız {{NEW-C-RATIO}}% hala Jet Protocol'ün minimum piyasa teminat oranı"};var settings={title:"Ayarlar",wallet:"Cüzdan",connect:"Bağlan",worldOfDefi:"Cüzdanınızı DeFi dünyasına bağlayın.",theme:"Tema",light:"Aydınlık",dark:"Karanlık",language:"Dil",rpcNode:"RPC Düğümü",current:"Şu andaki",defaultNode:"Jet varsayılan",reset:"Sıfırla",noUrl:"URL girin",disconnect:"Cüzdan Bağlantısını Sonlandır",connected:"Bağlandı"};var reserveDetail={reserveSize:"Rezerv Büyüklüğü",availableLiquidity:"Mevcut Likidite",utilisationRate:"Kullanım Oranı",viewHistory:"İşlem geçmişini görüntüle",totalBorrowed:"Toplam Borç",maximumLTV:"Maksimum Borç-Değer Oranı",liquidationPremium:"Premium Likidasyon",tradeAsset:"{{ASSET}} Ticareti",minimumCollateralizationRatio:"Minimum C-Oranı"};var copilot={name:"Yardımcı Pilot",header:"Yardımcı pilot burada.",okay:"Okay",suggestions:{unhealthy:{overview:"Hesabınız sağlıksız.",detail:"Teminat Oranınız (toplam yatırdığınız değerin toplam ödünç aldığınız değere oranı) %{{C-RATIO}} olup, Jet pazarının minimum teminatlandırma oranı olan %{{JET MIN C-RATIO}} değerinden %{{RATIO BELOW AMOUNT}} daha düşüktür.",solution:"Pozisyonunuzu doğrultmak için daha fazla teminat yatırabilirsiniz ancak borcunuzu Kokpit'te ödemenizi öneririm.",actionText:"Kokpite Git"},warning:{tenPercent:{overview:"Tehlikeli bir şekilde likidasyona yakınsınız.",detail:"Teminat Oranınız (toplam yatırdığınız değerin toplam ödünç aldığınız değere bölümü) %{{C-RATIO}} olup, Jet pazarının minimum teminatlandırma oranı olan %{{JET MIN C-RATIO}} %10'luk kısım içindedir.",solution:"Likidasyondan kaçınmak için daha fazla teminat yatırabilirsiniz.",actionText:"Yatırma"},twentyPercent:{overview:"Teminat oranınıza dikkat edin.",detail:"Teminat Oranınız (toplam yatırdığınız değerin toplam ödünç aldığınız değere bölümü) %{{C-RATIO}} 'dur ve bu, Jet pazarının minimum teminatlandırma oranı olan %{{JET MIN C-RATIO}} 'nın %20 üzerindedir.",solution:"Daha fazla teminat yatırarak teminatlandırma oranınızı, sağlıklı olarak kabul edilen %20 veya daha yüksek seviyelere çıkartın.",actionText:"Yatırma"}},deposit:{overview:"{{BEST DEPOSIT APY NAME}} şu anda iyi görünüyor.",detail:"<b class='bold'>{{BEST DEPOSIT APY ABBREV}}</b> şu anda piyasadaki en iyi mevduata sahip <b class='bold'>APY (Yıllık Yüzde Getiri)</b> <b class='bold'>%{{DEPOSIT APY}}</b> ve hesabınız iyi durumda olduğundan, <b class='bold'>{{USER BALANCE}}</b> hesabınızdaki varlıkların bir kısmını yatırarak bir miktar teminat eklemenizi öneririz <b class='bold'>{{BEST DEPOSIT APY ABBREV}}</b>.",actionText:"Haydi uçalım"},healthy:{overview:"Gökler açık",detail:"Hesabınız iyi durumda ve sağlıklı bir şekilde fazla teminatlandırılmış durumda, piyasaya bir göz atıp sizin için iyi hamleler önerebilecek miyim bir bakayım. Daha sonra tekrar kontrol edin!"}},alert:{failed:"İmdat!",success:"Başarılı!",airdropSuccess:"Size {{UI AMOUNT}} {{RESERVE ABBREV}} değerindeki varlığı Airdrop'la gönderdik. Yeni bakiyenizi görmek için lütfen uygulamayı yenileyin.",refresh:"Yenile",originationFee:"Bu borca ilişkin {{ORIGINATION FEE}}% kadar oluşturulma komisyonu bulunmaktadır. ",headsup:"Dikkat buraya!",disclaimer:"JetProtocol mainnet'e erişiyorsunuz. Yeterince bilgiye sahip değilseniz ilerlemeyin, şartları veya olası kayıpları kabul etmeyin.  <br/><br/><a href=\"https://www.jetprotocol.io/terms-of-use\" target=\"_blank\" class=\"bicyclette-bold text-gradient\">TERMS OF USE</a> <a href=\"https://www.jetprotocol.io/privacy-policy\" target=\"_blank\" class=\"bicyclette-bold text-gradient\">PRIVACY POLICY</a>",accept:"Kabul Et",warning:"UYARI"}};var transactions={title:"Uçuş Kayırları",date:"Tarih",signature:"İmza",tradeAction:"İşlem",tradeAmount:"Miktar",noTrades:"Jet ile herhangi bir kayda geçmiş işleminiz bulunamadı",entries:"{rows}'ların {start}'ından {end}'una kadar",deposit:"Yatır",withdraw:"Çek",borrow:"Ödünç Al",repay:"Geri Öde"};var Jet_UI_TR = {language:language,loading:loading,nav:nav,cockpit:cockpit,settings:settings,reserveDetail:reserveDetail,copilot:copilot,transactions:transactions};

    var Jet_UI_TR$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        language: language,
        loading: loading,
        nav: nav,
        cockpit: cockpit,
        settings: settings,
        reserveDetail: reserveDetail,
        copilot: copilot,
        transactions: transactions,
        'default': Jet_UI_TR
    });

    var collateral={term:"\nTeminat",definition:"Borcunuzu güvence altına almak için bize yatırdığınız varlık. Borcunuzun temerrüde düşmesi durumunda, Jet kredinin değerini geri alabilmek için bu teminatı alacaktır."};var debt={term:"\nBorç",definition:"Jet Protokolü'ne borçlu olunan veya ödenmesi gereken kredi tutarı"};var collateralizationRatio={term:"Teminatlandırma Oranı veya C-Oranı",definition:"\nTeminatınızın değeri, borcunuzun değerine bölünür. Borcunuzu fazla teminat altına almanız gerekmektedir. Yani yatırılan varlıklarınızın piyasa değeri, ödünç almanıza izin verilen tutarın değerini aşmalıdır."};var adjustedCollateralizationRatio={term:"\nDüzeltilmiş Teminat Oranı",definition:"Mevcut işlemin gerçekleşmesi halinde teminatlandırma oranınızın potansiyel olarak ne olacağının gerçek zamanlı bir temsili."};var depositRate={term:"Yatırma APY'si",definition:"\nTüm yıl boyunca para eklemediğinizi veya çekmediğinizi varsayarsak, bir mevduat hesabında bir yıl boyunca kazandığınız toplam faiz tutarı. Yıllık yüzde getirisi (APY), faiz oranınızı ve anaparanızdan kazandığınız faiz artı kazançlarınızın faizi olan bileşik faiz sıklığını içerir."};var borrowRate={term:"Borç APR'si",definition:"Bir yıl boyunca bir krediye uygulanan yıllık yüzde oranı (APR). Bu, kredi döneminde bileşik faizin etkisini hesaba katar, yani daha önce birikmiş faizle kazanılan faizi de yansıtır."};var maximumLtv={term:"\nMaksimum LTV",definition:"Kredi-değer oranı, Jet programı tarafından ne kadar büyük bir kredinin onaylanacağına karar verirken kullanılan bir risk ölçüsüdür. Kredi-değer oranınız (LTV), aldığınız kredinin büyüklüğü ile krediyi güvence altına alan varlıkların değeri arasındaki ilişkiyi temsil eder. Ayrıca bakınız: teminatlandırma oranı."};var utilisationRate={term:"Kullanım Oranı",definition:"Likidite çiftinin Jet programı içindeki potansiyel getirisini fiilen kullanılan miktarı. Bu, rezerv büyüklüğüne karşı toplam ödünç alınan değerin bir fonksiyonudur."};var availLiquidity={term:"Likidite",definition:"Bir varlığın piyasa fiyatını etkilemeden hazır nakde dönüştürülebilmesi veya gerçek değerini yansıtan bir fiyattan piyasada hızla alınıp satılabilmesinin etkinliği veya kolaylığı."};var liquidationPremium={term:"Premium Likidasyon",definition:"Kullanıcının varlıklarına likidasyon sırasında uygulanan teminat açığındaki (%) artış"};var Jet_Definitions_TR = {collateral:collateral,debt:debt,collateralizationRatio:collateralizationRatio,adjustedCollateralizationRatio:adjustedCollateralizationRatio,depositRate:depositRate,borrowRate:borrowRate,maximumLtv:maximumLtv,utilisationRate:utilisationRate,availLiquidity:availLiquidity,liquidationPremium:liquidationPremium};

    var Jet_Definitions_TR$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        collateral: collateral,
        debt: debt,
        collateralizationRatio: collateralizationRatio,
        adjustedCollateralizationRatio: adjustedCollateralizationRatio,
        depositRate: depositRate,
        borrowRate: borrowRate,
        maximumLtv: maximumLtv,
        utilisationRate: utilisationRate,
        availLiquidity: availLiquidity,
        liquidationPremium: liquidationPremium,
        'default': Jet_Definitions_TR
    });

    // Dictionary of UI text throughout Jet
    const dictionary = {
        // English
        en: Jet_UI_EN$1,
        // Mandarin
        zh: Jet_UI_ZH$1,
        //Russian
        ru: Jet_UI_RU$1,
        //Turkish
        tr: Jet_UI_TR$1,
        //Korean
        kr: Jet_UI_KR$1
    };
    // Definitions of various terminology
    const definitions = {
        en: Jet_Definitions_EN$1,
        zh: Jet_Definitions_ZH$1,
        ru: Jet_Definitions_RU$1,
        tr: Jet_Definitions_TR$1,
        kr: Jet_Definitions_KR$1
    };

    const SECONDS_PER_HOUR = new bn$1(3600);
    const SECONDS_PER_DAY = SECONDS_PER_HOUR.muln(24);
    const SECONDS_PER_WEEK = SECONDS_PER_DAY.muln(7);
    const MAX_ACCRUAL_SECONDS = SECONDS_PER_WEEK;
    const FAUCET_PROGRAM_ID = new PublicKey("4bXpkKSV8swHSnwqtzuboGPaPDeEgAn4Vt8GfarV5rZt");
    let program;
    let market$1;
    let user$1;
    let idl;
    let customProgramErrors;
    let connection;
    let transactionLogConnection;
    let confirmedSignatures;
    let currentSignaturesIndex = 0;
    let coder;
    PROGRAM.subscribe(data => program = data);
    MARKET.subscribe(data => market$1 = data);
    USER.subscribe(data => user$1 = data);
    CUSTOM_PROGRAM_ERRORS.subscribe(data => customProgramErrors = data);
    ANCHOR_WEB3_CONNECTION.subscribe(data => connection = data);
    ANCHOR_CODER.subscribe(data => coder = data);
    // Development / Devnet identifier
    const inDevelopment = true ;
    // Rollbar error logging
    const rollbar = new Rollbar({
        accessToken: 'e29773335de24e1f8178149992226c5e',
        captureUncaught: true,
        captureUnhandledRejections: true,
        payload: {
            environment: 'devnet' 
        }
    });
    // Get IDL and market data
    const getMarketAndIDL = async () => {
        // Fetch IDL and preferred RPC Node
        const idlPath = "idl/" + "devnet" + "/jet.json";
        console.log(`Loading IDL from ${idlPath}`);
        const resp = await fetch(idlPath);
        idl = await resp.json();
        IDL_METADATA.set(parseIdlMetadata(idl.metadata));
        CUSTOM_PROGRAM_ERRORS.set(idl.errors);
        // Establish web3 connection
        const idlMetadata = parseIdlMetadata(idl.metadata);
        coder = new Coder(idl);
        // Establish and test web3 connection
        // If error log it and display failure component
        const preferredNode = localStorage.getItem('jetPreferredNode');
        try {
            const anchorConnection = new Connection(preferredNode ?? idlMetadata.cluster, (Provider.defaultOptions()).commitment);
            ANCHOR_WEB3_CONNECTION.set(anchorConnection);
            USER.update(user => {
                user.rpcNode = preferredNode;
                return user;
            });
        }
        catch {
            const anchorConnection = new Connection(idlMetadata.cluster, (Provider.defaultOptions()).commitment);
            ANCHOR_WEB3_CONNECTION.set(anchorConnection);
            localStorage.removeItem('jetPreferredNode');
            USER.update(user => {
                user.rpcNode = null;
                return user;
            });
        }
        ANCHOR_CODER.set(new Coder(idl));
        try {
            await connection.getVersion();
        }
        catch (err) {
            console.error(`Unable to connect: ${err}`);
            rollbar.critical(`Unable to connect: ${err}`);
            INIT_FAILED.set(true);
            return;
        }
        // Setup reserve structures
        const reserves = {};
        for (const reserveMeta of idlMetadata.reserves) {
            let reserve = {
                name: reserveMeta.name,
                abbrev: reserveMeta.abbrev,
                marketSize: TokenAmount.zero(reserveMeta.decimals),
                outstandingDebt: TokenAmount.zero(reserveMeta.decimals),
                utilizationRate: 0,
                depositRate: 0,
                borrowRate: 0,
                maximumLTV: 0,
                liquidationPremium: 0,
                price: 0,
                decimals: reserveMeta.decimals,
                depositNoteExchangeRate: new bn$1(0),
                loanNoteExchangeRate: new bn$1(0),
                accruedUntil: new bn$1(0),
                config: {
                    utilizationRate1: 0,
                    utilizationRate2: 0,
                    borrowRate0: 0,
                    borrowRate1: 0,
                    borrowRate2: 0,
                    borrowRate3: 0,
                    minCollateralRatio: 0,
                    liquidationPremium: 0,
                    manageFeeCollectionThreshold: new bn$1(0),
                    manageFeeRate: 0,
                    loanOriginationFee: 0,
                    liquidationSlippage: 0,
                    _reserved0: 0,
                    liquidationDexTradeMax: 0,
                    _reserved1: [],
                },
                accountPubkey: reserveMeta.accounts.reserve,
                vaultPubkey: reserveMeta.accounts.vault,
                availableLiquidity: TokenAmount.zero(reserveMeta.decimals),
                feeNoteVaultPubkey: reserveMeta.accounts.feeNoteVault,
                tokenMintPubkey: reserveMeta.accounts.tokenMint,
                tokenMint: TokenAmount.zero(reserveMeta.decimals),
                faucetPubkey: reserveMeta.accounts.faucet ?? null,
                depositNoteMintPubkey: reserveMeta.accounts.depositNoteMint,
                depositNoteMint: TokenAmount.zero(reserveMeta.decimals),
                loanNoteMintPubkey: reserveMeta.accounts.loanNoteMint,
                loanNoteMint: TokenAmount.zero(reserveMeta.decimals),
                pythPricePubkey: reserveMeta.accounts.pythPrice,
                pythProductPubkey: reserveMeta.accounts.pythProduct,
            };
            reserves[reserveMeta.abbrev] = reserve;
        }
        // Update market accounts and reserves
        MARKET.update(market => {
            market.accountPubkey = idlMetadata.market.market;
            market.authorityPubkey = idlMetadata.market.marketAuthority;
            market.reserves = reserves;
            market.currentReserve = reserves.SOL;
            return market;
        });
        // Subscribe to market 
        await subscribeToMarket(idlMetadata, connection, coder);
    };
    // Connect to user's wallet
    const getWalletAndAnchor = async (provider) => {
        // Cast solana injected window type
        const solWindow = window;
        let wallet;
        // Wallet adapter or injected wallet setup
        if (provider.name === 'Phantom' && solWindow.solana?.isPhantom) {
            wallet = solWindow.solana;
        }
        else if (provider.name === 'Solflare' && solWindow.solflare?.isSolflare) {
            wallet = solWindow.solflare;
        }
        else if (provider.name === 'Slope' && !!solWindow.Slope) {
            wallet = new solWindow.Slope();
            const { data } = await wallet.connect();
            if (data.publicKey) {
                wallet.publicKey = new PublicKey(data.publicKey);
            }
            wallet.on = (action, callback) => { if (callback)
                callback(); };
        }
        else if (provider.name === 'Math Wallet' && solWindow.solana?.isMathWallet) {
            wallet = solWindow.solana;
            wallet.publicKey = new PublicKey(await solWindow.solana.getAccount());
            wallet.on = (action, callback) => { if (callback)
                callback(); };
            wallet.connect = (action, callback) => { if (callback)
                callback(); };
        }
        else if (provider.name === 'Solong' && solWindow.solong) {
            wallet = solWindow.solong;
            wallet.publicKey = new PublicKey(await solWindow.solong.selectAccount());
            wallet.on = (action, callback) => { if (callback)
                callback(); };
            wallet.connect = (action, callback) => { if (callback)
                callback(); };
        }
        else {
            wallet = new WalletAdapter(provider.url);
        }
        // Setup anchor program
        setProvider(new Provider(connection, wallet, Provider.defaultOptions()));
        program = new Program(idl, (new PublicKey(idl.metadata.address)));
        PROGRAM.set(program);
        // Set up wallet connection
        wallet.name = provider.name;
        wallet.on('connect', async () => {
            //Set wallet object on user
            USER.update(user => {
                user.wallet = wallet;
                return user;
            });
            // Begin fetching transaction logs
            initTransactionLogs();
            // Get all asset pubkeys owned by wallet pubkey
            await getAssetPubkeys();
            // Subscribe to all asset accounts for those pubkeys
            await subscribeToAssets(connection, coder, wallet.publicKey);
            // Init wallet for UI display
            USER.update(user => {
                user.walletInit = true;
                return user;
            });
        });
        // Initiate wallet connection
        try {
            await wallet.connect();
        }
        catch (err) {
            console.error(err);
        }
    };
    // Disconnect user wallet
    const disconnectWallet = () => {
        if (user$1.wallet?.disconnect) {
            user$1.wallet.disconnect();
        }
        if (user$1.wallet?.forgetAccounts) {
            user$1.wallet.forgetAccounts();
        }
        USER.update(user => {
            user.wallet = null;
            user.walletInit = false;
            user.assets = null;
            user.walletBalances = {};
            user.collateralBalances = {};
            user.loanBalances = {};
            user.position = {
                depositedValue: 0,
                borrowedValue: 0,
                colRatio: 0,
                utilizationRate: 0
            };
            user.transactionLogs = [];
            return user;
        });
    };
    // Get user token accounts
    const getAssetPubkeys = async () => {
        if (program == null || user$1.wallet === null) {
            return;
        }
        let [obligationPubkey, obligationBump] = await findObligationAddress(program, market$1.accountPubkey, user$1.wallet.publicKey);
        let assetStore = {
            sol: new TokenAmount(new bn$1(0), SOL_DECIMALS),
            obligationPubkey,
            obligationBump,
            tokens: {}
        };
        for (const assetAbbrev in market$1.reserves) {
            let reserve = market$1.reserves[assetAbbrev];
            let tokenMintPubkey = reserve.tokenMintPubkey;
            let [depositNoteDestPubkey, depositNoteDestBump] = await findDepositNoteDestAddress(program, reserve.accountPubkey, user$1.wallet.publicKey);
            let [depositNotePubkey, depositNoteBump] = await findDepositNoteAddress(program, reserve.accountPubkey, user$1.wallet.publicKey);
            let [loanNotePubkey, loanNoteBump] = await findLoanNoteAddress(program, reserve.accountPubkey, obligationPubkey, user$1.wallet.publicKey);
            let [collateralPubkey, collateralBump] = await findCollateralAddress(program, reserve.accountPubkey, obligationPubkey, user$1.wallet.publicKey);
            let asset = {
                tokenMintPubkey,
                walletTokenPubkey: await Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, tokenMintPubkey, user$1.wallet.publicKey),
                walletTokenExists: false,
                walletTokenBalance: TokenAmount.zero(reserve.decimals),
                depositNotePubkey,
                depositNoteBump,
                depositNoteExists: false,
                depositNoteBalance: TokenAmount.zero(reserve.decimals),
                depositBalance: TokenAmount.zero(reserve.decimals),
                depositNoteDestPubkey,
                depositNoteDestBump,
                depositNoteDestExists: false,
                depositNoteDestBalance: TokenAmount.zero(reserve.decimals),
                loanNotePubkey,
                loanNoteBump,
                loanNoteExists: false,
                loanNoteBalance: TokenAmount.zero(reserve.decimals),
                loanBalance: TokenAmount.zero(reserve.decimals),
                collateralNotePubkey: collateralPubkey,
                collateralNoteBump: collateralBump,
                collateralNoteExists: false,
                collateralNoteBalance: TokenAmount.zero(reserve.decimals),
                collateralBalance: TokenAmount.zero(reserve.decimals),
                maxDepositAmount: 0,
                maxWithdrawAmount: 0,
                maxBorrowAmount: 0,
                maxRepayAmount: 0
            };
            // Set user assets
            assetStore.tokens[assetAbbrev] = asset;
            USER.update(user => {
                user.assets = assetStore;
                return user;
            });
        }
    };
    // Get all confirmed signatures for wallet pubkey
    // TODO: call this again when user changes rpc node
    const initTransactionLogs = async () => {
        if (!user$1.wallet) {
            return;
        }
        // Set up connection
        transactionLogConnection = user$1.rpcNode ? new Connection(user$1.rpcNode)
            : (new Connection('https://api.devnet.solana.com/')
                );
        // Fetch all confirmed signatures
        confirmedSignatures = await transactionLogConnection.getConfirmedSignaturesForAddress2(user$1.wallet.publicKey, undefined, 'confirmed');
        // Get first 16 full detailed logs
        await getTransactionsDetails(16);
    };
    // Get transaction details from confirmed signatures
    const getTransactionsDetails = async (txAmount) => {
        // Begin loading transaction logs
        USER.update(user => {
            user.transactionLogsInit = false;
            return user;
        });
        // Iterate until get the last signature or add the amount of tx we called for
        let logsCount = 0;
        let newLogs = [];
        while (currentSignaturesIndex < confirmedSignatures.length && logsCount < txAmount) {
            // Get current signature from index
            const currentSignature = confirmedSignatures[currentSignaturesIndex]?.signature;
            if (!currentSignature) {
                return;
            }
            // Get confirmed transaction for signature
            const log = await transactionLogConnection.getConfirmedTransaction(currentSignature, 'confirmed');
            const detailedLog = log ? await getLogDetails(log, currentSignature) : null;
            if (detailedLog) {
                newLogs.push(detailedLog);
                logsCount++;
            }
            // Increment current index
            currentSignaturesIndex++;
        }
        // Add transaction logs and stop loading
        USER.update(user => {
            user.transactionLogs = [...user.transactionLogs, ...newLogs];
            user.transactionLogsInit = true;
            return user;
        });
    };
    // Get UI data of a transaction log
    let getLogDetails = async (log, signature) => {
        // Record of instructions to their first 8 bytes for transaction logs
        const instructionBytes = {
            deposit: [242, 35, 198, 137, 82, 225, 242, 182],
            withdraw: [183, 18, 70, 156, 148, 109, 161, 34],
            borrow: [228, 253, 131, 202, 207, 116, 89, 18],
            repay: [234, 103, 67, 82, 208, 234, 219, 166]
        };
        // Use log messages to only surface transactions that utilize Jet
        for (let msg of log.meta.logMessages) {
            if (msg.indexOf(idl.metadata.address) !== -1) {
                for (let progInst in instructionBytes) {
                    for (let inst of log.transaction.instructions) {
                        // Get first 8 bytes from data
                        const txInstBytes = [];
                        for (let i = 0; i < 8; i++) {
                            txInstBytes.push(inst.data[i]);
                        }
                        // If those bytes match any of our instructions label trade action
                        if (JSON.stringify(instructionBytes[progInst]) === JSON.stringify(txInstBytes)) {
                            log.tradeAction = dictionary[user$1.language].transactions[progInst];
                            // Determine asset and trade amount
                            for (let pre of log.meta.preTokenBalances) {
                                for (let post of log.meta.postTokenBalances) {
                                    if (pre.mint === post.mint && pre.uiTokenAmount.amount !== post.uiTokenAmount.amount) {
                                        for (let reserve of idl.metadata.reserves) {
                                            if (reserve.accounts.tokenMint === pre.mint) {
                                                // For withdraw and borrow SOL,
                                                // Skip last account (pre-token balance is 0)
                                                if (reserve.abbrev === 'SOL'
                                                    && (progInst === 'withdraw' || progInst === 'borrow')
                                                    && pre.uiTokenAmount.amount === '0') {
                                                    break;
                                                }
                                                log.tokenAbbrev = reserve.abbrev;
                                                log.tokenDecimals = reserve.decimals;
                                                log.tokenPrice = reserve.price;
                                                log.tradeAmount = new TokenAmount(new bn$1(post.uiTokenAmount.amount - pre.uiTokenAmount.amount), reserve.decimals);
                                            }
                                        }
                                    }
                                }
                            }
                            // Signature
                            log.signature = signature;
                            // UI date
                            log.blockDate = new Date(log.blockTime * 1000).toLocaleDateString();
                            // Explorer URL
                            log.explorerUrl = explorerUrl(log.signature);
                            // If we found mint match, add tx to logs
                            if (log.tokenAbbrev) {
                                return log;
                            }
                        }
                    }
                }
            }
        }
    };
    // Add new transaction log on trade submit
    let addTransactionLog = async (signature) => {
        const txLogs = user$1.transactionLogs ?? [];
        //Reset logs for load
        USER.update(user => {
            user.transactionLogsInit = false;
            return user;
        });
        // Keep trying to get confirmed log (may take a few seconds for validation)
        let log = null;
        while (!log) {
            log = await transactionLogConnection.getConfirmedTransaction(signature, 'confirmed');
            timeout(2000);
        }
        // Get UI details and add to logs store
        const logDetail = await getLogDetails(log, signature);
        if (logDetail) {
            txLogs.unshift(logDetail);
            USER.update(user => {
                user.transactionLogs = txLogs;
                user.transactionLogsInit = true;
                return user;
            });
        }
    };
    // Deposit
    const deposit = async (abbrev, lamports) => {
        if (!user$1.assets || !user$1.wallet || !program) {
            return [TxnResponse.Failed, null];
        }
        const [ok, txid] = await refreshOldReserves();
        if (!ok) {
            return [TxnResponse.Failed, txid];
        }
        let reserve = market$1.reserves[abbrev];
        let asset = user$1.assets.tokens[abbrev];
        let depositSourcePubkey = asset.walletTokenPubkey;
        // Optional signers
        let depositSourceKeypair;
        // Optional instructions
        // Create wrapped sol ixs
        let createTokenAccountIx;
        let initTokenAccountIx;
        let closeTokenAccountIx;
        // Initialize Obligation, deposit notes, collateral notes
        let initObligationIx;
        let initDepositAccountIx;
        let initCollateralAccountIx;
        // When handling SOL, ignore existing wsol accounts and initialize a new wrapped sol account
        if (asset.tokenMintPubkey.equals(NATIVE_MINT)) {
            // Overwrite the deposit source
            // The app will always wrap native sol, ignoring any existing wsol
            depositSourceKeypair = Keypair.generate();
            depositSourcePubkey = depositSourceKeypair.publicKey;
            const rent = await connection.getMinimumBalanceForRentExemption(AccountLayout.span);
            createTokenAccountIx = SystemProgram.createAccount({
                fromPubkey: user$1.wallet.publicKey,
                newAccountPubkey: depositSourcePubkey,
                programId: TOKEN_PROGRAM_ID,
                space: AccountLayout.span,
                lamports: parseInt(lamports.addn(rent).toString())
            });
            initTokenAccountIx = Token.createInitAccountInstruction(TOKEN_PROGRAM_ID, NATIVE_MINT, depositSourcePubkey, user$1.wallet.publicKey);
            closeTokenAccountIx = Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, depositSourcePubkey, user$1.wallet.publicKey, user$1.wallet.publicKey, []);
        }
        // Create the deposit note dest account if it doesn't exist
        if (!asset.depositNoteExists) {
            initDepositAccountIx = program.instruction.initDepositAccount(asset.depositNoteBump, {
                accounts: {
                    market: market$1.accountPubkey,
                    marketAuthority: market$1.authorityPubkey,
                    reserve: reserve.accountPubkey,
                    depositNoteMint: reserve.depositNoteMintPubkey,
                    depositor: user$1.wallet.publicKey,
                    depositAccount: asset.depositNotePubkey,
                    tokenProgram: TOKEN_PROGRAM_ID,
                    systemProgram: SystemProgram.programId,
                    rent: SYSVAR_RENT_PUBKEY,
                },
            });
        }
        if (!user$1.assets.obligation) {
            initObligationIx = buildInitObligationIx();
        }
        // Obligatory refresh instruction
        const refreshReserveIx = buildRefreshReserveIx(abbrev);
        const amount = Amount.tokens(lamports);
        const depositIx = program.instruction.deposit(asset.depositNoteBump, amount, {
            accounts: {
                market: market$1.accountPubkey,
                marketAuthority: market$1.authorityPubkey,
                reserve: reserve.accountPubkey,
                vault: reserve.vaultPubkey,
                depositNoteMint: reserve.depositNoteMintPubkey,
                depositor: user$1.wallet.publicKey,
                depositAccount: asset.depositNotePubkey,
                depositSource: depositSourcePubkey,
                tokenProgram: TOKEN_PROGRAM_ID,
            }
        });
        // Initialize the collateral account if it doesn't exist
        if (!asset.collateralNoteExists) {
            initCollateralAccountIx = program.instruction.initCollateralAccount(asset.collateralNoteBump, {
                accounts: {
                    market: market$1.accountPubkey,
                    marketAuthority: market$1.authorityPubkey,
                    obligation: user$1.assets.obligationPubkey,
                    reserve: reserve.accountPubkey,
                    depositNoteMint: reserve.depositNoteMintPubkey,
                    owner: user$1.wallet.publicKey,
                    collateralAccount: asset.collateralNotePubkey,
                    tokenProgram: TOKEN_PROGRAM_ID,
                    systemProgram: SystemProgram.programId,
                    rent: SYSVAR_RENT_PUBKEY,
                }
            });
        }
        const depositCollateralBumpSeeds = {
            collateralAccount: asset.collateralNoteBump,
            depositAccount: asset.depositNoteBump,
        };
        let depositCollateralIx = program.instruction.depositCollateral(depositCollateralBumpSeeds, amount, {
            accounts: {
                market: market$1.accountPubkey,
                marketAuthority: market$1.authorityPubkey,
                reserve: reserve.accountPubkey,
                obligation: user$1.assets.obligationPubkey,
                owner: user$1.wallet.publicKey,
                depositAccount: asset.depositNotePubkey,
                collateralAccount: asset.collateralNotePubkey,
                tokenProgram: TOKEN_PROGRAM_ID,
            }
        });
        const ix = [
            createTokenAccountIx,
            initTokenAccountIx,
            initDepositAccountIx,
            initObligationIx,
            initCollateralAccountIx,
            refreshReserveIx,
            depositIx,
            depositCollateralIx,
            closeTokenAccountIx
        ].filter(ix => ix);
        const signers = [depositSourceKeypair].filter(signer => signer);
        try {
            return await sendTransaction(program.provider, ix, signers);
        }
        catch (err) {
            console.error(`Deposit error: ${transactionErrorToString(err)}`);
            rollbar.error(`Deposit error: ${transactionErrorToString(err)}`);
            return [TxnResponse.Failed, null];
        }
    };
    // Withdraw
    const withdraw = async (abbrev, amount) => {
        if (!user$1.assets || !user$1.wallet || !program) {
            return [TxnResponse.Failed, null];
        }
        const [ok, txid] = await refreshOldReserves();
        if (!ok) {
            return [TxnResponse.Failed, txid];
        }
        const reserve = market$1.reserves[abbrev];
        const asset = user$1.assets.tokens[abbrev];
        let withdrawAccount = asset.walletTokenPubkey;
        // Create token account ix
        let createAssociatedTokenAccountIx;
        // Wrapped sol ixs
        let wsolKeypair;
        let createWsolIx;
        let initWsolIx;
        let closeWsolIx;
        if (asset.tokenMintPubkey.equals(NATIVE_MINT)) {
            // Create a token account to receive wrapped sol.
            // There isn't an easy way to unwrap sol without
            // closing the account, so we avoid closing the 
            // associated token account.
            const rent = await Token.getMinBalanceRentForExemptAccount(connection);
            wsolKeypair = Keypair.generate();
            withdrawAccount = wsolKeypair.publicKey;
            createWsolIx = SystemProgram.createAccount({
                fromPubkey: user$1.wallet.publicKey,
                newAccountPubkey: withdrawAccount,
                programId: TOKEN_PROGRAM_ID,
                space: AccountLayout.span,
                lamports: rent,
            });
            initWsolIx = Token.createInitAccountInstruction(TOKEN_PROGRAM_ID, reserve.tokenMintPubkey, withdrawAccount, user$1.wallet.publicKey);
        }
        else if (!asset.walletTokenExists) {
            // Create the wallet token account if it doesn't exist
            createAssociatedTokenAccountIx = Token.createAssociatedTokenAccountInstruction(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, asset.tokenMintPubkey, withdrawAccount, user$1.wallet.publicKey, user$1.wallet.publicKey);
        }
        // Obligatory refresh instruction
        const refreshReserveIxs = buildRefreshReserveIxs();
        const withdrawCollateralBumps = {
            collateralAccount: asset.collateralNoteBump,
            depositAccount: asset.depositNoteBump,
        };
        const withdrawCollateralIx = program.instruction.withdrawCollateral(withdrawCollateralBumps, amount, {
            accounts: {
                market: market$1.accountPubkey,
                marketAuthority: market$1.authorityPubkey,
                reserve: reserve.accountPubkey,
                obligation: user$1.assets.obligationPubkey,
                owner: user$1.wallet.publicKey,
                depositAccount: asset.depositNotePubkey,
                collateralAccount: asset.collateralNotePubkey,
                tokenProgram: TOKEN_PROGRAM_ID,
            },
        });
        const withdrawIx = program.instruction.withdraw(asset.depositNoteBump, amount, {
            accounts: {
                market: market$1.accountPubkey,
                marketAuthority: market$1.authorityPubkey,
                reserve: reserve.accountPubkey,
                vault: reserve.vaultPubkey,
                depositNoteMint: reserve.depositNoteMintPubkey,
                depositor: user$1.wallet.publicKey,
                depositAccount: asset.depositNotePubkey,
                withdrawAccount,
                tokenProgram: TOKEN_PROGRAM_ID,
            },
        });
        // Unwrap sol
        if (asset.tokenMintPubkey.equals(NATIVE_MINT) && wsolKeypair) {
            closeWsolIx = Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, withdrawAccount, user$1.wallet.publicKey, user$1.wallet.publicKey, []);
        }
        const ixs = [
            {
                ix: [
                    createAssociatedTokenAccountIx,
                    createWsolIx,
                    initWsolIx,
                ].filter(ix => ix),
                signers: [wsolKeypair].filter(signer => signer),
            },
            {
                ix: [
                    ...refreshReserveIxs,
                    withdrawCollateralIx,
                    withdrawIx,
                    closeWsolIx,
                ].filter(ix => ix),
            }
        ];
        try {
            const [ok, txids] = await sendAllTransactions(program.provider, ixs);
            return [ok, txids[txids.length - 1]];
        }
        catch (err) {
            console.error(`Withdraw error: ${transactionErrorToString(err)}`);
            rollbar.error(`Withdraw error: ${transactionErrorToString(err)}`);
            return [TxnResponse.Failed, null];
        }
    };
    // Borrow
    const borrow = async (abbrev, amount) => {
        if (!user$1.assets || !user$1.wallet || !program) {
            return [TxnResponse.Failed, null];
        }
        const [ok, txid] = await refreshOldReserves();
        if (!ok) {
            return [TxnResponse.Failed, txid];
        }
        const reserve = market$1.reserves[abbrev];
        const asset = user$1.assets.tokens[abbrev];
        let receiverAccount = asset.walletTokenPubkey;
        // Create token account ix
        let createTokenAccountIx;
        // Create loan note token ix
        let initLoanAccountIx;
        // Wrapped sol ixs
        let wsolKeypair;
        let createWsolTokenAccountIx;
        let initWsoltokenAccountIx;
        let closeTokenAccountIx;
        if (asset.tokenMintPubkey.equals(NATIVE_MINT)) {
            // Create a token account to receive wrapped sol.
            // There isn't an easy way to unwrap sol without
            // closing the account, so we avoid closing the 
            // associated token account.
            const rent = await Token.getMinBalanceRentForExemptAccount(connection);
            wsolKeypair = Keypair.generate();
            receiverAccount = wsolKeypair.publicKey;
            createWsolTokenAccountIx = SystemProgram.createAccount({
                fromPubkey: user$1.wallet.publicKey,
                newAccountPubkey: wsolKeypair.publicKey,
                programId: TOKEN_PROGRAM_ID,
                space: AccountLayout.span,
                lamports: rent,
            });
            initWsoltokenAccountIx = Token.createInitAccountInstruction(TOKEN_PROGRAM_ID, reserve.tokenMintPubkey, wsolKeypair.publicKey, user$1.wallet.publicKey);
        }
        else if (!asset.walletTokenExists) {
            // Create the wallet token account if it doesn't exist
            createTokenAccountIx = Token.createAssociatedTokenAccountInstruction(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, asset.tokenMintPubkey, asset.walletTokenPubkey, user$1.wallet.publicKey, user$1.wallet.publicKey);
        }
        // Create the loan note account if it doesn't exist
        if (!asset.loanNoteExists) {
            initLoanAccountIx = program.instruction.initLoanAccount(asset.loanNoteBump, {
                accounts: {
                    market: market$1.accountPubkey,
                    marketAuthority: market$1.authorityPubkey,
                    obligation: user$1.assets.obligationPubkey,
                    reserve: reserve.accountPubkey,
                    loanNoteMint: reserve.loanNoteMintPubkey,
                    owner: user$1.wallet.publicKey,
                    loanAccount: asset.loanNotePubkey,
                    tokenProgram: TOKEN_PROGRAM_ID,
                    systemProgram: SystemProgram.programId,
                    rent: SYSVAR_RENT_PUBKEY,
                }
            });
        }
        // Obligatory refresh instruction
        const refreshReserveIxs = buildRefreshReserveIxs();
        const borrowIx = program.instruction.borrow(asset.loanNoteBump, amount, {
            accounts: {
                market: market$1.accountPubkey,
                marketAuthority: market$1.authorityPubkey,
                obligation: user$1.assets.obligationPubkey,
                reserve: reserve.accountPubkey,
                vault: reserve.vaultPubkey,
                loanNoteMint: reserve.loanNoteMintPubkey,
                borrower: user$1.wallet.publicKey,
                loanAccount: asset.loanNotePubkey,
                receiverAccount,
                tokenProgram: TOKEN_PROGRAM_ID,
            },
        });
        // If withdrawing SOL, unwrap it by closing
        if (asset.tokenMintPubkey.equals(NATIVE_MINT)) {
            closeTokenAccountIx = Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, receiverAccount, user$1.wallet.publicKey, user$1.wallet.publicKey, []);
        }
        const ixs = [
            {
                ix: [
                    createTokenAccountIx,
                    createWsolTokenAccountIx,
                    initWsoltokenAccountIx,
                    initLoanAccountIx,
                ].filter(ix => ix),
                signers: [wsolKeypair].filter(ix => ix),
            },
            {
                ix: [
                    ...refreshReserveIxs,
                    borrowIx,
                    closeTokenAccountIx
                ].filter(ix => ix),
            }
        ];
        try {
            // Make deposit RPC call
            const [ok, txids] = await sendAllTransactions(program.provider, ixs);
            return [ok, txids[txids.length - 1]];
        }
        catch (err) {
            console.error(`Borrow error: ${transactionErrorToString(err)}`);
            rollbar.error(`Borrow error: ${transactionErrorToString(err)}`);
            return [TxnResponse.Failed, null];
        }
    };
    // Repay
    const repay = async (abbrev, amount) => {
        if (!user$1.assets || !user$1.wallet || !program) {
            return [TxnResponse.Failed, null];
        }
        const [ok, txid] = await refreshOldReserves();
        if (!ok) {
            return [TxnResponse.Failed, txid];
        }
        const reserve = market$1.reserves[abbrev];
        const asset = user$1.assets.tokens[abbrev];
        let depositSourcePubkey = asset.walletTokenPubkey;
        // Optional signers
        let depositSourceKeypair;
        // Optional instructions
        // Create wrapped sol ixs
        let createTokenAccountIx;
        let initTokenAccountIx;
        let closeTokenAccountIx;
        // When handling SOL, ignore existing wsol accounts and initialize a new wrapped sol account
        if (asset.tokenMintPubkey.equals(NATIVE_MINT)) {
            // Overwrite the deposit source
            // The app will always wrap native sol, ignoring any existing wsol
            depositSourceKeypair = Keypair.generate();
            depositSourcePubkey = depositSourceKeypair.publicKey;
            // Do our best to estimate the lamports we need
            // 1.002 is a bit of room for interest
            const lamports = amount.units.loanNotes
                ? reserve.loanNoteExchangeRate.mul(amount.value).div(new bn$1(Math.pow(10, 15))).muln(1.002)
                : amount.value;
            const rent = await connection.getMinimumBalanceForRentExemption(AccountLayout.span);
            createTokenAccountIx = SystemProgram.createAccount({
                fromPubkey: user$1.wallet.publicKey,
                newAccountPubkey: depositSourcePubkey,
                programId: TOKEN_PROGRAM_ID,
                space: AccountLayout.span,
                lamports: parseInt(lamports.addn(rent).toString())
            });
            initTokenAccountIx = Token.createInitAccountInstruction(TOKEN_PROGRAM_ID, NATIVE_MINT, depositSourcePubkey, user$1.wallet.publicKey);
            closeTokenAccountIx = Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, depositSourcePubkey, user$1.wallet.publicKey, user$1.wallet.publicKey, []);
        }
        else if (!asset.walletTokenExists) {
            return [TxnResponse.Failed, null];
        }
        // Obligatory refresh instruction
        const refreshReserveIx = buildRefreshReserveIx(abbrev);
        const repayIx = program.instruction.repay(amount, {
            accounts: {
                market: market$1.accountPubkey,
                marketAuthority: market$1.authorityPubkey,
                obligation: user$1.assets.obligationPubkey,
                reserve: reserve.accountPubkey,
                vault: reserve.vaultPubkey,
                loanNoteMint: reserve.loanNoteMintPubkey,
                payer: user$1.wallet.publicKey,
                loanAccount: asset.loanNotePubkey,
                payerAccount: depositSourcePubkey,
                tokenProgram: TOKEN_PROGRAM_ID,
            },
        });
        const ix = [
            createTokenAccountIx,
            initTokenAccountIx,
            refreshReserveIx,
            repayIx,
            closeTokenAccountIx,
        ].filter(ix => ix);
        const signers = [depositSourceKeypair].filter(signer => signer);
        try {
            return await sendTransaction(program.provider, ix, signers);
        }
        catch (err) {
            console.error(`Repay error: ${transactionErrorToString(err)}`);
            rollbar.error(`Repay error: ${transactionErrorToString(err)}`);
            return [TxnResponse.Failed, null];
        }
    };
    const buildInitObligationIx = () => {
        if (!program || !user$1.assets || !user$1.wallet) {
            return;
        }
        return program.instruction.initObligation(user$1.assets.obligationBump, {
            accounts: {
                market: market$1.accountPubkey,
                marketAuthority: market$1.authorityPubkey,
                borrower: user$1.wallet.publicKey,
                obligation: user$1.assets.obligationPubkey,
                tokenProgram: TOKEN_PROGRAM_ID,
                systemProgram: SystemProgram.programId,
            },
        });
    };
    /** Creates ixs to refresh all reserves. */
    const buildRefreshReserveIxs = () => {
        const ix = [];
        if (!user$1.assets) {
            return ix;
        }
        for (const assetAbbrev in user$1.assets.tokens) {
            const refreshReserveIx = buildRefreshReserveIx(assetAbbrev);
            ix.push(refreshReserveIx);
        }
        return ix;
    };
    /**Sends transactions to refresh all reserves
     * until it can be fully refreshed once more. */
    const refreshOldReserves = async () => {
        if (!program) {
            return [TxnResponse.Failed, null];
        }
        let result = [TxnResponse.Success, null];
        for (const abbrev in market$1.reserves) {
            let reserve = market$1.reserves[abbrev];
            let accruedUntil = reserve.accruedUntil;
            while (accruedUntil.add(MAX_ACCRUAL_SECONDS).lt(new bn$1(Math.floor(Date.now() / 1000)))) {
                const refreshReserveIx = buildRefreshReserveIx(abbrev);
                const ix = [
                    refreshReserveIx
                ].filter(ix => ix);
                try {
                    result = await sendTransaction(program.provider, ix);
                }
                catch (err) {
                    console.log(transactionErrorToString(err));
                    return [TxnResponse.Failed, null];
                }
                accruedUntil = accruedUntil.add(MAX_ACCRUAL_SECONDS);
            }
        }
        return result;
    };
    const buildRefreshReserveIx = (abbrev) => {
        if (!program) {
            return;
        }
        let reserve = market$1.reserves[abbrev];
        const refreshInstruction = program.instruction.refreshReserve({
            accounts: {
                market: market$1.accountPubkey,
                marketAuthority: market$1.authorityPubkey,
                reserve: reserve.accountPubkey,
                feeNoteVault: reserve.feeNoteVaultPubkey,
                depositNoteMint: reserve.depositNoteMintPubkey,
                pythOraclePrice: reserve.pythPricePubkey,
                tokenProgram: TOKEN_PROGRAM_ID,
            },
        });
        return refreshInstruction;
    };
    // Faucet
    const airdrop = async (abbrev, lamports) => {
        if (program == null || user$1.assets == null || !user$1.wallet) {
            return [TxnResponse.Failed, null];
        }
        let reserve = market$1.reserves[abbrev];
        const asset = Object.values(user$1.assets.tokens).find(asset => asset.tokenMintPubkey.equals(reserve.tokenMintPubkey));
        if (asset == null) {
            return [TxnResponse.Failed, null];
        }
        let ix = [];
        let signers = [];
        //optionally create a token account for wallet
        let ok = TxnResponse.Failed, txid;
        if (!asset.walletTokenExists) {
            const createTokenAccountIx = Token.createAssociatedTokenAccountInstruction(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, asset.tokenMintPubkey, asset.walletTokenPubkey, user$1.wallet.publicKey, user$1.wallet.publicKey);
            ix.push(createTokenAccountIx);
        }
        if (reserve.tokenMintPubkey.equals(NATIVE_MINT)) {
            // Sol airdrop
            try {
                // Use a specific endpoint. A hack because some devnet endpoints are unable to airdrop
                const endpoint = new Connection('https://api.devnet.solana.com', (Provider.defaultOptions()).commitment);
                const txid = await endpoint.requestAirdrop(user$1.wallet.publicKey, parseInt(lamports.toString()));
                console.log(`Transaction ${explorerUrl(txid)}`);
                const confirmation = await endpoint.confirmTransaction(txid);
                if (confirmation.value.err) {
                    console.error(`Airdrop error: ${transactionErrorToString(confirmation.value.err.toString())}`);
                    return [TxnResponse.Failed, txid];
                }
                else {
                    return [TxnResponse.Success, txid];
                }
            }
            catch (error) {
                console.error(`Airdrop error: ${transactionErrorToString(error)}`);
                rollbar.error(`Airdrop error: ${transactionErrorToString(error)}`);
                return [TxnResponse.Failed, null];
            }
        }
        else if (reserve.faucetPubkey) {
            // Faucet airdrop
            const faucetAirdropIx = await buildFaucetAirdropIx(lamports, reserve.tokenMintPubkey, asset.walletTokenPubkey, reserve.faucetPubkey);
            ix.push(faucetAirdropIx);
            [ok, txid] = await sendTransaction(program.provider, ix, signers);
        }
        else {
            // Mint to the destination token account
            const mintToIx = Token.createMintToInstruction(TOKEN_PROGRAM_ID, reserve.tokenMintPubkey, asset.walletTokenPubkey, user$1.wallet.publicKey, [], new u64(lamports.toArray()));
            ix.push(mintToIx);
            [ok, txid] = await sendTransaction(program.provider, ix, signers);
        }
        return [ok, txid];
    };
    const buildFaucetAirdropIx = async (amount, tokenMintPublicKey, destinationAccountPubkey, faucetPubkey) => {
        const pubkeyNonce = await PublicKey.findProgramAddress([new TextEncoder().encode("faucet")], FAUCET_PROGRAM_ID);
        const keys = [
            { pubkey: pubkeyNonce[0], isSigner: false, isWritable: false },
            {
                pubkey: tokenMintPublicKey,
                isSigner: false,
                isWritable: true
            },
            { pubkey: destinationAccountPubkey, isSigner: false, isWritable: true },
            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
            { pubkey: faucetPubkey, isSigner: false, isWritable: false }
        ];
        return new TransactionInstruction({
            programId: FAUCET_PROGRAM_ID,
            data: Buffer.from([1, ...amount.toArray("le", 8)]),
            keys
        });
    };
    //Take error code and and return error explanation
    const getErrNameAndMsg = (errCode) => {
        const code = Number(errCode);
        if (code >= 100 && code < 300) {
            return `This is an Anchor program error code ${code}. Please check here: https://github.com/project-serum/anchor/blob/master/lang/src/error.rs`;
        }
        for (let i = 0; i < customProgramErrors.length; i++) {
            const err = customProgramErrors[i];
            if (err.code === code) {
                return `\n\nCustom Program Error Code: ${errCode} \n- ${err.name} \n- ${err.msg}`;
            }
        }
        return `No matching error code description or translation for ${errCode}`;
    };
    //get the custom program error code if there's any in the error message and return parsed error code hex to number string
    /**
     * Get the custom program error code if there's any in the error message and return parsed error code hex to number string
     * @param errMessage string - error message that would contain the word "custom program error:" if it's a customer program error
     * @returns [boolean, string] - probably not a custom program error if false otherwise the second element will be the code number in string
     */
    const getCustomProgramErrorCode = (errMessage) => {
        const index = errMessage.indexOf('custom program error:');
        if (index == -1) {
            return [false, 'May not be a custom program error'];
        }
        else {
            return [true, `${parseInt(errMessage.substring(index + 22, index + 28).replace(' ', ''), 16)}`];
        }
    };

    /* src/components/Logo.svelte generated by Svelte v3.44.2 */

    const file$z = "src/components/Logo.svelte";

    function create_fragment$A(ctx) {
    	let div;
    	let img0;
    	let img0_src_value;
    	let img0_style_value;
    	let t;
    	let img1;
    	let img1_src_value;
    	let img1_style_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img0 = element("img");
    			t = space();
    			img1 = element("img");
    			if (!src_url_equal(img0.src, img0_src_value = "img/jet/jet_logomark_gradient.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Jet Logomark");

    			attr_dev(img0, "style", img0_style_value = "width: " + /*width*/ ctx[0] + "px; " + (/*logoMark*/ ctx[1]
    			? 'height: auto; opacity: 1'
    			: 'height: 0px; opacity: 0; position: absolute;'));

    			attr_dev(img0, "class", "svelte-yak4zh");
    			add_location(img0, file$z, 5, 2, 111);
    			if (!src_url_equal(img1.src, img1_src_value = "img/jet/jet_logo_gradient.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Jext Logo");

    			attr_dev(img1, "style", img1_style_value = "width: " + /*width*/ ctx[0] + "px; " + (!/*logoMark*/ ctx[1]
    			? 'height: auto; opacity: 1'
    			: 'height: 0px; opacity: 0; position: absolute;'));

    			attr_dev(img1, "class", "svelte-yak4zh");
    			add_location(img1, file$z, 8, 2, 302);
    			attr_dev(div, "class", "logo flex-centered svelte-yak4zh");
    			add_location(div, file$z, 4, 0, 76);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img0);
    			append_dev(div, t);
    			append_dev(div, img1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*width, logoMark*/ 3 && img0_style_value !== (img0_style_value = "width: " + /*width*/ ctx[0] + "px; " + (/*logoMark*/ ctx[1]
    			? 'height: auto; opacity: 1'
    			: 'height: 0px; opacity: 0; position: absolute;'))) {
    				attr_dev(img0, "style", img0_style_value);
    			}

    			if (dirty & /*width, logoMark*/ 3 && img1_style_value !== (img1_style_value = "width: " + /*width*/ ctx[0] + "px; " + (!/*logoMark*/ ctx[1]
    			? 'height: auto; opacity: 1'
    			: 'height: 0px; opacity: 0; position: absolute;'))) {
    				attr_dev(img1, "style", img1_style_value);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Logo', slots, []);
    	let { width } = $$props;
    	let { logoMark = false } = $$props;
    	const writable_props = ['width', 'logoMark'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Logo> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('logoMark' in $$props) $$invalidate(1, logoMark = $$props.logoMark);
    	};

    	$$self.$capture_state = () => ({ width, logoMark });

    	$$self.$inject_state = $$props => {
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('logoMark' in $$props) $$invalidate(1, logoMark = $$props.logoMark);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [width, logoMark];
    }

    class Logo extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$A, create_fragment$A, safe_not_equal, { width: 0, logoMark: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Logo",
    			options,
    			id: create_fragment$A.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*width*/ ctx[0] === undefined && !('width' in props)) {
    			console.warn("<Logo> was created without expected prop 'width'");
    		}
    	}

    	get width() {
    		throw new Error("<Logo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Logo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get logoMark() {
    		throw new Error("<Logo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set logoMark(value) {
    		throw new Error("<Logo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/NavLink.svelte generated by Svelte v3.44.2 */
    const file$y = "src/components/NavLink.svelte";

    // (17:2) {#if text}
    function create_if_block$p(ctx) {
    	let p;
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(/*text*/ ctx[1]);
    			attr_dev(p, "class", "text-gradient bicyclette-bold svelte-111x0n3");
    			add_location(p, file$y, 17, 4, 429);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*text*/ 2) set_data_dev(t, /*text*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$p.name,
    		type: "if",
    		source: "(17:2) {#if text}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$z(ctx) {
    	let a;
    	let i;
    	let t0;
    	let i_style_value;
    	let t1;
    	let mounted;
    	let dispose;
    	let if_block = /*text*/ ctx[1] && create_if_block$p(ctx);

    	const block = {
    		c: function create() {
    			a = element("a");
    			i = element("i");
    			t0 = text(/*icon*/ ctx[0]);
    			t1 = space();
    			if (if_block) if_block.c();
    			attr_dev(i, "class", "text-gradient jet-icons svelte-111x0n3");

    			attr_dev(i, "style", i_style_value = /*icon*/ ctx[0] === '✔' || /*icon*/ ctx[0] === '✈'
    			? 'padding: 0 3px 3px 0;'
    			: 'padding: 0 0 3px 3px');

    			add_location(i, file$y, 10, 2, 250);
    			attr_dev(a, "class", "flex-centered svelte-111x0n3");
    			attr_dev(a, "href", /*path*/ ctx[2]);
    			toggle_class(a, "active", /*active*/ ctx[3]);
    			toggle_class(a, "text", /*text*/ ctx[1]);
    			toggle_class(a, "justify-start", /*text*/ ctx[1]);
    			add_location(a, file$y, 7, 0, 145);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, i);
    			append_dev(i, t0);
    			append_dev(a, t1);
    			if (if_block) if_block.m(a, null);

    			if (!mounted) {
    				dispose = action_destroyer(link.call(null, a));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*icon*/ 1) set_data_dev(t0, /*icon*/ ctx[0]);

    			if (dirty & /*icon*/ 1 && i_style_value !== (i_style_value = /*icon*/ ctx[0] === '✔' || /*icon*/ ctx[0] === '✈'
    			? 'padding: 0 3px 3px 0;'
    			: 'padding: 0 0 3px 3px')) {
    				attr_dev(i, "style", i_style_value);
    			}

    			if (/*text*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$p(ctx);
    					if_block.c();
    					if_block.m(a, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*path*/ 4) {
    				attr_dev(a, "href", /*path*/ ctx[2]);
    			}

    			if (dirty & /*active*/ 8) {
    				toggle_class(a, "active", /*active*/ ctx[3]);
    			}

    			if (dirty & /*text*/ 2) {
    				toggle_class(a, "text", /*text*/ ctx[1]);
    			}

    			if (dirty & /*text*/ 2) {
    				toggle_class(a, "justify-start", /*text*/ ctx[1]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavLink', slots, []);
    	let { icon } = $$props;
    	let { text = '' } = $$props;
    	let { path } = $$props;
    	let { active } = $$props;
    	const writable_props = ['icon', 'text', 'path', 'active'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavLink> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    		if ('path' in $$props) $$invalidate(2, path = $$props.path);
    		if ('active' in $$props) $$invalidate(3, active = $$props.active);
    	};

    	$$self.$capture_state = () => ({ link, icon, text, path, active });

    	$$self.$inject_state = $$props => {
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    		if ('path' in $$props) $$invalidate(2, path = $$props.path);
    		if ('active' in $$props) $$invalidate(3, active = $$props.active);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [icon, text, path, active];
    }

    class NavLink extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$z, create_fragment$z, safe_not_equal, { icon: 0, text: 1, path: 2, active: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavLink",
    			options,
    			id: create_fragment$z.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*icon*/ ctx[0] === undefined && !('icon' in props)) {
    			console.warn("<NavLink> was created without expected prop 'icon'");
    		}

    		if (/*path*/ ctx[2] === undefined && !('path' in props)) {
    			console.warn("<NavLink> was created without expected prop 'path'");
    		}

    		if (/*active*/ ctx[3] === undefined && !('active' in props)) {
    			console.warn("<NavLink> was created without expected prop 'active'");
    		}
    	}

    	get icon() {
    		throw new Error("<NavLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<NavLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<NavLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<NavLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get path() {
    		throw new Error("<NavLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<NavLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<NavLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<NavLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Button.svelte generated by Svelte v3.44.2 */

    const file$x = "src/components/Button.svelte";

    // (16:2) {#if img}
    function create_if_block$o(ctx) {
    	let img_1;
    	let img_1_src_value;

    	const block = {
    		c: function create() {
    			img_1 = element("img");
    			if (!src_url_equal(img_1.src, img_1_src_value = /*img*/ ctx[1])) attr_dev(img_1, "src", img_1_src_value);
    			attr_dev(img_1, "alt", /*text*/ ctx[0]);
    			attr_dev(img_1, "class", "svelte-csnuo3");
    			add_location(img_1, file$x, 16, 4, 449);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*img*/ 2 && !src_url_equal(img_1.src, img_1_src_value = /*img*/ ctx[1])) {
    				attr_dev(img_1, "src", img_1_src_value);
    			}

    			if (dirty & /*text*/ 1) {
    				attr_dev(img_1, "alt", /*text*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$o.name,
    		type: "if",
    		source: "(16:2) {#if img}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$y(ctx) {
    	let button;
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;
    	let if_block = /*img*/ ctx[1] && create_if_block$o(ctx);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (if_block) if_block.c();
    			t0 = space();
    			t1 = text(/*text*/ ctx[0]);
    			attr_dev(button, "class", "flex-centered svelte-csnuo3");
    			attr_dev(button, "title", /*text*/ ctx[0]);
    			toggle_class(button, "bicyclette", /*bicyclette*/ ctx[7]);
    			toggle_class(button, "secondary", /*secondary*/ ctx[3]);
    			toggle_class(button, "small", /*small*/ ctx[4]);
    			toggle_class(button, "disabled", /*disabled*/ ctx[2]);
    			toggle_class(button, "error", /*error*/ ctx[5]);
    			toggle_class(button, "noCaps", /*noCaps*/ ctx[6]);
    			add_location(button, file$x, 11, 0, 255);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			if (if_block) if_block.m(button, null);
    			append_dev(button, t0);
    			append_dev(button, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[9], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*img*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$o(ctx);
    					if_block.c();
    					if_block.m(button, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*text*/ 1) set_data_dev(t1, /*text*/ ctx[0]);

    			if (dirty & /*text*/ 1) {
    				attr_dev(button, "title", /*text*/ ctx[0]);
    			}

    			if (dirty & /*bicyclette*/ 128) {
    				toggle_class(button, "bicyclette", /*bicyclette*/ ctx[7]);
    			}

    			if (dirty & /*secondary*/ 8) {
    				toggle_class(button, "secondary", /*secondary*/ ctx[3]);
    			}

    			if (dirty & /*small*/ 16) {
    				toggle_class(button, "small", /*small*/ ctx[4]);
    			}

    			if (dirty & /*disabled*/ 4) {
    				toggle_class(button, "disabled", /*disabled*/ ctx[2]);
    			}

    			if (dirty & /*error*/ 32) {
    				toggle_class(button, "error", /*error*/ ctx[5]);
    			}

    			if (dirty & /*noCaps*/ 64) {
    				toggle_class(button, "noCaps", /*noCaps*/ ctx[6]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Button', slots, []);
    	let { text } = $$props;
    	let { img = '' } = $$props;
    	let { disabled = false } = $$props;
    	let { secondary = false } = $$props;
    	let { small = false } = $$props;
    	let { error = false } = $$props;
    	let { noCaps = false } = $$props;
    	let { bicyclette = true } = $$props;
    	let { onClick } = $$props;

    	const writable_props = [
    		'text',
    		'img',
    		'disabled',
    		'secondary',
    		'small',
    		'error',
    		'noCaps',
    		'bicyclette',
    		'onClick'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Button> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		if (!disabled) onClick();
    	};

    	$$self.$$set = $$props => {
    		if ('text' in $$props) $$invalidate(0, text = $$props.text);
    		if ('img' in $$props) $$invalidate(1, img = $$props.img);
    		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ('secondary' in $$props) $$invalidate(3, secondary = $$props.secondary);
    		if ('small' in $$props) $$invalidate(4, small = $$props.small);
    		if ('error' in $$props) $$invalidate(5, error = $$props.error);
    		if ('noCaps' in $$props) $$invalidate(6, noCaps = $$props.noCaps);
    		if ('bicyclette' in $$props) $$invalidate(7, bicyclette = $$props.bicyclette);
    		if ('onClick' in $$props) $$invalidate(8, onClick = $$props.onClick);
    	};

    	$$self.$capture_state = () => ({
    		text,
    		img,
    		disabled,
    		secondary,
    		small,
    		error,
    		noCaps,
    		bicyclette,
    		onClick
    	});

    	$$self.$inject_state = $$props => {
    		if ('text' in $$props) $$invalidate(0, text = $$props.text);
    		if ('img' in $$props) $$invalidate(1, img = $$props.img);
    		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ('secondary' in $$props) $$invalidate(3, secondary = $$props.secondary);
    		if ('small' in $$props) $$invalidate(4, small = $$props.small);
    		if ('error' in $$props) $$invalidate(5, error = $$props.error);
    		if ('noCaps' in $$props) $$invalidate(6, noCaps = $$props.noCaps);
    		if ('bicyclette' in $$props) $$invalidate(7, bicyclette = $$props.bicyclette);
    		if ('onClick' in $$props) $$invalidate(8, onClick = $$props.onClick);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		text,
    		img,
    		disabled,
    		secondary,
    		small,
    		error,
    		noCaps,
    		bicyclette,
    		onClick,
    		click_handler
    	];
    }

    class Button extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$y, create_fragment$y, safe_not_equal, {
    			text: 0,
    			img: 1,
    			disabled: 2,
    			secondary: 3,
    			small: 4,
    			error: 5,
    			noCaps: 6,
    			bicyclette: 7,
    			onClick: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button",
    			options,
    			id: create_fragment$y.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*text*/ ctx[0] === undefined && !('text' in props)) {
    			console.warn("<Button> was created without expected prop 'text'");
    		}

    		if (/*onClick*/ ctx[8] === undefined && !('onClick' in props)) {
    			console.warn("<Button> was created without expected prop 'onClick'");
    		}
    	}

    	get text() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get img() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set img(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get secondary() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set secondary(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get small() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set small(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get error() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set error(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noCaps() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noCaps(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bicyclette() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bicyclette(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/ConnectWalletButton.svelte generated by Svelte v3.44.2 */
    const file$w = "src/components/ConnectWalletButton.svelte";

    // (19:2) {:else}
    function create_else_block$e(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				small: true,
    				secondary: true,
    				text: dictionary[/*$USER*/ ctx[1].language].settings.connect,
    				onClick: /*func_1*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty & /*$USER*/ 2) button_changes.text = dictionary[/*$USER*/ ctx[1].language].settings.connect;
    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$e.name,
    		type: "else",
    		source: "(19:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (10:2) {#if $USER.wallet}
    function create_if_block$n(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				secondary: true,
    				noCaps: true,
    				bicyclette: false,
    				img: "img/wallets/" + /*$USER*/ ctx[1].wallet.name.replace(' ', '_').toLowerCase() + ".png",
    				text: shortenPubkey(/*$USER*/ ctx[1].wallet.publicKey.toString(), 4) + ' ' + (!/*mobile*/ ctx[0]
    				? dictionary[/*$USER*/ ctx[1].language].settings.connected.toLowerCase()
    				: ''),
    				onClick: /*func*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty & /*$USER*/ 2) button_changes.img = "img/wallets/" + /*$USER*/ ctx[1].wallet.name.replace(' ', '_').toLowerCase() + ".png";

    			if (dirty & /*$USER, mobile*/ 3) button_changes.text = shortenPubkey(/*$USER*/ ctx[1].wallet.publicKey.toString(), 4) + ' ' + (!/*mobile*/ ctx[0]
    			? dictionary[/*$USER*/ ctx[1].language].settings.connected.toLowerCase()
    			: '');

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$n.name,
    		type: "if",
    		source: "(10:2) {#if $USER.wallet}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$x(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block$n, create_else_block$e];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$USER*/ ctx[1].wallet) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "flex-centered");
    			add_location(div, file$w, 8, 0, 281);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let $USER;
    	validate_store(USER, 'USER');
    	component_subscribe($$self, USER, $$value => $$invalidate(1, $USER = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ConnectWalletButton', slots, []);
    	let { mobile = false } = $$props;
    	const writable_props = ['mobile'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ConnectWalletButton> was created with unknown prop '${key}'`);
    	});

    	const func = () => disconnectWallet();

    	const func_1 = () => USER.update(user => {
    		user.connectingWallet = true;
    		return user;
    	});

    	$$self.$$set = $$props => {
    		if ('mobile' in $$props) $$invalidate(0, mobile = $$props.mobile);
    	};

    	$$self.$capture_state = () => ({
    		USER,
    		disconnectWallet,
    		shortenPubkey,
    		dictionary,
    		Button,
    		mobile,
    		$USER
    	});

    	$$self.$inject_state = $$props => {
    		if ('mobile' in $$props) $$invalidate(0, mobile = $$props.mobile);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [mobile, $USER, func, func_1];
    }

    class ConnectWalletButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$x, create_fragment$x, safe_not_equal, { mobile: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ConnectWalletButton",
    			options,
    			id: create_fragment$x.name
    		});
    	}

    	get mobile() {
    		throw new Error("<ConnectWalletButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mobile(value) {
    		throw new Error("<ConnectWalletButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Nav.svelte generated by Svelte v3.44.2 */
    const file$v = "src/components/Nav.svelte";

    // (54:8) {:else}
    function create_else_block$d(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("➪");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$d.name,
    		type: "else",
    		source: "(54:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (52:8) {#if expanded}
    function create_if_block_1$i(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("➧");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$i.name,
    		type: "if",
    		source: "(52:8) {#if expanded}",
    		ctx
    	});

    	return block;
    }

    // (58:6) {#if expanded}
    function create_if_block$m(ctx) {
    	let span;
    	let t_value = dictionary[/*$USER*/ ctx[2].language].nav.collapse.toUpperCase() + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "class", "bicyclette-bold text-gradient");
    			set_style(span, "font-size", "10.5px");
    			add_location(span, file$v, 58, 8, 2172);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 4 && t_value !== (t_value = dictionary[/*$USER*/ ctx[2].language].nav.collapse.toUpperCase() + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$m.name,
    		type: "if",
    		source: "(58:6) {#if expanded}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$w(ctx) {
    	let nav0;
    	let div1;
    	let div0;
    	let logo;
    	let t0;
    	let navlink0;
    	let t1;
    	let navlink1;
    	let t2;
    	let navlink2;
    	let t3;
    	let div3;
    	let div2;
    	let i;
    	let t4;
    	let t5;
    	let nav1;
    	let div4;
    	let navlink3;
    	let t6;
    	let navlink4;
    	let t7;
    	let navlink5;
    	let t8;
    	let div5;
    	let connectwalletbutton0;
    	let t9;
    	let nav2;
    	let div6;
    	let navlink6;
    	let t10;
    	let navlink7;
    	let t11;
    	let navlink8;
    	let t12;
    	let div7;
    	let connectwalletbutton1;
    	let current;
    	let mounted;
    	let dispose;

    	logo = new Logo({
    			props: {
    				width: !/*expanded*/ ctx[0] ? 50 : 105,
    				logoMark: !/*expanded*/ ctx[0]
    			},
    			$$inline: true
    		});

    	navlink0 = new NavLink({
    			props: {
    				active: /*$location*/ ctx[1].pathname === '/',
    				path: "/",
    				icon: /*$location*/ ctx[1].pathname === '/' ? '✔' : '✈',
    				text: /*expanded*/ ctx[0]
    				? dictionary[/*$USER*/ ctx[2].language].nav.cockpit
    				: ''
    			},
    			$$inline: true
    		});

    	navlink1 = new NavLink({
    			props: {
    				active: /*$location*/ ctx[1].pathname === '/transactions',
    				path: "/transactions",
    				icon: /*$location*/ ctx[1].pathname === '/transactions'
    				? '➺'
    				: '➸',
    				text: /*expanded*/ ctx[0]
    				? dictionary[/*$USER*/ ctx[2].language].nav.transactions
    				: ''
    			},
    			$$inline: true
    		});

    	navlink2 = new NavLink({
    			props: {
    				active: /*$location*/ ctx[1].pathname === '/settings',
    				path: "/settings",
    				icon: /*$location*/ ctx[1].pathname === '/settings'
    				? '✎'
    				: '✀',
    				text: /*expanded*/ ctx[0]
    				? dictionary[/*$USER*/ ctx[2].language].nav.settings
    				: ''
    			},
    			$$inline: true
    		});

    	function select_block_type(ctx, dirty) {
    		if (/*expanded*/ ctx[0]) return create_if_block_1$i;
    		return create_else_block$d;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*expanded*/ ctx[0] && create_if_block$m(ctx);

    	navlink3 = new NavLink({
    			props: {
    				active: /*$location*/ ctx[1].pathname === '/',
    				path: "/",
    				icon: /*$location*/ ctx[1].pathname === '/' ? '✔' : '✈',
    				text: dictionary[/*$USER*/ ctx[2].language].nav.cockpit
    			},
    			$$inline: true
    		});

    	navlink4 = new NavLink({
    			props: {
    				active: /*$location*/ ctx[1].pathname === '/transactions',
    				path: "/transactions",
    				icon: /*$location*/ ctx[1].pathname === '/transactions'
    				? '➺'
    				: '➸',
    				text: dictionary[/*$USER*/ ctx[2].language].nav.transactions
    			},
    			$$inline: true
    		});

    	navlink5 = new NavLink({
    			props: {
    				active: /*$location*/ ctx[1].pathname === '/settings',
    				path: "/settings",
    				icon: /*$location*/ ctx[1].pathname === '/settings'
    				? '✎'
    				: '✀',
    				text: dictionary[/*$USER*/ ctx[2].language].nav.settings
    			},
    			$$inline: true
    		});

    	connectwalletbutton0 = new ConnectWalletButton({ $$inline: true });

    	navlink6 = new NavLink({
    			props: {
    				active: /*$location*/ ctx[1].pathname === '/',
    				path: "/",
    				icon: /*$location*/ ctx[1].pathname === '/' ? '✔' : '✈'
    			},
    			$$inline: true
    		});

    	navlink7 = new NavLink({
    			props: {
    				active: /*$location*/ ctx[1].pathname === '/transactions',
    				path: "/transactions",
    				icon: /*$location*/ ctx[1].pathname === '/transactions'
    				? '➺'
    				: '➸'
    			},
    			$$inline: true
    		});

    	navlink8 = new NavLink({
    			props: {
    				active: /*$location*/ ctx[1].pathname === '/settings',
    				path: "/settings",
    				icon: /*$location*/ ctx[1].pathname === '/settings'
    				? '✎'
    				: '✀'
    			},
    			$$inline: true
    		});

    	connectwalletbutton1 = new ConnectWalletButton({ props: { mobile: true }, $$inline: true });

    	const block = {
    		c: function create() {
    			nav0 = element("nav");
    			div1 = element("div");
    			div0 = element("div");
    			create_component(logo.$$.fragment);
    			t0 = space();
    			create_component(navlink0.$$.fragment);
    			t1 = space();
    			create_component(navlink1.$$.fragment);
    			t2 = space();
    			create_component(navlink2.$$.fragment);
    			t3 = space();
    			div3 = element("div");
    			div2 = element("div");
    			i = element("i");
    			if_block0.c();
    			t4 = space();
    			if (if_block1) if_block1.c();
    			t5 = space();
    			nav1 = element("nav");
    			div4 = element("div");
    			create_component(navlink3.$$.fragment);
    			t6 = space();
    			create_component(navlink4.$$.fragment);
    			t7 = space();
    			create_component(navlink5.$$.fragment);
    			t8 = space();
    			div5 = element("div");
    			create_component(connectwalletbutton0.$$.fragment);
    			t9 = space();
    			nav2 = element("nav");
    			div6 = element("div");
    			create_component(navlink6.$$.fragment);
    			t10 = space();
    			create_component(navlink7.$$.fragment);
    			t11 = space();
    			create_component(navlink8.$$.fragment);
    			t12 = space();
    			div7 = element("div");
    			create_component(connectwalletbutton1.$$.fragment);
    			attr_dev(div0, "class", "nav-logo-container flex-centered svelte-327c1c");
    			add_location(div0, file$v, 31, 4, 1048);
    			attr_dev(div1, "class", "top flex align-center column svelte-327c1c");
    			add_location(div1, file$v, 30, 1, 1001);
    			attr_dev(i, "class", "text-gradient jet-icons");
    			add_location(i, file$v, 50, 6, 2019);
    			attr_dev(div2, "class", "bottom-expand flex-centered svelte-327c1c");
    			add_location(div2, file$v, 49, 4, 1942);
    			attr_dev(div3, "class", "bottom flex align-center justify-end column svelte-327c1c");
    			add_location(div3, file$v, 48, 2, 1880);
    			attr_dev(nav0, "class", "desktop flex flex align-center justify-between column svelte-327c1c");
    			add_location(nav0, file$v, 29, 0, 932);
    			attr_dev(div4, "class", "top flex align-center justify-evenly svelte-327c1c");
    			add_location(div4, file$v, 68, 1, 2449);
    			attr_dev(div5, "class", "bottom flex align-center justify-evenly svelte-327c1c");
    			add_location(div5, file$v, 82, 2, 3093);
    			attr_dev(nav1, "class", "tablet flex flex align-center justify-between svelte-327c1c");
    			add_location(nav1, file$v, 67, 0, 2388);
    			attr_dev(div6, "class", "top flex align-center justify-evenly svelte-327c1c");
    			add_location(div6, file$v, 88, 1, 3266);
    			attr_dev(div7, "class", "bottom flex align-center justify-evenly svelte-327c1c");
    			add_location(div7, file$v, 99, 2, 3745);
    			attr_dev(nav2, "class", "mobile flex flex align-center justify-between svelte-327c1c");
    			add_location(nav2, file$v, 87, 0, 3205);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav0, anchor);
    			append_dev(nav0, div1);
    			append_dev(div1, div0);
    			mount_component(logo, div0, null);
    			append_dev(div1, t0);
    			mount_component(navlink0, div1, null);
    			append_dev(div1, t1);
    			mount_component(navlink1, div1, null);
    			append_dev(div1, t2);
    			mount_component(navlink2, div1, null);
    			append_dev(nav0, t3);
    			append_dev(nav0, div3);
    			append_dev(div3, div2);
    			append_dev(div2, i);
    			if_block0.m(i, null);
    			append_dev(div2, t4);
    			if (if_block1) if_block1.m(div2, null);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, nav1, anchor);
    			append_dev(nav1, div4);
    			mount_component(navlink3, div4, null);
    			append_dev(div4, t6);
    			mount_component(navlink4, div4, null);
    			append_dev(div4, t7);
    			mount_component(navlink5, div4, null);
    			append_dev(nav1, t8);
    			append_dev(nav1, div5);
    			mount_component(connectwalletbutton0, div5, null);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, nav2, anchor);
    			append_dev(nav2, div6);
    			mount_component(navlink6, div6, null);
    			append_dev(div6, t10);
    			mount_component(navlink7, div6, null);
    			append_dev(div6, t11);
    			mount_component(navlink8, div6, null);
    			append_dev(nav2, t12);
    			append_dev(nav2, div7);
    			mount_component(connectwalletbutton1, div7, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler*/ ctx[5], false, false, false),
    					listen_dev(div2, "click", /*click_handler_1*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const logo_changes = {};
    			if (dirty & /*expanded*/ 1) logo_changes.width = !/*expanded*/ ctx[0] ? 50 : 105;
    			if (dirty & /*expanded*/ 1) logo_changes.logoMark = !/*expanded*/ ctx[0];
    			logo.$set(logo_changes);
    			const navlink0_changes = {};
    			if (dirty & /*$location*/ 2) navlink0_changes.active = /*$location*/ ctx[1].pathname === '/';
    			if (dirty & /*$location*/ 2) navlink0_changes.icon = /*$location*/ ctx[1].pathname === '/' ? '✔' : '✈';

    			if (dirty & /*expanded, $USER*/ 5) navlink0_changes.text = /*expanded*/ ctx[0]
    			? dictionary[/*$USER*/ ctx[2].language].nav.cockpit
    			: '';

    			navlink0.$set(navlink0_changes);
    			const navlink1_changes = {};
    			if (dirty & /*$location*/ 2) navlink1_changes.active = /*$location*/ ctx[1].pathname === '/transactions';

    			if (dirty & /*$location*/ 2) navlink1_changes.icon = /*$location*/ ctx[1].pathname === '/transactions'
    			? '➺'
    			: '➸';

    			if (dirty & /*expanded, $USER*/ 5) navlink1_changes.text = /*expanded*/ ctx[0]
    			? dictionary[/*$USER*/ ctx[2].language].nav.transactions
    			: '';

    			navlink1.$set(navlink1_changes);
    			const navlink2_changes = {};
    			if (dirty & /*$location*/ 2) navlink2_changes.active = /*$location*/ ctx[1].pathname === '/settings';

    			if (dirty & /*$location*/ 2) navlink2_changes.icon = /*$location*/ ctx[1].pathname === '/settings'
    			? '✎'
    			: '✀';

    			if (dirty & /*expanded, $USER*/ 5) navlink2_changes.text = /*expanded*/ ctx[0]
    			? dictionary[/*$USER*/ ctx[2].language].nav.settings
    			: '';

    			navlink2.$set(navlink2_changes);

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(i, null);
    				}
    			}

    			if (/*expanded*/ ctx[0]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$m(ctx);
    					if_block1.c();
    					if_block1.m(div2, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			const navlink3_changes = {};
    			if (dirty & /*$location*/ 2) navlink3_changes.active = /*$location*/ ctx[1].pathname === '/';
    			if (dirty & /*$location*/ 2) navlink3_changes.icon = /*$location*/ ctx[1].pathname === '/' ? '✔' : '✈';
    			if (dirty & /*$USER*/ 4) navlink3_changes.text = dictionary[/*$USER*/ ctx[2].language].nav.cockpit;
    			navlink3.$set(navlink3_changes);
    			const navlink4_changes = {};
    			if (dirty & /*$location*/ 2) navlink4_changes.active = /*$location*/ ctx[1].pathname === '/transactions';

    			if (dirty & /*$location*/ 2) navlink4_changes.icon = /*$location*/ ctx[1].pathname === '/transactions'
    			? '➺'
    			: '➸';

    			if (dirty & /*$USER*/ 4) navlink4_changes.text = dictionary[/*$USER*/ ctx[2].language].nav.transactions;
    			navlink4.$set(navlink4_changes);
    			const navlink5_changes = {};
    			if (dirty & /*$location*/ 2) navlink5_changes.active = /*$location*/ ctx[1].pathname === '/settings';

    			if (dirty & /*$location*/ 2) navlink5_changes.icon = /*$location*/ ctx[1].pathname === '/settings'
    			? '✎'
    			: '✀';

    			if (dirty & /*$USER*/ 4) navlink5_changes.text = dictionary[/*$USER*/ ctx[2].language].nav.settings;
    			navlink5.$set(navlink5_changes);
    			const navlink6_changes = {};
    			if (dirty & /*$location*/ 2) navlink6_changes.active = /*$location*/ ctx[1].pathname === '/';
    			if (dirty & /*$location*/ 2) navlink6_changes.icon = /*$location*/ ctx[1].pathname === '/' ? '✔' : '✈';
    			navlink6.$set(navlink6_changes);
    			const navlink7_changes = {};
    			if (dirty & /*$location*/ 2) navlink7_changes.active = /*$location*/ ctx[1].pathname === '/transactions';

    			if (dirty & /*$location*/ 2) navlink7_changes.icon = /*$location*/ ctx[1].pathname === '/transactions'
    			? '➺'
    			: '➸';

    			navlink7.$set(navlink7_changes);
    			const navlink8_changes = {};
    			if (dirty & /*$location*/ 2) navlink8_changes.active = /*$location*/ ctx[1].pathname === '/settings';

    			if (dirty & /*$location*/ 2) navlink8_changes.icon = /*$location*/ ctx[1].pathname === '/settings'
    			? '✎'
    			: '✀';

    			navlink8.$set(navlink8_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(logo.$$.fragment, local);
    			transition_in(navlink0.$$.fragment, local);
    			transition_in(navlink1.$$.fragment, local);
    			transition_in(navlink2.$$.fragment, local);
    			transition_in(navlink3.$$.fragment, local);
    			transition_in(navlink4.$$.fragment, local);
    			transition_in(navlink5.$$.fragment, local);
    			transition_in(connectwalletbutton0.$$.fragment, local);
    			transition_in(navlink6.$$.fragment, local);
    			transition_in(navlink7.$$.fragment, local);
    			transition_in(navlink8.$$.fragment, local);
    			transition_in(connectwalletbutton1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(logo.$$.fragment, local);
    			transition_out(navlink0.$$.fragment, local);
    			transition_out(navlink1.$$.fragment, local);
    			transition_out(navlink2.$$.fragment, local);
    			transition_out(navlink3.$$.fragment, local);
    			transition_out(navlink4.$$.fragment, local);
    			transition_out(navlink5.$$.fragment, local);
    			transition_out(connectwalletbutton0.$$.fragment, local);
    			transition_out(navlink6.$$.fragment, local);
    			transition_out(navlink7.$$.fragment, local);
    			transition_out(navlink8.$$.fragment, local);
    			transition_out(connectwalletbutton1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav0);
    			destroy_component(logo);
    			destroy_component(navlink0);
    			destroy_component(navlink1);
    			destroy_component(navlink2);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(nav1);
    			destroy_component(navlink3);
    			destroy_component(navlink4);
    			destroy_component(navlink5);
    			destroy_component(connectwalletbutton0);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(nav2);
    			destroy_component(navlink6);
    			destroy_component(navlink7);
    			destroy_component(navlink8);
    			destroy_component(connectwalletbutton1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let $location;
    	let $USER;
    	validate_store(USER, 'USER');
    	component_subscribe($$self, USER, $$value => $$invalidate(2, $USER = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Nav', slots, []);
    	let expanded = false;
    	const location = useLocation();
    	validate_store(location, 'location');
    	component_subscribe($$self, location, value => $$invalidate(1, $location = value));

    	// Toggle navbar expansion (desktop)
    	const toggleNav = () => {
    		if (expanded) {
    			document.documentElement.style.setProperty('--nav-width', '60px');
    		} else {
    			document.documentElement.style.setProperty('--nav-width', '120px');
    		}

    		$$invalidate(0, expanded = !expanded);
    		localStorage.setItem('jetNavExpanded', JSON.stringify(expanded));
    	};

    	// If user prefers their nav to be expanded, toggle it on init
    	onMount(() => {
    		if (localStorage.getItem('jetNavExpanded') === 'true') {
    			toggleNav();
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Nav> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => window.open('https://jetprotocol.io/', '_blank');
    	const click_handler_1 = () => toggleNav();

    	$$self.$capture_state = () => ({
    		onMount,
    		useLocation,
    		USER,
    		dictionary,
    		Logo,
    		NavLink,
    		ConnectWalletButton,
    		expanded,
    		location,
    		toggleNav,
    		$location,
    		$USER
    	});

    	$$self.$inject_state = $$props => {
    		if ('expanded' in $$props) $$invalidate(0, expanded = $$props.expanded);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		expanded,
    		$location,
    		$USER,
    		location,
    		toggleNav,
    		click_handler,
    		click_handler_1
    	];
    }

    class Nav extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$w, create_fragment$w, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Nav",
    			options,
    			id: create_fragment$w.name
    		});
    	}
    }

    const createOptions = () => {
        const {subscribe, set } = writable({
            sortable: true,
            pagination: true,
            rowPerPage: 50,
            columnFilter: false,
            scrollY: true,
            css: true,
            labels: {
                search: 'Search...',
                filter: 'Filter',
                noRows: 'No entries to found',
                info: 'Showing {start} to {end} of {rows} entries',
                previous: 'Previous',
                next: 'Next',
            },
            blocks: {
                searchInput: true, 
                paginationButtons: true,
                paginationRowCount: true,
            }
        });
        return {
            subscribe, set, 
            get: () => {
                let $store;
                options.subscribe(store => $store = store);
                return $store
            },
            update: (opt) => {
                opt.labels = opt.labels ? opt.labels : {};
                const labels = {
                    search:   typeof opt.labels.search   === 'string' ? opt.labels.search   : 'Search...',
                    filter:   typeof opt.labels.filter   === 'string' ? opt.labels.filter   : 'Filter',
                    noRows:   typeof opt.labels.noRows   === 'string' ? opt.labels.noRows   : 'No entries to found',
                    info:     typeof opt.labels.info     === 'string' ? opt.labels.info     : 'Showing {start} to {end} of {rows} entries',
                    previous: typeof opt.labels.previous === 'string' ? opt.labels.previous : 'Previous',
                    next:     typeof opt.labels.next     === 'string' ? opt.labels.next     : 'Next',                
                };   
                opt.blocks = opt.blocks ? opt.blocks : {};
                const blocks = {
                    searchInput:        typeof opt.blocks.searchInput        === 'boolean' ? opt.blocks.searchInput        : true, 
                    paginationButtons:  typeof opt.blocks.paginationButtons  === 'boolean' ? opt.blocks.paginationButtons  : true,
                    paginationRowCount: typeof opt.blocks.paginationRowCount === 'boolean' ? opt.blocks.paginationRowCount : true,
                };
                const parsed = {
                    sortable:     typeof opt.sortable     === 'boolean' ? opt.sortable     : true,
                    pagination:   typeof opt.pagination   === 'boolean' ? opt.pagination   : true,
                    rowPerPage:   typeof opt.rowPerPage   === 'number'  ? opt.rowPerPage   : 50,
                    columnFilter: typeof opt.columnFilter === 'boolean' ? opt.columnFilter : false, 
                    scrollY:      typeof opt.scrollY      === 'boolean' ? opt.scrollY      : true, 
                    css:          typeof opt.css          === 'boolean' ? opt.css          : true, 
                    labels: labels,
                    blocks: blocks
                };
                options.set(parsed);
            }
        }
    };
    const options = createOptions();

    const rowCount = writable(0);

    const createPageNumber = () => {
    	const { subscribe, update } = writable(1);
    	return {
    		subscribe, update,
    		set: (number) => update(store => {
    			let $rowPerPage, $rowCount;
    			rowCount.subscribe(store => $rowCount = store);
    			options.subscribe(store => $rowPerPage = store.rowPerPage);
    			if ( number >= 1 && number <= Math.ceil($rowCount / $rowPerPage) ) {
    				store = parseInt(number);
    			}
    			document.querySelector('section.datatable .dt-table').scrollTop = 0;
    			return store
    		})
    	}
    };
    const pageNumber = createPageNumber();

    const datatableWidth = writable(null);

    const createLocal = () => {
    	const { subscribe, update } = writable([]);
    	return {
    		subscribe, update,
    		add: (key, value) => update(store => {
    			const filter = {key: key, value: value}; 
    			store = store.filter(item => { return item.key !== key && item.value.length > 0 });
    			store.push(filter);
    			return store
    		}),
    		remove: () => update(store => [])
    	}
    };
    const local = createLocal();

    const createGlobal = () => {
    	const { subscribe, update } = writable(null);
    	return {
    		subscribe, 
    		set: (value) => update(store => {
    			store = (value.length > 0) ? value : null;
    			return store
    		}),
    		remove: () => update(store => null)
    	}
    };
    const global$1 = createGlobal();

    const createData = () => {
    	const { subscribe, set, update } = writable([]);
    	return {
    		subscribe, set,
    		sortAsc: (key) => update(store => {
    			try {
    				store.sort( (a, b) => key(b).localeCompare(key(a)) );
    			} catch (e) {
    				return store.sort( (a, b) => parseFloat(key(b)) - parseFloat(key(a)))
    			}
    			return store.sort( (a, b) => key(b).localeCompare(key(a)) )
    			
    		}),
    		sortDesc: (key) => update(store => {
    			try {
    				store.sort( (a, b) => key(a).localeCompare(key(b)) );
    			} catch (e) {
    				return store.sort( (a, b) => parseFloat(key(a)) - parseFloat(key(b)))
    			}
    			return store.sort( (a, b) => key(a).localeCompare(key(b)) )
    		}),
    	}
    };
    const data = createData();

    const filtered = derived(
    	[data, global$1, local],
        ([$data, $global, $local]) => {
    		if ($global) {
    			$data = $data.filter( item => {
    				return Object.keys(item).some( k => {
    					return item[k].toString().toLowerCase().indexOf($global.toString().toLowerCase()) > -1
    				})
    			});
    		}
    		if ($local.length > 0) {
    			$local.forEach(filter => {
    				return $data = $data.filter( item => filter.key(item).toString().toLowerCase().indexOf(filter.value.toString().toLowerCase()) > -1)
    			});
    		}
    		rowCount.set($data.length);
    		return $data
    	} 	
    );

    const rows = derived(
    	[filtered, options, pageNumber],
        ([$filtered, $options, $pageNumber]) => {
    		if (!$options.pagination) {
    			return $filtered
    		}
    		return $filtered.slice( ($pageNumber - 1) * $options.rowPerPage, $pageNumber * $options.rowPerPage) 
    	} 
    );

    const createColumns = () => {
    	const { subscribe, set, update } = writable([]);
    	return {
    		subscribe, set, update,
    		get: () => {
    			let $columns;
    			columns.subscribe(store => $columns = store);
    			return $columns
    		},
    		sort: (element, key) => {
    			if (options.get().sortable !== true || typeof key === 'undefined') {
    				return
    			}
    			if (
    				element.classList.contains('sortable') &&
    				element.classList.contains('asc')
    			) {
    				Array.from(element.parentNode.children).forEach((item) =>
    					item.classList.remove('asc', 'desc')
    				);
    				element.classList.add('desc');
    				data.sortDesc(key);
    				pageNumber.set(1);
    			} else {
    				Array.from(element.parentNode.children).forEach((item) =>
    					item.classList.remove('desc', 'asc')
    				);
    				element.classList.add('asc');
    				data.sortAsc(key);
    				pageNumber.set(1);
    			}
    			columns.redraw();
    		},
    		filter: (key, value) => {
    			pageNumber.set(1);
    			local.add(key, value);
    			columns.redraw();
    		},
    		draw: () => {
    			setTimeout(() => {
    				const tbody = document.querySelector('.datatable table tbody tr');
    				if (tbody === null) return
    				const thead = document.querySelectorAll('.dt-header thead tr');
    				const $columns = columns.get();
    				thead.forEach(tr => {
    					let i = 0;
    					Array.from(tbody.children).forEach(td => {
    						let th = tr.children[i];
    						let thW = th.getBoundingClientRect().width;
    						let tdW = td.getBoundingClientRect().width;
    						// let columnMinWidth = parseFloat(columns.get()[i].minWidth.replace('px', ''))
    						if (tdW > thW) { 
    							th.style.minWidth = tdW + 'px';
    							th.style.maxWidth = tdW + 'px';
    							$columns[i].minWidth = tdW;
    						}
    						else {
    							td.style.minWidth = thW + 'px';
    							td.style.maxWidth = thW + 'px';
    							$columns[i].minWidth = thW;
    						} 
    						i++;
    					});
    				});
    			}, 50);	
    		},
    		redraw: () => {
    			if ( options.get().scrollY === false ) {
    				return
    			}
    			setTimeout(() => {
    				const tbody = document.querySelector('.datatable table tbody tr');
    				if (tbody === null) return
    				const thead = document.querySelectorAll('.dt-header thead tr');
    				thead.forEach(tr => {
    					let i = 0;
    					Array.from(tbody.children).forEach(td => {
    						let th = tr.children[i];
    						let thW = th.getBoundingClientRect().width;
    						let tdW = td.getBoundingClientRect().width;
    						let columnMinWidth = parseFloat(columns.get()[i].minWidth);
    						if (tdW > thW || thW > columnMinWidth) { 
    							th.style.minWidth = tdW + 'px';
    							th.style.maxWidth = tdW + 'px';
    						}
    						else {
    							td.style.minWidth = thW + 'px';
    							td.style.maxWidth = thW + 'px';
    						} 
    						i++;
    					});
    				});
    			}, 50);			
    		},
    	}
    };
    const columns = createColumns();

    const datatable = {
        init: () => {
            datatable.resize();
            datatable.addEventScrollX();
            datatable.getColumns();
            new ResizeObserver((mutations) => {
                datatable.resize();
            }).observe(document.querySelector('section.datatable').parentElement);
        },
        reset: () => {
            pageNumber.update(store => 1);
            global$1.remove();
            local.remove();
            columns.set([]);
        },
        setRows: (arr) => {
            arr.forEach( (item) => {
                Object.keys(item).forEach( (k) => {
                    if (item[k] === null) {
                        item[k] = '';
                    }
                });
            });
            data.set(arr);
            return
        },
        getSize: () => {
            const parent = document.querySelector('section.datatable').parentNode;
            const style = getComputedStyle(parent);
            const rect = parent.getBoundingClientRect();
            const getNumber = (pxValue) => { return parseFloat(pxValue.replace('px', ''))  }; 
            return {
                parentWidth: rect.width,
                parentHeight: rect.height,
                width: (rect.width - getNumber(style.paddingLeft) - getNumber(style.paddingRight) - getNumber(style.borderLeftWidth) - getNumber(style.borderRightWidth)) / rect.width,
                height: (rect.height - getNumber(style.paddingTop) - getNumber(style.paddingBottom) - getNumber(style.borderTopWidth) - getNumber(style.borderBottomWidth)) / rect.height,
                top: style.paddingTop,
                right: style.paddingRight,
                bottom: style.paddingBottom,
                left: style.paddingLeft
            }
        },
        resize: () => {
            if ( !document.querySelector('section.datatable') ) return
            const size = datatable.getSize();
            const tableContainer = document.querySelector('section.datatable .dt-table');
            if ( options.get().scrollY ) {
                tableContainer.style.height = datatable.getTableContainerHeight(size.parentHeight * size.height) + 'px';
                columns.redraw();
            }
            datatableWidth.set( size.parentWidth * size.width );
            if (size.parentWidth * size.width < document.querySelector('section.datatable table').offsetWidth) {
                tableContainer.style.overflowX = 'auto';
            }
        },
        getTableContainerHeight: (height) => {
            let paginationBlock;
            if (options.get().pagination && (options.get().blocks.paginationButtons || options.get().blocks.paginationRowCount)) {
                paginationBlock = true;
            }
            const calc = [
                (options.get().blocks.searchInput) ? document.querySelector('.datatable .dt-search').getBoundingClientRect().height : 0,
                (paginationBlock) ? document.querySelector('.datatable .dt-pagination').getBoundingClientRect().height : 0
            ];
            const sum = (a, b) => a + b;
            document.querySelector('section.datatable .dt-table').style.height = height - calc.reduce(sum) + 'px';
        },
        addEventScrollX: () => {
            if ( options.get().scrollY ) {
                document.querySelector('section.datatable .dt-table').addEventListener('scroll', (e) => {
                    document.querySelector('.dt-header').style.left = (-1 * e.target.scrollLeft) + 'px';
                });
            }
        },
        getColumns: () => {
            const columnList = [];
            let i = 0;
            document.querySelectorAll('.datatable table thead th').forEach(th => {
                columnList.push({
                    index: i,
                    html: th.innerHTML,
                    key: datatable.getKey(th.dataset.key),
                    sort: null,
                    classList: th.classList,
                    minWidth: th.getBoundingClientRect().width
                });
                th.addEventListener('click', (e) => {
                    columns.sort(e.target, datatable.getKey(th.dataset.key));
                }, true);
                i++;
            });
            columns.set(columnList);
        },
        getKey: (key) => {
            if (!key)  return 
            if (key && key.indexOf('=>') > 0) {
                return new Function(`'use strict';return (${key})`)()
            }
            return (x) => x[key]
        },
    };

    /* node_modules/svelte-simple-datatables/src/SearchInput.svelte generated by Svelte v3.44.2 */
    const file$u = "node_modules/svelte-simple-datatables/src/SearchInput.svelte";

    function create_fragment$v(ctx) {
    	let input;
    	let input_class_value;
    	let input_placeholder_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "class", input_class_value = "" + (null_to_empty(/*classList*/ ctx[1]) + " svelte-1kn6xvh"));
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", input_placeholder_value = /*$options*/ ctx[2].labels.search);
    			attr_dev(input, "ref", /*ref*/ ctx[0]);
    			toggle_class(input, "css", /*$options*/ ctx[2].css);
    			add_location(input, file$u, 14, 0, 403);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*input_handler*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*classList*/ 2 && input_class_value !== (input_class_value = "" + (null_to_empty(/*classList*/ ctx[1]) + " svelte-1kn6xvh"))) {
    				attr_dev(input, "class", input_class_value);
    			}

    			if (dirty & /*$options*/ 4 && input_placeholder_value !== (input_placeholder_value = /*$options*/ ctx[2].labels.search)) {
    				attr_dev(input, "placeholder", input_placeholder_value);
    			}

    			if (dirty & /*ref*/ 1) {
    				attr_dev(input, "ref", /*ref*/ ctx[0]);
    			}

    			if (dirty & /*classList, $options*/ 6) {
    				toggle_class(input, "css", /*$options*/ ctx[2].css);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let $options;
    	validate_store(options, 'options');
    	component_subscribe($$self, options, $$value => $$invalidate(2, $options = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SearchInput', slots, []);
    	let { ref = '' } = $$props;
    	let { classList = '' } = $$props;

    	const search = value => {
    		pageNumber.set(1);
    		global$1.set(value);
    		columns.redraw();
    	};

    	const writable_props = ['ref', 'classList'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SearchInput> was created with unknown prop '${key}'`);
    	});

    	const input_handler = e => search(e.target.value);

    	$$self.$$set = $$props => {
    		if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
    		if ('classList' in $$props) $$invalidate(1, classList = $$props.classList);
    	};

    	$$self.$capture_state = () => ({
    		options,
    		pageNumber,
    		columns,
    		global: global$1,
    		ref,
    		classList,
    		search,
    		$options
    	});

    	$$self.$inject_state = $$props => {
    		if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
    		if ('classList' in $$props) $$invalidate(1, classList = $$props.classList);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [ref, classList, $options, search, input_handler];
    }

    class SearchInput extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$v, create_fragment$v, safe_not_equal, { ref: 0, classList: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SearchInput",
    			options,
    			id: create_fragment$v.name
    		});
    	}

    	get ref() {
    		throw new Error("<SearchInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ref(value) {
    		throw new Error("<SearchInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get classList() {
    		throw new Error("<SearchInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set classList(value) {
    		throw new Error("<SearchInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-simple-datatables/src/components/Search.svelte generated by Svelte v3.44.2 */
    const file$t = "node_modules/svelte-simple-datatables/src/components/Search.svelte";

    function create_fragment$u(ctx) {
    	let section;
    	let searchinput;
    	let current;
    	searchinput = new SearchInput({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(searchinput.$$.fragment);
    			attr_dev(section, "class", "dt-search svelte-11nchoy");
    			toggle_class(section, "css", /*$options*/ ctx[0].css);
    			add_location(section, file$t, 5, 0, 128);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(searchinput, section, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$options*/ 1) {
    				toggle_class(section, "css", /*$options*/ ctx[0].css);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(searchinput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(searchinput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(searchinput);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let $options;
    	validate_store(options, 'options');
    	component_subscribe($$self, options, $$value => $$invalidate(0, $options = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Search', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Search> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ SearchInput, options, $options });
    	return [$options];
    }

    class Search extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$u, create_fragment$u, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Search",
    			options,
    			id: create_fragment$u.name
    		});
    	}
    }

    /* node_modules/svelte-simple-datatables/src/PaginationRowCount.svelte generated by Svelte v3.44.2 */
    const file$s = "node_modules/svelte-simple-datatables/src/PaginationRowCount.svelte";

    // (19:4) {:else}
    function create_else_block_1$4(ctx) {
    	let html_tag;
    	let raw_value = `<b>${/*start*/ ctx[2]}</b>-<b>${/*end*/ ctx[1]}</b>/<b>${/*rows*/ ctx[0]}</b>` + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(raw_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*start, end, rows*/ 7 && raw_value !== (raw_value = `<b>${/*start*/ ctx[2]}</b>-<b>${/*end*/ ctx[1]}</b>/<b>${/*rows*/ ctx[0]}</b>` + "")) html_tag.p(raw_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$4.name,
    		type: "else",
    		source: "(19:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (13:4) {#if $datatableWidth > 600}
    function create_if_block$l(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (/*rows*/ ctx[0] > 0) return create_if_block_1$h;
    		return create_else_block$c;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$l.name,
    		type: "if",
    		source: "(13:4) {#if $datatableWidth > 600}",
    		ctx
    	});

    	return block;
    }

    // (16:8) {:else}
    function create_else_block$c(ctx) {
    	let html_tag;
    	let raw_value = /*$options*/ ctx[3].labels.noRows + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(raw_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$options*/ 8 && raw_value !== (raw_value = /*$options*/ ctx[3].labels.noRows + "")) html_tag.p(raw_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$c.name,
    		type: "else",
    		source: "(16:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (14:8) {#if rows > 0}
    function create_if_block_1$h(ctx) {
    	let html_tag;
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(/*info*/ ctx[4], target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*info*/ 16) html_tag.p(/*info*/ ctx[4]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$h.name,
    		type: "if",
    		source: "(14:8) {#if rows > 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$t(ctx) {
    	let aside;

    	function select_block_type(ctx, dirty) {
    		if (/*$datatableWidth*/ ctx[5] > 600) return create_if_block$l;
    		return create_else_block_1$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			aside = element("aside");
    			if_block.c();
    			attr_dev(aside, "class", "dt-pagination-rowcount svelte-jt0h2f");
    			toggle_class(aside, "css", /*$options*/ ctx[3].css);
    			add_location(aside, file$s, 11, 0, 470);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, aside, anchor);
    			if_block.m(aside, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(aside, null);
    				}
    			}

    			if (dirty & /*$options*/ 8) {
    				toggle_class(aside, "css", /*$options*/ ctx[3].css);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(aside);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let start;
    	let end;
    	let rows;
    	let info;
    	let $options;
    	let $rowCount;
    	let $pageNumber;
    	let $datatableWidth;
    	validate_store(options, 'options');
    	component_subscribe($$self, options, $$value => $$invalidate(3, $options = $$value));
    	validate_store(rowCount, 'rowCount');
    	component_subscribe($$self, rowCount, $$value => $$invalidate(6, $rowCount = $$value));
    	validate_store(pageNumber, 'pageNumber');
    	component_subscribe($$self, pageNumber, $$value => $$invalidate(7, $pageNumber = $$value));
    	validate_store(datatableWidth, 'datatableWidth');
    	component_subscribe($$self, datatableWidth, $$value => $$invalidate(5, $datatableWidth = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PaginationRowCount', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PaginationRowCount> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		options,
    		pageNumber,
    		rowCount,
    		datatableWidth,
    		rows,
    		end,
    		start,
    		info,
    		$options,
    		$rowCount,
    		$pageNumber,
    		$datatableWidth
    	});

    	$$self.$inject_state = $$props => {
    		if ('rows' in $$props) $$invalidate(0, rows = $$props.rows);
    		if ('end' in $$props) $$invalidate(1, end = $$props.end);
    		if ('start' in $$props) $$invalidate(2, start = $$props.start);
    		if ('info' in $$props) $$invalidate(4, info = $$props.info);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$pageNumber, $options*/ 136) {
    			$$invalidate(2, start = $pageNumber * $options.rowPerPage - $options.rowPerPage + 1);
    		}

    		if ($$self.$$.dirty & /*$pageNumber, $options, $rowCount*/ 200) {
    			$$invalidate(1, end = Math.min($pageNumber * $options.rowPerPage, $rowCount));
    		}

    		if ($$self.$$.dirty & /*$rowCount*/ 64) {
    			$$invalidate(0, rows = $rowCount);
    		}

    		if ($$self.$$.dirty & /*$options, start, end, rows*/ 15) {
    			$$invalidate(4, info = $options.labels.info.replace('{start}', `<b>${start}</b>`).replace('{end}', `<b>${end}</b>`).replace('{rows}', `<b>${rows}</b>`));
    		}
    	};

    	return [rows, end, start, $options, info, $datatableWidth, $rowCount, $pageNumber];
    }

    class PaginationRowCount extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$t, create_fragment$t, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PaginationRowCount",
    			options,
    			id: create_fragment$t.name
    		});
    	}
    }

    /* node_modules/svelte-simple-datatables/src/PaginationButtons.svelte generated by Svelte v3.44.2 */
    const file$r = "node_modules/svelte-simple-datatables/src/PaginationButtons.svelte";

    function get_each_context$c(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[19] = list[i];
    	return child_ctx;
    }

    // (70:0) {:else}
    function create_else_block$b(ctx) {
    	let section;
    	let button0;
    	let t1;
    	let button1;
    	let t3;
    	let button2;
    	let t5;
    	let button3;
    	let section_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			section = element("section");
    			button0 = element("button");
    			button0.textContent = "❬❬";
    			t1 = space();
    			button1 = element("button");
    			button1.textContent = "❮";
    			t3 = space();
    			button2 = element("button");
    			button2.textContent = "❯";
    			t5 = space();
    			button3 = element("button");
    			button3.textContent = "❭❭";
    			attr_dev(button0, "class", "svelte-9qvh1i");
    			toggle_class(button0, "disabled", /*$pageNumber*/ ctx[3] === 1);
    			add_location(button0, file$r, 71, 8, 2390);
    			attr_dev(button1, "class", "svelte-9qvh1i");
    			toggle_class(button1, "disabled", /*$pageNumber*/ ctx[3] === 1);
    			add_location(button1, file$r, 72, 8, 2496);
    			attr_dev(button2, "class", "svelte-9qvh1i");
    			toggle_class(button2, "disabled", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
    			add_location(button2, file$r, 73, 8, 2608);
    			attr_dev(button3, "class", "svelte-9qvh1i");
    			toggle_class(button3, "disabled", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
    			add_location(button3, file$r, 74, 8, 2736);
    			attr_dev(section, "class", section_class_value = "dt-pagination-buttons mobile " + /*classList*/ ctx[1] + " svelte-9qvh1i");
    			toggle_class(section, "css", /*$options*/ ctx[4].css);
    			add_location(section, file$r, 70, 4, 2297);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, button0);
    			append_dev(section, t1);
    			append_dev(section, button1);
    			append_dev(section, t3);
    			append_dev(section, button2);
    			append_dev(section, t5);
    			append_dev(section, button3);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler_5*/ ctx[14], false, false, false),
    					listen_dev(button1, "click", /*click_handler_6*/ ctx[15], false, false, false),
    					listen_dev(button2, "click", /*click_handler_7*/ ctx[16], false, false, false),
    					listen_dev(button3, "click", /*click_handler_8*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$pageNumber*/ 8) {
    				toggle_class(button0, "disabled", /*$pageNumber*/ ctx[3] === 1);
    			}

    			if (dirty & /*$pageNumber*/ 8) {
    				toggle_class(button1, "disabled", /*$pageNumber*/ ctx[3] === 1);
    			}

    			if (dirty & /*$pageNumber, pageCount*/ 12) {
    				toggle_class(button2, "disabled", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
    			}

    			if (dirty & /*$pageNumber, pageCount*/ 12) {
    				toggle_class(button3, "disabled", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
    			}

    			if (dirty & /*classList*/ 2 && section_class_value !== (section_class_value = "dt-pagination-buttons mobile " + /*classList*/ ctx[1] + " svelte-9qvh1i")) {
    				attr_dev(section, "class", section_class_value);
    			}

    			if (dirty & /*classList, $options*/ 18) {
    				toggle_class(section, "css", /*$options*/ ctx[4].css);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$b.name,
    		type: "else",
    		source: "(70:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (25:0) {#if $datatableWidth > 600}
    function create_if_block$k(ctx) {
    	let section;
    	let button0;
    	let raw0_value = /*$options*/ ctx[4].labels.previous + "";
    	let t0;
    	let button1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let button2;
    	let raw1_value = /*$options*/ ctx[4].labels.next + "";
    	let section_class_value;
    	let mounted;
    	let dispose;
    	let if_block0 = /*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[3] >= 5 && create_if_block_4$6(ctx);
    	let each_value = /*buttons*/ ctx[5];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
    	}

    	let if_block1 = /*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[3] <= /*pageCount*/ ctx[2].length - 3 && create_if_block_2$b(ctx);
    	let if_block2 = /*pageCount*/ ctx[2].length > 1 && create_if_block_1$g(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			button0 = element("button");
    			t0 = space();
    			button1 = element("button");
    			button1.textContent = "1";
    			t2 = space();
    			if (if_block0) if_block0.c();
    			t3 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			if (if_block1) if_block1.c();
    			t5 = space();
    			if (if_block2) if_block2.c();
    			t6 = space();
    			button2 = element("button");
    			attr_dev(button0, "class", "text svelte-9qvh1i");
    			toggle_class(button0, "disabled", /*$pageNumber*/ ctx[3] === 1);
    			add_location(button0, file$r, 26, 8, 905);
    			attr_dev(button1, "class", "svelte-9qvh1i");
    			toggle_class(button1, "active", /*$pageNumber*/ ctx[3] === 1);
    			add_location(button1, file$r, 33, 8, 1128);
    			attr_dev(button2, "class", "text svelte-9qvh1i");
    			toggle_class(button2, "disabled", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
    			add_location(button2, file$r, 61, 8, 2042);
    			attr_dev(section, "class", section_class_value = "dt-pagination-buttons " + /*classList*/ ctx[1] + " svelte-9qvh1i");
    			attr_dev(section, "ref", /*ref*/ ctx[0]);
    			toggle_class(section, "css", /*$options*/ ctx[4].css);
    			add_location(section, file$r, 25, 4, 813);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, button0);
    			button0.innerHTML = raw0_value;
    			append_dev(section, t0);
    			append_dev(section, button1);
    			append_dev(section, t2);
    			if (if_block0) if_block0.m(section, null);
    			append_dev(section, t3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(section, null);
    			}

    			append_dev(section, t4);
    			if (if_block1) if_block1.m(section, null);
    			append_dev(section, t5);
    			if (if_block2) if_block2.m(section, null);
    			append_dev(section, t6);
    			append_dev(section, button2);
    			button2.innerHTML = raw1_value;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[9], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[10], false, false, false),
    					listen_dev(button2, "click", /*click_handler_4*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$options*/ 16 && raw0_value !== (raw0_value = /*$options*/ ctx[4].labels.previous + "")) button0.innerHTML = raw0_value;
    			if (dirty & /*$pageNumber*/ 8) {
    				toggle_class(button0, "disabled", /*$pageNumber*/ ctx[3] === 1);
    			}

    			if (dirty & /*$pageNumber*/ 8) {
    				toggle_class(button1, "active", /*$pageNumber*/ ctx[3] === 1);
    			}

    			if (/*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[3] >= 5) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_4$6(ctx);
    					if_block0.c();
    					if_block0.m(section, t3);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*$pageNumber, buttons, setPage, pageCount*/ 172) {
    				each_value = /*buttons*/ ctx[5];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$c(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$c(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(section, t4);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[3] <= /*pageCount*/ ctx[2].length - 3) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_2$b(ctx);
    					if_block1.c();
    					if_block1.m(section, t5);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*pageCount*/ ctx[2].length > 1) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_1$g(ctx);
    					if_block2.c();
    					if_block2.m(section, t6);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (dirty & /*$options*/ 16 && raw1_value !== (raw1_value = /*$options*/ ctx[4].labels.next + "")) button2.innerHTML = raw1_value;
    			if (dirty & /*$pageNumber, pageCount*/ 12) {
    				toggle_class(button2, "disabled", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
    			}

    			if (dirty & /*classList*/ 2 && section_class_value !== (section_class_value = "dt-pagination-buttons " + /*classList*/ ctx[1] + " svelte-9qvh1i")) {
    				attr_dev(section, "class", section_class_value);
    			}

    			if (dirty & /*ref*/ 1) {
    				attr_dev(section, "ref", /*ref*/ ctx[0]);
    			}

    			if (dirty & /*classList, $options*/ 18) {
    				toggle_class(section, "css", /*$options*/ ctx[4].css);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block0) if_block0.d();
    			destroy_each(each_blocks, detaching);
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$k.name,
    		type: "if",
    		source: "(25:0) {#if $datatableWidth > 600}",
    		ctx
    	});

    	return block;
    }

    // (37:8) {#if pageCount.length > 6 && $pageNumber >= 5}
    function create_if_block_4$6(ctx) {
    	let button;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "...";
    			attr_dev(button, "class", "ellipse svelte-9qvh1i");
    			add_location(button, file$r, 37, 12, 1303);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$6.name,
    		type: "if",
    		source: "(37:8) {#if pageCount.length > 6 && $pageNumber >= 5}",
    		ctx
    	});

    	return block;
    }

    // (42:12) {#if n > 0 && n < pageCount.length - 1}
    function create_if_block_3$7(ctx) {
    	let button;
    	let t_value = /*n*/ ctx[19] + 1 + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[11](/*n*/ ctx[19]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(t_value);
    			attr_dev(button, "class", "svelte-9qvh1i");
    			toggle_class(button, "active", /*$pageNumber*/ ctx[3] === /*n*/ ctx[19] + 1);
    			add_location(button, file$r, 42, 12, 1453);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_2, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*buttons*/ 32 && t_value !== (t_value = /*n*/ ctx[19] + 1 + "")) set_data_dev(t, t_value);

    			if (dirty & /*$pageNumber, buttons*/ 40) {
    				toggle_class(button, "active", /*$pageNumber*/ ctx[3] === /*n*/ ctx[19] + 1);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$7.name,
    		type: "if",
    		source: "(42:12) {#if n > 0 && n < pageCount.length - 1}",
    		ctx
    	});

    	return block;
    }

    // (41:8) {#each buttons as n}
    function create_each_block$c(ctx) {
    	let if_block_anchor;
    	let if_block = /*n*/ ctx[19] > 0 && /*n*/ ctx[19] < /*pageCount*/ ctx[2].length - 1 && create_if_block_3$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*n*/ ctx[19] > 0 && /*n*/ ctx[19] < /*pageCount*/ ctx[2].length - 1) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_3$7(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$c.name,
    		type: "each",
    		source: "(41:8) {#each buttons as n}",
    		ctx
    	});

    	return block;
    }

    // (52:8) {#if pageCount.length > 6 && $pageNumber <= pageCount.length - 3}
    function create_if_block_2$b(ctx) {
    	let button;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "...";
    			attr_dev(button, "class", "ellipse svelte-9qvh1i");
    			add_location(button, file$r, 52, 12, 1754);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$b.name,
    		type: "if",
    		source: "(52:8) {#if pageCount.length > 6 && $pageNumber <= pageCount.length - 3}",
    		ctx
    	});

    	return block;
    }

    // (56:8) {#if pageCount.length > 1}
    function create_if_block_1$g(ctx) {
    	let button;
    	let t_value = /*pageCount*/ ctx[2].length + "";
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(t_value);
    			attr_dev(button, "class", "svelte-9qvh1i");
    			toggle_class(button, "active", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
    			add_location(button, file$r, 56, 12, 1857);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_3*/ ctx[12], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*pageCount*/ 4 && t_value !== (t_value = /*pageCount*/ ctx[2].length + "")) set_data_dev(t, t_value);

    			if (dirty & /*$pageNumber, pageCount*/ 12) {
    				toggle_class(button, "active", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$g.name,
    		type: "if",
    		source: "(56:8) {#if pageCount.length > 1}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*$datatableWidth*/ ctx[6] > 600) return create_if_block$k;
    		return create_else_block$b;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let pageCount;
    	let buttons;
    	let $pageNumber;
    	let $options;
    	let $rowCount;
    	let $datatableWidth;
    	validate_store(pageNumber, 'pageNumber');
    	component_subscribe($$self, pageNumber, $$value => $$invalidate(3, $pageNumber = $$value));
    	validate_store(options, 'options');
    	component_subscribe($$self, options, $$value => $$invalidate(4, $options = $$value));
    	validate_store(rowCount, 'rowCount');
    	component_subscribe($$self, rowCount, $$value => $$invalidate(8, $rowCount = $$value));
    	validate_store(datatableWidth, 'datatableWidth');
    	component_subscribe($$self, datatableWidth, $$value => $$invalidate(6, $datatableWidth = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PaginationButtons', slots, []);
    	let { ref = '' } = $$props;
    	let { classList = '' } = $$props;

    	const slice = (arr, page) => {
    		if (page < 5) {
    			return arr.slice(0, 5);
    		} else if (page > arr.length - 4) {
    			return arr.slice(arr.length - 5, arr.length);
    		}

    		return arr.slice(page - 2, page + 1);
    	};

    	const setPage = number => {
    		pageNumber.set(number);
    		columns.redraw();
    	};

    	const writable_props = ['ref', 'classList'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PaginationButtons> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => setPage($pageNumber - 1);
    	const click_handler_1 = () => setPage(1);
    	const click_handler_2 = n => setPage(n + 1);
    	const click_handler_3 = () => setPage(pageCount.length);
    	const click_handler_4 = () => setPage($pageNumber + 1);
    	const click_handler_5 = () => setPage(1);
    	const click_handler_6 = () => setPage($pageNumber - 1);
    	const click_handler_7 = () => setPage($pageNumber + 1);
    	const click_handler_8 = () => setPage(pageCount.length);

    	$$self.$$set = $$props => {
    		if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
    		if ('classList' in $$props) $$invalidate(1, classList = $$props.classList);
    	};

    	$$self.$capture_state = () => ({
    		options,
    		rowCount,
    		pageNumber,
    		datatableWidth,
    		columns,
    		ref,
    		classList,
    		slice,
    		setPage,
    		pageCount,
    		buttons,
    		$pageNumber,
    		$options,
    		$rowCount,
    		$datatableWidth
    	});

    	$$self.$inject_state = $$props => {
    		if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
    		if ('classList' in $$props) $$invalidate(1, classList = $$props.classList);
    		if ('pageCount' in $$props) $$invalidate(2, pageCount = $$props.pageCount);
    		if ('buttons' in $$props) $$invalidate(5, buttons = $$props.buttons);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$rowCount, $options*/ 272) {
    			$$invalidate(2, pageCount = Array.from(Array(Math.ceil($rowCount / $options.rowPerPage)).keys()));
    		}

    		if ($$self.$$.dirty & /*pageCount, $pageNumber*/ 12) {
    			$$invalidate(5, buttons = slice(pageCount, $pageNumber));
    		}
    	};

    	return [
    		ref,
    		classList,
    		pageCount,
    		$pageNumber,
    		$options,
    		buttons,
    		$datatableWidth,
    		setPage,
    		$rowCount,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7,
    		click_handler_8
    	];
    }

    class PaginationButtons extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$s, create_fragment$s, safe_not_equal, { ref: 0, classList: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PaginationButtons",
    			options,
    			id: create_fragment$s.name
    		});
    	}

    	get ref() {
    		throw new Error("<PaginationButtons>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ref(value) {
    		throw new Error("<PaginationButtons>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get classList() {
    		throw new Error("<PaginationButtons>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set classList(value) {
    		throw new Error("<PaginationButtons>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-simple-datatables/src/components/Pagination.svelte generated by Svelte v3.44.2 */
    const file$q = "node_modules/svelte-simple-datatables/src/components/Pagination.svelte";

    // (7:0) {#if $options.pagination && ($options.blocks.paginationRowCount || $options.blocks.paginationButtons)}
    function create_if_block$j(ctx) {
    	let section;
    	let current_block_type_index;
    	let if_block0;
    	let t;
    	let current;
    	const if_block_creators = [create_if_block_2$a, create_else_block$a];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$options*/ ctx[0].blocks.paginationRowCount) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block1 = /*$options*/ ctx[0].blocks.paginationButtons && create_if_block_1$f(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(section, "class", "dt-pagination svelte-195bjyp");
    			toggle_class(section, "css", /*$options*/ ctx[0].css);
    			add_location(section, file$q, 7, 4, 315);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			if_blocks[current_block_type_index].m(section, null);
    			append_dev(section, t);
    			if (if_block1) if_block1.m(section, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(section, t);
    			}

    			if (/*$options*/ ctx[0].blocks.paginationButtons) {
    				if (if_block1) {
    					if (dirty & /*$options*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$f(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(section, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*$options*/ 1) {
    				toggle_class(section, "css", /*$options*/ ctx[0].css);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_blocks[current_block_type_index].d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$j.name,
    		type: "if",
    		source: "(7:0) {#if $options.pagination && ($options.blocks.paginationRowCount || $options.blocks.paginationButtons)}",
    		ctx
    	});

    	return block;
    }

    // (11:8) {:else}
    function create_else_block$a(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			add_location(div, file$q, 11, 12, 488);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$a.name,
    		type: "else",
    		source: "(11:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (9:8) {#if $options.blocks.paginationRowCount}
    function create_if_block_2$a(ctx) {
    	let paginationrowcount;
    	let current;
    	paginationrowcount = new PaginationRowCount({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(paginationrowcount.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(paginationrowcount, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(paginationrowcount.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(paginationrowcount.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(paginationrowcount, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$a.name,
    		type: "if",
    		source: "(9:8) {#if $options.blocks.paginationRowCount}",
    		ctx
    	});

    	return block;
    }

    // (14:8) {#if $options.blocks.paginationButtons}
    function create_if_block_1$f(ctx) {
    	let paginationbuttons;
    	let current;
    	paginationbuttons = new PaginationButtons({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(paginationbuttons.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(paginationbuttons, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(paginationbuttons.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(paginationbuttons.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(paginationbuttons, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$f.name,
    		type: "if",
    		source: "(14:8) {#if $options.blocks.paginationButtons}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$options*/ ctx[0].pagination && (/*$options*/ ctx[0].blocks.paginationRowCount || /*$options*/ ctx[0].blocks.paginationButtons) && create_if_block$j(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$options*/ ctx[0].pagination && (/*$options*/ ctx[0].blocks.paginationRowCount || /*$options*/ ctx[0].blocks.paginationButtons)) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$options*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$j(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let $options;
    	validate_store(options, 'options');
    	component_subscribe($$self, options, $$value => $$invalidate(0, $options = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Pagination', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Pagination> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		PaginationRowCount,
    		PaginationButtons,
    		options,
    		$options
    	});

    	return [$options];
    }

    class Pagination extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$r, create_fragment$r, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Pagination",
    			options,
    			id: create_fragment$r.name
    		});
    	}
    }

    const header = {
        removeOriginalThead: () => {
            setTimeout(() => {
                const thead = document.querySelector('.datatable table thead');
                const originHeight = thead.getBoundingClientRect().height;
                // const tableContainer = document.querySelector('section.datatable .dt-table')
                // const scrollXHeight = tableContainer.offsetHeight - tableContainer.clientHeight
                // - (scrollXHeight > 5 ? scrollXHeight + 10 : 1)
                thead.parentNode.style.marginTop = '-' + (originHeight) + 'px';
                thead.style.visibility = 'hidden';
            }, 50);
        },
        getOrginalTHeadClassList: () => {
            return document.querySelector('.datatable table thead').classList
        },
    };

    /* node_modules/svelte-simple-datatables/src/components/StickyHeader.svelte generated by Svelte v3.44.2 */
    const file$p = "node_modules/svelte-simple-datatables/src/components/StickyHeader.svelte";

    function get_each_context$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    // (17:12) {#each $columns as th}
    function create_each_block_1(ctx) {
    	let th;
    	let html_tag;
    	let raw_value = /*th*/ ctx[5].html + "";
    	let span;
    	let t;
    	let th_class_value;
    	let mounted;
    	let dispose;

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[3](/*th*/ ctx[5], ...args);
    	}

    	const block = {
    		c: function create() {
    			th = element("th");
    			html_tag = new HtmlTag();
    			span = element("span");
    			t = space();
    			html_tag.a = span;
    			attr_dev(span, "class", "svelte-1sonwgi");
    			add_location(span, file$p, 24, 35, 911);
    			attr_dev(th, "nowrap", "");
    			set_style(th, "min-width", /*th*/ ctx[5].minWidth + "px");
    			attr_dev(th, "class", th_class_value = "" + (null_to_empty(/*th*/ ctx[5].classList) + " svelte-1sonwgi"));
    			toggle_class(th, "sortable", /*th*/ ctx[5].key && /*$options*/ ctx[1].sortable === true);
    			add_location(th, file$p, 17, 16, 582);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, th, anchor);
    			html_tag.m(raw_value, th);
    			append_dev(th, span);
    			append_dev(th, t);

    			if (!mounted) {
    				dispose = listen_dev(th, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*$columns*/ 4 && raw_value !== (raw_value = /*th*/ ctx[5].html + "")) html_tag.p(raw_value);

    			if (dirty & /*$columns*/ 4) {
    				set_style(th, "min-width", /*th*/ ctx[5].minWidth + "px");
    			}

    			if (dirty & /*$columns*/ 4 && th_class_value !== (th_class_value = "" + (null_to_empty(/*th*/ ctx[5].classList) + " svelte-1sonwgi"))) {
    				attr_dev(th, "class", th_class_value);
    			}

    			if (dirty & /*$columns, $columns, $options*/ 6) {
    				toggle_class(th, "sortable", /*th*/ ctx[5].key && /*$options*/ ctx[1].sortable === true);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(th);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(17:12) {#each $columns as th}",
    		ctx
    	});

    	return block;
    }

    // (29:8) {#if $options.columnFilter === true}
    function create_if_block$i(ctx) {
    	let tr;
    	let each_value = /*$columns*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(tr, file$p, 29, 12, 1038);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tr, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$columns, $options, columns*/ 6) {
    				each_value = /*$columns*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$b(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$b(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tr, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$i.name,
    		type: "if",
    		source: "(29:8) {#if $options.columnFilter === true}",
    		ctx
    	});

    	return block;
    }

    // (33:24) {#if th.key}
    function create_if_block_1$e(ctx) {
    	let input;
    	let input_placeholder_value;
    	let mounted;
    	let dispose;

    	function input_handler(...args) {
    		return /*input_handler*/ ctx[4](/*th*/ ctx[5], ...args);
    	}

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", input_placeholder_value = /*$options*/ ctx[1].labels.filter);
    			attr_dev(input, "class", "browser-default svelte-1sonwgi");
    			add_location(input, file$p, 33, 28, 1229);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);

    			if (!mounted) {
    				dispose = listen_dev(input, "input", input_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*$options*/ 2 && input_placeholder_value !== (input_placeholder_value = /*$options*/ ctx[1].labels.filter)) {
    				attr_dev(input, "placeholder", input_placeholder_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$e.name,
    		type: "if",
    		source: "(33:24) {#if th.key}",
    		ctx
    	});

    	return block;
    }

    // (31:16) {#each $columns as th}
    function create_each_block$b(ctx) {
    	let th;
    	let t;
    	let if_block = /*th*/ ctx[5].key && create_if_block_1$e(ctx);

    	const block = {
    		c: function create() {
    			th = element("th");
    			if (if_block) if_block.c();
    			t = space();
    			attr_dev(th, "class", "filter svelte-1sonwgi");
    			set_style(th, "width", /*th*/ ctx[5].width);
    			set_style(th, "height", "25px");
    			add_location(th, file$p, 31, 20, 1104);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, th, anchor);
    			if (if_block) if_block.m(th, null);
    			append_dev(th, t);
    		},
    		p: function update(ctx, dirty) {
    			if (/*th*/ ctx[5].key) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$e(ctx);
    					if_block.c();
    					if_block.m(th, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*$columns*/ 4) {
    				set_style(th, "width", /*th*/ ctx[5].width);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(th);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$b.name,
    		type: "each",
    		source: "(31:16) {#each $columns as th}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let section;
    	let thead;
    	let tr;
    	let t;
    	let thead_class_value;
    	let each_value_1 = /*$columns*/ ctx[2];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let if_block = /*$options*/ ctx[1].columnFilter === true && create_if_block$i(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			thead = element("thead");
    			tr = element("tr");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			if (if_block) if_block.c();
    			add_location(tr, file$p, 15, 8, 524);
    			attr_dev(thead, "class", thead_class_value = "" + (null_to_empty(/*theadClassList*/ ctx[0]) + " svelte-1sonwgi"));
    			add_location(thead, file$p, 14, 4, 484);
    			attr_dev(section, "class", "dt-header svelte-1sonwgi");
    			toggle_class(section, "sortable", /*$options*/ ctx[1].sortable === true);
    			toggle_class(section, "css", /*$options*/ ctx[1].css);
    			add_location(section, file$p, 13, 0, 382);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, thead);
    			append_dev(thead, tr);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tr, null);
    			}

    			append_dev(thead, t);
    			if (if_block) if_block.m(thead, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$columns, $options, columns*/ 6) {
    				each_value_1 = /*$columns*/ ctx[2];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tr, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (/*$options*/ ctx[1].columnFilter === true) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$i(ctx);
    					if_block.c();
    					if_block.m(thead, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*theadClassList*/ 1 && thead_class_value !== (thead_class_value = "" + (null_to_empty(/*theadClassList*/ ctx[0]) + " svelte-1sonwgi"))) {
    				attr_dev(thead, "class", thead_class_value);
    			}

    			if (dirty & /*$options*/ 2) {
    				toggle_class(section, "sortable", /*$options*/ ctx[1].sortable === true);
    			}

    			if (dirty & /*$options*/ 2) {
    				toggle_class(section, "css", /*$options*/ ctx[1].css);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let $options;
    	let $columns;
    	validate_store(options, 'options');
    	component_subscribe($$self, options, $$value => $$invalidate(1, $options = $$value));
    	validate_store(columns, 'columns');
    	component_subscribe($$self, columns, $$value => $$invalidate(2, $columns = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StickyHeader', slots, []);
    	let theadClassList;

    	onMount(() => {
    		columns.draw();
    		header.removeOriginalThead();
    		$$invalidate(0, theadClassList = header.getOrginalTHeadClassList());
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StickyHeader> was created with unknown prop '${key}'`);
    	});

    	const click_handler = (th, e) => columns.sort(e.target, th.key);
    	const input_handler = (th, e) => columns.filter(th.key, e.target.value);

    	$$self.$capture_state = () => ({
    		options,
    		columns,
    		header,
    		onMount,
    		theadClassList,
    		$options,
    		$columns
    	});

    	$$self.$inject_state = $$props => {
    		if ('theadClassList' in $$props) $$invalidate(0, theadClassList = $$props.theadClassList);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [theadClassList, $options, $columns, click_handler, input_handler];
    }

    class StickyHeader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$q, create_fragment$q, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StickyHeader",
    			options,
    			id: create_fragment$q.name
    		});
    	}
    }

    /* node_modules/svelte-simple-datatables/src/Datatable.svelte generated by Svelte v3.44.2 */
    const file$o = "node_modules/svelte-simple-datatables/src/Datatable.svelte";

    // (20:1) {#if $options.blocks.searchInput === true}
    function create_if_block_2$9(ctx) {
    	let search;
    	let current;
    	search = new Search({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(search.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(search, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(search.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(search.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(search, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$9.name,
    		type: "if",
    		source: "(20:1) {#if $options.blocks.searchInput === true}",
    		ctx
    	});

    	return block;
    }

    // (24:2) {#if $options.scrollY}
    function create_if_block_1$d(ctx) {
    	let stickyheader;
    	let current;
    	stickyheader = new StickyHeader({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(stickyheader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(stickyheader, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stickyheader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stickyheader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(stickyheader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$d.name,
    		type: "if",
    		source: "(24:2) {#if $options.scrollY}",
    		ctx
    	});

    	return block;
    }

    // (31:1) {#if $options.blocks.paginationRowCount === true || $options.blocks.paginationButtons === true}
    function create_if_block$h(ctx) {
    	let pagination;
    	let current;
    	pagination = new Pagination({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(pagination.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(pagination, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(pagination.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(pagination.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(pagination, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(31:1) {#if $options.blocks.paginationRowCount === true || $options.blocks.paginationButtons === true}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let section;
    	let t0;
    	let article;
    	let t1;
    	let table;
    	let t2;
    	let section_class_value;
    	let current;
    	let if_block0 = /*$options*/ ctx[1].blocks.searchInput === true && create_if_block_2$9(ctx);
    	let if_block1 = /*$options*/ ctx[1].scrollY && create_if_block_1$d(ctx);
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
    	let if_block2 = (/*$options*/ ctx[1].blocks.paginationRowCount === true || /*$options*/ ctx[1].blocks.paginationButtons === true) && create_if_block$h(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			article = element("article");
    			if (if_block1) if_block1.c();
    			t1 = space();
    			table = element("table");
    			if (default_slot) default_slot.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(table, "class", "svelte-udk322");
    			add_location(table, file$o, 26, 2, 801);
    			attr_dev(article, "class", "dt-table svelte-udk322");
    			add_location(article, file$o, 22, 1, 716);
    			attr_dev(section, "class", section_class_value = "datatable " + /*classList*/ ctx[0] + " svelte-udk322");
    			toggle_class(section, "scroll-y", /*$options*/ ctx[1].scrollY);
    			toggle_class(section, "css", /*$options*/ ctx[1].css);
    			add_location(section, file$o, 18, 0, 548);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			if (if_block0) if_block0.m(section, null);
    			append_dev(section, t0);
    			append_dev(section, article);
    			if (if_block1) if_block1.m(article, null);
    			append_dev(article, t1);
    			append_dev(article, table);

    			if (default_slot) {
    				default_slot.m(table, null);
    			}

    			append_dev(section, t2);
    			if (if_block2) if_block2.m(section, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$options*/ ctx[1].blocks.searchInput === true) {
    				if (if_block0) {
    					if (dirty & /*$options*/ 2) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$9(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(section, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*$options*/ ctx[1].scrollY) {
    				if (if_block1) {
    					if (dirty & /*$options*/ 2) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$d(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(article, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[4],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*$options*/ ctx[1].blocks.paginationRowCount === true || /*$options*/ ctx[1].blocks.paginationButtons === true) {
    				if (if_block2) {
    					if (dirty & /*$options*/ 2) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$h(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(section, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*classList*/ 1 && section_class_value !== (section_class_value = "datatable " + /*classList*/ ctx[0] + " svelte-udk322")) {
    				attr_dev(section, "class", section_class_value);
    			}

    			if (dirty & /*classList, $options*/ 3) {
    				toggle_class(section, "scroll-y", /*$options*/ ctx[1].scrollY);
    			}

    			if (dirty & /*classList, $options*/ 3) {
    				toggle_class(section, "css", /*$options*/ ctx[1].css);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(default_slot, local);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(default_slot, local);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (default_slot) default_slot.d(detaching);
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let $options;
    	validate_store(options, 'options');
    	component_subscribe($$self, options, $$value => $$invalidate(1, $options = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Datatable', slots, ['default']);
    	let { data = [] } = $$props;
    	let { settings = {} } = $$props;
    	let { classList = '' } = $$props;
    	onMount(() => datatable.init());
    	onDestroy(() => datatable.reset());
    	const writable_props = ['data', 'settings', 'classList'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Datatable> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('data' in $$props) $$invalidate(2, data = $$props.data);
    		if ('settings' in $$props) $$invalidate(3, settings = $$props.settings);
    		if ('classList' in $$props) $$invalidate(0, classList = $$props.classList);
    		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		options,
    		datatable,
    		Search,
    		Pagination,
    		StickyHeader,
    		onMount,
    		onDestroy,
    		data,
    		settings,
    		classList,
    		$options
    	});

    	$$self.$inject_state = $$props => {
    		if ('data' in $$props) $$invalidate(2, data = $$props.data);
    		if ('settings' in $$props) $$invalidate(3, settings = $$props.settings);
    		if ('classList' in $$props) $$invalidate(0, classList = $$props.classList);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*data, settings*/ 12) {
    			{
    				datatable.setRows(data);
    				options.update(settings);
    			}
    		}
    	};

    	return [classList, $options, data, settings, $$scope, slots];
    }

    class Datatable extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$p, create_fragment$p, safe_not_equal, { data: 2, settings: 3, classList: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Datatable",
    			options,
    			id: create_fragment$p.name
    		});
    	}

    	get data() {
    		throw new Error("<Datatable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<Datatable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get settings() {
    		throw new Error("<Datatable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set settings(value) {
    		throw new Error("<Datatable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get classList() {
    		throw new Error("<Datatable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set classList(value) {
    		throw new Error("<Datatable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    let market;
    let user;
    MARKET.subscribe(data => market = data);
    USER.subscribe(data => user = data);
    // Check user's trade and offer Copilot warning
    const checkTradeWarning = (inputAmount, adjustedRatio, submitTrade) => {
        // Depositing all SOL leaving no lamports for fees, inform and reject
        if (user.tradeAction === 'deposit' && market.currentReserve?.abbrev === 'SOL'
            && inputAmount >= (user.walletBalances[market.currentReserve.abbrev] - 0.02)) {
            COPILOT.set({
                suggestion: {
                    good: false,
                    detail: dictionary[user.language].cockpit.insufficientLamports
                }
            });
            // Borrowing and within danger of liquidation
        }
        else if (user.tradeAction === 'borrow' && adjustedRatio <= market.minColRatio + 0.2) {
            // not below min-ratio, warn and allow trade
            if (adjustedRatio >= market.minColRatio) {
                COPILOT.set({
                    suggestion: {
                        good: false,
                        detail: dictionary[user.language].cockpit.subjectToLiquidation
                            .replaceAll('{{NEW-C-RATIO}}', currencyFormatter(adjustedRatio * 100, false, 1)),
                        action: {
                            text: dictionary[user.language].cockpit.confirm,
                            onClick: () => submitTrade()
                        }
                    }
                });
            }
            // below minimum ratio, inform and reject
            if (adjustedRatio < market.minColRatio
                && adjustedRatio < user.position.colRatio) {
                COPILOT.set({
                    suggestion: {
                        good: false,
                        detail: dictionary[user.language].cockpit.rejectTrade
                            .replaceAll('{{NEW-C-RATIO}}', currencyFormatter(adjustedRatio * 100, false, 1))
                            .replaceAll('{{JET MIN C-RATIO}}', market.minColRatio * 100)
                    }
                });
            }
            // Otherwise, submit trade
        }
        else {
            submitTrade();
        }
    };
    // Generate suggestion for user based on their current position and market data
    const generateCopilotSuggestion = () => {
        if (!market || !user.assets) {
            COPILOT.set(null);
            return;
        }
        let bestReserveDepositRate = market.reserves.SOL;
        // Find best deposit Rate
        if (market.reserves) {
            for (let a in market.reserves) {
                if (market.reserves[a].depositRate > bestReserveDepositRate.depositRate) {
                    bestReserveDepositRate = market.reserves[a];
                }
            }
        }
        // Conditional AI for suggestion generation
        if (user.position.borrowedValue && (user.position.colRatio < market?.minColRatio)) {
            COPILOT.set({
                suggestion: {
                    good: false,
                    overview: dictionary[user.language].copilot.suggestions.unhealthy.overview,
                    detail: dictionary[user.language].copilot.suggestions.unhealthy.detail
                        .replaceAll('{{C-RATIO}}', currencyFormatter(user.position.colRatio * 100, false, 1))
                        .replaceAll('{{RATIO BELOW AMOUNT}}', Math.abs(Number(currencyFormatter((market.minColRatio - user.position.colRatio) * 100, false, 1))))
                        .replaceAll('{{JET MIN C-RATIO}}', market.minColRatio * 100),
                    solution: dictionary[user.language].copilot.suggestions.unhealthy.solution,
                }
            });
        }
        else if (bestReserveDepositRate?.depositRate && !user.assets.tokens[bestReserveDepositRate.abbrev].walletTokenBalance?.isZero()) {
            MARKET.update(market => {
                market.currentReserve = bestReserveDepositRate;
                return market;
            });
            COPILOT.set({
                suggestion: {
                    good: true,
                    overview: dictionary[user.language].copilot.suggestions.deposit.overview
                        .replaceAll('{{BEST DEPOSIT RATE NAME}}', bestReserveDepositRate.name),
                    detail: dictionary[user.language].copilot.suggestions.deposit.detail
                        .replaceAll('{{BEST DEPOSIT RATE ABBREV}}', bestReserveDepositRate.abbrev)
                        .replaceAll('{{DEPOSIT RATE}}', (bestReserveDepositRate.depositRate * 100).toFixed(2))
                        .replaceAll('{{USER BALANCE}}', currencyFormatter(user.assets.tokens[bestReserveDepositRate.abbrev].walletTokenBalance.uiAmountFloat, false, 2))
                }
            });
        }
        else if (user.position.borrowedValue && (user.position.colRatio > market?.minColRatio && user.position.colRatio <= market?.minColRatio + 10)) {
            COPILOT.set({
                suggestion: {
                    good: false,
                    overview: dictionary[user.language].copilot.warning.tenPercent.overview,
                    detail: dictionary[user.language].copilot.warning.tenPercent.detail
                        .replaceAll('{{C-RATIO}}', currencyFormatter(user.position.colRatio * 100, false, 1))
                        .replaceAll('{{JET MIN C-RATIO}}', market.minColRatio * 100)
                }
            });
        }
        else if (user.position.borrowedValue && (user.position.colRatio >= market?.minColRatio + 10 && user.position.colRatio <= market?.minColRatio + 20)) {
            COPILOT.set({
                suggestion: {
                    good: false,
                    overview: dictionary[user.language].copilot.warning.twentyPercent.overview,
                    detail: dictionary[user.language].copilot.warning.twentyPercent.detail
                        .replaceAll('{{C-RATIO}}', currencyFormatter(user.position.colRatio * 100, false, 1))
                        .replaceAll('{{JET MIN C-RATIO}}', market.minColRatio * 100)
                }
            });
        }
        else {
            COPILOT.set({
                suggestion: {
                    good: true,
                    overview: dictionary[user.language].copilot.suggestions.healthy.overview,
                    detail: dictionary[user.language].copilot.suggestions.healthy.detail
                }
            });
        }
    };

    /* src/components/Loader.svelte generated by Svelte v3.44.2 */

    const file$n = "src/components/Loader.svelte";

    function create_fragment$o(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "img/jet/jet_logomark_gradient.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Jet Logomark");
    			attr_dev(img, "class", "svelte-1pduqxi");
    			add_location(img, file$n, 11, 6, 275);
    			attr_dev(div0, "class", "inner-circle svelte-1pduqxi");
    			add_location(div0, file$n, 10, 4, 242);
    			attr_dev(div1, "class", "outer-circle svelte-1pduqxi");
    			add_location(div1, file$n, 9, 2, 211);
    			attr_dev(div2, "class", "loader flex-centered column svelte-1pduqxi");
    			toggle_class(div2, "button", /*button*/ ctx[0]);
    			toggle_class(div2, "fullview", /*fullview*/ ctx[1]);
    			toggle_class(div2, "fullscreen", /*fullscreen*/ ctx[2]);
    			add_location(div2, file$n, 5, 0, 116);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, img);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*button*/ 1) {
    				toggle_class(div2, "button", /*button*/ ctx[0]);
    			}

    			if (dirty & /*fullview*/ 2) {
    				toggle_class(div2, "fullview", /*fullview*/ ctx[1]);
    			}

    			if (dirty & /*fullscreen*/ 4) {
    				toggle_class(div2, "fullscreen", /*fullscreen*/ ctx[2]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Loader', slots, []);
    	let { button = false } = $$props;
    	let { fullview = false } = $$props;
    	let { fullscreen = false } = $$props;
    	const writable_props = ['button', 'fullview', 'fullscreen'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Loader> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('button' in $$props) $$invalidate(0, button = $$props.button);
    		if ('fullview' in $$props) $$invalidate(1, fullview = $$props.fullview);
    		if ('fullscreen' in $$props) $$invalidate(2, fullscreen = $$props.fullscreen);
    	};

    	$$self.$capture_state = () => ({ button, fullview, fullscreen });

    	$$self.$inject_state = $$props => {
    		if ('button' in $$props) $$invalidate(0, button = $$props.button);
    		if ('fullview' in $$props) $$invalidate(1, fullview = $$props.fullview);
    		if ('fullscreen' in $$props) $$invalidate(2, fullscreen = $$props.fullscreen);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [button, fullview, fullscreen];
    }

    class Loader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$o, create_fragment$o, safe_not_equal, { button: 0, fullview: 1, fullscreen: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Loader",
    			options,
    			id: create_fragment$o.name
    		});
    	}

    	get button() {
    		throw new Error("<Loader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set button(value) {
    		throw new Error("<Loader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fullview() {
    		throw new Error("<Loader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fullview(value) {
    		throw new Error("<Loader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fullscreen() {
    		throw new Error("<Loader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fullscreen(value) {
    		throw new Error("<Loader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const od = target_opacity * (1 - opacity);
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
        };
    }

    /* src/components/Info.svelte generated by Svelte v3.44.2 */
    const file$m = "src/components/Info.svelte";

    function create_fragment$n(ctx) {
    	let i;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "info fas fa-info-circle svelte-1fjayiy");
    			attr_dev(i, "style", /*style*/ ctx[1]);
    			add_location(i, file$m, 6, 0, 166);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);

    			if (!mounted) {
    				dispose = listen_dev(i, "click", /*click_handler*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*style*/ 2) {
    				attr_dev(i, "style", /*style*/ ctx[1]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let $USER;
    	validate_store(USER, 'USER');
    	component_subscribe($$self, USER, $$value => $$invalidate(2, $USER = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Info', slots, []);
    	let { term } = $$props;
    	let { style = '' } = $$props;
    	const writable_props = ['term', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Info> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => COPILOT.set({
    		definition: definitions[$USER.language][term]
    	});

    	$$self.$$set = $$props => {
    		if ('term' in $$props) $$invalidate(0, term = $$props.term);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    	};

    	$$self.$capture_state = () => ({
    		USER,
    		COPILOT,
    		definitions,
    		term,
    		style,
    		$USER
    	});

    	$$self.$inject_state = $$props => {
    		if ('term' in $$props) $$invalidate(0, term = $$props.term);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [term, style, $USER, click_handler];
    }

    class Info extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$n, create_fragment$n, safe_not_equal, { term: 0, style: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Info",
    			options,
    			id: create_fragment$n.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*term*/ ctx[0] === undefined && !('term' in props)) {
    			console.warn("<Info> was created without expected prop 'term'");
    		}
    	}

    	get term() {
    		throw new Error("<Info>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set term(value) {
    		throw new Error("<Info>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Info>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Info>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/PercentageChart.svelte generated by Svelte v3.44.2 */
    const file$l = "src/components/PercentageChart.svelte";

    // (39:4) {#if text}
    function create_if_block$g(ctx) {
    	let span;
    	let t0;
    	let t1;
    	let current;
    	let if_block = /*term*/ ctx[2] && create_if_block_1$c(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text(/*text*/ ctx[1]);
    			t1 = space();
    			if (if_block) if_block.c();
    			attr_dev(span, "class", "svelte-ivj2yu");
    			add_location(span, file$l, 39, 6, 1021);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			if (if_block) if_block.m(span, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*text*/ 2) set_data_dev(t0, /*text*/ ctx[1]);

    			if (/*term*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*term*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$c(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(span, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(39:4) {#if text}",
    		ctx
    	});

    	return block;
    }

    // (42:8) {#if term}
    function create_if_block_1$c(ctx) {
    	let info;
    	let current;

    	info = new Info({
    			props: { term: /*term*/ ctx[2] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(info.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(info, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const info_changes = {};
    			if (dirty & /*term*/ 4) info_changes.term = /*term*/ ctx[2];
    			info.$set(info_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(info.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(info, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$c.name,
    		type: "if",
    		source: "(42:8) {#if term}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let div2;
    	let svg;
    	let path0;
    	let path1;
    	let path1_stroke_dasharray_value;
    	let t0;
    	let div0;
    	let t1;
    	let div1;
    	let h2;

    	let t2_value = (/*percentage*/ ctx[0] > 1
    	? Math.floor(/*percentage*/ ctx[0])
    	: Math.ceil(/*percentage*/ ctx[0])) + "";

    	let t2;
    	let t3;
    	let t4;
    	let current;
    	let if_block = /*text*/ ctx[1] && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t0 = space();
    			div0 = element("div");
    			t1 = space();
    			div1 = element("div");
    			h2 = element("h2");
    			t2 = text(t2_value);
    			t3 = text("%");
    			t4 = space();
    			if (if_block) if_block.c();
    			attr_dev(path0, "d", "M18 2.0845\n        a 15.9155 15.9155 0 0 1 0 31.831\n        a 15.9155 15.9155 0 0 1 0 -31.831");
    			attr_dev(path0, "class", "svelte-ivj2yu");
    			add_location(path0, file$l, 21, 4, 511);
    			attr_dev(path1, "stroke-dasharray", path1_stroke_dasharray_value = "" + (/*percent*/ ctx[3] + ", 100"));
    			attr_dev(path1, "d", "M18 2.0845\n        a 15.9155 15.9155 0 0 1 0 31.831\n        a 15.9155 15.9155 0 0 1 0 -31.831");
    			attr_dev(path1, "class", "svelte-ivj2yu");
    			add_location(path1, file$l, 26, 4, 632);
    			attr_dev(svg, "viewBox", "0 0 36 36");
    			attr_dev(svg, "class", "svelte-ivj2yu");
    			add_location(svg, file$l, 20, 2, 481);
    			attr_dev(div0, "class", "inset-chart-shadow svelte-ivj2yu");
    			add_location(div0, file$l, 33, 2, 800);
    			attr_dev(h2, "class", "modal-header");
    			add_location(h2, file$l, 35, 4, 891);
    			attr_dev(div1, "class", "chart-info flex-centered column svelte-ivj2yu");
    			add_location(div1, file$l, 34, 2, 841);
    			attr_dev(div2, "class", "chart svelte-ivj2yu");
    			add_location(div2, file$l, 19, 0, 459);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, svg);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(div2, t0);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, h2);
    			append_dev(h2, t2);
    			append_dev(h2, t3);
    			append_dev(div1, t4);
    			if (if_block) if_block.m(div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*percent*/ 8 && path1_stroke_dasharray_value !== (path1_stroke_dasharray_value = "" + (/*percent*/ ctx[3] + ", 100"))) {
    				attr_dev(path1, "stroke-dasharray", path1_stroke_dasharray_value);
    			}

    			if ((!current || dirty & /*percentage*/ 1) && t2_value !== (t2_value = (/*percentage*/ ctx[0] > 1
    			? Math.floor(/*percentage*/ ctx[0])
    			: Math.ceil(/*percentage*/ ctx[0])) + "")) set_data_dev(t2, t2_value);

    			if (/*text*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*text*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PercentageChart', slots, []);
    	let { percentage } = $$props;
    	let { text = '' } = $$props;
    	let { term } = $$props;
    	let percent = 0;

    	const animatePercent = async () => {
    		$$invalidate(3, percent = 0);

    		while (percent < (percentage > 1
    		? Math.floor(percentage)
    		: Math.ceil(percentage))) {
    			await timeout(7);
    			$$invalidate(3, percent++, percent);
    		}
    	};

    	onMount(() => {
    		animatePercent();
    	});

    	const writable_props = ['percentage', 'text', 'term'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PercentageChart> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('percentage' in $$props) $$invalidate(0, percentage = $$props.percentage);
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    		if ('term' in $$props) $$invalidate(2, term = $$props.term);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		timeout,
    		Info,
    		percentage,
    		text,
    		term,
    		percent,
    		animatePercent
    	});

    	$$self.$inject_state = $$props => {
    		if ('percentage' in $$props) $$invalidate(0, percentage = $$props.percentage);
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    		if ('term' in $$props) $$invalidate(2, term = $$props.term);
    		if ('percent' in $$props) $$invalidate(3, percent = $$props.percent);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [percentage, text, term, percent];
    }

    class PercentageChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$m, create_fragment$m, safe_not_equal, { percentage: 0, text: 1, term: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PercentageChart",
    			options,
    			id: create_fragment$m.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*percentage*/ ctx[0] === undefined && !('percentage' in props)) {
    			console.warn("<PercentageChart> was created without expected prop 'percentage'");
    		}

    		if (/*term*/ ctx[2] === undefined && !('term' in props)) {
    			console.warn("<PercentageChart> was created without expected prop 'term'");
    		}
    	}

    	get percentage() {
    		throw new Error("<PercentageChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set percentage(value) {
    		throw new Error("<PercentageChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<PercentageChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<PercentageChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get term() {
    		throw new Error("<PercentageChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set term(value) {
    		throw new Error("<PercentageChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Toggle.svelte generated by Svelte v3.44.2 */

    const file$k = "src/components/Toggle.svelte";

    // (26:2) {:else}
    function create_else_block$9(ctx) {
    	let div;
    	let i;
    	let t0;
    	let t1;
    	let if_block = /*text*/ ctx[1] && create_if_block_1$b(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			i = element("i");
    			t0 = text(/*icon*/ ctx[0]);
    			t1 = space();
    			if (if_block) if_block.c();
    			attr_dev(i, "class", "jet-icons svelte-ixl935");
    			toggle_class(i, "text-gradient", /*active*/ ctx[3]);
    			add_location(i, file$k, 27, 6, 675);
    			attr_dev(div, "class", "toggle flex-centered svelte-ixl935");
    			add_location(div, file$k, 26, 4, 634);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, i);
    			append_dev(i, t0);
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*icon*/ 1) set_data_dev(t0, /*icon*/ ctx[0]);

    			if (dirty & /*active*/ 8) {
    				toggle_class(i, "text-gradient", /*active*/ ctx[3]);
    			}

    			if (/*text*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$b(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$9.name,
    		type: "else",
    		source: "(26:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (13:2) {#if native}
    function create_if_block$f(ctx) {
    	let div0;
    	let i0;
    	let t1;
    	let div1;
    	let i1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			i0 = element("i");
    			i0.textContent = "❍";
    			t1 = space();
    			div1 = element("div");
    			i1 = element("i");
    			i1.textContent = "❏";
    			attr_dev(i0, "class", "jet-icons svelte-ixl935");
    			add_location(i0, file$k, 15, 6, 451);
    			attr_dev(div0, "class", "crypto flex-centered svelte-ixl935");
    			toggle_class(div0, "active", !/*active*/ ctx[3]);
    			add_location(div0, file$k, 13, 4, 381);
    			attr_dev(i1, "class", "jet-icons svelte-ixl935");
    			add_location(i1, file$k, 21, 6, 566);
    			attr_dev(div1, "class", "usd flex-centered svelte-ixl935");
    			toggle_class(div1, "active", /*active*/ ctx[3]);
    			add_location(div1, file$k, 19, 4, 509);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, i0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, i1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*active*/ 8) {
    				toggle_class(div0, "active", !/*active*/ ctx[3]);
    			}

    			if (dirty & /*active*/ 8) {
    				toggle_class(div1, "active", /*active*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(13:2) {#if native}",
    		ctx
    	});

    	return block;
    }

    // (32:6) {#if text}
    function create_if_block_1$b(ctx) {
    	let p;
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(/*text*/ ctx[1]);
    			attr_dev(p, "class", "bicyclette svelte-ixl935");
    			toggle_class(p, "text-gradient", /*active*/ ctx[3]);
    			add_location(p, file$k, 32, 8, 785);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*text*/ 2) set_data_dev(t, /*text*/ ctx[1]);

    			if (dirty & /*active*/ 8) {
    				toggle_class(p, "text-gradient", /*active*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$b.name,
    		type: "if",
    		source: "(32:6) {#if text}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let div;
    	let div_style_value;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*native*/ ctx[4]) return create_if_block$f;
    		return create_else_block$9;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "outside flex align-center justify-start svelte-ixl935");

    			attr_dev(div, "style", div_style_value = /*maxWidth*/ ctx[2]
    			? `max-width: ${/*maxWidth*/ ctx[2]}`
    			: '');

    			toggle_class(div, "active", /*active*/ ctx[3]);
    			toggle_class(div, "native", /*native*/ ctx[4]);
    			toggle_class(div, "justify-end", /*active*/ ctx[3]);
    			add_location(div, file$k, 8, 0, 173);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_block.m(div, null);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*click_handler*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}

    			if (dirty & /*maxWidth*/ 4 && div_style_value !== (div_style_value = /*maxWidth*/ ctx[2]
    			? `max-width: ${/*maxWidth*/ ctx[2]}`
    			: '')) {
    				attr_dev(div, "style", div_style_value);
    			}

    			if (dirty & /*active*/ 8) {
    				toggle_class(div, "active", /*active*/ ctx[3]);
    			}

    			if (dirty & /*native*/ 16) {
    				toggle_class(div, "native", /*native*/ ctx[4]);
    			}

    			if (dirty & /*active*/ 8) {
    				toggle_class(div, "justify-end", /*active*/ ctx[3]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Toggle', slots, []);
    	let { icon = '' } = $$props;
    	let { text = '' } = $$props;
    	let { maxWidth = '' } = $$props;
    	let { active = false } = $$props;
    	let { native = false } = $$props;
    	let { onClick } = $$props;
    	const writable_props = ['icon', 'text', 'maxWidth', 'active', 'native', 'onClick'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Toggle> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => onClick();

    	$$self.$$set = $$props => {
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    		if ('maxWidth' in $$props) $$invalidate(2, maxWidth = $$props.maxWidth);
    		if ('active' in $$props) $$invalidate(3, active = $$props.active);
    		if ('native' in $$props) $$invalidate(4, native = $$props.native);
    		if ('onClick' in $$props) $$invalidate(5, onClick = $$props.onClick);
    	};

    	$$self.$capture_state = () => ({
    		icon,
    		text,
    		maxWidth,
    		active,
    		native,
    		onClick
    	});

    	$$self.$inject_state = $$props => {
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    		if ('maxWidth' in $$props) $$invalidate(2, maxWidth = $$props.maxWidth);
    		if ('active' in $$props) $$invalidate(3, active = $$props.active);
    		if ('native' in $$props) $$invalidate(4, native = $$props.native);
    		if ('onClick' in $$props) $$invalidate(5, onClick = $$props.onClick);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [icon, text, maxWidth, active, native, onClick, click_handler];
    }

    class Toggle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$l, create_fragment$l, safe_not_equal, {
    			icon: 0,
    			text: 1,
    			maxWidth: 2,
    			active: 3,
    			native: 4,
    			onClick: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Toggle",
    			options,
    			id: create_fragment$l.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*onClick*/ ctx[5] === undefined && !('onClick' in props)) {
    			console.warn("<Toggle> was created without expected prop 'onClick'");
    		}
    	}

    	get icon() {
    		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get maxWidth() {
    		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set maxWidth(value) {
    		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get native() {
    		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set native(value) {
    		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/ReserveDetail.svelte generated by Svelte v3.44.2 */
    const file$j = "src/components/ReserveDetail.svelte";

    // (21:0) {#if reserveDetail}
    function create_if_block$e(ctx) {
    	let div0;
    	let div0_transition;
    	let t0;
    	let div20;
    	let div2;
    	let div1;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t1;
    	let h1;
    	let t2_value = /*reserveDetail*/ ctx[0].name.toUpperCase() + "";
    	let t2;
    	let t3;
    	let span0;
    	let t4;
    	let t5_value = /*reserveDetail*/ ctx[0].abbrev + "";
    	let t5;
    	let t6;
    	let t7_value = currencyFormatter(/*reserveDetail*/ ctx[0].price, true, 2) + "";
    	let t7;
    	let t8;
    	let div5;
    	let div3;
    	let t9;
    	let div4;
    	let toggle;
    	let t10;
    	let div6;
    	let span1;
    	let t11_value = dictionary[/*$USER*/ ctx[3].language].reserveDetail.reserveSize.toUpperCase() + "";
    	let t11;
    	let t12;
    	let h2;

    	let t13_value = currencyFormatter(
    		/*$MARKET*/ ctx[2].nativeValues
    		? /*reserveDetail*/ ctx[0].marketSize.uiAmountFloat
    		: /*reserveDetail*/ ctx[0].marketSize.muln(/*reserveDetail*/ ctx[0].price).uiAmountFloat,
    		!/*$MARKET*/ ctx[2].nativeValues,
    		2
    	) + "";

    	let t13;
    	let t14;
    	let div7;
    	let t15;
    	let div13;
    	let percentagechart;
    	let t16;
    	let div12;
    	let div9;
    	let div8;
    	let t17;
    	let span2;
    	let t18_value = dictionary[/*$USER*/ ctx[3].language].reserveDetail.totalBorrowed.toUpperCase() + "";
    	let t18;
    	let t19;
    	let br0;
    	let t20;
    	let p0;

    	let t21_value = currencyFormatter(
    		/*$MARKET*/ ctx[2].nativeValues
    		? /*reserveDetail*/ ctx[0].outstandingDebt.uiAmountFloat
    		: /*reserveDetail*/ ctx[0].outstandingDebt.muln(/*reserveDetail*/ ctx[0].price).uiAmountFloat,
    		!/*$MARKET*/ ctx[2].nativeValues,
    		2
    	) + "";

    	let t21;
    	let t22;
    	let t23;
    	let div11;
    	let div10;
    	let t24;
    	let span3;
    	let t25_value = dictionary[/*$USER*/ ctx[3].language].reserveDetail.availableLiquidity.toUpperCase() + "";
    	let t25;
    	let t26;
    	let br1;
    	let t27;
    	let p1;

    	let t28_value = currencyFormatter(
    		/*$MARKET*/ ctx[2].nativeValues
    		? /*reserveDetail*/ ctx[0].availableLiquidity.uiAmountFloat
    		: /*reserveDetail*/ ctx[0].availableLiquidity.muln(/*reserveDetail*/ ctx[0].price).uiAmountFloat,
    		!/*$MARKET*/ ctx[2].nativeValues,
    		2
    	) + "";

    	let t28;
    	let t29;
    	let t30;
    	let div14;
    	let t31;
    	let div17;
    	let div15;
    	let span4;
    	let t32_value = dictionary[/*$USER*/ ctx[3].language].reserveDetail.minimumCollateralizationRatio.toUpperCase() + "";
    	let t32;
    	let t33;
    	let info0;
    	let t34;
    	let p2;
    	let t35_value = /*reserveDetail*/ ctx[0].maximumLTV / 100 + "";
    	let t35;
    	let t36;
    	let t37;
    	let div16;
    	let span5;
    	let t38_value = dictionary[/*$USER*/ ctx[3].language].reserveDetail.liquidationPremium.toUpperCase() + "";
    	let t38;
    	let t39;
    	let info1;
    	let t40;
    	let p3;
    	let t41_value = /*reserveDetail*/ ctx[0].liquidationPremium / 100 + "";
    	let t41;
    	let t42;
    	let t43;
    	let div18;
    	let t44;
    	let div19;
    	let current_block_type_index;
    	let if_block2;
    	let t45;
    	let i;
    	let div20_intro;
    	let div20_outro;
    	let current;
    	let mounted;
    	let dispose;

    	toggle = new Toggle({
    			props: {
    				onClick: /*func*/ ctx[5],
    				active: !/*$MARKET*/ ctx[2].nativeValues,
    				native: true
    			},
    			$$inline: true
    		});

    	percentagechart = new PercentageChart({
    			props: {
    				percentage: /*reserveDetail*/ ctx[0].utilizationRate * 100,
    				text: dictionary[/*$USER*/ ctx[3].language].reserveDetail.utilisationRate.toUpperCase(),
    				term: "utilisationRate"
    			},
    			$$inline: true
    		});

    	let if_block0 = /*$MARKET*/ ctx[2].nativeValues && create_if_block_3$6(ctx);
    	let if_block1 = /*$MARKET*/ ctx[2].nativeValues && create_if_block_2$8(ctx);

    	info0 = new Info({
    			props: {
    				term: "collateralizationRatio",
    				style: "margin: unset;"
    			},
    			$$inline: true
    		});

    	info1 = new Info({
    			props: {
    				term: "liquidationPremium",
    				style: "margin: unset;"
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block_1$a, create_else_block$8];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$USER*/ ctx[3].wallet) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div20 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			img = element("img");
    			t1 = space();
    			h1 = element("h1");
    			t2 = text(t2_value);
    			t3 = space();
    			span0 = element("span");
    			t4 = text("1 ");
    			t5 = text(t5_value);
    			t6 = text(" ≈ ");
    			t7 = text(t7_value);
    			t8 = space();
    			div5 = element("div");
    			div3 = element("div");
    			t9 = space();
    			div4 = element("div");
    			create_component(toggle.$$.fragment);
    			t10 = space();
    			div6 = element("div");
    			span1 = element("span");
    			t11 = text(t11_value);
    			t12 = space();
    			h2 = element("h2");
    			t13 = text(t13_value);
    			t14 = space();
    			div7 = element("div");
    			t15 = space();
    			div13 = element("div");
    			create_component(percentagechart.$$.fragment);
    			t16 = space();
    			div12 = element("div");
    			div9 = element("div");
    			div8 = element("div");
    			t17 = space();
    			span2 = element("span");
    			t18 = text(t18_value);
    			t19 = space();
    			br0 = element("br");
    			t20 = space();
    			p0 = element("p");
    			t21 = text(t21_value);
    			t22 = space();
    			if (if_block0) if_block0.c();
    			t23 = space();
    			div11 = element("div");
    			div10 = element("div");
    			t24 = space();
    			span3 = element("span");
    			t25 = text(t25_value);
    			t26 = space();
    			br1 = element("br");
    			t27 = space();
    			p1 = element("p");
    			t28 = text(t28_value);
    			t29 = space();
    			if (if_block1) if_block1.c();
    			t30 = space();
    			div14 = element("div");
    			t31 = space();
    			div17 = element("div");
    			div15 = element("div");
    			span4 = element("span");
    			t32 = text(t32_value);
    			t33 = space();
    			create_component(info0.$$.fragment);
    			t34 = space();
    			p2 = element("p");
    			t35 = text(t35_value);
    			t36 = text("%");
    			t37 = space();
    			div16 = element("div");
    			span5 = element("span");
    			t38 = text(t38_value);
    			t39 = space();
    			create_component(info1.$$.fragment);
    			t40 = space();
    			p3 = element("p");
    			t41 = text(t41_value);
    			t42 = text("%");
    			t43 = space();
    			div18 = element("div");
    			t44 = space();
    			div19 = element("div");
    			if_block2.c();
    			t45 = space();
    			i = element("i");
    			i.textContent = "✕";
    			attr_dev(div0, "class", "modal-bg flex-centered svelte-oe7fj1");
    			add_location(div0, file$j, 21, 2, 668);
    			if (!src_url_equal(img.src, img_src_value = "img/cryptos/" + /*reserveDetail*/ ctx[0].abbrev + ".png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = "" + (/*reserveDetail*/ ctx[0].abbrev + " Logo"));
    			attr_dev(img, "class", "svelte-oe7fj1");
    			add_location(img, file$j, 30, 8, 1023);
    			attr_dev(h1, "class", "modal-header");
    			add_location(h1, file$j, 33, 8, 1137);
    			attr_dev(div1, "class", "flex align-center-justify-center");
    			add_location(div1, file$j, 29, 6, 968);
    			add_location(span0, file$j, 37, 6, 1241);
    			attr_dev(div2, "class", "modal-section flex-centered column");
    			add_location(div2, file$j, 28, 4, 913);
    			attr_dev(div3, "class", "divider svelte-oe7fj1");
    			add_location(div3, file$j, 42, 6, 1396);
    			attr_dev(div4, "class", "toggler svelte-oe7fj1");
    			add_location(div4, file$j, 44, 6, 1437);
    			attr_dev(div5, "class", "native-toggle svelte-oe7fj1");
    			add_location(div5, file$j, 41, 4, 1362);
    			attr_dev(span1, "class", "flex-centered");
    			add_location(span1, file$j, 55, 6, 1761);
    			attr_dev(h2, "class", "modal-subheader text-gradient");
    			add_location(h2, file$j, 58, 6, 1887);
    			attr_dev(div6, "class", "modal-section flex-centered column");
    			add_location(div6, file$j, 54, 4, 1706);
    			attr_dev(div7, "class", "divider svelte-oe7fj1");
    			add_location(div7, file$j, 68, 4, 2209);
    			attr_dev(div8, "class", "asset-info-color svelte-oe7fj1");
    			set_style(div8, "background", "var(--failure)");
    			set_style(div8, "box-shadow", "var(--neu-shadow-inset-failure)");
    			add_location(div8, file$j, 77, 10, 2665);
    			add_location(br0, file$j, 82, 12, 2945);
    			add_location(p0, file$j, 83, 12, 2962);
    			set_style(span2, "text-align", "start");
    			add_location(span2, file$j, 80, 10, 2816);
    			attr_dev(div9, "class", "flex align-start justify-center");
    			set_style(div9, "margin", "var(--spacing-sm)");
    			add_location(div9, file$j, 76, 8, 2574);
    			attr_dev(div10, "class", "asset-info-color svelte-oe7fj1");
    			set_style(div10, "background", "var(--success)");
    			set_style(div10, "box-shadow", "var(--neu-shadow-inset-success)");
    			add_location(div10, file$j, 98, 10, 3519);
    			add_location(br1, file$j, 103, 12, 3804);
    			add_location(p1, file$j, 104, 12, 3821);
    			set_style(span3, "text-align", "start");
    			add_location(span3, file$j, 101, 10, 3670);
    			attr_dev(div11, "class", "flex align-start justify-center");
    			set_style(div11, "margin", "var(--spacing-sm)");
    			add_location(div11, file$j, 97, 8, 3428);
    			attr_dev(div12, "class", "flex align-start justify-center column");
    			add_location(div12, file$j, 75, 6, 2513);
    			attr_dev(div13, "class", "modal-section flex align-center justify-evenly");
    			add_location(div13, file$j, 70, 4, 2246);
    			attr_dev(div14, "class", "divider svelte-oe7fj1");
    			add_location(div14, file$j, 120, 4, 4313);
    			add_location(span4, file$j, 124, 8, 4454);
    			add_location(p2, file$j, 130, 8, 4678);
    			attr_dev(div15, "class", "modal-detail flex-centered column");
    			add_location(div15, file$j, 123, 6, 4398);
    			add_location(span5, file$j, 135, 8, 4814);
    			add_location(p3, file$j, 141, 8, 5023);
    			attr_dev(div16, "class", "modal-detail flex-centered column");
    			add_location(div16, file$j, 134, 6, 4758);
    			attr_dev(div17, "class", "modal-section flex-centered");
    			add_location(div17, file$j, 122, 4, 4350);
    			attr_dev(div18, "class", "divider svelte-oe7fj1");
    			add_location(div18, file$j, 146, 4, 5120);
    			attr_dev(div19, "class", "modal-section flex-centered");
    			add_location(div19, file$j, 148, 4, 5157);
    			attr_dev(i, "class", "jet-icons close");
    			add_location(i, file$j, 164, 4, 5669);
    			attr_dev(div20, "class", "reserve-detail modal flex-centered column svelte-oe7fj1");
    			add_location(div20, file$j, 25, 2, 787);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div20, anchor);
    			append_dev(div20, div2);
    			append_dev(div2, div1);
    			append_dev(div1, img);
    			append_dev(div1, t1);
    			append_dev(div1, h1);
    			append_dev(h1, t2);
    			append_dev(div2, t3);
    			append_dev(div2, span0);
    			append_dev(span0, t4);
    			append_dev(span0, t5);
    			append_dev(span0, t6);
    			append_dev(span0, t7);
    			append_dev(div20, t8);
    			append_dev(div20, div5);
    			append_dev(div5, div3);
    			append_dev(div5, t9);
    			append_dev(div5, div4);
    			mount_component(toggle, div4, null);
    			append_dev(div20, t10);
    			append_dev(div20, div6);
    			append_dev(div6, span1);
    			append_dev(span1, t11);
    			append_dev(div6, t12);
    			append_dev(div6, h2);
    			append_dev(h2, t13);
    			append_dev(div20, t14);
    			append_dev(div20, div7);
    			append_dev(div20, t15);
    			append_dev(div20, div13);
    			mount_component(percentagechart, div13, null);
    			append_dev(div13, t16);
    			append_dev(div13, div12);
    			append_dev(div12, div9);
    			append_dev(div9, div8);
    			append_dev(div9, t17);
    			append_dev(div9, span2);
    			append_dev(span2, t18);
    			append_dev(span2, t19);
    			append_dev(span2, br0);
    			append_dev(span2, t20);
    			append_dev(span2, p0);
    			append_dev(p0, t21);
    			append_dev(p0, t22);
    			if (if_block0) if_block0.m(p0, null);
    			append_dev(div12, t23);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div11, t24);
    			append_dev(div11, span3);
    			append_dev(span3, t25);
    			append_dev(span3, t26);
    			append_dev(span3, br1);
    			append_dev(span3, t27);
    			append_dev(span3, p1);
    			append_dev(p1, t28);
    			append_dev(p1, t29);
    			if (if_block1) if_block1.m(p1, null);
    			append_dev(div20, t30);
    			append_dev(div20, div14);
    			append_dev(div20, t31);
    			append_dev(div20, div17);
    			append_dev(div17, div15);
    			append_dev(div15, span4);
    			append_dev(span4, t32);
    			append_dev(span4, t33);
    			mount_component(info0, span4, null);
    			append_dev(div15, t34);
    			append_dev(div15, p2);
    			append_dev(p2, t35);
    			append_dev(p2, t36);
    			append_dev(div17, t37);
    			append_dev(div17, div16);
    			append_dev(div16, span5);
    			append_dev(span5, t38);
    			append_dev(span5, t39);
    			mount_component(info1, span5, null);
    			append_dev(div16, t40);
    			append_dev(div16, p3);
    			append_dev(p3, t41);
    			append_dev(p3, t42);
    			append_dev(div20, t43);
    			append_dev(div20, div18);
    			append_dev(div20, t44);
    			append_dev(div20, div19);
    			if_blocks[current_block_type_index].m(div19, null);
    			append_dev(div20, t45);
    			append_dev(div20, i);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler*/ ctx[4], false, false, false),
    					listen_dev(i, "click", /*click_handler_1*/ ctx[8], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*reserveDetail*/ 1 && !src_url_equal(img.src, img_src_value = "img/cryptos/" + /*reserveDetail*/ ctx[0].abbrev + ".png")) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (!current || dirty & /*reserveDetail*/ 1 && img_alt_value !== (img_alt_value = "" + (/*reserveDetail*/ ctx[0].abbrev + " Logo"))) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if ((!current || dirty & /*reserveDetail*/ 1) && t2_value !== (t2_value = /*reserveDetail*/ ctx[0].name.toUpperCase() + "")) set_data_dev(t2, t2_value);
    			if ((!current || dirty & /*reserveDetail*/ 1) && t5_value !== (t5_value = /*reserveDetail*/ ctx[0].abbrev + "")) set_data_dev(t5, t5_value);
    			if ((!current || dirty & /*reserveDetail*/ 1) && t7_value !== (t7_value = currencyFormatter(/*reserveDetail*/ ctx[0].price, true, 2) + "")) set_data_dev(t7, t7_value);
    			const toggle_changes = {};
    			if (dirty & /*$MARKET*/ 4) toggle_changes.active = !/*$MARKET*/ ctx[2].nativeValues;
    			toggle.$set(toggle_changes);
    			if ((!current || dirty & /*$USER*/ 8) && t11_value !== (t11_value = dictionary[/*$USER*/ ctx[3].language].reserveDetail.reserveSize.toUpperCase() + "")) set_data_dev(t11, t11_value);

    			if ((!current || dirty & /*$MARKET, reserveDetail*/ 5) && t13_value !== (t13_value = currencyFormatter(
    				/*$MARKET*/ ctx[2].nativeValues
    				? /*reserveDetail*/ ctx[0].marketSize.uiAmountFloat
    				: /*reserveDetail*/ ctx[0].marketSize.muln(/*reserveDetail*/ ctx[0].price).uiAmountFloat,
    				!/*$MARKET*/ ctx[2].nativeValues,
    				2
    			) + "")) set_data_dev(t13, t13_value);

    			const percentagechart_changes = {};
    			if (dirty & /*reserveDetail*/ 1) percentagechart_changes.percentage = /*reserveDetail*/ ctx[0].utilizationRate * 100;
    			if (dirty & /*$USER*/ 8) percentagechart_changes.text = dictionary[/*$USER*/ ctx[3].language].reserveDetail.utilisationRate.toUpperCase();
    			percentagechart.$set(percentagechart_changes);
    			if ((!current || dirty & /*$USER*/ 8) && t18_value !== (t18_value = dictionary[/*$USER*/ ctx[3].language].reserveDetail.totalBorrowed.toUpperCase() + "")) set_data_dev(t18, t18_value);

    			if ((!current || dirty & /*$MARKET, reserveDetail*/ 5) && t21_value !== (t21_value = currencyFormatter(
    				/*$MARKET*/ ctx[2].nativeValues
    				? /*reserveDetail*/ ctx[0].outstandingDebt.uiAmountFloat
    				: /*reserveDetail*/ ctx[0].outstandingDebt.muln(/*reserveDetail*/ ctx[0].price).uiAmountFloat,
    				!/*$MARKET*/ ctx[2].nativeValues,
    				2
    			) + "")) set_data_dev(t21, t21_value);

    			if (/*$MARKET*/ ctx[2].nativeValues) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_3$6(ctx);
    					if_block0.c();
    					if_block0.m(p0, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if ((!current || dirty & /*$USER*/ 8) && t25_value !== (t25_value = dictionary[/*$USER*/ ctx[3].language].reserveDetail.availableLiquidity.toUpperCase() + "")) set_data_dev(t25, t25_value);

    			if ((!current || dirty & /*$MARKET, reserveDetail*/ 5) && t28_value !== (t28_value = currencyFormatter(
    				/*$MARKET*/ ctx[2].nativeValues
    				? /*reserveDetail*/ ctx[0].availableLiquidity.uiAmountFloat
    				: /*reserveDetail*/ ctx[0].availableLiquidity.muln(/*reserveDetail*/ ctx[0].price).uiAmountFloat,
    				!/*$MARKET*/ ctx[2].nativeValues,
    				2
    			) + "")) set_data_dev(t28, t28_value);

    			if (/*$MARKET*/ ctx[2].nativeValues) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_2$8(ctx);
    					if_block1.c();
    					if_block1.m(p1, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if ((!current || dirty & /*$USER*/ 8) && t32_value !== (t32_value = dictionary[/*$USER*/ ctx[3].language].reserveDetail.minimumCollateralizationRatio.toUpperCase() + "")) set_data_dev(t32, t32_value);
    			if ((!current || dirty & /*reserveDetail*/ 1) && t35_value !== (t35_value = /*reserveDetail*/ ctx[0].maximumLTV / 100 + "")) set_data_dev(t35, t35_value);
    			if ((!current || dirty & /*$USER*/ 8) && t38_value !== (t38_value = dictionary[/*$USER*/ ctx[3].language].reserveDetail.liquidationPremium.toUpperCase() + "")) set_data_dev(t38, t38_value);
    			if ((!current || dirty & /*reserveDetail*/ 1) && t41_value !== (t41_value = /*reserveDetail*/ ctx[0].liquidationPremium / 100 + "")) set_data_dev(t41, t41_value);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks[current_block_type_index];

    				if (!if_block2) {
    					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block2.c();
    				} else {
    					if_block2.p(ctx, dirty);
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(div19, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fade, { duration: 50 }, true);
    				div0_transition.run(1);
    			});

    			transition_in(toggle.$$.fragment, local);
    			transition_in(percentagechart.$$.fragment, local);
    			transition_in(info0.$$.fragment, local);
    			transition_in(info1.$$.fragment, local);
    			transition_in(if_block2);

    			add_render_callback(() => {
    				if (div20_outro) div20_outro.end(1);
    				div20_intro = create_in_transition(div20, fly, { y: 25, duration: 500 });
    				div20_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fade, { duration: 50 }, false);
    			div0_transition.run(0);
    			transition_out(toggle.$$.fragment, local);
    			transition_out(percentagechart.$$.fragment, local);
    			transition_out(info0.$$.fragment, local);
    			transition_out(info1.$$.fragment, local);
    			transition_out(if_block2);
    			if (div20_intro) div20_intro.invalidate();
    			div20_outro = create_out_transition(div20, fade, { duration: 50 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching && div0_transition) div0_transition.end();
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div20);
    			destroy_component(toggle);
    			destroy_component(percentagechart);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_component(info0);
    			destroy_component(info1);
    			if_blocks[current_block_type_index].d();
    			if (detaching && div20_outro) div20_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(21:0) {#if reserveDetail}",
    		ctx
    	});

    	return block;
    }

    // (92:14) {#if $MARKET.nativeValues}
    function create_if_block_3$6(ctx) {
    	let t_value = /*reserveDetail*/ ctx[0].abbrev + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*reserveDetail*/ 1 && t_value !== (t_value = /*reserveDetail*/ ctx[0].abbrev + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$6.name,
    		type: "if",
    		source: "(92:14) {#if $MARKET.nativeValues}",
    		ctx
    	});

    	return block;
    }

    // (113:14) {#if $MARKET.nativeValues}
    function create_if_block_2$8(ctx) {
    	let t_value = /*reserveDetail*/ ctx[0].abbrev + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*reserveDetail*/ 1 && t_value !== (t_value = /*reserveDetail*/ ctx[0].abbrev + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$8.name,
    		type: "if",
    		source: "(113:14) {#if $MARKET.nativeValues}",
    		ctx
    	});

    	return block;
    }

    // (156:6) {:else}
    function create_else_block$8(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				text: dictionary[/*$USER*/ ctx[3].language].settings.connect,
    				onClick: /*func_2*/ ctx[7]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty & /*$USER*/ 8) button_changes.text = dictionary[/*$USER*/ ctx[3].language].settings.connect;
    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(156:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (150:6) {#if $USER.wallet}
    function create_if_block_1$a(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				text: dictionary[/*$USER*/ ctx[3].language].reserveDetail.tradeAsset.replace('{{ASSET}}', /*reserveDetail*/ ctx[0].abbrev),
    				onClick: /*func_1*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty & /*$USER, reserveDetail*/ 9) button_changes.text = dictionary[/*$USER*/ ctx[3].language].reserveDetail.tradeAsset.replace('{{ASSET}}', /*reserveDetail*/ ctx[0].abbrev);
    			if (dirty & /*closeModal*/ 2) button_changes.onClick = /*func_1*/ ctx[6];
    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$a.name,
    		type: "if",
    		source: "(150:6) {#if $USER.wallet}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*reserveDetail*/ ctx[0] && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*reserveDetail*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*reserveDetail*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$e(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let $MARKET;
    	let $USER;
    	validate_store(MARKET, 'MARKET');
    	component_subscribe($$self, MARKET, $$value => $$invalidate(2, $MARKET = $$value));
    	validate_store(USER, 'USER');
    	component_subscribe($$self, USER, $$value => $$invalidate(3, $USER = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ReserveDetail', slots, []);
    	let { reserveDetail } = $$props;
    	let { closeModal } = $$props;

    	onMount(() => {
    		document.addEventListener('keypress', e => {
    			if (e.code === 'Escape' || e.code === 'Enter') {
    				closeModal();
    			}
    		});
    	});

    	const writable_props = ['reserveDetail', 'closeModal'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ReserveDetail> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => closeModal();

    	const func = () => MARKET.update(market => {
    		market.nativeValues = !market.nativeValues;
    		return market;
    	});

    	const func_1 = () => {
    		closeModal();
    	};

    	const func_2 = () => USER.update(user => {
    		user.connectingWallet = true;
    		return user;
    	});

    	const click_handler_1 = () => closeModal();

    	$$self.$$set = $$props => {
    		if ('reserveDetail' in $$props) $$invalidate(0, reserveDetail = $$props.reserveDetail);
    		if ('closeModal' in $$props) $$invalidate(1, closeModal = $$props.closeModal);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		fade,
    		fly,
    		MARKET,
    		USER,
    		currencyFormatter,
    		dictionary,
    		Button,
    		PercentageChart,
    		Toggle,
    		Info,
    		reserveDetail,
    		closeModal,
    		$MARKET,
    		$USER
    	});

    	$$self.$inject_state = $$props => {
    		if ('reserveDetail' in $$props) $$invalidate(0, reserveDetail = $$props.reserveDetail);
    		if ('closeModal' in $$props) $$invalidate(1, closeModal = $$props.closeModal);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		reserveDetail,
    		closeModal,
    		$MARKET,
    		$USER,
    		click_handler,
    		func,
    		func_1,
    		func_2,
    		click_handler_1
    	];
    }

    class ReserveDetail extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$k, create_fragment$k, safe_not_equal, { reserveDetail: 0, closeModal: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ReserveDetail",
    			options,
    			id: create_fragment$k.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*reserveDetail*/ ctx[0] === undefined && !('reserveDetail' in props)) {
    			console.warn("<ReserveDetail> was created without expected prop 'reserveDetail'");
    		}

    		if (/*closeModal*/ ctx[1] === undefined && !('closeModal' in props)) {
    			console.warn("<ReserveDetail> was created without expected prop 'closeModal'");
    		}
    	}

    	get reserveDetail() {
    		throw new Error("<ReserveDetail>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set reserveDetail(value) {
    		throw new Error("<ReserveDetail>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeModal() {
    		throw new Error("<ReserveDetail>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeModal(value) {
    		throw new Error("<ReserveDetail>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/InitFailed.svelte generated by Svelte v3.44.2 */
    const file$i = "src/components/InitFailed.svelte";

    // (17:2) {:else}
    function create_else_block$7(ctx) {
    	let span;
    	let t_value = dictionary[/*$USER*/ ctx[0].language].cockpit.noMarket + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "class", "svelte-rwz0qk");
    			add_location(span, file$i, 17, 4, 519);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 1 && t_value !== (t_value = dictionary[/*$USER*/ ctx[0].language].cockpit.noMarket + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(17:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (13:2) {#if $USER.geobanned}
    function create_if_block_1$9(ctx) {
    	let span;
    	let t_value = dictionary[/*$USER*/ ctx[0].language].cockpit.geobanned + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "class", "svelte-rwz0qk");
    			add_location(span, file$i, 13, 4, 433);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 1 && t_value !== (t_value = dictionary[/*$USER*/ ctx[0].language].cockpit.geobanned + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(13:2) {#if $USER.geobanned}",
    		ctx
    	});

    	return block;
    }

    // (22:2) {#if $USER.rpcNode}
    function create_if_block$d(ctx) {
    	let p;
    	let i;
    	let t0;
    	let t1_value = /*$USER*/ ctx[0].rpcNode + "";
    	let t1;
    	let t2;
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				small: true,
    				text: dictionary[/*$USER*/ ctx[0].language].settings.reset,
    				onClick: /*func*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			p = element("p");
    			i = element("i");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			create_component(button.$$.fragment);
    			attr_dev(i, "class", "fas fa-wifi svelte-rwz0qk");
    			add_location(i, file$i, 23, 6, 634);
    			attr_dev(p, "class", "svelte-rwz0qk");
    			add_location(p, file$i, 22, 4, 624);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, i);
    			append_dev(p, t0);
    			append_dev(p, t1);
    			insert_dev(target, t2, anchor);
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$USER*/ 1) && t1_value !== (t1_value = /*$USER*/ ctx[0].rpcNode + "")) set_data_dev(t1, t1_value);
    			const button_changes = {};
    			if (dirty & /*$USER*/ 1) button_changes.text = dictionary[/*$USER*/ ctx[0].language].settings.reset;
    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t2);
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(22:2) {#if $USER.rpcNode}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let div;
    	let img;
    	let img_src_value;
    	let t0;
    	let h1;
    	let t1_value = dictionary[/*$USER*/ ctx[0].language].copilot.alert.failed + "";
    	let t1;
    	let t2;
    	let t3;
    	let current;

    	function select_block_type(ctx, dirty) {
    		if (/*$USER*/ ctx[0].geobanned) return create_if_block_1$9;
    		return create_else_block$7;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*$USER*/ ctx[0].rpcNode && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t0 = space();
    			h1 = element("h1");
    			t1 = text(t1_value);
    			t2 = space();
    			if_block0.c();
    			t3 = space();
    			if (if_block1) if_block1.c();
    			if (!src_url_equal(img.src, img_src_value = "img/ui/failed_init.gif")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Failed To Init App");
    			attr_dev(img, "class", "svelte-rwz0qk");
    			add_location(img, file$i, 8, 2, 255);
    			attr_dev(h1, "class", "bicyclette svelte-rwz0qk");
    			add_location(h1, file$i, 9, 2, 319);
    			attr_dev(div, "class", "view-container flex-centered column svelte-rwz0qk");
    			add_location(div, file$i, 7, 0, 203);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			append_dev(div, t0);
    			append_dev(div, h1);
    			append_dev(h1, t1);
    			append_dev(div, t2);
    			if_block0.m(div, null);
    			append_dev(div, t3);
    			if (if_block1) if_block1.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$USER*/ 1) && t1_value !== (t1_value = dictionary[/*$USER*/ ctx[0].language].copilot.alert.failed + "")) set_data_dev(t1, t1_value);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div, t3);
    				}
    			}

    			if (/*$USER*/ ctx[0].rpcNode) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*$USER*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$d(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let $USER;
    	validate_store(USER, 'USER');
    	component_subscribe($$self, USER, $$value => $$invalidate(0, $USER = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InitFailed', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InitFailed> was created with unknown prop '${key}'`);
    	});

    	const func = () => {
    		localStorage.removeItem('jetPreferredNode');

    		USER.update(user => {
    			user.rpcPing = 0;
    			return user;
    		});

    		getMarketAndIDL();
    	};

    	$$self.$capture_state = () => ({
    		USER,
    		getMarketAndIDL,
    		dictionary,
    		Button,
    		$USER
    	});

    	return [$USER, func];
    }

    class InitFailed extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$j, create_fragment$j, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InitFailed",
    			options,
    			id: create_fragment$j.name
    		});
    	}
    }

    function is_date(obj) {
        return Object.prototype.toString.call(obj) === '[object Date]';
    }

    function tick_spring(ctx, last_value, current_value, target_value) {
        if (typeof current_value === 'number' || is_date(current_value)) {
            // @ts-ignore
            const delta = target_value - current_value;
            // @ts-ignore
            const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0
            const spring = ctx.opts.stiffness * delta;
            const damper = ctx.opts.damping * velocity;
            const acceleration = (spring - damper) * ctx.inv_mass;
            const d = (velocity + acceleration) * ctx.dt;
            if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {
                return target_value; // settled
            }
            else {
                ctx.settled = false; // signal loop to keep ticking
                // @ts-ignore
                return is_date(current_value) ?
                    new Date(current_value.getTime() + d) : current_value + d;
            }
        }
        else if (Array.isArray(current_value)) {
            // @ts-ignore
            return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));
        }
        else if (typeof current_value === 'object') {
            const next_value = {};
            for (const k in current_value) {
                // @ts-ignore
                next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);
            }
            // @ts-ignore
            return next_value;
        }
        else {
            throw new Error(`Cannot spring ${typeof current_value} values`);
        }
    }
    function spring(value, opts = {}) {
        const store = writable(value);
        const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;
        let last_time;
        let task;
        let current_token;
        let last_value = value;
        let target_value = value;
        let inv_mass = 1;
        let inv_mass_recovery_rate = 0;
        let cancel_task = false;
        function set(new_value, opts = {}) {
            target_value = new_value;
            const token = current_token = {};
            if (value == null || opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {
                cancel_task = true; // cancel any running animation
                last_time = now();
                last_value = new_value;
                store.set(value = target_value);
                return Promise.resolve();
            }
            else if (opts.soft) {
                const rate = opts.soft === true ? .5 : +opts.soft;
                inv_mass_recovery_rate = 1 / (rate * 60);
                inv_mass = 0; // infinite mass, unaffected by spring forces
            }
            if (!task) {
                last_time = now();
                cancel_task = false;
                task = loop(now => {
                    if (cancel_task) {
                        cancel_task = false;
                        task = null;
                        return false;
                    }
                    inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);
                    const ctx = {
                        inv_mass,
                        opts: spring,
                        settled: true,
                        dt: (now - last_time) * 60 / 1000
                    };
                    const next_value = tick_spring(ctx, last_value, value, target_value);
                    last_time = now;
                    last_value = value;
                    store.set(value = next_value);
                    if (ctx.settled) {
                        task = null;
                    }
                    return !ctx.settled;
                });
            }
            return new Promise(fulfil => {
                task.promise.then(() => {
                    if (token === current_token)
                        fulfil();
                });
            });
        }
        const spring = {
            set,
            update: (fn, opts) => set(fn(target_value, value), opts),
            subscribe: store.subscribe,
            stiffness,
            damping,
            precision
        };
        return spring;
    }

    /* node_modules/svelte-range-slider-pips/src/RangePips.svelte generated by Svelte v3.44.2 */

    const file$h = "node_modules/svelte-range-slider-pips/src/RangePips.svelte";

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    // (140:2) {#if ( all && first !== false ) || first }
    function create_if_block_9$4(ctx) {
    	let span;
    	let span_style_value;
    	let if_block = (/*all*/ ctx[3] === 'label' || /*first*/ ctx[4] === 'label') && create_if_block_10$3(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (if_block) if_block.c();
    			attr_dev(span, "class", "pip first");
    			attr_dev(span, "style", span_style_value = "" + ((/*vertical*/ ctx[2] ? 'top' : 'left') + ": 0%;"));
    			toggle_class(span, "selected", /*isSelected*/ ctx[13](/*min*/ ctx[0]));
    			toggle_class(span, "in-range", /*inRange*/ ctx[12](/*min*/ ctx[0]));
    			add_location(span, file$h, 140, 4, 3417);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			if (if_block) if_block.m(span, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*all*/ ctx[3] === 'label' || /*first*/ ctx[4] === 'label') {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_10$3(ctx);
    					if_block.c();
    					if_block.m(span, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*vertical*/ 4 && span_style_value !== (span_style_value = "" + ((/*vertical*/ ctx[2] ? 'top' : 'left') + ": 0%;"))) {
    				attr_dev(span, "style", span_style_value);
    			}

    			if (dirty & /*isSelected, min*/ 8193) {
    				toggle_class(span, "selected", /*isSelected*/ ctx[13](/*min*/ ctx[0]));
    			}

    			if (dirty & /*inRange, min*/ 4097) {
    				toggle_class(span, "in-range", /*inRange*/ ctx[12](/*min*/ ctx[0]));
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$4.name,
    		type: "if",
    		source: "(140:2) {#if ( all && first !== false ) || first }",
    		ctx
    	});

    	return block;
    }

    // (146:6) {#if all === 'label' || first === 'label'}
    function create_if_block_10$3(ctx) {
    	let span;
    	let t_value = /*formatter*/ ctx[9](/*min*/ ctx[0], 0) + "";
    	let t;
    	let if_block0 = /*prefix*/ ctx[7] && create_if_block_12$1(ctx);
    	let if_block1 = /*suffix*/ ctx[8] && create_if_block_11$1(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (if_block0) if_block0.c();
    			t = text(t_value);
    			if (if_block1) if_block1.c();
    			attr_dev(span, "class", "pipVal");
    			add_location(span, file$h, 146, 8, 3627);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			if (if_block0) if_block0.m(span, null);
    			append_dev(span, t);
    			if (if_block1) if_block1.m(span, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*prefix*/ ctx[7]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_12$1(ctx);
    					if_block0.c();
    					if_block0.m(span, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*formatter, min*/ 513 && t_value !== (t_value = /*formatter*/ ctx[9](/*min*/ ctx[0], 0) + "")) set_data_dev(t, t_value);

    			if (/*suffix*/ ctx[8]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_11$1(ctx);
    					if_block1.c();
    					if_block1.m(span, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$3.name,
    		type: "if",
    		source: "(146:6) {#if all === 'label' || first === 'label'}",
    		ctx
    	});

    	return block;
    }

    // (148:10) {#if prefix}
    function create_if_block_12$1(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*prefix*/ ctx[7]);
    			attr_dev(span, "class", "pipVal-prefix");
    			add_location(span, file$h, 147, 22, 3671);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prefix*/ 128) set_data_dev(t, /*prefix*/ ctx[7]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$1.name,
    		type: "if",
    		source: "(148:10) {#if prefix}",
    		ctx
    	});

    	return block;
    }

    // (148:88) {#if suffix}
    function create_if_block_11$1(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*suffix*/ ctx[8]);
    			attr_dev(span, "class", "pipVal-suffix");
    			add_location(span, file$h, 147, 100, 3749);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*suffix*/ 256) set_data_dev(t, /*suffix*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$1.name,
    		type: "if",
    		source: "(148:88) {#if suffix}",
    		ctx
    	});

    	return block;
    }

    // (153:2) {#if ( all && rest !== false ) || rest}
    function create_if_block_4$5(ctx) {
    	let each_1_anchor;
    	let each_value = Array(/*pipCount*/ ctx[15] + 1);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*vertical, percentOf, pipVal, isSelected, inRange, suffix, formatter, prefix, all, rest, min, max, pipCount*/ 64463) {
    				each_value = Array(/*pipCount*/ ctx[15] + 1);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$a(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$a(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$5.name,
    		type: "if",
    		source: "(153:2) {#if ( all && rest !== false ) || rest}",
    		ctx
    	});

    	return block;
    }

    // (155:6) {#if pipVal(i) !== min && pipVal(i) !== max}
    function create_if_block_5$4(ctx) {
    	let span;
    	let t;
    	let span_style_value;
    	let if_block = (/*all*/ ctx[3] === 'label' || /*rest*/ ctx[6] === 'label') && create_if_block_6$4(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (if_block) if_block.c();
    			t = space();
    			attr_dev(span, "class", "pip");
    			attr_dev(span, "style", span_style_value = "" + ((/*vertical*/ ctx[2] ? 'top' : 'left') + ": " + /*percentOf*/ ctx[11](/*pipVal*/ ctx[14](/*i*/ ctx[23])) + "%;"));
    			toggle_class(span, "selected", /*isSelected*/ ctx[13](/*pipVal*/ ctx[14](/*i*/ ctx[23])));
    			toggle_class(span, "in-range", /*inRange*/ ctx[12](/*pipVal*/ ctx[14](/*i*/ ctx[23])));
    			add_location(span, file$h, 155, 8, 3987);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			if (if_block) if_block.m(span, null);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (/*all*/ ctx[3] === 'label' || /*rest*/ ctx[6] === 'label') {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_6$4(ctx);
    					if_block.c();
    					if_block.m(span, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*vertical, percentOf, pipVal*/ 18436 && span_style_value !== (span_style_value = "" + ((/*vertical*/ ctx[2] ? 'top' : 'left') + ": " + /*percentOf*/ ctx[11](/*pipVal*/ ctx[14](/*i*/ ctx[23])) + "%;"))) {
    				attr_dev(span, "style", span_style_value);
    			}

    			if (dirty & /*isSelected, pipVal*/ 24576) {
    				toggle_class(span, "selected", /*isSelected*/ ctx[13](/*pipVal*/ ctx[14](/*i*/ ctx[23])));
    			}

    			if (dirty & /*inRange, pipVal*/ 20480) {
    				toggle_class(span, "in-range", /*inRange*/ ctx[12](/*pipVal*/ ctx[14](/*i*/ ctx[23])));
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$4.name,
    		type: "if",
    		source: "(155:6) {#if pipVal(i) !== min && pipVal(i) !== max}",
    		ctx
    	});

    	return block;
    }

    // (161:10) {#if all === 'label' || rest === 'label'}
    function create_if_block_6$4(ctx) {
    	let span;
    	let t_value = /*formatter*/ ctx[9](/*pipVal*/ ctx[14](/*i*/ ctx[23]), /*i*/ ctx[23]) + "";
    	let t;
    	let if_block0 = /*prefix*/ ctx[7] && create_if_block_8$4(ctx);
    	let if_block1 = /*suffix*/ ctx[8] && create_if_block_7$4(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (if_block0) if_block0.c();
    			t = text(t_value);
    			if (if_block1) if_block1.c();
    			attr_dev(span, "class", "pipVal");
    			add_location(span, file$h, 161, 12, 4247);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			if (if_block0) if_block0.m(span, null);
    			append_dev(span, t);
    			if (if_block1) if_block1.m(span, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*prefix*/ ctx[7]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_8$4(ctx);
    					if_block0.c();
    					if_block0.m(span, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*formatter, pipVal*/ 16896 && t_value !== (t_value = /*formatter*/ ctx[9](/*pipVal*/ ctx[14](/*i*/ ctx[23]), /*i*/ ctx[23]) + "")) set_data_dev(t, t_value);

    			if (/*suffix*/ ctx[8]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_7$4(ctx);
    					if_block1.c();
    					if_block1.m(span, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$4.name,
    		type: "if",
    		source: "(161:10) {#if all === 'label' || rest === 'label'}",
    		ctx
    	});

    	return block;
    }

    // (163:14) {#if prefix}
    function create_if_block_8$4(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*prefix*/ ctx[7]);
    			attr_dev(span, "class", "pipVal-prefix");
    			add_location(span, file$h, 162, 26, 4295);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prefix*/ 128) set_data_dev(t, /*prefix*/ ctx[7]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$4.name,
    		type: "if",
    		source: "(163:14) {#if prefix}",
    		ctx
    	});

    	return block;
    }

    // (163:98) {#if suffix}
    function create_if_block_7$4(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*suffix*/ ctx[8]);
    			attr_dev(span, "class", "pipVal-suffix");
    			add_location(span, file$h, 162, 110, 4379);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*suffix*/ 256) set_data_dev(t, /*suffix*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$4.name,
    		type: "if",
    		source: "(163:98) {#if suffix}",
    		ctx
    	});

    	return block;
    }

    // (154:4) {#each Array(pipCount + 1) as _, i}
    function create_each_block$a(ctx) {
    	let show_if = /*pipVal*/ ctx[14](/*i*/ ctx[23]) !== /*min*/ ctx[0] && /*pipVal*/ ctx[14](/*i*/ ctx[23]) !== /*max*/ ctx[1];
    	let if_block_anchor;
    	let if_block = show_if && create_if_block_5$4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*pipVal, min, max*/ 16387) show_if = /*pipVal*/ ctx[14](/*i*/ ctx[23]) !== /*min*/ ctx[0] && /*pipVal*/ ctx[14](/*i*/ ctx[23]) !== /*max*/ ctx[1];

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_5$4(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(154:4) {#each Array(pipCount + 1) as _, i}",
    		ctx
    	});

    	return block;
    }

    // (170:2) {#if ( all && last !== false ) || last}
    function create_if_block$c(ctx) {
    	let span;
    	let span_style_value;
    	let if_block = (/*all*/ ctx[3] === 'label' || /*last*/ ctx[5] === 'label') && create_if_block_1$8(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (if_block) if_block.c();
    			attr_dev(span, "class", "pip last");
    			attr_dev(span, "style", span_style_value = "" + ((/*vertical*/ ctx[2] ? 'top' : 'left') + ": 100%;"));
    			toggle_class(span, "selected", /*isSelected*/ ctx[13](/*max*/ ctx[1]));
    			toggle_class(span, "in-range", /*inRange*/ ctx[12](/*max*/ ctx[1]));
    			add_location(span, file$h, 170, 4, 4558);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			if (if_block) if_block.m(span, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*all*/ ctx[3] === 'label' || /*last*/ ctx[5] === 'label') {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$8(ctx);
    					if_block.c();
    					if_block.m(span, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*vertical*/ 4 && span_style_value !== (span_style_value = "" + ((/*vertical*/ ctx[2] ? 'top' : 'left') + ": 100%;"))) {
    				attr_dev(span, "style", span_style_value);
    			}

    			if (dirty & /*isSelected, max*/ 8194) {
    				toggle_class(span, "selected", /*isSelected*/ ctx[13](/*max*/ ctx[1]));
    			}

    			if (dirty & /*inRange, max*/ 4098) {
    				toggle_class(span, "in-range", /*inRange*/ ctx[12](/*max*/ ctx[1]));
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(170:2) {#if ( all && last !== false ) || last}",
    		ctx
    	});

    	return block;
    }

    // (176:6) {#if all === 'label' || last === 'label'}
    function create_if_block_1$8(ctx) {
    	let span;
    	let t_value = /*formatter*/ ctx[9](/*max*/ ctx[1], /*pipCount*/ ctx[15]) + "";
    	let t;
    	let if_block0 = /*prefix*/ ctx[7] && create_if_block_3$5(ctx);
    	let if_block1 = /*suffix*/ ctx[8] && create_if_block_2$7(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (if_block0) if_block0.c();
    			t = text(t_value);
    			if (if_block1) if_block1.c();
    			attr_dev(span, "class", "pipVal");
    			add_location(span, file$h, 176, 8, 4768);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			if (if_block0) if_block0.m(span, null);
    			append_dev(span, t);
    			if (if_block1) if_block1.m(span, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*prefix*/ ctx[7]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_3$5(ctx);
    					if_block0.c();
    					if_block0.m(span, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*formatter, max, pipCount*/ 33282 && t_value !== (t_value = /*formatter*/ ctx[9](/*max*/ ctx[1], /*pipCount*/ ctx[15]) + "")) set_data_dev(t, t_value);

    			if (/*suffix*/ ctx[8]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_2$7(ctx);
    					if_block1.c();
    					if_block1.m(span, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(176:6) {#if all === 'label' || last === 'label'}",
    		ctx
    	});

    	return block;
    }

    // (178:10) {#if prefix}
    function create_if_block_3$5(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*prefix*/ ctx[7]);
    			attr_dev(span, "class", "pipVal-prefix");
    			add_location(span, file$h, 177, 22, 4812);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prefix*/ 128) set_data_dev(t, /*prefix*/ ctx[7]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$5.name,
    		type: "if",
    		source: "(178:10) {#if prefix}",
    		ctx
    	});

    	return block;
    }

    // (178:95) {#if suffix}
    function create_if_block_2$7(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*suffix*/ ctx[8]);
    			attr_dev(span, "class", "pipVal-suffix");
    			add_location(span, file$h, 177, 107, 4897);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*suffix*/ 256) set_data_dev(t, /*suffix*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$7.name,
    		type: "if",
    		source: "(178:95) {#if suffix}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let if_block0 = (/*all*/ ctx[3] && /*first*/ ctx[4] !== false || /*first*/ ctx[4]) && create_if_block_9$4(ctx);
    	let if_block1 = (/*all*/ ctx[3] && /*rest*/ ctx[6] !== false || /*rest*/ ctx[6]) && create_if_block_4$5(ctx);
    	let if_block2 = (/*all*/ ctx[3] && /*last*/ ctx[5] !== false || /*last*/ ctx[5]) && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(div, "class", "rangePips");
    			toggle_class(div, "focus", /*focus*/ ctx[10]);
    			toggle_class(div, "vertical", /*vertical*/ ctx[2]);
    			add_location(div, file$h, 138, 0, 3317);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*all*/ ctx[3] && /*first*/ ctx[4] !== false || /*first*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_9$4(ctx);
    					if_block0.c();
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*all*/ ctx[3] && /*rest*/ ctx[6] !== false || /*rest*/ ctx[6]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_4$5(ctx);
    					if_block1.c();
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*all*/ ctx[3] && /*last*/ ctx[5] !== false || /*last*/ ctx[5]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$c(ctx);
    					if_block2.c();
    					if_block2.m(div, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (dirty & /*focus*/ 1024) {
    				toggle_class(div, "focus", /*focus*/ ctx[10]);
    			}

    			if (dirty & /*vertical*/ 4) {
    				toggle_class(div, "vertical", /*vertical*/ ctx[2]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let pipStep;
    	let pipCount;
    	let pipVal;
    	let isSelected;
    	let inRange;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('RangePips', slots, []);
    	let { range = false } = $$props;
    	let { min = 0 } = $$props;
    	let { max = 100 } = $$props;
    	let { step = 1 } = $$props;
    	let { values = [(max + min) / 2] } = $$props;
    	let { vertical = false } = $$props;
    	let { pipstep = undefined } = $$props;
    	let { all = true } = $$props;
    	let { first = undefined } = $$props;
    	let { last = undefined } = $$props;
    	let { rest = undefined } = $$props;
    	let { prefix = "" } = $$props;
    	let { suffix = "" } = $$props;
    	let { formatter = (v, i) => v } = $$props;
    	let { focus = undefined } = $$props;
    	let { percentOf = undefined } = $$props;

    	const writable_props = [
    		'range',
    		'min',
    		'max',
    		'step',
    		'values',
    		'vertical',
    		'pipstep',
    		'all',
    		'first',
    		'last',
    		'rest',
    		'prefix',
    		'suffix',
    		'formatter',
    		'focus',
    		'percentOf'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<RangePips> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('range' in $$props) $$invalidate(16, range = $$props.range);
    		if ('min' in $$props) $$invalidate(0, min = $$props.min);
    		if ('max' in $$props) $$invalidate(1, max = $$props.max);
    		if ('step' in $$props) $$invalidate(17, step = $$props.step);
    		if ('values' in $$props) $$invalidate(18, values = $$props.values);
    		if ('vertical' in $$props) $$invalidate(2, vertical = $$props.vertical);
    		if ('pipstep' in $$props) $$invalidate(19, pipstep = $$props.pipstep);
    		if ('all' in $$props) $$invalidate(3, all = $$props.all);
    		if ('first' in $$props) $$invalidate(4, first = $$props.first);
    		if ('last' in $$props) $$invalidate(5, last = $$props.last);
    		if ('rest' in $$props) $$invalidate(6, rest = $$props.rest);
    		if ('prefix' in $$props) $$invalidate(7, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(8, suffix = $$props.suffix);
    		if ('formatter' in $$props) $$invalidate(9, formatter = $$props.formatter);
    		if ('focus' in $$props) $$invalidate(10, focus = $$props.focus);
    		if ('percentOf' in $$props) $$invalidate(11, percentOf = $$props.percentOf);
    	};

    	$$self.$capture_state = () => ({
    		range,
    		min,
    		max,
    		step,
    		values,
    		vertical,
    		pipstep,
    		all,
    		first,
    		last,
    		rest,
    		prefix,
    		suffix,
    		formatter,
    		focus,
    		percentOf,
    		inRange,
    		isSelected,
    		pipStep,
    		pipVal,
    		pipCount
    	});

    	$$self.$inject_state = $$props => {
    		if ('range' in $$props) $$invalidate(16, range = $$props.range);
    		if ('min' in $$props) $$invalidate(0, min = $$props.min);
    		if ('max' in $$props) $$invalidate(1, max = $$props.max);
    		if ('step' in $$props) $$invalidate(17, step = $$props.step);
    		if ('values' in $$props) $$invalidate(18, values = $$props.values);
    		if ('vertical' in $$props) $$invalidate(2, vertical = $$props.vertical);
    		if ('pipstep' in $$props) $$invalidate(19, pipstep = $$props.pipstep);
    		if ('all' in $$props) $$invalidate(3, all = $$props.all);
    		if ('first' in $$props) $$invalidate(4, first = $$props.first);
    		if ('last' in $$props) $$invalidate(5, last = $$props.last);
    		if ('rest' in $$props) $$invalidate(6, rest = $$props.rest);
    		if ('prefix' in $$props) $$invalidate(7, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(8, suffix = $$props.suffix);
    		if ('formatter' in $$props) $$invalidate(9, formatter = $$props.formatter);
    		if ('focus' in $$props) $$invalidate(10, focus = $$props.focus);
    		if ('percentOf' in $$props) $$invalidate(11, percentOf = $$props.percentOf);
    		if ('inRange' in $$props) $$invalidate(12, inRange = $$props.inRange);
    		if ('isSelected' in $$props) $$invalidate(13, isSelected = $$props.isSelected);
    		if ('pipStep' in $$props) $$invalidate(20, pipStep = $$props.pipStep);
    		if ('pipVal' in $$props) $$invalidate(14, pipVal = $$props.pipVal);
    		if ('pipCount' in $$props) $$invalidate(15, pipCount = $$props.pipCount);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*pipstep, max, min, step, vertical*/ 655367) {
    			$$invalidate(20, pipStep = pipstep || ((max - min) / step >= (vertical ? 50 : 100)
    			? (max - min) / (vertical ? 10 : 20)
    			: 1));
    		}

    		if ($$self.$$.dirty & /*max, min, step, pipStep*/ 1179651) {
    			$$invalidate(15, pipCount = parseInt((max - min) / (step * pipStep), 10));
    		}

    		if ($$self.$$.dirty & /*min, step, pipStep*/ 1179649) {
    			$$invalidate(14, pipVal = function (val) {
    				return min + val * step * pipStep;
    			});
    		}

    		if ($$self.$$.dirty & /*values*/ 262144) {
    			$$invalidate(13, isSelected = function (val) {
    				return values.some(v => v === val);
    			});
    		}

    		if ($$self.$$.dirty & /*range, values*/ 327680) {
    			$$invalidate(12, inRange = function (val) {
    				if (range === "min") {
    					return values[0] > val;
    				} else if (range === "max") {
    					return values[0] < val;
    				} else if (range) {
    					return values[0] < val && values[1] > val;
    				}
    			});
    		}
    	};

    	return [
    		min,
    		max,
    		vertical,
    		all,
    		first,
    		last,
    		rest,
    		prefix,
    		suffix,
    		formatter,
    		focus,
    		percentOf,
    		inRange,
    		isSelected,
    		pipVal,
    		pipCount,
    		range,
    		step,
    		values,
    		pipstep,
    		pipStep
    	];
    }

    class RangePips extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$i, create_fragment$i, safe_not_equal, {
    			range: 16,
    			min: 0,
    			max: 1,
    			step: 17,
    			values: 18,
    			vertical: 2,
    			pipstep: 19,
    			all: 3,
    			first: 4,
    			last: 5,
    			rest: 6,
    			prefix: 7,
    			suffix: 8,
    			formatter: 9,
    			focus: 10,
    			percentOf: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "RangePips",
    			options,
    			id: create_fragment$i.name
    		});
    	}

    	get range() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set range(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get min() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set min(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get step() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set step(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get values() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set values(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vertical() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vertical(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pipstep() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pipstep(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get all() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set all(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get first() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set first(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get last() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set last(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rest() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rest(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get suffix() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set suffix(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get formatter() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formatter(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set focus(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get percentOf() {
    		throw new Error("<RangePips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set percentOf(value) {
    		throw new Error("<RangePips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-range-slider-pips/src/RangeSlider.svelte generated by Svelte v3.44.2 */

    const { console: console_1$1 } = globals;
    const file$g = "node_modules/svelte-range-slider-pips/src/RangeSlider.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[60] = list[i];
    	child_ctx[62] = i;
    	return child_ctx;
    }

    // (779:6) {#if float}
    function create_if_block_2$6(ctx) {
    	let span;
    	let t_value = /*handleFormatter*/ ctx[19](/*value*/ ctx[60], /*index*/ ctx[62]) + "";
    	let t;
    	let if_block0 = /*prefix*/ ctx[16] && create_if_block_4$4(ctx);
    	let if_block1 = /*suffix*/ ctx[17] && create_if_block_3$4(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (if_block0) if_block0.c();
    			t = text(t_value);
    			if (if_block1) if_block1.c();
    			attr_dev(span, "class", "rangeFloat");
    			add_location(span, file$g, 779, 8, 22468);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			if (if_block0) if_block0.m(span, null);
    			append_dev(span, t);
    			if (if_block1) if_block1.m(span, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*prefix*/ ctx[16]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4$4(ctx);
    					if_block0.c();
    					if_block0.m(span, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty[0] & /*handleFormatter, values*/ 524289 && t_value !== (t_value = /*handleFormatter*/ ctx[19](/*value*/ ctx[60], /*index*/ ctx[62]) + "")) set_data_dev(t, t_value);

    			if (/*suffix*/ ctx[17]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_3$4(ctx);
    					if_block1.c();
    					if_block1.m(span, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(779:6) {#if float}",
    		ctx
    	});

    	return block;
    }

    // (781:10) {#if prefix}
    function create_if_block_4$4(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*prefix*/ ctx[16]);
    			attr_dev(span, "class", "rangeFloat-prefix");
    			add_location(span, file$g, 780, 22, 22516);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*prefix*/ 65536) set_data_dev(t, /*prefix*/ ctx[16]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$4.name,
    		type: "if",
    		source: "(781:10) {#if prefix}",
    		ctx
    	});

    	return block;
    }

    // (781:104) {#if suffix}
    function create_if_block_3$4(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*suffix*/ ctx[17]);
    			attr_dev(span, "class", "rangeFloat-suffix");
    			add_location(span, file$g, 780, 116, 22610);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*suffix*/ 131072) set_data_dev(t, /*suffix*/ ctx[17]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(781:104) {#if suffix}",
    		ctx
    	});

    	return block;
    }

    // (757:2) {#each values as value, index}
    function create_each_block$9(ctx) {
    	let span1;
    	let span0;
    	let t;
    	let span1_style_value;
    	let span1_aria_valuemin_value;
    	let span1_aria_valuemax_value;
    	let span1_aria_valuenow_value;
    	let span1_aria_valuetext_value;
    	let span1_aria_orientation_value;
    	let span1_tabindex_value;
    	let mounted;
    	let dispose;
    	let if_block = /*float*/ ctx[6] && create_if_block_2$6(ctx);

    	const block = {
    		c: function create() {
    			span1 = element("span");
    			span0 = element("span");
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(span0, "class", "rangeNub");
    			add_location(span0, file$g, 777, 6, 22416);
    			attr_dev(span1, "role", "slider");
    			attr_dev(span1, "class", "rangeHandle");
    			attr_dev(span1, "data-handle", /*index*/ ctx[62]);
    			attr_dev(span1, "style", span1_style_value = "" + ((/*vertical*/ ctx[5] ? 'top' : 'left') + ": " + /*$springPositions*/ ctx[26][/*index*/ ctx[62]] + "%; z-index: " + (/*activeHandle*/ ctx[25] === /*index*/ ctx[62] ? 3 : 2) + ";"));

    			attr_dev(span1, "aria-valuemin", span1_aria_valuemin_value = /*range*/ ctx[1] === true && /*index*/ ctx[62] === 1
    			? /*values*/ ctx[0][0]
    			: /*min*/ ctx[2]);

    			attr_dev(span1, "aria-valuemax", span1_aria_valuemax_value = /*range*/ ctx[1] === true && /*index*/ ctx[62] === 0
    			? /*values*/ ctx[0][1]
    			: /*max*/ ctx[3]);

    			attr_dev(span1, "aria-valuenow", span1_aria_valuenow_value = /*value*/ ctx[60]);
    			attr_dev(span1, "aria-valuetext", span1_aria_valuetext_value = "" + (/*prefix*/ ctx[16] + /*handleFormatter*/ ctx[19](/*value*/ ctx[60], /*index*/ ctx[62]) + /*suffix*/ ctx[17]));
    			attr_dev(span1, "aria-orientation", span1_aria_orientation_value = /*vertical*/ ctx[5] ? 'vertical' : 'horizontal');
    			attr_dev(span1, "aria-disabled", /*disabled*/ ctx[8]);
    			attr_dev(span1, "disabled", /*disabled*/ ctx[8]);
    			attr_dev(span1, "tabindex", span1_tabindex_value = /*disabled*/ ctx[8] ? -1 : 0);
    			toggle_class(span1, "hoverable", /*hover*/ ctx[7] && !/*disabled*/ ctx[8]);
    			toggle_class(span1, "active", /*focus*/ ctx[23] && /*activeHandle*/ ctx[25] === /*index*/ ctx[62]);
    			toggle_class(span1, "press", /*handlePressed*/ ctx[24] && /*activeHandle*/ ctx[25] === /*index*/ ctx[62]);
    			add_location(span1, file$g, 757, 4, 21568);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span1, anchor);
    			append_dev(span1, span0);
    			append_dev(span1, t);
    			if (if_block) if_block.m(span1, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(span1, "blur", /*sliderBlurHandle*/ ctx[29], false, false, false),
    					listen_dev(span1, "focus", /*sliderFocusHandle*/ ctx[30], false, false, false),
    					listen_dev(span1, "keydown", /*sliderKeydown*/ ctx[31], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*float*/ ctx[6]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_2$6(ctx);
    					if_block.c();
    					if_block.m(span1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*vertical, $springPositions, activeHandle*/ 100663328 && span1_style_value !== (span1_style_value = "" + ((/*vertical*/ ctx[5] ? 'top' : 'left') + ": " + /*$springPositions*/ ctx[26][/*index*/ ctx[62]] + "%; z-index: " + (/*activeHandle*/ ctx[25] === /*index*/ ctx[62] ? 3 : 2) + ";"))) {
    				attr_dev(span1, "style", span1_style_value);
    			}

    			if (dirty[0] & /*range, values, min*/ 7 && span1_aria_valuemin_value !== (span1_aria_valuemin_value = /*range*/ ctx[1] === true && /*index*/ ctx[62] === 1
    			? /*values*/ ctx[0][0]
    			: /*min*/ ctx[2])) {
    				attr_dev(span1, "aria-valuemin", span1_aria_valuemin_value);
    			}

    			if (dirty[0] & /*range, values, max*/ 11 && span1_aria_valuemax_value !== (span1_aria_valuemax_value = /*range*/ ctx[1] === true && /*index*/ ctx[62] === 0
    			? /*values*/ ctx[0][1]
    			: /*max*/ ctx[3])) {
    				attr_dev(span1, "aria-valuemax", span1_aria_valuemax_value);
    			}

    			if (dirty[0] & /*values*/ 1 && span1_aria_valuenow_value !== (span1_aria_valuenow_value = /*value*/ ctx[60])) {
    				attr_dev(span1, "aria-valuenow", span1_aria_valuenow_value);
    			}

    			if (dirty[0] & /*prefix, handleFormatter, values, suffix*/ 720897 && span1_aria_valuetext_value !== (span1_aria_valuetext_value = "" + (/*prefix*/ ctx[16] + /*handleFormatter*/ ctx[19](/*value*/ ctx[60], /*index*/ ctx[62]) + /*suffix*/ ctx[17]))) {
    				attr_dev(span1, "aria-valuetext", span1_aria_valuetext_value);
    			}

    			if (dirty[0] & /*vertical*/ 32 && span1_aria_orientation_value !== (span1_aria_orientation_value = /*vertical*/ ctx[5] ? 'vertical' : 'horizontal')) {
    				attr_dev(span1, "aria-orientation", span1_aria_orientation_value);
    			}

    			if (dirty[0] & /*disabled*/ 256) {
    				attr_dev(span1, "aria-disabled", /*disabled*/ ctx[8]);
    			}

    			if (dirty[0] & /*disabled*/ 256) {
    				attr_dev(span1, "disabled", /*disabled*/ ctx[8]);
    			}

    			if (dirty[0] & /*disabled*/ 256 && span1_tabindex_value !== (span1_tabindex_value = /*disabled*/ ctx[8] ? -1 : 0)) {
    				attr_dev(span1, "tabindex", span1_tabindex_value);
    			}

    			if (dirty[0] & /*hover, disabled*/ 384) {
    				toggle_class(span1, "hoverable", /*hover*/ ctx[7] && !/*disabled*/ ctx[8]);
    			}

    			if (dirty[0] & /*focus, activeHandle*/ 41943040) {
    				toggle_class(span1, "active", /*focus*/ ctx[23] && /*activeHandle*/ ctx[25] === /*index*/ ctx[62]);
    			}

    			if (dirty[0] & /*handlePressed, activeHandle*/ 50331648) {
    				toggle_class(span1, "press", /*handlePressed*/ ctx[24] && /*activeHandle*/ ctx[25] === /*index*/ ctx[62]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span1);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(757:2) {#each values as value, index}",
    		ctx
    	});

    	return block;
    }

    // (786:2) {#if range}
    function create_if_block_1$7(ctx) {
    	let span;
    	let span_style_value;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "rangeBar");
    			attr_dev(span, "style", span_style_value = "" + ((/*vertical*/ ctx[5] ? 'top' : 'left') + ": " + /*rangeStart*/ ctx[27](/*$springPositions*/ ctx[26]) + "%; " + (/*vertical*/ ctx[5] ? 'bottom' : 'right') + ": " + /*rangeEnd*/ ctx[28](/*$springPositions*/ ctx[26]) + "%;"));
    			add_location(span, file$g, 786, 4, 22731);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*vertical, $springPositions*/ 67108896 && span_style_value !== (span_style_value = "" + ((/*vertical*/ ctx[5] ? 'top' : 'left') + ": " + /*rangeStart*/ ctx[27](/*$springPositions*/ ctx[26]) + "%; " + (/*vertical*/ ctx[5] ? 'bottom' : 'right') + ": " + /*rangeEnd*/ ctx[28](/*$springPositions*/ ctx[26]) + "%;"))) {
    				attr_dev(span, "style", span_style_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(786:2) {#if range}",
    		ctx
    	});

    	return block;
    }

    // (792:2) {#if pips}
    function create_if_block$b(ctx) {
    	let rangepips;
    	let current;

    	rangepips = new RangePips({
    			props: {
    				values: /*values*/ ctx[0],
    				min: /*min*/ ctx[2],
    				max: /*max*/ ctx[3],
    				step: /*step*/ ctx[4],
    				range: /*range*/ ctx[1],
    				vertical: /*vertical*/ ctx[5],
    				all: /*all*/ ctx[11],
    				first: /*first*/ ctx[12],
    				last: /*last*/ ctx[13],
    				rest: /*rest*/ ctx[14],
    				pipstep: /*pipstep*/ ctx[10],
    				prefix: /*prefix*/ ctx[16],
    				suffix: /*suffix*/ ctx[17],
    				formatter: /*formatter*/ ctx[18],
    				focus: /*focus*/ ctx[23],
    				percentOf: /*percentOf*/ ctx[21]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(rangepips.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(rangepips, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const rangepips_changes = {};
    			if (dirty[0] & /*values*/ 1) rangepips_changes.values = /*values*/ ctx[0];
    			if (dirty[0] & /*min*/ 4) rangepips_changes.min = /*min*/ ctx[2];
    			if (dirty[0] & /*max*/ 8) rangepips_changes.max = /*max*/ ctx[3];
    			if (dirty[0] & /*step*/ 16) rangepips_changes.step = /*step*/ ctx[4];
    			if (dirty[0] & /*range*/ 2) rangepips_changes.range = /*range*/ ctx[1];
    			if (dirty[0] & /*vertical*/ 32) rangepips_changes.vertical = /*vertical*/ ctx[5];
    			if (dirty[0] & /*all*/ 2048) rangepips_changes.all = /*all*/ ctx[11];
    			if (dirty[0] & /*first*/ 4096) rangepips_changes.first = /*first*/ ctx[12];
    			if (dirty[0] & /*last*/ 8192) rangepips_changes.last = /*last*/ ctx[13];
    			if (dirty[0] & /*rest*/ 16384) rangepips_changes.rest = /*rest*/ ctx[14];
    			if (dirty[0] & /*pipstep*/ 1024) rangepips_changes.pipstep = /*pipstep*/ ctx[10];
    			if (dirty[0] & /*prefix*/ 65536) rangepips_changes.prefix = /*prefix*/ ctx[16];
    			if (dirty[0] & /*suffix*/ 131072) rangepips_changes.suffix = /*suffix*/ ctx[17];
    			if (dirty[0] & /*formatter*/ 262144) rangepips_changes.formatter = /*formatter*/ ctx[18];
    			if (dirty[0] & /*focus*/ 8388608) rangepips_changes.focus = /*focus*/ ctx[23];
    			if (dirty[0] & /*percentOf*/ 2097152) rangepips_changes.percentOf = /*percentOf*/ ctx[21];
    			rangepips.$set(rangepips_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(rangepips.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(rangepips.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(rangepips, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(792:2) {#if pips}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*values*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	let if_block0 = /*range*/ ctx[1] && create_if_block_1$7(ctx);
    	let if_block1 = /*pips*/ ctx[9] && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "id", /*id*/ ctx[15]);
    			attr_dev(div, "class", "rangeSlider");
    			toggle_class(div, "range", /*range*/ ctx[1]);
    			toggle_class(div, "disabled", /*disabled*/ ctx[8]);
    			toggle_class(div, "vertical", /*vertical*/ ctx[5]);
    			toggle_class(div, "focus", /*focus*/ ctx[23]);
    			toggle_class(div, "min", /*range*/ ctx[1] === 'min');
    			toggle_class(div, "max", /*range*/ ctx[1] === 'max');
    			toggle_class(div, "pips", /*pips*/ ctx[9]);
    			toggle_class(div, "pip-labels", /*all*/ ctx[11] === 'label' || /*first*/ ctx[12] === 'label' || /*last*/ ctx[13] === 'label' || /*rest*/ ctx[14] === 'label');
    			add_location(div, file$g, 739, 0, 21069);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			append_dev(div, t0);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t1);
    			if (if_block1) if_block1.m(div, null);
    			/*div_binding*/ ctx[45](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "mousedown", /*bodyInteractStart*/ ctx[34], false, false, false),
    					listen_dev(window, "touchstart", /*bodyInteractStart*/ ctx[34], false, false, false),
    					listen_dev(window, "mousemove", /*bodyInteract*/ ctx[35], false, false, false),
    					listen_dev(window, "touchmove", /*bodyInteract*/ ctx[35], false, false, false),
    					listen_dev(window, "mouseup", /*bodyMouseUp*/ ctx[36], false, false, false),
    					listen_dev(window, "touchend", /*bodyTouchEnd*/ ctx[37], false, false, false),
    					listen_dev(window, "keydown", /*bodyKeyDown*/ ctx[38], false, false, false),
    					listen_dev(div, "mousedown", /*sliderInteractStart*/ ctx[32], false, false, false),
    					listen_dev(div, "mouseup", /*sliderInteractEnd*/ ctx[33], false, false, false),
    					listen_dev(div, "touchstart", prevent_default(/*sliderInteractStart*/ ctx[32]), false, true, false),
    					listen_dev(div, "touchend", prevent_default(/*sliderInteractEnd*/ ctx[33]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*vertical, $springPositions, activeHandle, range, values, min, max, prefix, handleFormatter, suffix, disabled, hover, focus, handlePressed, sliderBlurHandle, sliderFocusHandle, float*/ 1737163247 | dirty[1] & /*sliderKeydown*/ 1) {
    				each_value = /*values*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, t0);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*range*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$7(ctx);
    					if_block0.c();
    					if_block0.m(div, t1);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*pips*/ ctx[9]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*pips*/ 512) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$b(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty[0] & /*id*/ 32768) {
    				attr_dev(div, "id", /*id*/ ctx[15]);
    			}

    			if (dirty[0] & /*range*/ 2) {
    				toggle_class(div, "range", /*range*/ ctx[1]);
    			}

    			if (dirty[0] & /*disabled*/ 256) {
    				toggle_class(div, "disabled", /*disabled*/ ctx[8]);
    			}

    			if (dirty[0] & /*vertical*/ 32) {
    				toggle_class(div, "vertical", /*vertical*/ ctx[5]);
    			}

    			if (dirty[0] & /*focus*/ 8388608) {
    				toggle_class(div, "focus", /*focus*/ ctx[23]);
    			}

    			if (dirty[0] & /*range*/ 2) {
    				toggle_class(div, "min", /*range*/ ctx[1] === 'min');
    			}

    			if (dirty[0] & /*range*/ 2) {
    				toggle_class(div, "max", /*range*/ ctx[1] === 'max');
    			}

    			if (dirty[0] & /*pips*/ 512) {
    				toggle_class(div, "pips", /*pips*/ ctx[9]);
    			}

    			if (dirty[0] & /*all, first, last, rest*/ 30720) {
    				toggle_class(div, "pip-labels", /*all*/ ctx[11] === 'label' || /*first*/ ctx[12] === 'label' || /*last*/ ctx[13] === 'label' || /*rest*/ ctx[14] === 'label');
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			/*div_binding*/ ctx[45](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function index(el) {
    	if (!el) return -1;
    	var i = 0;

    	while (el = el.previousElementSibling) {
    		i++;
    	}

    	return i;
    }

    /**
     * noramlise a mouse or touch event to return the
     * client (x/y) object for that event
     * @param {event} e a mouse/touch event to normalise
     * @returns {object} normalised event client object (x,y)
     **/
    function normalisedClient(e) {
    	if (e.type.includes("touch")) {
    		return e.touches[0];
    	} else {
    		return e;
    	}
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let percentOf;
    	let clampValue;
    	let alignValueToStep;

    	let $springPositions,
    		$$unsubscribe_springPositions = noop$1,
    		$$subscribe_springPositions = () => ($$unsubscribe_springPositions(), $$unsubscribe_springPositions = subscribe(springPositions, $$value => $$invalidate(26, $springPositions = $$value)), springPositions);

    	$$self.$$.on_destroy.push(() => $$unsubscribe_springPositions());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('RangeSlider', slots, []);
    	let { range = false } = $$props;
    	let { pushy = false } = $$props;
    	let { min = 0 } = $$props;
    	let { max = 100 } = $$props;
    	let { step = 1 } = $$props;
    	let { values = [(max + min) / 2] } = $$props;
    	let { vertical = false } = $$props;
    	let { float = false } = $$props;
    	let { hover = true } = $$props;
    	let { disabled = false } = $$props;
    	let { pips = false } = $$props;
    	let { pipstep = undefined } = $$props;
    	let { all = undefined } = $$props;
    	let { first = undefined } = $$props;
    	let { last = undefined } = $$props;
    	let { rest = undefined } = $$props;
    	let { id = undefined } = $$props;
    	let { prefix = "" } = $$props;
    	let { suffix = "" } = $$props;
    	let { formatter = (v, i) => v } = $$props;
    	let { handleFormatter = formatter } = $$props;
    	let { precision = 2 } = $$props;
    	let { springValues = { stiffness: 0.15, damping: 0.4 } } = $$props;

    	// prepare dispatched events
    	const dispatch = createEventDispatcher();

    	// dom references
    	let slider;

    	// state management
    	let valueLength = 0;

    	let focus = false;
    	let handleActivated = false;
    	let handlePressed = false;
    	let keyboardActive = false;
    	let activeHandle = values.length - 1;
    	let startValue;
    	let previousValue;

    	// copy the initial values in to a spring function which
    	// will update every time the values array is modified
    	let springPositions;

    	/**
     * check if an element is a handle on the slider
     * @param {object} el dom object reference we want to check
     * @returns {boolean}
     **/
    	function targetIsHandle(el) {
    		const handles = slider.querySelectorAll(".handle");
    		const isHandle = Array.prototype.includes.call(handles, el);
    		const isChild = Array.prototype.some.call(handles, e => e.contains(el));
    		return isHandle || isChild;
    	}

    	/**
     * trim the values array based on whether the property
     * for 'range' is 'min', 'max', or truthy. This is because we
     * do not want more than one handle for a min/max range, and we do
     * not want more than two handles for a true range.
     * @param {array} values the input values for the rangeSlider
     * @return {array} the range array for creating a rangeSlider
     **/
    	function trimRange(values) {
    		if (range === "min" || range === "max") {
    			return values.slice(0, 1);
    		} else if (range) {
    			return values.slice(0, 2);
    		} else {
    			return values;
    		}
    	}

    	/**
     * helper to return the slider dimensions for finding
     * the closest handle to user interaction
     * @return {object} the range slider DOM client rect
     **/
    	function getSliderDimensions() {
    		return slider.getBoundingClientRect();
    	}

    	/**
     * helper to return closest handle to user interaction
     * @param {object} clientPos the client{x,y} positions to check against
     * @return {number} the index of the closest handle to clientPos
     **/
    	function getClosestHandle(clientPos) {
    		// first make sure we have the latest dimensions
    		// of the slider, as it may have changed size
    		const dims = getSliderDimensions();

    		// calculate the interaction position, percent and value
    		let hPos = 0;

    		let hPercent = 0;
    		let hVal = 0;

    		if (vertical) {
    			hPos = clientPos.clientY - dims.top;
    			hPercent = hPos / dims.height * 100;
    			hVal = (max - min) / 100 * hPercent + min;
    		} else {
    			hPos = clientPos.clientX - dims.left;
    			hPercent = hPos / dims.width * 100;
    			hVal = (max - min) / 100 * hPercent + min;
    		}

    		let closest;

    		// if we have a range, and the handles are at the same
    		// position, we want a simple check if the interaction
    		// value is greater than return the second handle
    		if (range === true && values[0] === values[1]) {
    			if (hVal > values[1]) {
    				return 1;
    			} else {
    				return 0;
    			}
    		} else // we sort the handles values, and return the first one closest
    		// to the interaction value
    		{
    			closest = values.indexOf([...values].sort((a, b) => Math.abs(hVal - a) - Math.abs(hVal - b))[0]); // if there are multiple handles, and not a range, then
    		}

    		return closest;
    	}

    	/**
     * take the interaction position on the slider, convert
     * it to a value on the range, and then send that value
     * through to the moveHandle() method to set the active
     * handle's position
     * @param {object} clientPos the client{x,y} of the interaction
     **/
    	function handleInteract(clientPos) {
    		// first make sure we have the latest dimensions
    		// of the slider, as it may have changed size
    		const dims = getSliderDimensions();

    		// calculate the interaction position, percent and value
    		let hPos = 0;

    		let hPercent = 0;
    		let hVal = 0;

    		if (vertical) {
    			hPos = clientPos.clientY - dims.top;
    			hPercent = hPos / dims.height * 100;
    			hVal = (max - min) / 100 * hPercent + min;
    		} else {
    			hPos = clientPos.clientX - dims.left;
    			hPercent = hPos / dims.width * 100;
    			hVal = (max - min) / 100 * hPercent + min;
    		}

    		// move handle to the value
    		moveHandle(activeHandle, hVal);
    	}

    	/**
     * move a handle to a specific value, respecting the clamp/align rules
     * @param {number} index the index of the handle we want to move
     * @param {number} value the value to move the handle to
     * @return {number} the value that was moved to (after alignment/clamping)
     **/
    	function moveHandle(index, value) {
    		// align & clamp the value so we're not doing extra
    		// calculation on an out-of-range value down below
    		value = alignValueToStep(value);

    		// if this is a range slider
    		if (range) {
    			// restrict the handles of a range-slider from
    			// going past one-another unless "pushy" is true
    			if (index === 0 && value > values[1]) {
    				if (pushy) {
    					$$invalidate(0, values[1] = value, values);
    				} else {
    					value = values[1];
    				}
    			} else if (index === 1 && value < values[0]) {
    				if (pushy) {
    					$$invalidate(0, values[0] = value, values);
    				} else {
    					value = values[0];
    				}
    			}
    		}

    		// if the value has changed, update it
    		if (values[index] !== value) {
    			$$invalidate(0, values[index] = value, values);
    		}

    		// fire the change event when the handle moves,
    		// and store the previous value for the next time
    		if (previousValue !== value) {
    			eChange();
    			previousValue = value;
    		}
    	}

    	/**
     * helper to find the beginning range value for use with css style
     * @param {array} values the input values for the rangeSlider
     * @return {number} the beginning of the range
     **/
    	function rangeStart(values) {
    		if (range === "min") {
    			return 0;
    		} else {
    			return values[0];
    		}
    	}

    	/**
     * helper to find the ending range value for use with css style
     * @param {array} values the input values for the rangeSlider
     * @return {number} the end of the range
     **/
    	function rangeEnd(values) {
    		if (range === "max") {
    			return 0;
    		} else if (range === "min") {
    			return 100 - values[0];
    		} else {
    			return 100 - values[1];
    		}
    	}

    	/**
     * when the user has unfocussed (blurred) from the
     * slider, deactivated all handles
     * @param {event} e the event from browser
     **/
    	function sliderBlurHandle(e) {
    		if (keyboardActive) {
    			$$invalidate(23, focus = false);
    			handleActivated = false;
    			$$invalidate(24, handlePressed = false);
    		}
    	}

    	/**
     * when the user focusses the handle of a slider
     * set it to be active
     * @param {event} e the event from browser
     **/
    	function sliderFocusHandle(e) {
    		if (!disabled) {
    			$$invalidate(25, activeHandle = index(e.target));
    			$$invalidate(23, focus = true);
    		}
    	}

    	/**
     * handle the keyboard accessible features by checking the
     * input type, and modfier key then moving handle by appropriate amount
     * @param {event} e the event from browser
     **/
    	function sliderKeydown(e) {
    		if (!disabled) {
    			const handle = index(e.target);
    			let jump = e.ctrlKey || e.metaKey || e.shiftKey ? step * 10 : step;
    			let prevent = false;

    			switch (e.key) {
    				case "PageDown":
    					jump *= 10;
    				case "ArrowRight":
    				case "ArrowUp":
    					moveHandle(handle, values[handle] + jump);
    					prevent = true;
    					break;
    				case "PageUp":
    					jump *= 10;
    				case "ArrowLeft":
    				case "ArrowDown":
    					moveHandle(handle, values[handle] - jump);
    					prevent = true;
    					break;
    				case "Home":
    					moveHandle(handle, min);
    					prevent = true;
    					break;
    				case "End":
    					moveHandle(handle, max);
    					prevent = true;
    					break;
    			}

    			if (prevent) {
    				e.preventDefault();
    				e.stopPropagation();
    			}
    		}
    	}

    	/**
     * function to run when the user touches
     * down on the slider element anywhere
     * @param {event} e the event from browser
     **/
    	function sliderInteractStart(e) {
    		if (!disabled) {
    			const clientPos = normalisedClient(e);

    			// set the closest handle as active
    			$$invalidate(23, focus = true);

    			handleActivated = true;
    			$$invalidate(24, handlePressed = true);
    			$$invalidate(25, activeHandle = getClosestHandle(clientPos));

    			// fire the start event
    			startValue = previousValue = alignValueToStep(values[activeHandle]);

    			eStart();

    			// for touch devices we want the handle to instantly
    			// move to the position touched for more responsive feeling
    			if (e.type === "touchstart") {
    				handleInteract(clientPos);
    			}
    		}
    	}

    	/**
     * function to run when the user stops touching
     * down on the slider element anywhere
     * @param {event} e the event from browser
     **/
    	function sliderInteractEnd(e) {
    		// fire the stop event for touch devices
    		if (e.type === "touchend") {
    			eStop();
    		}

    		$$invalidate(24, handlePressed = false);
    	}

    	/**
     * unfocus the slider if the user clicked off of
     * it, somewhere else on the screen
     * @param {event} e the event from browser
     **/
    	function bodyInteractStart(e) {
    		keyboardActive = false;

    		if (focus && e.target !== slider && !slider.contains(e.target)) {
    			$$invalidate(23, focus = false);
    		}
    	}

    	/**
     * send the clientX through to handle the interaction
     * whenever the user moves acros screen while active
     * @param {event} e the event from browser
     **/
    	function bodyInteract(e) {
    		if (!disabled) {
    			if (handleActivated) {
    				handleInteract(normalisedClient(e));
    			}
    		}
    	}

    	/**
     * if user triggers mouseup on the body while
     * a handle is active (without moving) then we
     * trigger an interact event there
     * @param {event} e the event from browser
     **/
    	function bodyMouseUp(e) {
    		if (!disabled) {
    			const el = e.target;

    			// this only works if a handle is active, which can
    			// only happen if there was sliderInteractStart triggered
    			// on the slider, already
    			if (handleActivated) {
    				if (el === slider || slider.contains(el)) {
    					$$invalidate(23, focus = true);

    					if (!targetIsHandle(el)) {
    						handleInteract(normalisedClient(e));
    					}
    				}

    				// fire the stop event for mouse device
    				// when the body is triggered with an active handle
    				eStop();
    			}
    		}

    		handleActivated = false;
    		$$invalidate(24, handlePressed = false);
    	}

    	/**
     * if user triggers touchend on the body then we
     * defocus the slider completely
     * @param {event} e the event from browser
     **/
    	function bodyTouchEnd(e) {
    		handleActivated = false;
    		$$invalidate(24, handlePressed = false);
    	}

    	function bodyKeyDown(e) {
    		if (!disabled) {
    			if (e.target === slider || slider.contains(e.target)) {
    				keyboardActive = true;
    			}
    		}
    	}

    	function eStart() {
    		!disabled && dispatch("start", {
    			activeHandle,
    			value: startValue,
    			values: values.map(v => alignValueToStep(v))
    		});
    	}

    	function eStop() {
    		!disabled && dispatch("stop", {
    			activeHandle,
    			startValue,
    			value: values[activeHandle],
    			values: values.map(v => alignValueToStep(v))
    		});
    	}

    	function eChange() {
    		!disabled && dispatch("change", {
    			activeHandle,
    			startValue,
    			previousValue: typeof previousValue === "undefined"
    			? startValue
    			: previousValue,
    			value: values[activeHandle],
    			values: values.map(v => alignValueToStep(v))
    		});
    	}

    	const writable_props = [
    		'range',
    		'pushy',
    		'min',
    		'max',
    		'step',
    		'values',
    		'vertical',
    		'float',
    		'hover',
    		'disabled',
    		'pips',
    		'pipstep',
    		'all',
    		'first',
    		'last',
    		'rest',
    		'id',
    		'prefix',
    		'suffix',
    		'formatter',
    		'handleFormatter',
    		'precision',
    		'springValues'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<RangeSlider> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			slider = $$value;
    			$$invalidate(22, slider);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('range' in $$props) $$invalidate(1, range = $$props.range);
    		if ('pushy' in $$props) $$invalidate(39, pushy = $$props.pushy);
    		if ('min' in $$props) $$invalidate(2, min = $$props.min);
    		if ('max' in $$props) $$invalidate(3, max = $$props.max);
    		if ('step' in $$props) $$invalidate(4, step = $$props.step);
    		if ('values' in $$props) $$invalidate(0, values = $$props.values);
    		if ('vertical' in $$props) $$invalidate(5, vertical = $$props.vertical);
    		if ('float' in $$props) $$invalidate(6, float = $$props.float);
    		if ('hover' in $$props) $$invalidate(7, hover = $$props.hover);
    		if ('disabled' in $$props) $$invalidate(8, disabled = $$props.disabled);
    		if ('pips' in $$props) $$invalidate(9, pips = $$props.pips);
    		if ('pipstep' in $$props) $$invalidate(10, pipstep = $$props.pipstep);
    		if ('all' in $$props) $$invalidate(11, all = $$props.all);
    		if ('first' in $$props) $$invalidate(12, first = $$props.first);
    		if ('last' in $$props) $$invalidate(13, last = $$props.last);
    		if ('rest' in $$props) $$invalidate(14, rest = $$props.rest);
    		if ('id' in $$props) $$invalidate(15, id = $$props.id);
    		if ('prefix' in $$props) $$invalidate(16, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(17, suffix = $$props.suffix);
    		if ('formatter' in $$props) $$invalidate(18, formatter = $$props.formatter);
    		if ('handleFormatter' in $$props) $$invalidate(19, handleFormatter = $$props.handleFormatter);
    		if ('precision' in $$props) $$invalidate(40, precision = $$props.precision);
    		if ('springValues' in $$props) $$invalidate(41, springValues = $$props.springValues);
    	};

    	$$self.$capture_state = () => ({
    		spring,
    		createEventDispatcher,
    		RangePips,
    		range,
    		pushy,
    		min,
    		max,
    		step,
    		values,
    		vertical,
    		float,
    		hover,
    		disabled,
    		pips,
    		pipstep,
    		all,
    		first,
    		last,
    		rest,
    		id,
    		prefix,
    		suffix,
    		formatter,
    		handleFormatter,
    		precision,
    		springValues,
    		dispatch,
    		slider,
    		valueLength,
    		focus,
    		handleActivated,
    		handlePressed,
    		keyboardActive,
    		activeHandle,
    		startValue,
    		previousValue,
    		springPositions,
    		index,
    		normalisedClient,
    		targetIsHandle,
    		trimRange,
    		getSliderDimensions,
    		getClosestHandle,
    		handleInteract,
    		moveHandle,
    		rangeStart,
    		rangeEnd,
    		sliderBlurHandle,
    		sliderFocusHandle,
    		sliderKeydown,
    		sliderInteractStart,
    		sliderInteractEnd,
    		bodyInteractStart,
    		bodyInteract,
    		bodyMouseUp,
    		bodyTouchEnd,
    		bodyKeyDown,
    		eStart,
    		eStop,
    		eChange,
    		alignValueToStep,
    		clampValue,
    		percentOf,
    		$springPositions
    	});

    	$$self.$inject_state = $$props => {
    		if ('range' in $$props) $$invalidate(1, range = $$props.range);
    		if ('pushy' in $$props) $$invalidate(39, pushy = $$props.pushy);
    		if ('min' in $$props) $$invalidate(2, min = $$props.min);
    		if ('max' in $$props) $$invalidate(3, max = $$props.max);
    		if ('step' in $$props) $$invalidate(4, step = $$props.step);
    		if ('values' in $$props) $$invalidate(0, values = $$props.values);
    		if ('vertical' in $$props) $$invalidate(5, vertical = $$props.vertical);
    		if ('float' in $$props) $$invalidate(6, float = $$props.float);
    		if ('hover' in $$props) $$invalidate(7, hover = $$props.hover);
    		if ('disabled' in $$props) $$invalidate(8, disabled = $$props.disabled);
    		if ('pips' in $$props) $$invalidate(9, pips = $$props.pips);
    		if ('pipstep' in $$props) $$invalidate(10, pipstep = $$props.pipstep);
    		if ('all' in $$props) $$invalidate(11, all = $$props.all);
    		if ('first' in $$props) $$invalidate(12, first = $$props.first);
    		if ('last' in $$props) $$invalidate(13, last = $$props.last);
    		if ('rest' in $$props) $$invalidate(14, rest = $$props.rest);
    		if ('id' in $$props) $$invalidate(15, id = $$props.id);
    		if ('prefix' in $$props) $$invalidate(16, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(17, suffix = $$props.suffix);
    		if ('formatter' in $$props) $$invalidate(18, formatter = $$props.formatter);
    		if ('handleFormatter' in $$props) $$invalidate(19, handleFormatter = $$props.handleFormatter);
    		if ('precision' in $$props) $$invalidate(40, precision = $$props.precision);
    		if ('springValues' in $$props) $$invalidate(41, springValues = $$props.springValues);
    		if ('slider' in $$props) $$invalidate(22, slider = $$props.slider);
    		if ('valueLength' in $$props) $$invalidate(42, valueLength = $$props.valueLength);
    		if ('focus' in $$props) $$invalidate(23, focus = $$props.focus);
    		if ('handleActivated' in $$props) handleActivated = $$props.handleActivated;
    		if ('handlePressed' in $$props) $$invalidate(24, handlePressed = $$props.handlePressed);
    		if ('keyboardActive' in $$props) keyboardActive = $$props.keyboardActive;
    		if ('activeHandle' in $$props) $$invalidate(25, activeHandle = $$props.activeHandle);
    		if ('startValue' in $$props) startValue = $$props.startValue;
    		if ('previousValue' in $$props) previousValue = $$props.previousValue;
    		if ('springPositions' in $$props) $$subscribe_springPositions($$invalidate(20, springPositions = $$props.springPositions));
    		if ('alignValueToStep' in $$props) $$invalidate(43, alignValueToStep = $$props.alignValueToStep);
    		if ('clampValue' in $$props) $$invalidate(44, clampValue = $$props.clampValue);
    		if ('percentOf' in $$props) $$invalidate(21, percentOf = $$props.percentOf);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*min, max*/ 12) {
    			/**
     * clamp a value from the range so that it always
     * falls within the min/max values
     * @param {number} val the value to clamp
     * @return {number} the value after it's been clamped
     **/
    			$$invalidate(44, clampValue = function (val) {
    				// return the min/max if outside of that range
    				return val <= min ? min : val >= max ? max : val;
    			});
    		}

    		if ($$self.$$.dirty[0] & /*min, max, step*/ 28 | $$self.$$.dirty[1] & /*clampValue, precision*/ 8704) {
    			/**
     * align the value with the steps so that it
     * always sits on the closest (above/below) step
     * @param {number} val the value to align
     * @return {number} the value after it's been aligned
     **/
    			$$invalidate(43, alignValueToStep = function (val) {
    				// sanity check for performance
    				if (val <= min) {
    					return min;
    				} else if (val >= max) {
    					return max;
    				}

    				// find the middle-point between steps
    				// and see if the value is closer to the
    				// next step, or previous step
    				let remainder = (val - min) % step;

    				let aligned = val - remainder;

    				if (Math.abs(remainder) * 2 >= step) {
    					aligned += remainder > 0 ? step : -step;
    				}

    				// make sure the value is within acceptable limits
    				aligned = clampValue(aligned);

    				// make sure the returned value is set to the precision desired
    				// this is also because javascript often returns weird floats
    				// when dealing with odd numbers and percentages
    				return parseFloat(aligned.toFixed(precision));
    			});
    		}

    		if ($$self.$$.dirty[0] & /*min, max*/ 12 | $$self.$$.dirty[1] & /*precision*/ 512) {
    			/**
     * take in a value, and then calculate that value's percentage
     * of the overall range (min-max);
     * @param {number} val the value we're getting percent for
     * @return {number} the percentage value
     **/
    			$$invalidate(21, percentOf = function (val) {
    				let perc = (val - min) / (max - min) * 100;

    				if (isNaN(perc) || perc <= 0) {
    					return 0;
    				} else if (perc >= 100) {
    					return 100;
    				} else {
    					return parseFloat(perc.toFixed(precision));
    				}
    			});
    		}

    		if ($$self.$$.dirty[0] & /*values, max, min, percentOf, springPositions*/ 3145741 | $$self.$$.dirty[1] & /*alignValueToStep, valueLength, springValues*/ 7168) {
    			{
    				// check that "values" is an array, or set it as array
    				// to prevent any errors in springs, or range trimming
    				if (!Array.isArray(values)) {
    					$$invalidate(0, values = [(max + min) / 2]);
    					console.error("'values' prop should be an Array (https://github.com/simeydotme/svelte-range-slider-pips#slider-props)");
    				}

    				// trim the range so it remains as a min/max (only 2 handles)
    				// and also align the handles to the steps
    				$$invalidate(0, values = trimRange(values.map(v => alignValueToStep(v))));

    				// check if the valueLength (length of values[]) has changed,
    				// because if so we need to re-seed the spring function with the
    				// new values array.
    				if (valueLength !== values.length) {
    					// set the initial spring values when the slider initialises,
    					// or when values array length has changed
    					$$subscribe_springPositions($$invalidate(20, springPositions = spring(values.map(v => percentOf(v)), springValues)));
    				} else {
    					// update the value of the spring function for animated handles
    					// whenever the values has updated
    					springPositions.set(values.map(v => percentOf(v)));
    				}

    				// set the valueLength for the next check
    				$$invalidate(42, valueLength = values.length);
    			}
    		}
    	};

    	return [
    		values,
    		range,
    		min,
    		max,
    		step,
    		vertical,
    		float,
    		hover,
    		disabled,
    		pips,
    		pipstep,
    		all,
    		first,
    		last,
    		rest,
    		id,
    		prefix,
    		suffix,
    		formatter,
    		handleFormatter,
    		springPositions,
    		percentOf,
    		slider,
    		focus,
    		handlePressed,
    		activeHandle,
    		$springPositions,
    		rangeStart,
    		rangeEnd,
    		sliderBlurHandle,
    		sliderFocusHandle,
    		sliderKeydown,
    		sliderInteractStart,
    		sliderInteractEnd,
    		bodyInteractStart,
    		bodyInteract,
    		bodyMouseUp,
    		bodyTouchEnd,
    		bodyKeyDown,
    		pushy,
    		precision,
    		springValues,
    		valueLength,
    		alignValueToStep,
    		clampValue,
    		div_binding
    	];
    }

    class RangeSlider extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$h,
    			create_fragment$h,
    			safe_not_equal,
    			{
    				range: 1,
    				pushy: 39,
    				min: 2,
    				max: 3,
    				step: 4,
    				values: 0,
    				vertical: 5,
    				float: 6,
    				hover: 7,
    				disabled: 8,
    				pips: 9,
    				pipstep: 10,
    				all: 11,
    				first: 12,
    				last: 13,
    				rest: 14,
    				id: 15,
    				prefix: 16,
    				suffix: 17,
    				formatter: 18,
    				handleFormatter: 19,
    				precision: 40,
    				springValues: 41
    			},
    			null,
    			[-1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "RangeSlider",
    			options,
    			id: create_fragment$h.name
    		});
    	}

    	get range() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set range(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pushy() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pushy(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get min() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set min(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get step() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set step(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get values() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set values(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vertical() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vertical(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get float() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set float(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hover() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hover(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pips() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pips(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pipstep() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pipstep(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get all() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set all(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get first() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set first(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get last() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set last(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rest() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rest(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get suffix() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set suffix(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get formatter() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formatter(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get handleFormatter() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set handleFormatter(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get precision() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set precision(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get springValues() {
    		throw new Error("<RangeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set springValues(value) {
    		throw new Error("<RangeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Input.svelte generated by Svelte v3.44.2 */
    const file$f = "src/components/Input.svelte";

    // (42:4) {#if currency}
    function create_if_block_1$6(ctx) {
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let div;
    	let span0;
    	let t1_value = /*$MARKET*/ ctx[8].currentReserve?.abbrev + "";
    	let t1;
    	let t2;
    	let span1;
    	let t3;
    	let t4_value = currencyFormatter((Number(/*value*/ ctx[0]) ?? 0) * /*$MARKET*/ ctx[8].currentReserve.price, true, 2) + "";
    	let t4;

    	const block = {
    		c: function create() {
    			img = element("img");
    			t0 = space();
    			div = element("div");
    			span0 = element("span");
    			t1 = text(t1_value);
    			t2 = space();
    			span1 = element("span");
    			t3 = text("≈ ");
    			t4 = text(t4_value);
    			if (!src_url_equal(img.src, img_src_value = "img/cryptos/" + /*$MARKET*/ ctx[8].currentReserve?.abbrev + ".png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = "" + (/*$MARKET*/ ctx[8].currentReserve?.name + " Logo"));
    			attr_dev(img, "class", "svelte-1dota3t");
    			add_location(img, file$f, 42, 6, 1045);
    			attr_dev(span0, "class", "svelte-1dota3t");
    			add_location(span0, file$f, 44, 8, 1232);
    			attr_dev(span1, "class", "svelte-1dota3t");
    			add_location(span1, file$f, 47, 8, 1306);
    			attr_dev(div, "class", "asset-abbrev-usd flex align-end justify-center column svelte-1dota3t");
    			add_location(div, file$f, 43, 6, 1156);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(span0, t1);
    			append_dev(div, t2);
    			append_dev(div, span1);
    			append_dev(span1, t3);
    			append_dev(span1, t4);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$MARKET*/ 256 && !src_url_equal(img.src, img_src_value = "img/cryptos/" + /*$MARKET*/ ctx[8].currentReserve?.abbrev + ".png")) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*$MARKET*/ 256 && img_alt_value !== (img_alt_value = "" + (/*$MARKET*/ ctx[8].currentReserve?.name + " Logo"))) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty & /*$MARKET*/ 256 && t1_value !== (t1_value = /*$MARKET*/ ctx[8].currentReserve?.abbrev + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*value, $MARKET*/ 257 && t4_value !== (t4_value = currencyFormatter((Number(/*value*/ ctx[0]) ?? 0) * /*$MARKET*/ ctx[8].currentReserve.price, true, 2) + "")) set_data_dev(t4, t4_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(42:4) {#if currency}",
    		ctx
    	});

    	return block;
    }

    // (67:4) {:else}
    function create_else_block$6(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			i.textContent = "➜";
    			attr_dev(i, "class", "jet-icons svelte-1dota3t");
    			attr_dev(i, "title", "Save");
    			add_location(i, file$f, 67, 6, 1707);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(67:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (65:4) {#if loading}
    function create_if_block$a(ctx) {
    	let loader;
    	let current;
    	loader = new Loader({ props: { button: true }, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(loader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loader, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(65:4) {#if loading}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let div2;
    	let div0;
    	let input;
    	let input_placeholder_value;
    	let t0;
    	let t1;
    	let div1;
    	let current_block_type_index;
    	let if_block1;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*currency*/ ctx[3] && create_if_block_1$6(ctx);
    	const if_block_creators = [create_if_block$a, create_else_block$6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*loading*/ ctx[5]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			input = element("input");
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			div1 = element("div");
    			if_block1.c();
    			input.disabled = /*disabled*/ ctx[4];
    			attr_dev(input, "placeholder", input_placeholder_value = /*error*/ ctx[1] ?? /*placeholder*/ ctx[2]);
    			attr_dev(input, "class", "svelte-1dota3t");
    			toggle_class(input, "error", /*error*/ ctx[1]);
    			add_location(input, file$f, 30, 4, 767);
    			attr_dev(div0, "class", "flex-centered svelte-1dota3t");
    			toggle_class(div0, "currency", /*currency*/ ctx[3]);
    			add_location(div0, file$f, 29, 2, 720);
    			attr_dev(div1, "class", "input-btn flex-centered svelte-1dota3t");
    			toggle_class(div1, "loading", /*loading*/ ctx[5]);
    			add_location(div1, file$f, 57, 2, 1513);
    			attr_dev(div2, "class", "flex-centered svelte-1dota3t");
    			toggle_class(div2, "disabled", /*disabled*/ ctx[4]);
    			add_location(div2, file$f, 28, 0, 675);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, input);
    			set_input_value(input, /*value*/ ctx[0]);
    			append_dev(div0, t0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			if_blocks[current_block_type_index].m(div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[13]),
    					action_destroyer(/*typeAction*/ ctx[10].call(null, input)),
    					listen_dev(input, "keyup", /*keyup_handler*/ ctx[14], false, false, false),
    					listen_dev(input, "keypress", /*keypress_handler*/ ctx[15], false, false, false),
    					listen_dev(input, "click", /*click_handler*/ ctx[16], false, false, false),
    					listen_dev(div1, "click", /*click_handler_1*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*disabled*/ 16) {
    				prop_dev(input, "disabled", /*disabled*/ ctx[4]);
    			}

    			if (!current || dirty & /*error, placeholder*/ 6 && input_placeholder_value !== (input_placeholder_value = /*error*/ ctx[1] ?? /*placeholder*/ ctx[2])) {
    				attr_dev(input, "placeholder", input_placeholder_value);
    			}

    			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
    				set_input_value(input, /*value*/ ctx[0]);
    			}

    			if (dirty & /*error*/ 2) {
    				toggle_class(input, "error", /*error*/ ctx[1]);
    			}

    			if (/*currency*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$6(ctx);
    					if_block0.c();
    					if_block0.m(div0, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*currency*/ 8) {
    				toggle_class(div0, "currency", /*currency*/ ctx[3]);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(div1, null);
    			}

    			if (dirty & /*loading*/ 32) {
    				toggle_class(div1, "loading", /*loading*/ ctx[5]);
    			}

    			if (dirty & /*disabled*/ 16) {
    				toggle_class(div2, "disabled", /*disabled*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (if_block0) if_block0.d();
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let $MARKET;
    	validate_store(MARKET, 'MARKET');
    	component_subscribe($$self, MARKET, $$value => $$invalidate(8, $MARKET = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Input', slots, []);
    	let { type } = $$props;
    	let { value } = $$props;
    	let { placeholder = '' } = $$props;
    	let { currency = false } = $$props;
    	let { maxInput = null } = $$props;
    	let { error = null } = $$props;
    	let { disabled = false } = $$props;
    	let { loading = false } = $$props;
    	let { keyUp = () => null } = $$props;
    	let { submit } = $$props;

    	// Call submit fn on enter
    	const enterKeySubmit = e => {
    		if (e.code === 'Enter' && !disabled) {
    			submit();
    		}
    	};

    	// Set input type
    	const typeAction = node => {
    		node.type = type;

    		if (type === 'number') {
    			node.max = maxInput;
    		}
    	};

    	const writable_props = [
    		'type',
    		'value',
    		'placeholder',
    		'currency',
    		'maxInput',
    		'error',
    		'disabled',
    		'loading',
    		'keyUp',
    		'submit'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Input> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		value = this.value;
    		$$invalidate(0, value);
    	}

    	const keyup_handler = () => keyUp();
    	const keypress_handler = e => enterKeySubmit(e);

    	const click_handler = () => {
    		$$invalidate(1, error = null);
    	};

    	const click_handler_1 = () => {
    		if (!disabled) {
    			submit();
    		}
    	};

    	$$self.$$set = $$props => {
    		if ('type' in $$props) $$invalidate(11, type = $$props.type);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('placeholder' in $$props) $$invalidate(2, placeholder = $$props.placeholder);
    		if ('currency' in $$props) $$invalidate(3, currency = $$props.currency);
    		if ('maxInput' in $$props) $$invalidate(12, maxInput = $$props.maxInput);
    		if ('error' in $$props) $$invalidate(1, error = $$props.error);
    		if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
    		if ('loading' in $$props) $$invalidate(5, loading = $$props.loading);
    		if ('keyUp' in $$props) $$invalidate(6, keyUp = $$props.keyUp);
    		if ('submit' in $$props) $$invalidate(7, submit = $$props.submit);
    	};

    	$$self.$capture_state = () => ({
    		MARKET,
    		currencyFormatter,
    		Loader,
    		type,
    		value,
    		placeholder,
    		currency,
    		maxInput,
    		error,
    		disabled,
    		loading,
    		keyUp,
    		submit,
    		enterKeySubmit,
    		typeAction,
    		$MARKET
    	});

    	$$self.$inject_state = $$props => {
    		if ('type' in $$props) $$invalidate(11, type = $$props.type);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('placeholder' in $$props) $$invalidate(2, placeholder = $$props.placeholder);
    		if ('currency' in $$props) $$invalidate(3, currency = $$props.currency);
    		if ('maxInput' in $$props) $$invalidate(12, maxInput = $$props.maxInput);
    		if ('error' in $$props) $$invalidate(1, error = $$props.error);
    		if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
    		if ('loading' in $$props) $$invalidate(5, loading = $$props.loading);
    		if ('keyUp' in $$props) $$invalidate(6, keyUp = $$props.keyUp);
    		if ('submit' in $$props) $$invalidate(7, submit = $$props.submit);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		value,
    		error,
    		placeholder,
    		currency,
    		disabled,
    		loading,
    		keyUp,
    		submit,
    		$MARKET,
    		enterKeySubmit,
    		typeAction,
    		type,
    		maxInput,
    		input_input_handler,
    		keyup_handler,
    		keypress_handler,
    		click_handler,
    		click_handler_1
    	];
    }

    class Input extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$g, create_fragment$g, safe_not_equal, {
    			type: 11,
    			value: 0,
    			placeholder: 2,
    			currency: 3,
    			maxInput: 12,
    			error: 1,
    			disabled: 4,
    			loading: 5,
    			keyUp: 6,
    			submit: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Input",
    			options,
    			id: create_fragment$g.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*type*/ ctx[11] === undefined && !('type' in props)) {
    			console.warn("<Input> was created without expected prop 'type'");
    		}

    		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
    			console.warn("<Input> was created without expected prop 'value'");
    		}

    		if (/*submit*/ ctx[7] === undefined && !('submit' in props)) {
    			console.warn("<Input> was created without expected prop 'submit'");
    		}
    	}

    	get type() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currency() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currency(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get maxInput() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set maxInput(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get error() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set error(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loading() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loading(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get keyUp() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set keyUp(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get submit() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set submit(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/TradePanel.svelte generated by Svelte v3.44.2 */
    const file$e = "src/components/TradePanel.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	return child_ctx;
    }

    // (265:0) {#if $MARKET}
    function create_if_block$9(ctx) {
    	let div2;
    	let div0;
    	let t0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let div1;
    	let input;
    	let updating_value;
    	let t2;
    	let rangeslider;
    	let current;
    	let each_value = ['deposit', 'withdraw', 'borrow', 'repay'];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < 4; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	const if_block_creators = [create_if_block_1$5, create_else_block$5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*disabledMessage*/ ctx[5]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	function input_value_binding(value) {
    		/*input_value_binding*/ ctx[18](value);
    	}

    	let input_props = {
    		type: "number",
    		currency: true,
    		maxInput: /*maxInput*/ ctx[3],
    		disabled: /*disabledInput*/ ctx[4],
    		error: /*inputError*/ ctx[6],
    		loading: /*sendingTrade*/ ctx[8],
    		keyUp: /*func*/ ctx[16],
    		submit: /*func_1*/ ctx[17]
    	};

    	if (/*inputAmount*/ ctx[2] !== void 0) {
    		input_props.value = /*inputAmount*/ ctx[2];
    	}

    	input = new Input({ props: input_props, $$inline: true });
    	binding_callbacks.push(() => bind(input, 'value', input_value_binding));

    	rangeslider = new RangeSlider({
    			props: {
    				pips: true,
    				all: "label",
    				range: "min",
    				values: [/*inputAmount*/ ctx[2]],
    				min: 0,
    				max: 100,
    				step: 25,
    				suffix: "%",
    				disabled: /*disabledInput*/ ctx[4],
    				springValues: { stiffness: 0.4, damping: 1 }
    			},
    			$$inline: true
    		});

    	rangeslider.$on("change", /*sliderHandler*/ ctx[11]);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			if_block.c();
    			t1 = space();
    			div1 = element("div");
    			create_component(input.$$.fragment);
    			t2 = space();
    			create_component(rangeslider.$$.fragment);
    			attr_dev(div0, "class", "trade-select-container flex align-center justify-between svelte-apbu93");
    			add_location(div0, file$e, 266, 4, 11110);
    			attr_dev(div1, "class", "trade-section flex-centered column svelte-apbu93");
    			add_location(div1, file$e, 343, 4, 13929);
    			attr_dev(div2, "class", "trade flex align-center justify-start svelte-apbu93");
    			add_location(div2, file$e, 265, 2, 11054);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div2, t0);
    			if_blocks[current_block_type_index].m(div2, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			mount_component(input, div1, null);
    			append_dev(div1, t2);
    			mount_component(rangeslider, div1, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER, sendingTrade, USER, adjustInterface, dictionary*/ 770) {
    				each_value = ['deposit', 'withdraw', 'borrow', 'repay'];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < 4; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < 4; i += 1) {
    					each_blocks[i].d(1);
    				}
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div2, t1);
    			}

    			const input_changes = {};
    			if (dirty & /*maxInput*/ 8) input_changes.maxInput = /*maxInput*/ ctx[3];
    			if (dirty & /*disabledInput*/ 16) input_changes.disabled = /*disabledInput*/ ctx[4];
    			if (dirty & /*inputError*/ 64) input_changes.error = /*inputError*/ ctx[6];
    			if (dirty & /*sendingTrade*/ 256) input_changes.loading = /*sendingTrade*/ ctx[8];
    			if (dirty & /*inputAmount*/ 4) input_changes.keyUp = /*func*/ ctx[16];
    			if (dirty & /*inputAmount, inputError, $USER, adjustedRatio*/ 198) input_changes.submit = /*func_1*/ ctx[17];

    			if (!updating_value && dirty & /*inputAmount*/ 4) {
    				updating_value = true;
    				input_changes.value = /*inputAmount*/ ctx[2];
    				add_flush_callback(() => updating_value = false);
    			}

    			input.$set(input_changes);
    			const rangeslider_changes = {};
    			if (dirty & /*inputAmount*/ 4) rangeslider_changes.values = [/*inputAmount*/ ctx[2]];
    			if (dirty & /*disabledInput*/ 16) rangeslider_changes.disabled = /*disabledInput*/ ctx[4];
    			rangeslider.$set(rangeslider_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(input.$$.fragment, local);
    			transition_in(rangeslider.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(input.$$.fragment, local);
    			transition_out(rangeslider.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    			if_blocks[current_block_type_index].d();
    			destroy_component(input);
    			destroy_component(rangeslider);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(265:0) {#if $MARKET}",
    		ctx
    	});

    	return block;
    }

    // (268:6) {#each ['deposit', 'withdraw', 'borrow', 'repay'] as action}
    function create_each_block$8(ctx) {
    	let div;
    	let p;
    	let t0_value = dictionary[/*$USER*/ ctx[1].language].cockpit[/*action*/ ctx[21]].toUpperCase() + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[15](/*action*/ ctx[21]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(p, "class", "bicyclette-bold text-gradient svelte-apbu93");
    			add_location(p, file$e, 279, 10, 11627);
    			attr_dev(div, "class", "trade-select flex justify-center align-center svelte-apbu93");
    			toggle_class(div, "active", /*$USER*/ ctx[1].tradeAction === /*action*/ ctx[21]);
    			add_location(div, file$e, 268, 8, 11256);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(p, t0);
    			append_dev(div, t1);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*$USER*/ 2 && t0_value !== (t0_value = dictionary[/*$USER*/ ctx[1].language].cockpit[/*action*/ ctx[21]].toUpperCase() + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*$USER*/ 2) {
    				toggle_class(div, "active", /*$USER*/ ctx[1].tradeAction === /*action*/ ctx[21]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(268:6) {#each ['deposit', 'withdraw', 'borrow', 'repay'] as action}",
    		ctx
    	});

    	return block;
    }

    // (292:4) {:else}
    function create_else_block$5(ctx) {
    	let div1;
    	let span0;
    	let t0;
    	let div0;
    	let t1;
    	let div3;
    	let div2;
    	let span1;
    	let t2_value = dictionary[/*$USER*/ ctx[1].language].cockpit.adjustedCollateralization.toUpperCase() + "";
    	let t2;
    	let t3;
    	let info;
    	let t4;
    	let p;
    	let current;

    	function select_block_type_1(ctx, dirty) {
    		if (/*$USER*/ ctx[1].tradeAction === 'deposit') return create_if_block_6$3;
    		if (/*$USER*/ ctx[1].tradeAction === 'withdraw') return create_if_block_7$3;
    		if (/*$USER*/ ctx[1].tradeAction === 'borrow') return create_if_block_8$3;
    		if (/*$USER*/ ctx[1].tradeAction === 'repay') return create_if_block_9$3;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block0 = current_block_type && current_block_type(ctx);

    	function select_block_type_2(ctx, dirty) {
    		if (/*$USER*/ ctx[1].walletInit) return create_if_block_5$3;
    		return create_else_block_3$1;
    	}

    	let current_block_type_1 = select_block_type_2(ctx);
    	let if_block1 = current_block_type_1(ctx);

    	info = new Info({
    			props: {
    				term: "adjustedCollateralizationRatio",
    				style: "color: var(--white); font-size: 9px;"
    			},
    			$$inline: true
    		});

    	function select_block_type_3(ctx, dirty) {
    		if (/*$USER*/ ctx[1].walletInit) return create_if_block_2$5;
    		return create_else_block_2$3;
    	}

    	let current_block_type_2 = select_block_type_3(ctx);
    	let if_block2 = current_block_type_2(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			span0 = element("span");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div0 = element("div");
    			if_block1.c();
    			t1 = space();
    			div3 = element("div");
    			div2 = element("div");
    			span1 = element("span");
    			t2 = text(t2_value);
    			t3 = space();
    			create_component(info.$$.fragment);
    			t4 = space();
    			p = element("p");
    			if_block2.c();
    			attr_dev(span0, "class", "svelte-apbu93");
    			add_location(span0, file$e, 294, 8, 12085);
    			attr_dev(div0, "class", "flex-centered");
    			add_location(div0, file$e, 305, 8, 12645);
    			attr_dev(div1, "class", "trade-section flex-centered column svelte-apbu93");
    			toggle_class(div1, "disabled", /*disabledInput*/ ctx[4]);
    			add_location(div1, file$e, 292, 6, 11989);
    			attr_dev(span1, "class", "svelte-apbu93");
    			add_location(span1, file$e, 321, 10, 13122);
    			attr_dev(div2, "class", "flex-centered");
    			add_location(div2, file$e, 320, 8, 13084);
    			attr_dev(p, "class", "bicyclette svelte-apbu93");
    			add_location(p, file$e, 328, 8, 13385);
    			attr_dev(div3, "class", "trade-section flex-centered column svelte-apbu93");
    			toggle_class(div3, "disabled", /*disabledInput*/ ctx[4]);
    			add_location(div3, file$e, 318, 6, 12988);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, span0);
    			if (if_block0) if_block0.m(span0, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			if_block1.m(div0, null);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, span1);
    			append_dev(span1, t2);
    			append_dev(div2, t3);
    			mount_component(info, div2, null);
    			append_dev(div3, t4);
    			append_dev(div3, p);
    			if_block2.m(p, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if (if_block0) if_block0.d(1);
    				if_block0 = current_block_type && current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(span0, null);
    				}
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_2(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div0, null);
    				}
    			}

    			if (dirty & /*disabledInput*/ 16) {
    				toggle_class(div1, "disabled", /*disabledInput*/ ctx[4]);
    			}

    			if ((!current || dirty & /*$USER*/ 2) && t2_value !== (t2_value = dictionary[/*$USER*/ ctx[1].language].cockpit.adjustedCollateralization.toUpperCase() + "")) set_data_dev(t2, t2_value);

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_3(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type_2(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(p, null);
    				}
    			}

    			if (dirty & /*disabledInput*/ 16) {
    				toggle_class(div3, "disabled", /*disabledInput*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(info.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);

    			if (if_block0) {
    				if_block0.d();
    			}

    			if_block1.d();
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div3);
    			destroy_component(info);
    			if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(292:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (286:4) {#if disabledMessage}
    function create_if_block_1$5(ctx) {
    	let div;
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			t = text(/*disabledMessage*/ ctx[5]);
    			attr_dev(span, "class", "svelte-apbu93");
    			add_location(span, file$e, 287, 8, 11907);
    			attr_dev(div, "class", "trade-section trade-disabled-message flex-centered column svelte-apbu93");
    			add_location(div, file$e, 286, 6, 11827);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*disabledMessage*/ 32) set_data_dev(t, /*disabledMessage*/ ctx[5]);
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(286:4) {#if disabledMessage}",
    		ctx
    	});

    	return block;
    }

    // (302:50) 
    function create_if_block_9$3(ctx) {
    	let t_value = dictionary[/*$USER*/ ctx[1].language].cockpit.amountOwed.toUpperCase() + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 2 && t_value !== (t_value = dictionary[/*$USER*/ ctx[1].language].cockpit.amountOwed.toUpperCase() + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$3.name,
    		type: "if",
    		source: "(302:50) ",
    		ctx
    	});

    	return block;
    }

    // (300:51) 
    function create_if_block_8$3(ctx) {
    	let t_value = dictionary[/*$USER*/ ctx[1].language].cockpit.maxBorrowAmount.toUpperCase() + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 2 && t_value !== (t_value = dictionary[/*$USER*/ ctx[1].language].cockpit.maxBorrowAmount.toUpperCase() + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$3.name,
    		type: "if",
    		source: "(300:51) ",
    		ctx
    	});

    	return block;
    }

    // (298:53) 
    function create_if_block_7$3(ctx) {
    	let t_value = dictionary[/*$USER*/ ctx[1].language].cockpit.availableFunds.toUpperCase() + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 2 && t_value !== (t_value = dictionary[/*$USER*/ ctx[1].language].cockpit.availableFunds.toUpperCase() + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$3.name,
    		type: "if",
    		source: "(298:53) ",
    		ctx
    	});

    	return block;
    }

    // (296:10) {#if $USER.tradeAction === 'deposit'}
    function create_if_block_6$3(ctx) {
    	let t_value = dictionary[/*$USER*/ ctx[1].language].cockpit.walletBalance.toUpperCase() + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 2 && t_value !== (t_value = dictionary[/*$USER*/ ctx[1].language].cockpit.walletBalance.toUpperCase() + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$3.name,
    		type: "if",
    		source: "(296:10) {#if $USER.tradeAction === 'deposit'}",
    		ctx
    	});

    	return block;
    }

    // (312:10) {:else}
    function create_else_block_3$1(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "--";
    			attr_dev(p, "class", "svelte-apbu93");
    			add_location(p, file$e, 312, 12, 12900);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3$1.name,
    		type: "else",
    		source: "(312:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (307:10) {#if $USER.walletInit}
    function create_if_block_5$3(ctx) {
    	let p;
    	let t0_value = currencyFormatter(/*maxInput*/ ctx[3], false, /*$MARKET*/ ctx[0].currentReserve.decimals) + "";
    	let t0;
    	let t1;
    	let t2_value = /*$MARKET*/ ctx[0].currentReserve.abbrev + "";
    	let t2;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t0 = text(t0_value);
    			t1 = space();
    			t2 = text(t2_value);
    			attr_dev(p, "class", "svelte-apbu93");
    			add_location(p, file$e, 307, 12, 12718);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t0);
    			append_dev(p, t1);
    			append_dev(p, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*maxInput, $MARKET*/ 9 && t0_value !== (t0_value = currencyFormatter(/*maxInput*/ ctx[3], false, /*$MARKET*/ ctx[0].currentReserve.decimals) + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$MARKET*/ 1 && t2_value !== (t2_value = /*$MARKET*/ ctx[0].currentReserve.abbrev + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$3.name,
    		type: "if",
    		source: "(307:10) {#if $USER.walletInit}",
    		ctx
    	});

    	return block;
    }

    // (338:10) {:else}
    function create_else_block_2$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("--");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$3.name,
    		type: "else",
    		source: "(338:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (330:10) {#if $USER.walletInit}
    function create_if_block_2$5(ctx) {
    	let if_block_anchor;

    	function select_block_type_4(ctx, dirty) {
    		if ((/*$USER*/ ctx[1].position.borrowedValue || /*$USER*/ ctx[1].tradeAction === 'borrow' && /*inputAmount*/ ctx[2]) && /*adjustedRatio*/ ctx[7] > 10) return create_if_block_3$3;
    		if ((/*$USER*/ ctx[1].position.borrowedValue || /*$USER*/ ctx[1].tradeAction === 'borrow' && /*inputAmount*/ ctx[2]) && /*adjustedRatio*/ ctx[7] < 10) return create_if_block_4$3;
    		return create_else_block_1$3;
    	}

    	let current_block_type = select_block_type_4(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_4(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(330:10) {#if $USER.walletInit}",
    		ctx
    	});

    	return block;
    }

    // (335:12) {:else}
    function create_else_block_1$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("∞");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$3.name,
    		type: "else",
    		source: "(335:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (333:126) 
    function create_if_block_4$3(ctx) {
    	let t_value = currencyFormatter(/*adjustedRatio*/ ctx[7] * 100, false, 1) + '%' + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*adjustedRatio*/ 128 && t_value !== (t_value = currencyFormatter(/*adjustedRatio*/ ctx[7] * 100, false, 1) + '%' + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(333:126) ",
    		ctx
    	});

    	return block;
    }

    // (331:12) {#if ($USER.position.borrowedValue || ($USER.tradeAction === 'borrow' && inputAmount)) && adjustedRatio > 10}
    function create_if_block_3$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("> 1000%");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(331:12) {#if ($USER.position.borrowedValue || ($USER.tradeAction === 'borrow' && inputAmount)) && adjustedRatio > 10}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$MARKET*/ ctx[0] && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$MARKET*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$MARKET*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$9(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let $MARKET;
    	let $USER;
    	validate_store(MARKET, 'MARKET');
    	component_subscribe($$self, MARKET, $$value => $$invalidate(0, $MARKET = $$value));
    	validate_store(USER, 'USER');
    	component_subscribe($$self, USER, $$value => $$invalidate(1, $USER = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TradePanel', slots, []);
    	let inputAmount = null;
    	let maxInput = 0;
    	let disabledInput = true;
    	let disabledMessage = '';
    	let inputError;
    	let adjustedRatio;
    	let sendingTrade;

    	// Adjust interface
    	const adjustInterface = () => {
    		$$invalidate(2, inputAmount = null);
    		$$invalidate(6, inputError = '');
    		checkDisabledInput();
    		getMaxInput();
    		adjustCollateralizationRatio();
    	};

    	// Check if user input should be disabled
    	// depending on wallet balance and position
    	const checkDisabledInput = () => {
    		// Initially set to true and reset message
    		$$invalidate(5, disabledMessage = '');

    		$$invalidate(4, disabledInput = true);

    		if (!$USER.assets || !$MARKET.currentReserve) {
    			return;
    		}

    		// Depositing
    		if ($USER.tradeAction === 'deposit') {
    			// No wallet balance to deposit
    			if (!$USER.walletBalances[$MARKET.currentReserve.abbrev]) {
    				$$invalidate(5, disabledMessage = dictionary[$USER.language].cockpit.noBalanceForDeposit.replaceAll('{{ASSET}}', $MARKET.currentReserve.abbrev));
    			} else if ($USER.loanBalances[$MARKET.currentReserve.abbrev]) {
    				$$invalidate(5, disabledMessage = dictionary[$USER.language].cockpit.assetIsCurrentBorrow.replaceAll('{{ASSET}}', $MARKET.currentReserve.abbrev)); // User has a loan of this asset
    			} else {
    				$$invalidate(4, disabledInput = false);
    			}
    		} else if ($USER.tradeAction === 'withdraw') {
    			// No collateral to withdraw
    			if (!$USER.collateralBalances[$MARKET.currentReserve.abbrev]) {
    				$$invalidate(5, disabledMessage = dictionary[$USER.language].cockpit.noDepositsForWithdraw.replaceAll('{{ASSET}}', $MARKET.currentReserve.abbrev)); // Withdrawing
    			} else if ($USER.position.borrowedValue && $USER.position.colRatio <= $MARKET.minColRatio) {
    				$$invalidate(5, disabledMessage = dictionary[$USER.language].cockpit.belowMinCRatio); // User is below minimum c-ratio
    			} else {
    				$$invalidate(4, disabledInput = false);
    			}
    		} else if ($USER.tradeAction === 'borrow') {
    			// User has not deposited any collateral
    			if (!$USER.position.depositedValue) {
    				$$invalidate(5, disabledMessage = dictionary[$USER.language].cockpit.noDepositsForBorrow); // Borrowing
    			} else if ($USER.position.borrowedValue && $USER.position.colRatio <= $MARKET.minColRatio) {
    				$$invalidate(5, disabledMessage = dictionary[$USER.language].cockpit.belowMinCRatio); // User is below minimum c-ratio
    			} else if ($USER.collateralBalances[$MARKET.currentReserve.abbrev]) {
    				$$invalidate(5, disabledMessage = dictionary[$USER.language].cockpit.assetIsCurrentDeposit.replaceAll('{{ASSET}}', $MARKET.currentReserve.abbrev)); // User has a deposit of this asset
    			} else if ($MARKET.currentReserve.availableLiquidity.amount.isZero()) {
    				$$invalidate(5, disabledMessage = dictionary[$USER.language].cockpit.noLiquidity); // No liquidity in market to borrow from
    			} else {
    				$$invalidate(4, disabledInput = false);
    			}
    		} else if ($USER.tradeAction === 'repay') {
    			// User has no loan balance to repay
    			if (!$USER.loanBalances[$MARKET.currentReserve.abbrev]) {
    				$$invalidate(5, disabledMessage = dictionary[$USER.language].cockpit.noDebtForRepay.replaceAll('{{ASSET}}', $MARKET.currentReserve.abbrev)); // Repaying
    			} else {
    				$$invalidate(4, disabledInput = false);
    			}
    		}
    	};

    	// Get max input for current trade action and reserve
    	const getMaxInput = () => {
    		let max = 0;

    		if ($USER.assets) {
    			if ($USER.tradeAction === 'deposit') {
    				max = $USER.assets.tokens[$MARKET.currentReserve.abbrev].maxDepositAmount;
    			} else if ($USER.tradeAction === 'withdraw') {
    				max = $USER.assets.tokens[$MARKET.currentReserve.abbrev].maxWithdrawAmount;
    			} else if ($USER.tradeAction === 'borrow') {
    				max = $USER.assets.tokens[$MARKET.currentReserve.abbrev].maxBorrowAmount;
    			} else if ($USER.tradeAction === 'repay') {
    				max = $USER.assets.tokens[$MARKET.currentReserve.abbrev].maxRepayAmount;
    			}
    		}

    		$$invalidate(3, maxInput = max);
    	};

    	// Adjust user input and calculate updated c-ratio if 
    	// they were to submit current trade
    	const adjustCollateralizationRatio = () => {
    		if (!$MARKET.currentReserve || !$USER.assets) {
    			return;
    		}

    		// Depositing
    		if ($USER.tradeAction === 'deposit') {
    			$$invalidate(7, adjustedRatio = ($USER.position.depositedValue + (inputAmount ?? 0) * $MARKET.currentReserve.price) / ($USER.position.borrowedValue > 0
    			? $USER.position.borrowedValue
    			: 1));
    		} else if ($USER.tradeAction === 'withdraw') {
    			$$invalidate(7, adjustedRatio = ($USER.position.depositedValue - (inputAmount ?? 0) * $MARKET.currentReserve.price) / ($USER.position.borrowedValue > 0
    			? $USER.position.borrowedValue
    			: 1)); // Withdrawing
    		} else if ($USER.tradeAction === 'borrow') {
    			$$invalidate(7, adjustedRatio = $USER.position.depositedValue / ($USER.position.borrowedValue + (inputAmount ?? 0) * $MARKET.currentReserve.price > 0
    			? $USER.position.borrowedValue + (inputAmount ?? 0) * $MARKET.currentReserve.price
    			: 1)); // Borrowing
    		} else if ($USER.tradeAction === 'repay') {
    			$$invalidate(7, adjustedRatio = $USER.position.depositedValue / ($USER.position.borrowedValue - (inputAmount ?? 0) * $MARKET.currentReserve.price > 0
    			? $USER.position.borrowedValue - (inputAmount ?? 0) * $MARKET.currentReserve.price
    			: 1)); // Repaying
    		}
    	};

    	// Update input and adjusted ratio on slider change
    	const sliderHandler = e => {
    		$$invalidate(2, inputAmount = maxInput * (e.detail.value / 100));
    		adjustCollateralizationRatio();
    	};

    	// Check user input and for Copilot warning
    	// Then submit trade RPC call
    	const submitTrade = async () => {
    		if (!$MARKET.currentReserve || !$USER.assets || !inputAmount) {
    			return;
    		}

    		let tradeAction = $USER.tradeAction;
    		let tradeAmount = TokenAmount.tokens(inputAmount.toString(), $MARKET.currentReserve.decimals);
    		let ok, txid;
    		$$invalidate(8, sendingTrade = true);

    		// Depositing
    		if (tradeAction === 'deposit') {
    			// User is depositing more than they have in their wallet
    			if (tradeAmount.uiAmountFloat > $USER.walletBalances[$MARKET.currentReserve.abbrev]) {
    				$$invalidate(6, inputError = dictionary[$USER.language].cockpit.notEnoughAsset.replaceAll('{{ASSET}}', $MARKET.currentReserve.abbrev));
    			} else {
    				const depositAmount = tradeAmount.amount; // Otherwise, send deposit
    				[ok, txid] = await deposit($MARKET.currentReserve.abbrev, depositAmount);
    			}
    		} else if (tradeAction === 'withdraw') {
    			// User is withdrawing more than liquidity in market
    			if (tradeAmount.gt($MARKET.currentReserve.availableLiquidity)) {
    				$$invalidate(6, inputError = dictionary[$USER.language].cockpit.noLiquidity); // Withdrawing
    			} else if (tradeAmount.uiAmountFloat > $USER.collateralBalances[$MARKET.currentReserve.abbrev]) {
    				$$invalidate(6, inputError = dictionary[$USER.language].cockpit.lessFunds); // User is withdrawing more than they've deposited
    			} else if ($USER.position.borrowedValue && $USER.position.colRatio <= $MARKET.minColRatio) {
    				$$invalidate(6, inputError = dictionary[$USER.language].cockpit.belowMinCRatio); // User is below the minimum c-ratio
    			} else {
    				// If user is withdrawing all, use collateral notes
    				const withdrawAmount = tradeAmount.uiAmountFloat === $USER.collateralBalances[$MARKET.currentReserve.abbrev]
    				? Amount.depositNotes($USER.assets.tokens[$MARKET.currentReserve.abbrev].collateralNoteBalance.amount)
    				: Amount.tokens(tradeAmount.amount); // Otherwise, send withdraw

    				[ok, txid] = await withdraw($MARKET.currentReserve.abbrev, withdrawAmount);
    			}
    		} else if (tradeAction === 'borrow') {
    			// User is borrowing more than liquidity in market
    			if (tradeAmount.gt($MARKET.currentReserve.availableLiquidity)) {
    				$$invalidate(6, inputError = dictionary[$USER.language].cockpit.noLiquidity); // Borrowing
    			} else if ($USER.position.borrowedValue && $USER.position.colRatio <= $MARKET.minColRatio) {
    				$$invalidate(6, inputError = dictionary[$USER.language].cockpit.belowMinCRatio); // User is below the minimum c-ratio
    			} else {
    				const borrowAmount = Amount.tokens(tradeAmount.amount); // Otherwise, send borrow
    				[ok, txid] = await borrow($MARKET.currentReserve.abbrev, borrowAmount);
    			}
    		} else if (tradeAction === 'repay') {
    			// User is repaying more than they owe
    			if (tradeAmount.uiAmountFloat > $USER.loanBalances[$MARKET.currentReserve.abbrev]) {
    				$$invalidate(6, inputError = dictionary[$USER.language].cockpit.oweLess); // Repaying
    			} else {
    				// If user is repaying all, use loan notes
    				const repayAmount = tradeAmount.uiAmountFloat === $USER.loanBalances[$MARKET.currentReserve.abbrev]
    				? Amount.loanNotes($USER.assets.tokens[$MARKET.currentReserve.abbrev].loanNoteBalance.amount)
    				: Amount.tokens(tradeAmount.amount); // Otherwise, send repay

    				[ok, txid] = await repay($MARKET.currentReserve.abbrev, repayAmount);
    			}
    		}

    		// Notify user of successful/unsuccessful trade
    		if (ok && txid) {
    			$USER.addNotification({
    				success: true,
    				text: dictionary[$USER.language].cockpit.txSuccess.replaceAll('{{TRADE ACTION}}', tradeAction).replaceAll('{{AMOUNT AND ASSET}}', `${tradeAmount.uiAmountFloat} ${$MARKET.currentReserve.abbrev}`)
    			});

    			addTransactionLog(txid);
    			adjustInterface();
    		} else if (!ok && !txid) {
    			$USER.addNotification({
    				success: false,
    				text: dictionary[$USER.language].cockpit.txFailed
    			});
    		}

    		// End trade submit
    		$$invalidate(8, sendingTrade = false);
    	};

    	// Adjust interface on wallet init
    	let walletHasInit = false;

    	// Readjust interface on current reserve change
    	let currentReserve = $MARKET.currentReserve;

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TradePanel> was created with unknown prop '${key}'`);
    	});

    	const click_handler = action => {
    		if (!sendingTrade) {
    			USER.update(user => {
    				user.tradeAction = action;
    				return user;
    			});

    			adjustInterface();
    		}
    	};

    	const func = () => {
    		// If input is negative, reset to zero
    		if (inputAmount && inputAmount < 0) {
    			$$invalidate(2, inputAmount = 0);
    		}

    		adjustCollateralizationRatio();
    	};

    	const func_1 = () => {
    		// Check for no input
    		if (!inputAmount) {
    			$$invalidate(6, inputError = dictionary[$USER.language].cockpit.noInputAmount);
    			$$invalidate(2, inputAmount = null);
    			return;
    		}

    		// Call for Copilot to check for warnings
    		// if there are none, Copilot will call
    		checkTradeWarning(inputAmount, adjustedRatio, submitTrade);
    	};

    	function input_value_binding(value) {
    		inputAmount = value;
    		$$invalidate(2, inputAmount);
    	}

    	$$self.$capture_state = () => ({
    		RangeSlider,
    		MARKET,
    		USER,
    		deposit,
    		withdraw,
    		borrow,
    		repay,
    		addTransactionLog,
    		currencyFormatter,
    		TokenAmount,
    		Amount,
    		checkTradeWarning,
    		dictionary,
    		Input,
    		Info,
    		inputAmount,
    		maxInput,
    		disabledInput,
    		disabledMessage,
    		inputError,
    		adjustedRatio,
    		sendingTrade,
    		adjustInterface,
    		checkDisabledInput,
    		getMaxInput,
    		adjustCollateralizationRatio,
    		sliderHandler,
    		submitTrade,
    		walletHasInit,
    		currentReserve,
    		$MARKET,
    		$USER
    	});

    	$$self.$inject_state = $$props => {
    		if ('inputAmount' in $$props) $$invalidate(2, inputAmount = $$props.inputAmount);
    		if ('maxInput' in $$props) $$invalidate(3, maxInput = $$props.maxInput);
    		if ('disabledInput' in $$props) $$invalidate(4, disabledInput = $$props.disabledInput);
    		if ('disabledMessage' in $$props) $$invalidate(5, disabledMessage = $$props.disabledMessage);
    		if ('inputError' in $$props) $$invalidate(6, inputError = $$props.inputError);
    		if ('adjustedRatio' in $$props) $$invalidate(7, adjustedRatio = $$props.adjustedRatio);
    		if ('sendingTrade' in $$props) $$invalidate(8, sendingTrade = $$props.sendingTrade);
    		if ('walletHasInit' in $$props) $$invalidate(13, walletHasInit = $$props.walletHasInit);
    		if ('currentReserve' in $$props) $$invalidate(14, currentReserve = $$props.currentReserve);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$USER, walletHasInit*/ 8194) {
    			if ($USER.walletInit && !walletHasInit) {
    				adjustInterface();
    				$$invalidate(13, walletHasInit = true);
    			}
    		}

    		if ($$self.$$.dirty & /*currentReserve, $MARKET*/ 16385) {
    			if (currentReserve !== $MARKET.currentReserve) {
    				adjustInterface();
    				$$invalidate(14, currentReserve = $MARKET.currentReserve);
    			}
    		}
    	};

    	return [
    		$MARKET,
    		$USER,
    		inputAmount,
    		maxInput,
    		disabledInput,
    		disabledMessage,
    		inputError,
    		adjustedRatio,
    		sendingTrade,
    		adjustInterface,
    		adjustCollateralizationRatio,
    		sliderHandler,
    		submitTrade,
    		walletHasInit,
    		currentReserve,
    		click_handler,
    		func,
    		func_1,
    		input_value_binding
    	];
    }

    class TradePanel extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$f, create_fragment$f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TradePanel",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    /* src/views/Cockpit.svelte generated by Svelte v3.44.2 */

    const { document: document_1$1 } = globals;
    const file$d = "src/views/Cockpit.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	child_ctx[14] = i;
    	return child_ctx;
    }

    // (335:0) {:else}
    function create_else_block_11(ctx) {
    	let loader;
    	let current;

    	loader = new Loader({
    			props: { fullview: true },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(loader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loader, target, anchor);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_11.name,
    		type: "else",
    		source: "(335:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (71:27) 
    function create_if_block_1$4(ctx) {
    	let div10;
    	let h1;
    	let t0_value = dictionary[/*$USER*/ ctx[2].language].cockpit.title + "";
    	let t0;
    	let t1;
    	let div0;
    	let connectwalletbutton;
    	let t2;
    	let div9;
    	let div2;
    	let div1;
    	let t3;
    	let h20;
    	let t4_value = dictionary[/*$USER*/ ctx[2].language].cockpit.totalValueLocked + "";
    	let t4;
    	let t5;
    	let previous_key = /*$MARKET*/ ctx[1].totalValueLocked;
    	let t6;
    	let div8;
    	let div4;
    	let div3;
    	let h21;
    	let t7_value = dictionary[/*$USER*/ ctx[2].language].cockpit.yourRatio + "";
    	let t7;
    	let t8;
    	let info;
    	let t9;
    	let t10;
    	let div7;
    	let div5;
    	let h22;
    	let t11_value = dictionary[/*$USER*/ ctx[2].language].cockpit.totalDepositedValue + "";
    	let t11;
    	let t12;
    	let t13;
    	let div6;
    	let h23;
    	let t14_value = dictionary[/*$USER*/ ctx[2].language].cockpit.totalBorrowedValue + "";
    	let t14;
    	let t15;
    	let t16;
    	let tradepanel;
    	let t17;
    	let datatable;
    	let t18;
    	let if_block3_anchor;
    	let current;
    	connectwalletbutton = new ConnectWalletButton({ $$inline: true });
    	let key_block = create_key_block_3(ctx);

    	info = new Info({
    			props: { term: "collateralizationRatio" },
    			$$inline: true
    		});

    	function select_block_type_1(ctx, dirty) {
    		if (/*$USER*/ ctx[2].walletInit) return create_if_block_13;
    		return create_else_block_10;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_3(ctx, dirty) {
    		if (/*$USER*/ ctx[2].walletInit) return create_if_block_12;
    		return create_else_block_8;
    	}

    	let current_block_type_1 = select_block_type_3(ctx);
    	let if_block1 = current_block_type_1(ctx);

    	function select_block_type_4(ctx, dirty) {
    		if (/*$USER*/ ctx[2].walletInit) return create_if_block_11;
    		return create_else_block_7;
    	}

    	let current_block_type_2 = select_block_type_4(ctx);
    	let if_block2 = current_block_type_2(ctx);
    	tradepanel = new TradePanel({ $$inline: true });

    	datatable = new Datatable({
    			props: {
    				settings: /*tableSettings*/ ctx[5],
    				data: /*$MARKET*/ ctx[1].reservesArray,
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block3 = /*reserveDetail*/ ctx[0] && create_if_block_2$4(ctx);

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			div0 = element("div");
    			create_component(connectwalletbutton.$$.fragment);
    			t2 = space();
    			div9 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			t3 = space();
    			h20 = element("h2");
    			t4 = text(t4_value);
    			t5 = space();
    			key_block.c();
    			t6 = space();
    			div8 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			h21 = element("h2");
    			t7 = text(t7_value);
    			t8 = space();
    			create_component(info.$$.fragment);
    			t9 = space();
    			if_block0.c();
    			t10 = space();
    			div7 = element("div");
    			div5 = element("div");
    			h22 = element("h2");
    			t11 = text(t11_value);
    			t12 = space();
    			if_block1.c();
    			t13 = space();
    			div6 = element("div");
    			h23 = element("h2");
    			t14 = text(t14_value);
    			t15 = space();
    			if_block2.c();
    			t16 = space();
    			create_component(tradepanel.$$.fragment);
    			t17 = space();
    			create_component(datatable.$$.fragment);
    			t18 = space();
    			if (if_block3) if_block3.c();
    			if_block3_anchor = empty();
    			attr_dev(h1, "class", "view-title text-gradient");
    			add_location(h1, file$d, 72, 4, 2701);
    			attr_dev(div0, "class", "connect-wallet-btn svelte-1a7fp36");
    			add_location(div0, file$d, 75, 4, 2802);
    			attr_dev(div1, "class", "divider svelte-1a7fp36");
    			add_location(div1, file$d, 80, 8, 3024);
    			attr_dev(h20, "class", "view-subheader");
    			add_location(h20, file$d, 82, 8, 3069);
    			attr_dev(div2, "class", "trade-market-tvl flex align-start justify-center column svelte-1a7fp36");
    			add_location(div2, file$d, 79, 6, 2946);
    			attr_dev(h21, "class", "view-subheader");
    			add_location(h21, file$d, 94, 12, 3550);
    			attr_dev(div3, "class", "flex-centered");
    			add_location(div3, file$d, 93, 10, 3510);
    			attr_dev(div4, "class", "trade-position-ratio flex align-start justify-center column svelte-1a7fp36");
    			add_location(div4, file$d, 92, 8, 3426);
    			attr_dev(h22, "class", "view-subheader");
    			add_location(h22, file$d, 129, 12, 4920);
    			attr_dev(div5, "class", "trade-position-value flex-centered column svelte-1a7fp36");
    			add_location(div5, file$d, 128, 10, 4852);
    			attr_dev(h23, "class", "view-subheader");
    			add_location(h23, file$d, 145, 12, 5494);
    			attr_dev(div6, "class", "trade-position-value flex-centered column svelte-1a7fp36");
    			add_location(div6, file$d, 144, 10, 5426);
    			attr_dev(div7, "class", "flex-centered column");
    			add_location(div7, file$d, 127, 8, 4807);
    			attr_dev(div8, "class", "trade-position-snapshot flex-centered svelte-1a7fp36");
    			add_location(div8, file$d, 91, 6, 3366);
    			attr_dev(div9, "class", "cockpit-top flex align-center justify-between svelte-1a7fp36");
    			add_location(div9, file$d, 78, 4, 2880);
    			attr_dev(div10, "class", "view-container flex justify-center column svelte-1a7fp36");
    			add_location(div10, file$d, 71, 2, 2641);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, h1);
    			append_dev(h1, t0);
    			append_dev(div10, t1);
    			append_dev(div10, div0);
    			mount_component(connectwalletbutton, div0, null);
    			append_dev(div10, t2);
    			append_dev(div10, div9);
    			append_dev(div9, div2);
    			append_dev(div2, div1);
    			append_dev(div2, t3);
    			append_dev(div2, h20);
    			append_dev(h20, t4);
    			append_dev(div2, t5);
    			key_block.m(div2, null);
    			append_dev(div9, t6);
    			append_dev(div9, div8);
    			append_dev(div8, div4);
    			append_dev(div4, div3);
    			append_dev(div3, h21);
    			append_dev(h21, t7);
    			append_dev(div3, t8);
    			mount_component(info, div3, null);
    			append_dev(div4, t9);
    			if_block0.m(div4, null);
    			append_dev(div8, t10);
    			append_dev(div8, div7);
    			append_dev(div7, div5);
    			append_dev(div5, h22);
    			append_dev(h22, t11);
    			append_dev(div5, t12);
    			if_block1.m(div5, null);
    			append_dev(div7, t13);
    			append_dev(div7, div6);
    			append_dev(div6, h23);
    			append_dev(h23, t14);
    			append_dev(div6, t15);
    			if_block2.m(div6, null);
    			append_dev(div10, t16);
    			mount_component(tradepanel, div10, null);
    			append_dev(div10, t17);
    			mount_component(datatable, div10, null);
    			insert_dev(target, t18, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, if_block3_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$USER*/ 4) && t0_value !== (t0_value = dictionary[/*$USER*/ ctx[2].language].cockpit.title + "")) set_data_dev(t0, t0_value);
    			if ((!current || dirty & /*$USER*/ 4) && t4_value !== (t4_value = dictionary[/*$USER*/ ctx[2].language].cockpit.totalValueLocked + "")) set_data_dev(t4, t4_value);

    			if (dirty & /*$MARKET*/ 2 && safe_not_equal(previous_key, previous_key = /*$MARKET*/ ctx[1].totalValueLocked)) {
    				key_block.d(1);
    				key_block = create_key_block_3(ctx);
    				key_block.c();
    				key_block.m(div2, null);
    			} else {
    				key_block.p(ctx, dirty);
    			}

    			if ((!current || dirty & /*$USER*/ 4) && t7_value !== (t7_value = dictionary[/*$USER*/ ctx[2].language].cockpit.yourRatio + "")) set_data_dev(t7, t7_value);

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div4, null);
    				}
    			}

    			if ((!current || dirty & /*$USER*/ 4) && t11_value !== (t11_value = dictionary[/*$USER*/ ctx[2].language].cockpit.totalDepositedValue + "")) set_data_dev(t11, t11_value);

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_3(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div5, null);
    				}
    			}

    			if ((!current || dirty & /*$USER*/ 4) && t14_value !== (t14_value = dictionary[/*$USER*/ ctx[2].language].cockpit.totalBorrowedValue + "")) set_data_dev(t14, t14_value);

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_4(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type_2(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div6, null);
    				}
    			}

    			const datatable_changes = {};
    			if (dirty & /*$MARKET*/ 2) datatable_changes.data = /*$MARKET*/ ctx[1].reservesArray;

    			if (dirty & /*$$scope, $rows, $MARKET, $USER, reserveDetail*/ 32791) {
    				datatable_changes.$$scope = { dirty, ctx };
    			}

    			datatable.$set(datatable_changes);

    			if (/*reserveDetail*/ ctx[0]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty & /*reserveDetail*/ 1) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_2$4(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(connectwalletbutton.$$.fragment, local);
    			transition_in(info.$$.fragment, local);
    			transition_in(tradepanel.$$.fragment, local);
    			transition_in(datatable.$$.fragment, local);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(connectwalletbutton.$$.fragment, local);
    			transition_out(info.$$.fragment, local);
    			transition_out(tradepanel.$$.fragment, local);
    			transition_out(datatable.$$.fragment, local);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			destroy_component(connectwalletbutton);
    			key_block.d(detaching);
    			destroy_component(info);
    			if_block0.d();
    			if_block1.d();
    			if_block2.d();
    			destroy_component(tradepanel);
    			destroy_component(datatable);
    			if (detaching) detach_dev(t18);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(if_block3_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(71:27) ",
    		ctx
    	});

    	return block;
    }

    // (69:0) {#if $INIT_FAILED || $USER.geobanned}
    function create_if_block$8(ctx) {
    	let initfailed;
    	let current;
    	initfailed = new InitFailed({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(initfailed.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(initfailed, target, anchor);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(initfailed.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(initfailed.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(initfailed, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(69:0) {#if $INIT_FAILED || $USER.geobanned}",
    		ctx
    	});

    	return block;
    }

    // (86:8) {#key $MARKET.totalValueLocked}
    function create_key_block_3(ctx) {
    	let h1;
    	let t_value = totalAbbrev(/*$MARKET*/ ctx[1].totalValueLocked) + "";
    	let t;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			t = text(t_value);
    			attr_dev(h1, "class", "view-header text-gradient");
    			add_location(h1, file$d, 86, 10, 3225);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			append_dev(h1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$MARKET*/ 2 && t_value !== (t_value = totalAbbrev(/*$MARKET*/ ctx[1].totalValueLocked) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block_3.name,
    		type: "key",
    		source: "(86:8) {#key $MARKET.totalValueLocked}",
    		ctx
    	});

    	return block;
    }

    // (122:10) {:else}
    function create_else_block_10(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "--";
    			attr_dev(p, "class", "svelte-1a7fp36");
    			add_location(p, file$d, 122, 12, 4730);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_10.name,
    		type: "else",
    		source: "(122:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (100:10) {#if $USER.walletInit}
    function create_if_block_13(ctx) {
    	let previous_key = /*$USER*/ ctx[2].position.colRatio;
    	let key_block_anchor;
    	let key_block = create_key_block_2(ctx);

    	const block = {
    		c: function create() {
    			key_block.c();
    			key_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			key_block.m(target, anchor);
    			insert_dev(target, key_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 4 && safe_not_equal(previous_key, previous_key = /*$USER*/ ctx[2].position.colRatio)) {
    				key_block.d(1);
    				key_block = create_key_block_2(ctx);
    				key_block.c();
    				key_block.m(key_block_anchor.parentNode, key_block_anchor);
    			} else {
    				key_block.p(ctx, dirty);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(key_block_anchor);
    			key_block.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13.name,
    		type: "if",
    		source: "(100:10) {#if $USER.walletInit}",
    		ctx
    	});

    	return block;
    }

    // (112:16) {:else}
    function create_else_block_9(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("∞");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_9.name,
    		type: "else",
    		source: "(112:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (110:87) 
    function create_if_block_16(ctx) {
    	let t_value = currencyFormatter(/*$USER*/ ctx[2].position.colRatio * 100, false, 1) + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 4 && t_value !== (t_value = currencyFormatter(/*$USER*/ ctx[2].position.colRatio * 100, false, 1) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16.name,
    		type: "if",
    		source: "(110:87) ",
    		ctx
    	});

    	return block;
    }

    // (108:16) {#if $USER.position.borrowedValue && $USER.position.colRatio > 10}
    function create_if_block_15(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(">1000");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15.name,
    		type: "if",
    		source: "(108:16) {#if $USER.position.borrowedValue && $USER.position.colRatio > 10}",
    		ctx
    	});

    	return block;
    }

    // (115:16) {#if $USER.position.borrowedValue}
    function create_if_block_14(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "%";
    			set_style(span, "color", "inherit");
    			set_style(span, "padding-left", "2px");
    			add_location(span, file$d, 115, 18, 4541);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14.name,
    		type: "if",
    		source: "(115:16) {#if $USER.position.borrowedValue}",
    		ctx
    	});

    	return block;
    }

    // (101:12) {#key $USER.position.colRatio}
    function create_key_block_2(ctx) {
    	let h1;
    	let t;
    	let h1_style_value;

    	function select_block_type_2(ctx, dirty) {
    		if (/*$USER*/ ctx[2].position.borrowedValue && /*$USER*/ ctx[2].position.colRatio > 10) return create_if_block_15;
    		if (/*$USER*/ ctx[2].position.borrowedValue && /*$USER*/ ctx[2].position.colRatio < 10) return create_if_block_16;
    		return create_else_block_9;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*$USER*/ ctx[2].position.borrowedValue && create_if_block_14(ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(h1, "class", "view-header svelte-1a7fp36");

    			attr_dev(h1, "style", h1_style_value = "margin-bottom: -20px; " + (/*$USER*/ ctx[2].wallet
    			? /*$USER*/ ctx[2].position.borrowedValue && Math.floor(/*$USER*/ ctx[2].position.colRatio) <= /*$MARKET*/ ctx[1].minColRatio
    				? 'color: var(--failure);'
    				: 'color: var(--success);'
    			: ''));

    			add_location(h1, file$d, 101, 14, 3815);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			if_block0.m(h1, null);
    			append_dev(h1, t);
    			if (if_block1) if_block1.m(h1, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(h1, t);
    				}
    			}

    			if (/*$USER*/ ctx[2].position.borrowedValue) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_14(ctx);
    					if_block1.c();
    					if_block1.m(h1, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*$USER, $MARKET*/ 6 && h1_style_value !== (h1_style_value = "margin-bottom: -20px; " + (/*$USER*/ ctx[2].wallet
    			? /*$USER*/ ctx[2].position.borrowedValue && Math.floor(/*$USER*/ ctx[2].position.colRatio) <= /*$MARKET*/ ctx[1].minColRatio
    				? 'color: var(--failure);'
    				: 'color: var(--success);'
    			: ''))) {
    				attr_dev(h1, "style", h1_style_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block_2.name,
    		type: "key",
    		source: "(101:12) {#key $USER.position.colRatio}",
    		ctx
    	});

    	return block;
    }

    // (139:12) {:else}
    function create_else_block_8(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "--";
    			attr_dev(p, "class", "bicyclette svelte-1a7fp36");
    			add_location(p, file$d, 139, 14, 5320);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_8.name,
    		type: "else",
    		source: "(139:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (133:12) {#if $USER.walletInit}
    function create_if_block_12(ctx) {
    	let previous_key = /*$USER*/ ctx[2].position.depositedValue;
    	let key_block_anchor;
    	let key_block = create_key_block_1(ctx);

    	const block = {
    		c: function create() {
    			key_block.c();
    			key_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			key_block.m(target, anchor);
    			insert_dev(target, key_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 4 && safe_not_equal(previous_key, previous_key = /*$USER*/ ctx[2].position.depositedValue)) {
    				key_block.d(1);
    				key_block = create_key_block_1(ctx);
    				key_block.c();
    				key_block.m(key_block_anchor.parentNode, key_block_anchor);
    			} else {
    				key_block.p(ctx, dirty);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(key_block_anchor);
    			key_block.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12.name,
    		type: "if",
    		source: "(133:12) {#if $USER.walletInit}",
    		ctx
    	});

    	return block;
    }

    // (134:14) {#key $USER.position.depositedValue}
    function create_key_block_1(ctx) {
    	let p;
    	let t_value = totalAbbrev(/*$USER*/ ctx[2].position.depositedValue ?? 0) + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "bicyclette text-gradient svelte-1a7fp36");
    			add_location(p, file$d, 134, 16, 5139);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 4 && t_value !== (t_value = totalAbbrev(/*$USER*/ ctx[2].position.depositedValue ?? 0) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block_1.name,
    		type: "key",
    		source: "(134:14) {#key $USER.position.depositedValue}",
    		ctx
    	});

    	return block;
    }

    // (155:12) {:else}
    function create_else_block_7(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "--";
    			attr_dev(p, "class", "bicyclette svelte-1a7fp36");
    			add_location(p, file$d, 155, 14, 5891);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_7.name,
    		type: "else",
    		source: "(155:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (149:12) {#if $USER.walletInit}
    function create_if_block_11(ctx) {
    	let previous_key = /*$USER*/ ctx[2].position.borrowedValue;
    	let key_block_anchor;
    	let key_block = create_key_block(ctx);

    	const block = {
    		c: function create() {
    			key_block.c();
    			key_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			key_block.m(target, anchor);
    			insert_dev(target, key_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 4 && safe_not_equal(previous_key, previous_key = /*$USER*/ ctx[2].position.borrowedValue)) {
    				key_block.d(1);
    				key_block = create_key_block(ctx);
    				key_block.c();
    				key_block.m(key_block_anchor.parentNode, key_block_anchor);
    			} else {
    				key_block.p(ctx, dirty);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(key_block_anchor);
    			key_block.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(149:12) {#if $USER.walletInit}",
    		ctx
    	});

    	return block;
    }

    // (150:14) {#key $USER.position.borrowedValue}
    function create_key_block(ctx) {
    	let p;
    	let t_value = totalAbbrev(/*$USER*/ ctx[2].position.borrowedValue ?? 0) + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "bicyclette text-gradient svelte-1a7fp36");
    			add_location(p, file$d, 150, 16, 5711);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 4 && t_value !== (t_value = totalAbbrev(/*$USER*/ ctx[2].position.borrowedValue ?? 0) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block.name,
    		type: "key",
    		source: "(150:14) {#key $USER.position.borrowedValue}",
    		ctx
    	});

    	return block;
    }

    // (209:8) {#if $rows[i].name !== 'Ether' && $rows[i].name !== 'Bitcoin'}
    function create_if_block_3$2(ctx) {
    	let tr0;
    	let td0;
    	let t0;
    	let tr1;
    	let td1;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t1;
    	let span0;
    	let t2_value = /*$rows*/ ctx[4][/*i*/ ctx[14]].name + "";
    	let t2;
    	let t3;
    	let span1;
    	let t4;
    	let t5_value = currencyFormatter(/*$rows*/ ctx[4][/*i*/ ctx[14]].price, true, 2) + "";
    	let t5;
    	let t6;
    	let td2;
    	let t7_value = /*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev + "";
    	let t7;
    	let t8;
    	let t9_value = dictionary[/*$USER*/ ctx[2].language].cockpit.detail + "";
    	let t9;
    	let t10;
    	let td3;
    	let t11_value = totalAbbrev(/*$rows*/ ctx[4][/*i*/ ctx[14]].availableLiquidity.uiAmountFloat, /*$rows*/ ctx[4][/*i*/ ctx[14]].price, /*$MARKET*/ ctx[1].nativeValues, 2) + "";
    	let t11;
    	let t12;
    	let td4;

    	let t13_value = (/*$rows*/ ctx[4][/*i*/ ctx[14]].depositRate
    	? (/*$rows*/ ctx[4][/*i*/ ctx[14]].depositRate * 100).toFixed(2)
    	: 0) + "";

    	let t13;
    	let t14;
    	let t15;
    	let td5;

    	let t16_value = (/*$rows*/ ctx[4][/*i*/ ctx[14]].borrowRate
    	? (/*$rows*/ ctx[4][/*i*/ ctx[14]].borrowRate * 100).toFixed(2)
    	: 0) + "";

    	let t16;
    	let t17;
    	let t18;
    	let td6;
    	let t19;
    	let td7;
    	let td7_style_value;
    	let t20;
    	let td8;
    	let td8_style_value;
    	let t21;
    	let t22;
    	let tr2;
    	let td9;
    	let t23;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[8](/*i*/ ctx[14]);
    	}

    	function select_block_type_5(ctx, dirty) {
    		if (/*$USER*/ ctx[2].walletInit) return create_if_block_9$2;
    		return create_else_block_6;
    	}

    	let current_block_type = select_block_type_5(ctx);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_7(ctx, dirty) {
    		if (/*$USER*/ ctx[2].walletInit) return create_if_block_7$2;
    		return create_else_block_4;
    	}

    	let current_block_type_1 = select_block_type_7(ctx);
    	let if_block1 = current_block_type_1(ctx);

    	function select_block_type_9(ctx, dirty) {
    		if (/*$USER*/ ctx[2].walletInit) return create_if_block_5$2;
    		return create_else_block_2$2;
    	}

    	let current_block_type_2 = select_block_type_9(ctx);
    	let if_block2 = current_block_type_2(ctx);

    	function select_block_type_11(ctx, dirty) {
    		return create_if_block_4$2;
    	}

    	let current_block_type_3 = select_block_type_11();
    	let if_block3 = current_block_type_3(ctx);

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[10](/*i*/ ctx[14]);
    	}

    	const block = {
    		c: function create() {
    			tr0 = element("tr");
    			td0 = element("td");
    			t0 = space();
    			tr1 = element("tr");
    			td1 = element("td");
    			img = element("img");
    			t1 = space();
    			span0 = element("span");
    			t2 = text(t2_value);
    			t3 = space();
    			span1 = element("span");
    			t4 = text("≈ ");
    			t5 = text(t5_value);
    			t6 = space();
    			td2 = element("td");
    			t7 = text(t7_value);
    			t8 = space();
    			t9 = text(t9_value);
    			t10 = space();
    			td3 = element("td");
    			t11 = text(t11_value);
    			t12 = space();
    			td4 = element("td");
    			t13 = text(t13_value);
    			t14 = text("%");
    			t15 = space();
    			td5 = element("td");
    			t16 = text(t16_value);
    			t17 = text("%");
    			t18 = space();
    			td6 = element("td");
    			if_block0.c();
    			t19 = space();
    			td7 = element("td");
    			if_block1.c();
    			t20 = space();
    			td8 = element("td");
    			if_block2.c();
    			t21 = space();
    			if_block3.c();
    			t22 = space();
    			tr2 = element("tr");
    			td9 = element("td");
    			t23 = space();
    			add_location(td0, file$d, 211, 12, 7601);
    			attr_dev(tr0, "class", "datatable-spacer");
    			add_location(tr0, file$d, 210, 10, 7559);
    			if (!src_url_equal(img.src, img_src_value = "img/cryptos/" + /*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev + ".png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = "" + (/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev + " Icon"));
    			add_location(img, file$d, 219, 14, 7934);
    			add_location(span0, file$d, 222, 14, 8056);
    			add_location(span1, file$d, 225, 14, 8131);
    			attr_dev(td1, "class", "dt-asset");
    			add_location(td1, file$d, 218, 12, 7898);
    			attr_dev(td2, "class", "reserve-detail");
    			add_location(td2, file$d, 229, 12, 8253);
    			add_location(td3, file$d, 233, 12, 8444);
    			add_location(td4, file$d, 241, 12, 8671);
    			attr_dev(td5, "class", "datatable-border-right");
    			add_location(td5, file$d, 244, 12, 8790);
    			toggle_class(td6, "dt-bold", /*$USER*/ ctx[2].walletBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev]);
    			toggle_class(td6, "dt-balance", /*$USER*/ ctx[2].walletBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev]);
    			add_location(td6, file$d, 247, 12, 8938);

    			attr_dev(td7, "style", td7_style_value = /*$USER*/ ctx[2].collateralBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev]
    			? 'color: var(--jet-green) !important;'
    			: '');

    			toggle_class(td7, "dt-bold", /*$USER*/ ctx[2].collateralBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev]);
    			add_location(td7, file$d, 265, 12, 9615);

    			attr_dev(td8, "style", td8_style_value = /*$USER*/ ctx[2].loanBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev]
    			? 'color: var(--jet-blue) !important;'
    			: '');

    			toggle_class(td8, "dt-bold", /*$USER*/ ctx[2].loanBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev]);
    			add_location(td8, file$d, 284, 12, 10362);
    			toggle_class(tr1, "active", /*$MARKET*/ ctx[1].currentReserve.abbrev === /*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev);
    			add_location(tr1, file$d, 213, 10, 7669);
    			add_location(td9, file$d, 321, 12, 11768);
    			attr_dev(tr2, "class", "datatable-spacer");
    			add_location(tr2, file$d, 320, 10, 11726);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr0, anchor);
    			append_dev(tr0, td0);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, tr1, anchor);
    			append_dev(tr1, td1);
    			append_dev(td1, img);
    			append_dev(td1, t1);
    			append_dev(td1, span0);
    			append_dev(span0, t2);
    			append_dev(td1, t3);
    			append_dev(td1, span1);
    			append_dev(span1, t4);
    			append_dev(span1, t5);
    			append_dev(tr1, t6);
    			append_dev(tr1, td2);
    			append_dev(td2, t7);
    			append_dev(td2, t8);
    			append_dev(td2, t9);
    			append_dev(tr1, t10);
    			append_dev(tr1, td3);
    			append_dev(td3, t11);
    			append_dev(tr1, t12);
    			append_dev(tr1, td4);
    			append_dev(td4, t13);
    			append_dev(td4, t14);
    			append_dev(tr1, t15);
    			append_dev(tr1, td5);
    			append_dev(td5, t16);
    			append_dev(td5, t17);
    			append_dev(tr1, t18);
    			append_dev(tr1, td6);
    			if_block0.m(td6, null);
    			append_dev(tr1, t19);
    			append_dev(tr1, td7);
    			if_block1.m(td7, null);
    			append_dev(tr1, t20);
    			append_dev(tr1, td8);
    			if_block2.m(td8, null);
    			append_dev(tr1, t21);
    			if_block3.m(tr1, null);
    			insert_dev(target, t22, anchor);
    			insert_dev(target, tr2, anchor);
    			append_dev(tr2, td9);
    			append_dev(tr2, t23);

    			if (!mounted) {
    				dispose = [
    					listen_dev(td2, "click", click_handler, false, false, false),
    					listen_dev(tr1, "click", click_handler_2, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*$rows*/ 16 && !src_url_equal(img.src, img_src_value = "img/cryptos/" + /*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev + ".png")) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*$rows*/ 16 && img_alt_value !== (img_alt_value = "" + (/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev + " Icon"))) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty & /*$rows*/ 16 && t2_value !== (t2_value = /*$rows*/ ctx[4][/*i*/ ctx[14]].name + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*$rows*/ 16 && t5_value !== (t5_value = currencyFormatter(/*$rows*/ ctx[4][/*i*/ ctx[14]].price, true, 2) + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*$rows*/ 16 && t7_value !== (t7_value = /*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev + "")) set_data_dev(t7, t7_value);
    			if (dirty & /*$USER*/ 4 && t9_value !== (t9_value = dictionary[/*$USER*/ ctx[2].language].cockpit.detail + "")) set_data_dev(t9, t9_value);
    			if (dirty & /*$rows, $MARKET*/ 18 && t11_value !== (t11_value = totalAbbrev(/*$rows*/ ctx[4][/*i*/ ctx[14]].availableLiquidity.uiAmountFloat, /*$rows*/ ctx[4][/*i*/ ctx[14]].price, /*$MARKET*/ ctx[1].nativeValues, 2) + "")) set_data_dev(t11, t11_value);

    			if (dirty & /*$rows*/ 16 && t13_value !== (t13_value = (/*$rows*/ ctx[4][/*i*/ ctx[14]].depositRate
    			? (/*$rows*/ ctx[4][/*i*/ ctx[14]].depositRate * 100).toFixed(2)
    			: 0) + "")) set_data_dev(t13, t13_value);

    			if (dirty & /*$rows*/ 16 && t16_value !== (t16_value = (/*$rows*/ ctx[4][/*i*/ ctx[14]].borrowRate
    			? (/*$rows*/ ctx[4][/*i*/ ctx[14]].borrowRate * 100).toFixed(2)
    			: 0) + "")) set_data_dev(t16, t16_value);

    			if (current_block_type === (current_block_type = select_block_type_5(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(td6, null);
    				}
    			}

    			if (dirty & /*$USER, $rows*/ 20) {
    				toggle_class(td6, "dt-bold", /*$USER*/ ctx[2].walletBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev]);
    			}

    			if (dirty & /*$USER, $rows*/ 20) {
    				toggle_class(td6, "dt-balance", /*$USER*/ ctx[2].walletBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev]);
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_7(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(td7, null);
    				}
    			}

    			if (dirty & /*$USER, $rows*/ 20 && td7_style_value !== (td7_style_value = /*$USER*/ ctx[2].collateralBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev]
    			? 'color: var(--jet-green) !important;'
    			: '')) {
    				attr_dev(td7, "style", td7_style_value);
    			}

    			if (dirty & /*$USER, $rows*/ 20) {
    				toggle_class(td7, "dt-bold", /*$USER*/ ctx[2].collateralBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev]);
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_9(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type_2(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(td8, null);
    				}
    			}

    			if (dirty & /*$USER, $rows*/ 20 && td8_style_value !== (td8_style_value = /*$USER*/ ctx[2].loanBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev]
    			? 'color: var(--jet-blue) !important;'
    			: '')) {
    				attr_dev(td8, "style", td8_style_value);
    			}

    			if (dirty & /*$USER, $rows*/ 20) {
    				toggle_class(td8, "dt-bold", /*$USER*/ ctx[2].loanBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev]);
    			}

    			if_block3.p(ctx, dirty);

    			if (dirty & /*$MARKET, $rows*/ 18) {
    				toggle_class(tr1, "active", /*$MARKET*/ ctx[1].currentReserve.abbrev === /*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(tr1);
    			if_block0.d();
    			if_block1.d();
    			if_block2.d();
    			if_block3.d();
    			if (detaching) detach_dev(t22);
    			if (detaching) detach_dev(tr2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(209:8) {#if $rows[i].name !== 'Ether' && $rows[i].name !== 'Bitcoin'}",
    		ctx
    	});

    	return block;
    }

    // (262:14) {:else}
    function create_else_block_6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("--");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_6.name,
    		type: "else",
    		source: "(262:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (250:14) {#if $USER.walletInit}
    function create_if_block_9$2(ctx) {
    	let if_block_anchor;

    	function select_block_type_6(ctx, dirty) {
    		if (/*$USER*/ ctx[2].walletBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev] > 0 && /*$USER*/ ctx[2].walletBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev] < 0.0005) return create_if_block_10$2;
    		return create_else_block_5;
    	}

    	let current_block_type = select_block_type_6(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_6(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$2.name,
    		type: "if",
    		source: "(250:14) {#if $USER.walletInit}",
    		ctx
    	});

    	return block;
    }

    // (254:16) {:else}
    function create_else_block_5(ctx) {
    	let t_value = totalAbbrev(/*$USER*/ ctx[2].walletBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev] ?? 0, /*$rows*/ ctx[4][/*i*/ ctx[14]].price, /*$MARKET*/ ctx[1].nativeValues, 3) + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER, $rows, $MARKET*/ 22 && t_value !== (t_value = totalAbbrev(/*$USER*/ ctx[2].walletBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev] ?? 0, /*$rows*/ ctx[4][/*i*/ ctx[14]].price, /*$MARKET*/ ctx[1].nativeValues, 3) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_5.name,
    		type: "else",
    		source: "(254:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (251:16) {#if $USER.walletBalances[$rows[i].abbrev] > 0                   && $USER.walletBalances[$rows[i].abbrev] < 0.0005}
    function create_if_block_10$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("~0");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$2.name,
    		type: "if",
    		source: "(251:16) {#if $USER.walletBalances[$rows[i].abbrev] > 0                   && $USER.walletBalances[$rows[i].abbrev] < 0.0005}",
    		ctx
    	});

    	return block;
    }

    // (281:14) {:else}
    function create_else_block_4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("--");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_4.name,
    		type: "else",
    		source: "(281:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (269:14) {#if $USER.walletInit}
    function create_if_block_7$2(ctx) {
    	let if_block_anchor;

    	function select_block_type_8(ctx, dirty) {
    		if (/*$USER*/ ctx[2].collateralBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev] > 0 && /*$USER*/ ctx[2].collateralBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev] < 0.0005) return create_if_block_8$2;
    		return create_else_block_3;
    	}

    	let current_block_type = select_block_type_8(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_8(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$2.name,
    		type: "if",
    		source: "(269:14) {#if $USER.walletInit}",
    		ctx
    	});

    	return block;
    }

    // (273:16) {:else}
    function create_else_block_3(ctx) {
    	let t_value = totalAbbrev(/*$USER*/ ctx[2].collateralBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev] ?? 0, /*$rows*/ ctx[4][/*i*/ ctx[14]].price, /*$MARKET*/ ctx[1].nativeValues, 3) + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER, $rows, $MARKET*/ 22 && t_value !== (t_value = totalAbbrev(/*$USER*/ ctx[2].collateralBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev] ?? 0, /*$rows*/ ctx[4][/*i*/ ctx[14]].price, /*$MARKET*/ ctx[1].nativeValues, 3) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3.name,
    		type: "else",
    		source: "(273:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (270:16) {#if $USER.collateralBalances[$rows[i].abbrev] > 0                   && $USER.collateralBalances[$rows[i].abbrev] < 0.0005}
    function create_if_block_8$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("~0");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$2.name,
    		type: "if",
    		source: "(270:16) {#if $USER.collateralBalances[$rows[i].abbrev] > 0                   && $USER.collateralBalances[$rows[i].abbrev] < 0.0005}",
    		ctx
    	});

    	return block;
    }

    // (300:14) {:else}
    function create_else_block_2$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("--");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$2.name,
    		type: "else",
    		source: "(300:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (288:14) {#if $USER.walletInit}
    function create_if_block_5$2(ctx) {
    	let if_block_anchor;

    	function select_block_type_10(ctx, dirty) {
    		if (/*$USER*/ ctx[2].loanBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev] > 0 && /*$USER*/ ctx[2].loanBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev] < 0.0005) return create_if_block_6$2;
    		return create_else_block_1$2;
    	}

    	let current_block_type = select_block_type_10(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_10(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(288:14) {#if $USER.walletInit}",
    		ctx
    	});

    	return block;
    }

    // (292:16) {:else}
    function create_else_block_1$2(ctx) {
    	let t_value = totalAbbrev(/*$USER*/ ctx[2].loanBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev] ?? 0, /*$rows*/ ctx[4][/*i*/ ctx[14]].price, /*$MARKET*/ ctx[1].nativeValues, 3) + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER, $rows, $MARKET*/ 22 && t_value !== (t_value = totalAbbrev(/*$USER*/ ctx[2].loanBalances[/*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev] ?? 0, /*$rows*/ ctx[4][/*i*/ ctx[14]].price, /*$MARKET*/ ctx[1].nativeValues, 3) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(292:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (289:16) {#if $USER.loanBalances[$rows[i].abbrev] > 0                   && $USER.loanBalances[$rows[i].abbrev] < 0.0005}
    function create_if_block_6$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("~0");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$2.name,
    		type: "if",
    		source: "(289:16) {#if $USER.loanBalances[$rows[i].abbrev] > 0                   && $USER.loanBalances[$rows[i].abbrev] < 0.0005}",
    		ctx
    	});

    	return block;
    }

    // (306:12) {#if inDevelopment}
    function create_if_block_4$2(ctx) {
    	let td;
    	let i;
    	let i_title_value;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[9](/*i*/ ctx[14]);
    	}

    	const block = {
    		c: function create() {
    			td = element("td");
    			i = element("i");
    			attr_dev(i, "class", "text-gradient fas fa-parachute-box");
    			attr_dev(i, "title", i_title_value = "Airdrop " + /*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev);
    			set_style(i, "margin-right", "var(--spacing-lg)");
    			set_style(i, "font-size", "18px", 1);
    			add_location(i, file$d, 307, 16, 11295);
    			attr_dev(td, "class", "faucet");
    			add_location(td, file$d, 306, 14, 11222);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    			append_dev(td, i);

    			if (!mounted) {
    				dispose = listen_dev(td, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*$rows*/ 16 && i_title_value !== (i_title_value = "Airdrop " + /*$rows*/ ctx[4][/*i*/ ctx[14]].abbrev)) {
    				attr_dev(i, "title", i_title_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(306:12) {#if inDevelopment}",
    		ctx
    	});

    	return block;
    }

    // (207:8) {#each $rows as row, i}
    function create_each_block$7(ctx) {
    	let if_block_anchor;
    	let if_block = /*$rows*/ ctx[4][/*i*/ ctx[14]].name !== 'Ether' && /*$rows*/ ctx[4][/*i*/ ctx[14]].name !== 'Bitcoin' && create_if_block_3$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*$rows*/ ctx[4][/*i*/ ctx[14]].name !== 'Ether' && /*$rows*/ ctx[4][/*i*/ ctx[14]].name !== 'Bitcoin') {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_3$2(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(207:8) {#each $rows as row, i}",
    		ctx
    	});

    	return block;
    }

    // (165:4) <Datatable settings={tableSettings} data={$MARKET.reservesArray}>
    function create_default_slot$3(ctx) {
    	let thead;
    	let th0;
    	let t0_value = dictionary[/*$USER*/ ctx[2].language].cockpit.asset + "";
    	let t0;
    	let t1;
    	let th1;
    	let toggle;
    	let t2;
    	let th2;
    	let t3_value = dictionary[/*$USER*/ ctx[2].language].cockpit.availableLiquidity + "";
    	let t3;
    	let t4;
    	let th3;
    	let t5_value = dictionary[/*$USER*/ ctx[2].language].cockpit.depositRate + "";
    	let t5;
    	let t6;
    	let info0;
    	let t7;
    	let th4;
    	let t8_value = dictionary[/*$USER*/ ctx[2].language].cockpit.borrowRate + "";
    	let t8;
    	let t9;
    	let info1;
    	let t10;
    	let th5;
    	let t11_value = dictionary[/*$USER*/ ctx[2].language].cockpit.walletBalance + "";
    	let t11;
    	let t12;
    	let th6;
    	let t13_value = dictionary[/*$USER*/ ctx[2].language].cockpit.amountDeposited + "";
    	let t13;
    	let t14;
    	let th7;
    	let t15_value = dictionary[/*$USER*/ ctx[2].language].cockpit.amountBorrowed + "";
    	let t15;
    	let t16;
    	let th8;
    	let t17;
    	let div;
    	let t18;
    	let tbody;
    	let current;

    	toggle = new Toggle({
    			props: {
    				onClick: /*func*/ ctx[7],
    				active: !/*$MARKET*/ ctx[1].nativeValues,
    				native: true
    			},
    			$$inline: true
    		});

    	info0 = new Info({
    			props: { term: "depositRate" },
    			$$inline: true
    		});

    	info1 = new Info({
    			props: { term: "borrowRate" },
    			$$inline: true
    		});

    	let each_value = /*$rows*/ ctx[4];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			thead = element("thead");
    			th0 = element("th");
    			t0 = text(t0_value);
    			t1 = space();
    			th1 = element("th");
    			create_component(toggle.$$.fragment);
    			t2 = space();
    			th2 = element("th");
    			t3 = text(t3_value);
    			t4 = space();
    			th3 = element("th");
    			t5 = text(t5_value);
    			t6 = space();
    			create_component(info0.$$.fragment);
    			t7 = space();
    			th4 = element("th");
    			t8 = text(t8_value);
    			t9 = space();
    			create_component(info1.$$.fragment);
    			t10 = space();
    			th5 = element("th");
    			t11 = text(t11_value);
    			t12 = space();
    			th6 = element("th");
    			t13 = text(t13_value);
    			t14 = space();
    			th7 = element("th");
    			t15 = text(t15_value);
    			t16 = space();
    			th8 = element("th");
    			t17 = space();
    			div = element("div");
    			t18 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(th0, "data-key", "name");
    			add_location(th0, file$d, 166, 8, 6137);
    			attr_dev(th1, "data-key", "abbrev");
    			attr_dev(th1, "class", "native-toggle");
    			add_location(th1, file$d, 169, 8, 6234);
    			attr_dev(th2, "data-key", "availableLiquidity");
    			add_location(th2, file$d, 179, 8, 6544);
    			attr_dev(th3, "data-key", "depositRate");
    			add_location(th3, file$d, 182, 8, 6667);
    			attr_dev(th4, "data-key", "borrowRate");
    			attr_dev(th4, "class", "datatable-border-right");
    			add_location(th4, file$d, 186, 8, 6814);
    			attr_dev(th5, "data-key", "");
    			add_location(th5, file$d, 190, 8, 6989);
    			attr_dev(th6, "data-key", "");
    			add_location(th6, file$d, 193, 8, 7089);
    			attr_dev(th7, "data-key", "");
    			add_location(th7, file$d, 196, 8, 7191);
    			attr_dev(th8, "data-key", "");
    			add_location(th8, file$d, 199, 8, 7292);
    			add_location(thead, file$d, 165, 6, 6121);
    			attr_dev(div, "class", "datatable-divider");
    			add_location(div, file$d, 203, 6, 7384);
    			add_location(tbody, file$d, 205, 6, 7435);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, thead, anchor);
    			append_dev(thead, th0);
    			append_dev(th0, t0);
    			append_dev(thead, t1);
    			append_dev(thead, th1);
    			mount_component(toggle, th1, null);
    			append_dev(thead, t2);
    			append_dev(thead, th2);
    			append_dev(th2, t3);
    			append_dev(thead, t4);
    			append_dev(thead, th3);
    			append_dev(th3, t5);
    			append_dev(th3, t6);
    			mount_component(info0, th3, null);
    			append_dev(thead, t7);
    			append_dev(thead, th4);
    			append_dev(th4, t8);
    			append_dev(th4, t9);
    			mount_component(info1, th4, null);
    			append_dev(thead, t10);
    			append_dev(thead, th5);
    			append_dev(th5, t11);
    			append_dev(thead, t12);
    			append_dev(thead, th6);
    			append_dev(th6, t13);
    			append_dev(thead, t14);
    			append_dev(thead, th7);
    			append_dev(th7, t15);
    			append_dev(thead, t16);
    			append_dev(thead, th8);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, div, anchor);
    			insert_dev(target, t18, anchor);
    			insert_dev(target, tbody, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tbody, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$USER*/ 4) && t0_value !== (t0_value = dictionary[/*$USER*/ ctx[2].language].cockpit.asset + "")) set_data_dev(t0, t0_value);
    			const toggle_changes = {};
    			if (dirty & /*$MARKET*/ 2) toggle_changes.active = !/*$MARKET*/ ctx[1].nativeValues;
    			toggle.$set(toggle_changes);
    			if ((!current || dirty & /*$USER*/ 4) && t3_value !== (t3_value = dictionary[/*$USER*/ ctx[2].language].cockpit.availableLiquidity + "")) set_data_dev(t3, t3_value);
    			if ((!current || dirty & /*$USER*/ 4) && t5_value !== (t5_value = dictionary[/*$USER*/ ctx[2].language].cockpit.depositRate + "")) set_data_dev(t5, t5_value);
    			if ((!current || dirty & /*$USER*/ 4) && t8_value !== (t8_value = dictionary[/*$USER*/ ctx[2].language].cockpit.borrowRate + "")) set_data_dev(t8, t8_value);
    			if ((!current || dirty & /*$USER*/ 4) && t11_value !== (t11_value = dictionary[/*$USER*/ ctx[2].language].cockpit.walletBalance + "")) set_data_dev(t11, t11_value);
    			if ((!current || dirty & /*$USER*/ 4) && t13_value !== (t13_value = dictionary[/*$USER*/ ctx[2].language].cockpit.amountDeposited + "")) set_data_dev(t13, t13_value);
    			if ((!current || dirty & /*$USER*/ 4) && t15_value !== (t15_value = dictionary[/*$USER*/ ctx[2].language].cockpit.amountBorrowed + "")) set_data_dev(t15, t15_value);

    			if (dirty & /*$MARKET, $rows, MARKET, doAirdrop, inDevelopment, $USER, totalAbbrev, reserveDetail, dictionary, currencyFormatter*/ 87) {
    				each_value = /*$rows*/ ctx[4];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(toggle.$$.fragment, local);
    			transition_in(info0.$$.fragment, local);
    			transition_in(info1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(toggle.$$.fragment, local);
    			transition_out(info0.$$.fragment, local);
    			transition_out(info1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(thead);
    			destroy_component(toggle);
    			destroy_component(info0);
    			destroy_component(info1);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t18);
    			if (detaching) detach_dev(tbody);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(165:4) <Datatable settings={tableSettings} data={$MARKET.reservesArray}>",
    		ctx
    	});

    	return block;
    }

    // (330:2) {#if reserveDetail}
    function create_if_block_2$4(ctx) {
    	let reservedetail;
    	let current;

    	reservedetail = new ReserveDetail({
    			props: {
    				reserveDetail: /*reserveDetail*/ ctx[0],
    				closeModal: /*func_1*/ ctx[11]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(reservedetail.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(reservedetail, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const reservedetail_changes = {};
    			if (dirty & /*reserveDetail*/ 1) reservedetail_changes.reserveDetail = /*reserveDetail*/ ctx[0];
    			if (dirty & /*reserveDetail*/ 1) reservedetail_changes.closeModal = /*func_1*/ ctx[11];
    			reservedetail.$set(reservedetail_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(reservedetail.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(reservedetail.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(reservedetail, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(330:2) {#if reserveDetail}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let title_value;
    	let t;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	document_1$1.title = title_value = "NEXFIN | " + dictionary[/*$USER*/ ctx[2].language].cockpit.title;
    	const if_block_creators = [create_if_block$8, create_if_block_1$4, create_else_block_11];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$INIT_FAILED*/ ctx[3] || /*$USER*/ ctx[2].geobanned) return 0;
    		if (/*$MARKET*/ ctx[1] && /*$USER*/ ctx[2]) return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			t = space();
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*dictionary, $USER*/ 4) && title_value !== (title_value = "NEXFIN | " + dictionary[/*$USER*/ ctx[2].language].cockpit.title)) {
    				document_1$1.title = title_value;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let $MARKET;
    	let $USER;
    	let $INIT_FAILED;
    	let $rows;
    	validate_store(MARKET, 'MARKET');
    	component_subscribe($$self, MARKET, $$value => $$invalidate(1, $MARKET = $$value));
    	validate_store(USER, 'USER');
    	component_subscribe($$self, USER, $$value => $$invalidate(2, $USER = $$value));
    	validate_store(INIT_FAILED, 'INIT_FAILED');
    	component_subscribe($$self, INIT_FAILED, $$value => $$invalidate(3, $INIT_FAILED = $$value));
    	validate_store(rows, 'rows');
    	component_subscribe($$self, rows, $$value => $$invalidate(4, $rows = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Cockpit', slots, []);

    	// Reserve detail controller
    	let reserveDetail = null;

    	// Datatable settings
    	const tableSettings = {
    		sortable: false,
    		pagination: false,
    		scrollY: false,
    		blocks: { searchInput: true },
    		labels: {
    			search: dictionary[$USER.language].cockpit.search
    		}
    	};

    	// If in development, can request airdrop for testing
    	const doAirdrop = async reserve => {
    		let amount = TokenAmount.tokens("100", reserve.decimals);

    		if (reserve.tokenMintPubkey.equals(NATIVE_MINT)) {
    			amount = TokenAmount.tokens("1", reserve.decimals);
    		}

    		const [ok, txid] = await airdrop(reserve.abbrev, amount.amount);

    		if (ok && txid) {
    			$USER.addNotification({
    				success: true,
    				text: dictionary[$USER.language].copilot.alert.airdropSuccess.replaceAll('{{UI AMOUNT}}', amount.uiAmount).replaceAll('{{RESERVE ABBREV}}', reserve.abbrev)
    			});
    		} else if (!ok && !txid) {
    			$USER.addNotification({
    				success: false,
    				text: dictionary[$USER.language].cockpit.txFailed
    			});
    		}
    	};

    	// Init Cockpit
    	onMount(() => {
    		// If user is subject to liquidation, warn them
    		if ($USER.position.borrowedValue && $USER.position.colRatio <= $MARKET.minColRatio) {
    			generateCopilotSuggestion();
    		}

    		// Add search icon to table search input
    		const searchIcon = document.createElement('i');

    		searchIcon.classList.add('search', 'text-gradient', 'fas', 'fa-search');
    		document.querySelector('.dt-search')?.appendChild(searchIcon);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Cockpit> was created with unknown prop '${key}'`);
    	});

    	const func = () => MARKET.update(market => {
    		market.nativeValues = !market.nativeValues;
    		return market;
    	});

    	const click_handler = i => $$invalidate(0, reserveDetail = $rows[i]);
    	const click_handler_1 = i => doAirdrop($rows[i]);

    	const click_handler_2 = i => MARKET.update(market => {
    		market.currentReserve = $rows[i];
    		return market;
    	});

    	const func_1 = () => $$invalidate(0, reserveDetail = null);

    	$$self.$capture_state = () => ({
    		onMount,
    		Datatable,
    		rows,
    		NATIVE_MINT,
    		INIT_FAILED,
    		MARKET,
    		USER,
    		inDevelopment,
    		airdrop,
    		currencyFormatter,
    		totalAbbrev,
    		TokenAmount,
    		generateCopilotSuggestion,
    		dictionary,
    		Loader,
    		ReserveDetail,
    		Toggle,
    		InitFailed,
    		ConnectWalletButton,
    		Info,
    		TradePanel,
    		reserveDetail,
    		tableSettings,
    		doAirdrop,
    		$MARKET,
    		$USER,
    		$INIT_FAILED,
    		$rows
    	});

    	$$self.$inject_state = $$props => {
    		if ('reserveDetail' in $$props) $$invalidate(0, reserveDetail = $$props.reserveDetail);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		reserveDetail,
    		$MARKET,
    		$USER,
    		$INIT_FAILED,
    		$rows,
    		tableSettings,
    		doAirdrop,
    		func,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		func_1
    	];
    }

    class Cockpit extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$e, create_fragment$e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Cockpit",
    			options,
    			id: create_fragment$e.name
    		});
    	}
    }

    /* src/views/TransactionLogs.svelte generated by Svelte v3.44.2 */

    const { document: document_1 } = globals;
    const file$c = "src/views/TransactionLogs.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	child_ctx[6] = i;
    	return child_ctx;
    }

    // (75:8) {#each $rows as row, i}
    function create_each_block$6(ctx) {
    	let tr0;
    	let td0;
    	let t0;
    	let tr1;
    	let td1;
    	let t1_value = /*$rows*/ ctx[1][/*i*/ ctx[6]].blockDate + "";
    	let t1;
    	let t2;
    	let td2;
    	let t3_value = shortenPubkey(/*$rows*/ ctx[1][/*i*/ ctx[6]].signature, 4) + "";
    	let t3;
    	let t4;
    	let td3;
    	let t5_value = /*$rows*/ ctx[1][/*i*/ ctx[6]].tradeAction + "";
    	let t5;
    	let t6;
    	let td4;
    	let t7_value = totalAbbrev(Math.abs(/*$rows*/ ctx[1][/*i*/ ctx[6]].tradeAmount.uiAmountFloat), /*$rows*/ ctx[1][/*i*/ ctx[6]].tokenPrice, true, /*$rows*/ ctx[1][/*i*/ ctx[6]].tokenDecimals) + "";
    	let t7;
    	let t8;
    	let t9_value = /*$rows*/ ctx[1][/*i*/ ctx[6]].tokenAbbrev + "";
    	let t9;
    	let t10;
    	let td5;
    	let i_1;
    	let t12;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[3](/*i*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			tr0 = element("tr");
    			td0 = element("td");
    			t0 = space();
    			tr1 = element("tr");
    			td1 = element("td");
    			t1 = text(t1_value);
    			t2 = space();
    			td2 = element("td");
    			t3 = text(t3_value);
    			t4 = space();
    			td3 = element("td");
    			t5 = text(t5_value);
    			t6 = space();
    			td4 = element("td");
    			t7 = text(t7_value);
    			t8 = text(" \n              ");
    			t9 = text(t9_value);
    			t10 = space();
    			td5 = element("td");
    			i_1 = element("i");
    			i_1.textContent = "➜";
    			t12 = space();
    			attr_dev(td0, "class", "svelte-17sxp6y");
    			add_location(td0, file$c, 76, 12, 2459);
    			attr_dev(tr0, "class", "datatable-spacer");
    			add_location(tr0, file$c, 75, 10, 2417);
    			attr_dev(td1, "class", "svelte-17sxp6y");
    			add_location(td1, file$c, 79, 12, 2603);
    			set_style(td2, "color", "var(--success)");
    			attr_dev(td2, "class", "svelte-17sxp6y");
    			add_location(td2, file$c, 82, 12, 2673);
    			attr_dev(td3, "class", "reserve-detail svelte-17sxp6y");
    			set_style(td3, "text-align", "center", 1);
    			add_location(td3, file$c, 85, 12, 2792);
    			attr_dev(td4, "class", "asset svelte-17sxp6y");
    			add_location(td4, file$c, 89, 12, 2940);
    			attr_dev(i_1, "class", "text-gradient jet-icons");
    			add_location(i_1, file$c, 99, 14, 3258);
    			attr_dev(td5, "class", "svelte-17sxp6y");
    			add_location(td5, file$c, 98, 12, 3239);
    			add_location(tr1, file$c, 78, 10, 2525);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr0, anchor);
    			append_dev(tr0, td0);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, tr1, anchor);
    			append_dev(tr1, td1);
    			append_dev(td1, t1);
    			append_dev(tr1, t2);
    			append_dev(tr1, td2);
    			append_dev(td2, t3);
    			append_dev(tr1, t4);
    			append_dev(tr1, td3);
    			append_dev(td3, t5);
    			append_dev(tr1, t6);
    			append_dev(tr1, td4);
    			append_dev(td4, t7);
    			append_dev(td4, t8);
    			append_dev(td4, t9);
    			append_dev(tr1, t10);
    			append_dev(tr1, td5);
    			append_dev(td5, i_1);
    			append_dev(tr1, t12);

    			if (!mounted) {
    				dispose = listen_dev(tr1, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*$rows*/ 2 && t1_value !== (t1_value = /*$rows*/ ctx[1][/*i*/ ctx[6]].blockDate + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*$rows*/ 2 && t3_value !== (t3_value = shortenPubkey(/*$rows*/ ctx[1][/*i*/ ctx[6]].signature, 4) + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*$rows*/ 2 && t5_value !== (t5_value = /*$rows*/ ctx[1][/*i*/ ctx[6]].tradeAction + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*$rows*/ 2 && t7_value !== (t7_value = totalAbbrev(Math.abs(/*$rows*/ ctx[1][/*i*/ ctx[6]].tradeAmount.uiAmountFloat), /*$rows*/ ctx[1][/*i*/ ctx[6]].tokenPrice, true, /*$rows*/ ctx[1][/*i*/ ctx[6]].tokenDecimals) + "")) set_data_dev(t7, t7_value);
    			if (dirty & /*$rows*/ 2 && t9_value !== (t9_value = /*$rows*/ ctx[1][/*i*/ ctx[6]].tokenAbbrev + "")) set_data_dev(t9, t9_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(tr1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(75:8) {#each $rows as row, i}",
    		ctx
    	});

    	return block;
    }

    // (51:4) <Datatable settings={tableSettings} data={$USER.transactionLogs}>
    function create_default_slot$2(ctx) {
    	let thead;
    	let th0;
    	let t0_value = dictionary[/*$USER*/ ctx[0].language].transactions.date + "";
    	let t0;
    	let t1;
    	let th1;
    	let t2_value = dictionary[/*$USER*/ ctx[0].language].transactions.signature + "";
    	let t2;
    	let t3;
    	let th2;
    	let t4_value = dictionary[/*$USER*/ ctx[0].language].transactions.tradeAction + "";
    	let t4;
    	let t5;
    	let th3;
    	let t6_value = dictionary[/*$USER*/ ctx[0].language].transactions.tradeAmount + "";
    	let t6;
    	let t7;
    	let th4;
    	let loader;
    	let th4_style_value;
    	let t8;
    	let div;
    	let t9;
    	let tbody;
    	let current;
    	loader = new Loader({ props: { button: true }, $$inline: true });
    	let each_value = /*$rows*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			thead = element("thead");
    			th0 = element("th");
    			t0 = text(t0_value);
    			t1 = space();
    			th1 = element("th");
    			t2 = text(t2_value);
    			t3 = space();
    			th2 = element("th");
    			t4 = text(t4_value);
    			t5 = space();
    			th3 = element("th");
    			t6 = text(t6_value);
    			t7 = space();
    			th4 = element("th");
    			create_component(loader.$$.fragment);
    			t8 = space();
    			div = element("div");
    			t9 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(th0, "data-key", "blockDate");
    			attr_dev(th0, "class", "svelte-17sxp6y");
    			add_location(th0, file$c, 52, 8, 1648);
    			attr_dev(th1, "data-key", "signature");
    			attr_dev(th1, "class", "svelte-17sxp6y");
    			add_location(th1, file$c, 55, 8, 1754);
    			attr_dev(th2, "data-key", "tradeAction");
    			set_style(th2, "text-align", "center", 1);
    			attr_dev(th2, "class", "svelte-17sxp6y");
    			add_location(th2, file$c, 58, 8, 1865);
    			attr_dev(th3, "data-key", "tradeAmount");
    			attr_dev(th3, "class", "asset svelte-17sxp6y");
    			add_location(th3, file$c, 62, 8, 2029);

    			attr_dev(th4, "style", th4_style_value = /*$USER*/ ctx[0].transactionLogsInit
    			? 'opacity: 0;'
    			: 'opacity: 1;');

    			attr_dev(th4, "class", "svelte-17sxp6y");
    			add_location(th4, file$c, 65, 8, 2158);
    			add_location(thead, file$c, 51, 6, 1632);
    			attr_dev(div, "class", "datatable-divider");
    			add_location(div, file$c, 71, 6, 2316);
    			add_location(tbody, file$c, 73, 6, 2367);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, thead, anchor);
    			append_dev(thead, th0);
    			append_dev(th0, t0);
    			append_dev(thead, t1);
    			append_dev(thead, th1);
    			append_dev(th1, t2);
    			append_dev(thead, t3);
    			append_dev(thead, th2);
    			append_dev(th2, t4);
    			append_dev(thead, t5);
    			append_dev(thead, th3);
    			append_dev(th3, t6);
    			append_dev(thead, t7);
    			append_dev(thead, th4);
    			mount_component(loader, th4, null);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, tbody, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tbody, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$USER*/ 1) && t0_value !== (t0_value = dictionary[/*$USER*/ ctx[0].language].transactions.date + "")) set_data_dev(t0, t0_value);
    			if ((!current || dirty & /*$USER*/ 1) && t2_value !== (t2_value = dictionary[/*$USER*/ ctx[0].language].transactions.signature + "")) set_data_dev(t2, t2_value);
    			if ((!current || dirty & /*$USER*/ 1) && t4_value !== (t4_value = dictionary[/*$USER*/ ctx[0].language].transactions.tradeAction + "")) set_data_dev(t4, t4_value);
    			if ((!current || dirty & /*$USER*/ 1) && t6_value !== (t6_value = dictionary[/*$USER*/ ctx[0].language].transactions.tradeAmount + "")) set_data_dev(t6, t6_value);

    			if (!current || dirty & /*$USER*/ 1 && th4_style_value !== (th4_style_value = /*$USER*/ ctx[0].transactionLogsInit
    			? 'opacity: 0;'
    			: 'opacity: 1;')) {
    				attr_dev(th4, "style", th4_style_value);
    			}

    			if (dirty & /*window, $rows, totalAbbrev, Math, shortenPubkey*/ 2) {
    				each_value = /*$rows*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(thead);
    			destroy_component(loader);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(tbody);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(51:4) <Datatable settings={tableSettings} data={$USER.transactionLogs}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let title_value;
    	let t0;
    	let div2;
    	let h1;
    	let t1_value = dictionary[/*$USER*/ ctx[0].language].transactions.title + "";
    	let t1;
    	let t2;
    	let div0;
    	let t3;
    	let div1;
    	let datatable;
    	let current;
    	document_1.title = title_value = "NEXTFIN | " + dictionary[/*$USER*/ ctx[0].language].transactions.title;

    	datatable = new Datatable({
    			props: {
    				settings: /*tableSettings*/ ctx[2],
    				data: /*$USER*/ ctx[0].transactionLogs,
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			t0 = space();
    			div2 = element("div");
    			h1 = element("h1");
    			t1 = text(t1_value);
    			t2 = space();
    			div0 = element("div");
    			t3 = space();
    			div1 = element("div");
    			create_component(datatable.$$.fragment);
    			attr_dev(h1, "class", "view-title text-gradient");
    			add_location(h1, file$c, 44, 2, 1387);
    			attr_dev(div0, "class", "divider svelte-17sxp6y");
    			add_location(div0, file$c, 47, 2, 1487);
    			attr_dev(div1, "class", "transaction-logs flex svelte-17sxp6y");
    			add_location(div1, file$c, 49, 2, 1520);
    			attr_dev(div2, "class", "view-container flex justify-center column");
    			add_location(div2, file$c, 43, 0, 1329);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, h1);
    			append_dev(h1, t1);
    			append_dev(div2, t2);
    			append_dev(div2, div0);
    			append_dev(div2, t3);
    			append_dev(div2, div1);
    			mount_component(datatable, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*dictionary, $USER*/ 1) && title_value !== (title_value = "NEXTFIN | " + dictionary[/*$USER*/ ctx[0].language].transactions.title)) {
    				document_1.title = title_value;
    			}

    			if ((!current || dirty & /*$USER*/ 1) && t1_value !== (t1_value = dictionary[/*$USER*/ ctx[0].language].transactions.title + "")) set_data_dev(t1, t1_value);
    			const datatable_changes = {};
    			if (dirty & /*$USER*/ 1) datatable_changes.data = /*$USER*/ ctx[0].transactionLogs;

    			if (dirty & /*$$scope, $rows, $USER*/ 131) {
    				datatable_changes.$$scope = { dirty, ctx };
    			}

    			datatable.$set(datatable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			destroy_component(datatable);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let $USER;
    	let $rows;
    	validate_store(USER, 'USER');
    	component_subscribe($$self, USER, $$value => $$invalidate(0, $USER = $$value));
    	validate_store(rows, 'rows');
    	component_subscribe($$self, rows, $$value => $$invalidate(1, $rows = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TransactionLogs', slots, []);

    	const tableSettings = {
    		sortable: false,
    		pagination: true,
    		rowPerPage: 8,
    		scrollY: false,
    		blocks: { searchInput: false },
    		labels: {
    			noRows: dictionary[$USER.language].transactions.noTrades,
    			info: dictionary[$USER.language].transactions.entries,
    			previous: '<',
    			next: '>'
    		}
    	};

    	// Setup next button to fetch 8 more tx logs
    	onMount(async () => {
    		let nextButton = null;

    		while (!nextButton) {
    			await timeout(1000);

    			document.querySelectorAll('.dt-pagination-buttons button').forEach(b => {
    				if (b.innerHTML === '❯') {
    					nextButton = b;

    					nextButton.addEventListener('click', () => {
    						getTransactionsDetails(8);
    					});
    				}
    			});
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TransactionLogs> was created with unknown prop '${key}'`);
    	});

    	const click_handler = i => window.open($rows[i].explorerUrl, '_blank');

    	$$self.$capture_state = () => ({
    		onMount,
    		Datatable,
    		rows,
    		USER,
    		getTransactionsDetails,
    		totalAbbrev,
    		shortenPubkey,
    		timeout,
    		dictionary,
    		Loader,
    		tableSettings,
    		$USER,
    		$rows
    	});

    	return [$USER, $rows, tableSettings, click_handler];
    }

    class TransactionLogs extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$d, create_fragment$d, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TransactionLogs",
    			options,
    			id: create_fragment$d.name
    		});
    	}
    }

    function isOutOfViewport (parent, container) {
        const parentBounding = parent.getBoundingClientRect();
        const boundingContainer = container.getBoundingClientRect();
        const out = {};

        out.top = parentBounding.top < 0;
        out.left = parentBounding.left < 0;
        out.bottom =
            parentBounding.bottom + boundingContainer.height >
            (window.innerHeight || document.documentElement.clientHeight);

        out.right =
            parentBounding.right >
            (window.innerWidth || document.documentElement.clientWidth);
        out.any = out.top || out.left || out.bottom || out.right;

        return out;
    }

    /* node_modules/svelte-select/src/Item.svelte generated by Svelte v3.44.2 */

    const file$b = "node_modules/svelte-select/src/Item.svelte";

    function create_fragment$c(ctx) {
    	let div;
    	let raw_value = /*getOptionLabel*/ ctx[0](/*item*/ ctx[1], /*filterText*/ ctx[2]) + "";
    	let div_class_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", div_class_value = "item " + /*itemClasses*/ ctx[3] + " svelte-3e0qet");
    			add_location(div, file$b, 78, 0, 1837);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = raw_value;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*getOptionLabel, item, filterText*/ 7 && raw_value !== (raw_value = /*getOptionLabel*/ ctx[0](/*item*/ ctx[1], /*filterText*/ ctx[2]) + "")) div.innerHTML = raw_value;
    			if (dirty & /*itemClasses*/ 8 && div_class_value !== (div_class_value = "item " + /*itemClasses*/ ctx[3] + " svelte-3e0qet")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Item', slots, []);
    	let { isActive = false } = $$props;
    	let { isFirst = false } = $$props;
    	let { isHover = false } = $$props;
    	let { isSelectable = false } = $$props;
    	let { getOptionLabel = undefined } = $$props;
    	let { item = undefined } = $$props;
    	let { filterText = '' } = $$props;
    	let itemClasses = '';

    	const writable_props = [
    		'isActive',
    		'isFirst',
    		'isHover',
    		'isSelectable',
    		'getOptionLabel',
    		'item',
    		'filterText'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Item> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('isActive' in $$props) $$invalidate(4, isActive = $$props.isActive);
    		if ('isFirst' in $$props) $$invalidate(5, isFirst = $$props.isFirst);
    		if ('isHover' in $$props) $$invalidate(6, isHover = $$props.isHover);
    		if ('isSelectable' in $$props) $$invalidate(7, isSelectable = $$props.isSelectable);
    		if ('getOptionLabel' in $$props) $$invalidate(0, getOptionLabel = $$props.getOptionLabel);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    		if ('filterText' in $$props) $$invalidate(2, filterText = $$props.filterText);
    	};

    	$$self.$capture_state = () => ({
    		isActive,
    		isFirst,
    		isHover,
    		isSelectable,
    		getOptionLabel,
    		item,
    		filterText,
    		itemClasses
    	});

    	$$self.$inject_state = $$props => {
    		if ('isActive' in $$props) $$invalidate(4, isActive = $$props.isActive);
    		if ('isFirst' in $$props) $$invalidate(5, isFirst = $$props.isFirst);
    		if ('isHover' in $$props) $$invalidate(6, isHover = $$props.isHover);
    		if ('isSelectable' in $$props) $$invalidate(7, isSelectable = $$props.isSelectable);
    		if ('getOptionLabel' in $$props) $$invalidate(0, getOptionLabel = $$props.getOptionLabel);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    		if ('filterText' in $$props) $$invalidate(2, filterText = $$props.filterText);
    		if ('itemClasses' in $$props) $$invalidate(3, itemClasses = $$props.itemClasses);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*isActive, isFirst, isHover, item, isSelectable*/ 242) {
    			{
    				const classes = [];

    				if (isActive) {
    					classes.push('active');
    				}

    				if (isFirst) {
    					classes.push('first');
    				}

    				if (isHover) {
    					classes.push('hover');
    				}

    				if (item.isGroupHeader) {
    					classes.push('groupHeader');
    				}

    				if (item.isGroupItem) {
    					classes.push('groupItem');
    				}

    				if (!isSelectable) {
    					classes.push('notSelectable');
    				}

    				$$invalidate(3, itemClasses = classes.join(' '));
    			}
    		}
    	};

    	return [
    		getOptionLabel,
    		item,
    		filterText,
    		itemClasses,
    		isActive,
    		isFirst,
    		isHover,
    		isSelectable
    	];
    }

    class Item extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			isActive: 4,
    			isFirst: 5,
    			isHover: 6,
    			isSelectable: 7,
    			getOptionLabel: 0,
    			item: 1,
    			filterText: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Item",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get isActive() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isActive(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isFirst() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isFirst(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isHover() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isHover(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isSelectable() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isSelectable(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getOptionLabel() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getOptionLabel(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get item() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filterText() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filterText(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/List.svelte generated by Svelte v3.44.2 */
    const file$a = "node_modules/svelte-select/src/List.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[41] = list[i];
    	child_ctx[42] = i;
    	return child_ctx;
    }

    // (309:4) {:else}
    function create_else_block$4(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*items*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block_2$1(ctx);
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();

    			if (each_1_else) {
    				each_1_else.c();
    			}
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);

    			if (each_1_else) {
    				each_1_else.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*getGroupHeaderLabel, items, handleHover, handleClick, Item, filterText, getOptionLabel, value, optionIdentifier, hoverItemIndex, noOptionsMessage, hideEmptyState*/ 114390) {
    				each_value = /*items*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (!each_value.length && each_1_else) {
    					each_1_else.p(ctx, dirty);
    				} else if (!each_value.length) {
    					each_1_else = create_else_block_2$1(ctx);
    					each_1_else.c();
    					each_1_else.m(each_1_anchor.parentNode, each_1_anchor);
    				} else if (each_1_else) {
    					each_1_else.d(1);
    					each_1_else = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    			if (each_1_else) each_1_else.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(309:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (286:4) {#if isVirtualList}
    function create_if_block$7(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*VirtualList*/ ctx[3];

    	function switch_props(ctx) {
    		return {
    			props: {
    				items: /*items*/ ctx[1],
    				itemHeight: /*itemHeight*/ ctx[8],
    				$$slots: {
    					default: [
    						create_default_slot$1,
    						({ item, i }) => ({ 41: item, 42: i }),
    						({ item, i }) => [0, (item ? 1024 : 0) | (i ? 2048 : 0)]
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty[0] & /*items*/ 2) switch_instance_changes.items = /*items*/ ctx[1];
    			if (dirty[0] & /*itemHeight*/ 256) switch_instance_changes.itemHeight = /*itemHeight*/ ctx[8];

    			if (dirty[0] & /*Item, filterText, getOptionLabel, value, optionIdentifier, hoverItemIndex, items*/ 9814 | dirty[1] & /*$$scope, item, i*/ 11264) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*VirtualList*/ ctx[3])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(286:4) {#if isVirtualList}",
    		ctx
    	});

    	return block;
    }

    // (331:8) {:else}
    function create_else_block_2$1(ctx) {
    	let if_block_anchor;
    	let if_block = !/*hideEmptyState*/ ctx[11] && create_if_block_2$3(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (!/*hideEmptyState*/ ctx[11]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_2$3(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$1.name,
    		type: "else",
    		source: "(331:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (332:12) {#if !hideEmptyState}
    function create_if_block_2$3(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*noOptionsMessage*/ ctx[12]);
    			attr_dev(div, "class", "empty svelte-1uyqfml");
    			add_location(div, file$a, 332, 16, 10333);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*noOptionsMessage*/ 4096) set_data_dev(t, /*noOptionsMessage*/ ctx[12]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(332:12) {#if !hideEmptyState}",
    		ctx
    	});

    	return block;
    }

    // (313:12) {:else}
    function create_else_block_1$1(ctx) {
    	let div;
    	let switch_instance;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*Item*/ ctx[4];

    	function switch_props(ctx) {
    		return {
    			props: {
    				item: /*item*/ ctx[41],
    				filterText: /*filterText*/ ctx[13],
    				getOptionLabel: /*getOptionLabel*/ ctx[6],
    				isFirst: isItemFirst(/*i*/ ctx[42]),
    				isActive: isItemActive(/*item*/ ctx[41], /*value*/ ctx[9], /*optionIdentifier*/ ctx[10]),
    				isHover: isItemHover(/*hoverItemIndex*/ ctx[2], /*item*/ ctx[41], /*i*/ ctx[42], /*items*/ ctx[1]),
    				isSelectable: isItemSelectable(/*item*/ ctx[41])
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	function mouseover_handler_1() {
    		return /*mouseover_handler_1*/ ctx[29](/*i*/ ctx[42]);
    	}

    	function focus_handler_1() {
    		return /*focus_handler_1*/ ctx[30](/*i*/ ctx[42]);
    	}

    	function click_handler_1(...args) {
    		return /*click_handler_1*/ ctx[31](/*item*/ ctx[41], /*i*/ ctx[42], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			t = space();
    			attr_dev(div, "class", "listItem");
    			attr_dev(div, "tabindex", "-1");
    			add_location(div, file$a, 313, 16, 9513);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			append_dev(div, t);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "mouseover", mouseover_handler_1, false, false, false),
    					listen_dev(div, "focus", focus_handler_1, false, false, false),
    					listen_dev(div, "click", click_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const switch_instance_changes = {};
    			if (dirty[0] & /*items*/ 2) switch_instance_changes.item = /*item*/ ctx[41];
    			if (dirty[0] & /*filterText*/ 8192) switch_instance_changes.filterText = /*filterText*/ ctx[13];
    			if (dirty[0] & /*getOptionLabel*/ 64) switch_instance_changes.getOptionLabel = /*getOptionLabel*/ ctx[6];
    			if (dirty[0] & /*items, value, optionIdentifier*/ 1538) switch_instance_changes.isActive = isItemActive(/*item*/ ctx[41], /*value*/ ctx[9], /*optionIdentifier*/ ctx[10]);
    			if (dirty[0] & /*hoverItemIndex, items*/ 6) switch_instance_changes.isHover = isItemHover(/*hoverItemIndex*/ ctx[2], /*item*/ ctx[41], /*i*/ ctx[42], /*items*/ ctx[1]);
    			if (dirty[0] & /*items*/ 2) switch_instance_changes.isSelectable = isItemSelectable(/*item*/ ctx[41]);

    			if (switch_value !== (switch_value = /*Item*/ ctx[4])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, t);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(313:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (311:12) {#if item.isGroupHeader && !item.isSelectable}
    function create_if_block_1$3(ctx) {
    	let div;
    	let t_value = /*getGroupHeaderLabel*/ ctx[7](/*item*/ ctx[41]) + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "listGroupTitle svelte-1uyqfml");
    			add_location(div, file$a, 311, 16, 9415);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*getGroupHeaderLabel, items*/ 130 && t_value !== (t_value = /*getGroupHeaderLabel*/ ctx[7](/*item*/ ctx[41]) + "")) set_data_dev(t, t_value);
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(311:12) {#if item.isGroupHeader && !item.isSelectable}",
    		ctx
    	});

    	return block;
    }

    // (310:8) {#each items as item, i}
    function create_each_block$5(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$3, create_else_block_1$1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*item*/ ctx[41].isGroupHeader && !/*item*/ ctx[41].isSelectable) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(310:8) {#each items as item, i}",
    		ctx
    	});

    	return block;
    }

    // (287:8) <svelte:component             this={VirtualList}             {items}             {itemHeight}             let:item             let:i>
    function create_default_slot$1(ctx) {
    	let div;
    	let switch_instance;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*Item*/ ctx[4];

    	function switch_props(ctx) {
    		return {
    			props: {
    				item: /*item*/ ctx[41],
    				filterText: /*filterText*/ ctx[13],
    				getOptionLabel: /*getOptionLabel*/ ctx[6],
    				isFirst: isItemFirst(/*i*/ ctx[42]),
    				isActive: isItemActive(/*item*/ ctx[41], /*value*/ ctx[9], /*optionIdentifier*/ ctx[10]),
    				isHover: isItemHover(/*hoverItemIndex*/ ctx[2], /*item*/ ctx[41], /*i*/ ctx[42], /*items*/ ctx[1]),
    				isSelectable: isItemSelectable(/*item*/ ctx[41])
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	function mouseover_handler() {
    		return /*mouseover_handler*/ ctx[26](/*i*/ ctx[42]);
    	}

    	function focus_handler() {
    		return /*focus_handler*/ ctx[27](/*i*/ ctx[42]);
    	}

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[28](/*item*/ ctx[41], /*i*/ ctx[42], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div, "class", "listItem");
    			add_location(div, file$a, 292, 12, 8621);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "mouseover", mouseover_handler, false, false, false),
    					listen_dev(div, "focus", focus_handler, false, false, false),
    					listen_dev(div, "click", click_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const switch_instance_changes = {};
    			if (dirty[1] & /*item*/ 1024) switch_instance_changes.item = /*item*/ ctx[41];
    			if (dirty[0] & /*filterText*/ 8192) switch_instance_changes.filterText = /*filterText*/ ctx[13];
    			if (dirty[0] & /*getOptionLabel*/ 64) switch_instance_changes.getOptionLabel = /*getOptionLabel*/ ctx[6];
    			if (dirty[1] & /*i*/ 2048) switch_instance_changes.isFirst = isItemFirst(/*i*/ ctx[42]);
    			if (dirty[0] & /*value, optionIdentifier*/ 1536 | dirty[1] & /*item*/ 1024) switch_instance_changes.isActive = isItemActive(/*item*/ ctx[41], /*value*/ ctx[9], /*optionIdentifier*/ ctx[10]);
    			if (dirty[0] & /*hoverItemIndex, items*/ 6 | dirty[1] & /*item, i*/ 3072) switch_instance_changes.isHover = isItemHover(/*hoverItemIndex*/ ctx[2], /*item*/ ctx[41], /*i*/ ctx[42], /*items*/ ctx[1]);
    			if (dirty[1] & /*item*/ 1024) switch_instance_changes.isSelectable = isItemSelectable(/*item*/ ctx[41]);

    			if (switch_value !== (switch_value = /*Item*/ ctx[4])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, null);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(287:8) <svelte:component             this={VirtualList}             {items}             {itemHeight}             let:item             let:i>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$7, create_else_block$4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*isVirtualList*/ ctx[5]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "listContainer svelte-1uyqfml");
    			attr_dev(div, "style", /*listStyle*/ ctx[14]);
    			toggle_class(div, "virtualList", /*isVirtualList*/ ctx[5]);
    			add_location(div, file$a, 280, 0, 8325);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			/*div_binding*/ ctx[32](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "keydown", /*handleKeyDown*/ ctx[17], false, false, false),
    					listen_dev(window, "resize", /*computePlacement*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}

    			if (!current || dirty[0] & /*listStyle*/ 16384) {
    				attr_dev(div, "style", /*listStyle*/ ctx[14]);
    			}

    			if (dirty[0] & /*isVirtualList*/ 32) {
    				toggle_class(div, "virtualList", /*isVirtualList*/ ctx[5]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    			/*div_binding*/ ctx[32](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function isItemActive(item, value, optionIdentifier) {
    	return value && value[optionIdentifier] === item[optionIdentifier];
    }

    function isItemFirst(itemIndex) {
    	return itemIndex === 0;
    }

    function isItemHover(hoverItemIndex, item, itemIndex, items) {
    	return isItemSelectable(item) && (hoverItemIndex === itemIndex || items.length === 1);
    }

    function isItemSelectable(item) {
    	return item.isGroupHeader && item.isSelectable || item.selectable || !item.hasOwnProperty('selectable'); // Default; if `selectable` was not specified, the object is selectable
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('List', slots, []);
    	const dispatch = createEventDispatcher();
    	let { container = undefined } = $$props;
    	let { VirtualList = null } = $$props;
    	let { Item: Item$1 = Item } = $$props;
    	let { isVirtualList = false } = $$props;
    	let { items = [] } = $$props;
    	let { labelIdentifier = 'label' } = $$props;

    	let { getOptionLabel = (option, filterText) => {
    		if (option) return option.isCreator
    		? `Create \"${filterText}\"`
    		: option[labelIdentifier];
    	} } = $$props;

    	let { getGroupHeaderLabel = null } = $$props;
    	let { itemHeight = 40 } = $$props;
    	let { hoverItemIndex = 0 } = $$props;
    	let { value = undefined } = $$props;
    	let { optionIdentifier = 'value' } = $$props;
    	let { hideEmptyState = false } = $$props;
    	let { noOptionsMessage = 'No options' } = $$props;
    	let { isMulti = false } = $$props;
    	let { activeItemIndex = 0 } = $$props;
    	let { filterText = '' } = $$props;
    	let { parent = null } = $$props;
    	let { listPlacement = null } = $$props;
    	let { listAutoWidth = null } = $$props;
    	let { listOffset = 5 } = $$props;
    	let isScrollingTimer = 0;
    	let isScrolling = false;
    	let prev_items;

    	onMount(() => {
    		if (items.length > 0 && !isMulti && value) {
    			const _hoverItemIndex = items.findIndex(item => item[optionIdentifier] === value[optionIdentifier]);

    			if (_hoverItemIndex) {
    				$$invalidate(2, hoverItemIndex = _hoverItemIndex);
    			}
    		}

    		scrollToActiveItem('active');

    		container.addEventListener(
    			'scroll',
    			() => {
    				clearTimeout(isScrollingTimer);

    				isScrollingTimer = setTimeout(
    					() => {
    						isScrolling = false;
    					},
    					100
    				);
    			},
    			false
    		);
    	});

    	beforeUpdate(() => {
    		if (!items) $$invalidate(1, items = []);

    		if (items !== prev_items && items.length > 0) {
    			$$invalidate(2, hoverItemIndex = 0);
    		}

    		prev_items = items;
    	});

    	function handleSelect(item) {
    		if (item.isCreator) return;
    		dispatch('itemSelected', item);
    	}

    	function handleHover(i) {
    		if (isScrolling) return;
    		$$invalidate(2, hoverItemIndex = i);
    	}

    	function handleClick(args) {
    		const { item, i, event } = args;
    		event.stopPropagation();
    		if (value && !isMulti && value[optionIdentifier] === item[optionIdentifier]) return closeList();

    		if (item.isCreator) {
    			dispatch('itemCreated', filterText);
    		} else if (isItemSelectable(item)) {
    			$$invalidate(19, activeItemIndex = i);
    			$$invalidate(2, hoverItemIndex = i);
    			handleSelect(item);
    		}
    	}

    	function closeList() {
    		dispatch('closeList');
    	}

    	async function updateHoverItem(increment) {
    		if (isVirtualList) return;
    		let isNonSelectableItem = true;

    		while (isNonSelectableItem) {
    			if (increment > 0 && hoverItemIndex === items.length - 1) {
    				$$invalidate(2, hoverItemIndex = 0);
    			} else if (increment < 0 && hoverItemIndex === 0) {
    				$$invalidate(2, hoverItemIndex = items.length - 1);
    			} else {
    				$$invalidate(2, hoverItemIndex = hoverItemIndex + increment);
    			}

    			isNonSelectableItem = !isItemSelectable(items[hoverItemIndex]);
    		}

    		await tick();
    		scrollToActiveItem('hover');
    	}

    	function handleKeyDown(e) {
    		switch (e.key) {
    			case 'Escape':
    				e.preventDefault();
    				closeList();
    				break;
    			case 'ArrowDown':
    				e.preventDefault();
    				items.length && updateHoverItem(1);
    				break;
    			case 'ArrowUp':
    				e.preventDefault();
    				items.length && updateHoverItem(-1);
    				break;
    			case 'Enter':
    				e.preventDefault();
    				if (items.length === 0) break;
    				const hoverItem = items[hoverItemIndex];
    				if (value && !isMulti && value[optionIdentifier] === hoverItem[optionIdentifier]) {
    					closeList();
    					break;
    				}
    				if (hoverItem.isCreator) {
    					dispatch('itemCreated', filterText);
    				} else {
    					$$invalidate(19, activeItemIndex = hoverItemIndex);
    					handleSelect(items[hoverItemIndex]);
    				}
    				break;
    			case 'Tab':
    				e.preventDefault();
    				if (items.length === 0) {
    					return closeList();
    				}
    				if (value && value[optionIdentifier] === items[hoverItemIndex][optionIdentifier]) return closeList();
    				$$invalidate(19, activeItemIndex = hoverItemIndex);
    				handleSelect(items[hoverItemIndex]);
    				break;
    		}
    	}

    	function scrollToActiveItem(className) {
    		if (isVirtualList || !container) return;
    		let offsetBounding;
    		const focusedElemBounding = container.querySelector(`.listItem .${className}`);

    		if (focusedElemBounding) {
    			offsetBounding = container.getBoundingClientRect().bottom - focusedElemBounding.getBoundingClientRect().bottom;
    		}

    		$$invalidate(0, container.scrollTop -= offsetBounding, container);
    	}

    	let listStyle;

    	function computePlacement() {
    		const { height, width } = parent.getBoundingClientRect();
    		$$invalidate(14, listStyle = '');
    		$$invalidate(14, listStyle += `min-width:${width}px;width:${listAutoWidth ? 'auto' : '100%'};`);

    		if (listPlacement === 'top' || listPlacement === 'auto' && isOutOfViewport(parent, container).bottom) {
    			$$invalidate(14, listStyle += `bottom:${height + listOffset}px;`);
    		} else {
    			$$invalidate(14, listStyle += `top:${height + listOffset}px;`);
    		}
    	}

    	const writable_props = [
    		'container',
    		'VirtualList',
    		'Item',
    		'isVirtualList',
    		'items',
    		'labelIdentifier',
    		'getOptionLabel',
    		'getGroupHeaderLabel',
    		'itemHeight',
    		'hoverItemIndex',
    		'value',
    		'optionIdentifier',
    		'hideEmptyState',
    		'noOptionsMessage',
    		'isMulti',
    		'activeItemIndex',
    		'filterText',
    		'parent',
    		'listPlacement',
    		'listAutoWidth',
    		'listOffset'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<List> was created with unknown prop '${key}'`);
    	});

    	const mouseover_handler = i => handleHover(i);
    	const focus_handler = i => handleHover(i);
    	const click_handler = (item, i, event) => handleClick({ item, i, event });
    	const mouseover_handler_1 = i => handleHover(i);
    	const focus_handler_1 = i => handleHover(i);
    	const click_handler_1 = (item, i, event) => handleClick({ item, i, event });

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			container = $$value;
    			$$invalidate(0, container);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('VirtualList' in $$props) $$invalidate(3, VirtualList = $$props.VirtualList);
    		if ('Item' in $$props) $$invalidate(4, Item$1 = $$props.Item);
    		if ('isVirtualList' in $$props) $$invalidate(5, isVirtualList = $$props.isVirtualList);
    		if ('items' in $$props) $$invalidate(1, items = $$props.items);
    		if ('labelIdentifier' in $$props) $$invalidate(20, labelIdentifier = $$props.labelIdentifier);
    		if ('getOptionLabel' in $$props) $$invalidate(6, getOptionLabel = $$props.getOptionLabel);
    		if ('getGroupHeaderLabel' in $$props) $$invalidate(7, getGroupHeaderLabel = $$props.getGroupHeaderLabel);
    		if ('itemHeight' in $$props) $$invalidate(8, itemHeight = $$props.itemHeight);
    		if ('hoverItemIndex' in $$props) $$invalidate(2, hoverItemIndex = $$props.hoverItemIndex);
    		if ('value' in $$props) $$invalidate(9, value = $$props.value);
    		if ('optionIdentifier' in $$props) $$invalidate(10, optionIdentifier = $$props.optionIdentifier);
    		if ('hideEmptyState' in $$props) $$invalidate(11, hideEmptyState = $$props.hideEmptyState);
    		if ('noOptionsMessage' in $$props) $$invalidate(12, noOptionsMessage = $$props.noOptionsMessage);
    		if ('isMulti' in $$props) $$invalidate(21, isMulti = $$props.isMulti);
    		if ('activeItemIndex' in $$props) $$invalidate(19, activeItemIndex = $$props.activeItemIndex);
    		if ('filterText' in $$props) $$invalidate(13, filterText = $$props.filterText);
    		if ('parent' in $$props) $$invalidate(22, parent = $$props.parent);
    		if ('listPlacement' in $$props) $$invalidate(23, listPlacement = $$props.listPlacement);
    		if ('listAutoWidth' in $$props) $$invalidate(24, listAutoWidth = $$props.listAutoWidth);
    		if ('listOffset' in $$props) $$invalidate(25, listOffset = $$props.listOffset);
    	};

    	$$self.$capture_state = () => ({
    		beforeUpdate,
    		createEventDispatcher,
    		onMount,
    		tick,
    		isOutOfViewport,
    		ItemComponent: Item,
    		dispatch,
    		container,
    		VirtualList,
    		Item: Item$1,
    		isVirtualList,
    		items,
    		labelIdentifier,
    		getOptionLabel,
    		getGroupHeaderLabel,
    		itemHeight,
    		hoverItemIndex,
    		value,
    		optionIdentifier,
    		hideEmptyState,
    		noOptionsMessage,
    		isMulti,
    		activeItemIndex,
    		filterText,
    		parent,
    		listPlacement,
    		listAutoWidth,
    		listOffset,
    		isScrollingTimer,
    		isScrolling,
    		prev_items,
    		handleSelect,
    		handleHover,
    		handleClick,
    		closeList,
    		updateHoverItem,
    		handleKeyDown,
    		scrollToActiveItem,
    		isItemActive,
    		isItemFirst,
    		isItemHover,
    		isItemSelectable,
    		listStyle,
    		computePlacement
    	});

    	$$self.$inject_state = $$props => {
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('VirtualList' in $$props) $$invalidate(3, VirtualList = $$props.VirtualList);
    		if ('Item' in $$props) $$invalidate(4, Item$1 = $$props.Item);
    		if ('isVirtualList' in $$props) $$invalidate(5, isVirtualList = $$props.isVirtualList);
    		if ('items' in $$props) $$invalidate(1, items = $$props.items);
    		if ('labelIdentifier' in $$props) $$invalidate(20, labelIdentifier = $$props.labelIdentifier);
    		if ('getOptionLabel' in $$props) $$invalidate(6, getOptionLabel = $$props.getOptionLabel);
    		if ('getGroupHeaderLabel' in $$props) $$invalidate(7, getGroupHeaderLabel = $$props.getGroupHeaderLabel);
    		if ('itemHeight' in $$props) $$invalidate(8, itemHeight = $$props.itemHeight);
    		if ('hoverItemIndex' in $$props) $$invalidate(2, hoverItemIndex = $$props.hoverItemIndex);
    		if ('value' in $$props) $$invalidate(9, value = $$props.value);
    		if ('optionIdentifier' in $$props) $$invalidate(10, optionIdentifier = $$props.optionIdentifier);
    		if ('hideEmptyState' in $$props) $$invalidate(11, hideEmptyState = $$props.hideEmptyState);
    		if ('noOptionsMessage' in $$props) $$invalidate(12, noOptionsMessage = $$props.noOptionsMessage);
    		if ('isMulti' in $$props) $$invalidate(21, isMulti = $$props.isMulti);
    		if ('activeItemIndex' in $$props) $$invalidate(19, activeItemIndex = $$props.activeItemIndex);
    		if ('filterText' in $$props) $$invalidate(13, filterText = $$props.filterText);
    		if ('parent' in $$props) $$invalidate(22, parent = $$props.parent);
    		if ('listPlacement' in $$props) $$invalidate(23, listPlacement = $$props.listPlacement);
    		if ('listAutoWidth' in $$props) $$invalidate(24, listAutoWidth = $$props.listAutoWidth);
    		if ('listOffset' in $$props) $$invalidate(25, listOffset = $$props.listOffset);
    		if ('isScrollingTimer' in $$props) isScrollingTimer = $$props.isScrollingTimer;
    		if ('isScrolling' in $$props) isScrolling = $$props.isScrolling;
    		if ('prev_items' in $$props) prev_items = $$props.prev_items;
    		if ('listStyle' in $$props) $$invalidate(14, listStyle = $$props.listStyle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*parent, container*/ 4194305) {
    			{
    				if (parent && container) computePlacement();
    			}
    		}
    	};

    	return [
    		container,
    		items,
    		hoverItemIndex,
    		VirtualList,
    		Item$1,
    		isVirtualList,
    		getOptionLabel,
    		getGroupHeaderLabel,
    		itemHeight,
    		value,
    		optionIdentifier,
    		hideEmptyState,
    		noOptionsMessage,
    		filterText,
    		listStyle,
    		handleHover,
    		handleClick,
    		handleKeyDown,
    		computePlacement,
    		activeItemIndex,
    		labelIdentifier,
    		isMulti,
    		parent,
    		listPlacement,
    		listAutoWidth,
    		listOffset,
    		mouseover_handler,
    		focus_handler,
    		click_handler,
    		mouseover_handler_1,
    		focus_handler_1,
    		click_handler_1,
    		div_binding
    	];
    }

    class List extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$b,
    			create_fragment$b,
    			safe_not_equal,
    			{
    				container: 0,
    				VirtualList: 3,
    				Item: 4,
    				isVirtualList: 5,
    				items: 1,
    				labelIdentifier: 20,
    				getOptionLabel: 6,
    				getGroupHeaderLabel: 7,
    				itemHeight: 8,
    				hoverItemIndex: 2,
    				value: 9,
    				optionIdentifier: 10,
    				hideEmptyState: 11,
    				noOptionsMessage: 12,
    				isMulti: 21,
    				activeItemIndex: 19,
    				filterText: 13,
    				parent: 22,
    				listPlacement: 23,
    				listAutoWidth: 24,
    				listOffset: 25
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "List",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get container() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set container(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get VirtualList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set VirtualList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get Item() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set Item(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isVirtualList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isVirtualList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get items() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelIdentifier() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelIdentifier(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getOptionLabel() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getOptionLabel(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getGroupHeaderLabel() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getGroupHeaderLabel(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemHeight() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemHeight(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hoverItemIndex() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hoverItemIndex(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get optionIdentifier() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set optionIdentifier(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideEmptyState() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideEmptyState(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noOptionsMessage() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noOptionsMessage(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isMulti() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isMulti(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeItemIndex() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeItemIndex(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filterText() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filterText(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get parent() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set parent(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listPlacement() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listPlacement(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listAutoWidth() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listAutoWidth(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listOffset() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listOffset(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/Selection.svelte generated by Svelte v3.44.2 */

    const file$9 = "node_modules/svelte-select/src/Selection.svelte";

    function create_fragment$a(ctx) {
    	let div;
    	let raw_value = /*getSelectionLabel*/ ctx[0](/*item*/ ctx[1]) + "";

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "selection svelte-pu1q1n");
    			add_location(div, file$9, 13, 0, 230);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = raw_value;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*getSelectionLabel, item*/ 3 && raw_value !== (raw_value = /*getSelectionLabel*/ ctx[0](/*item*/ ctx[1]) + "")) div.innerHTML = raw_value;		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Selection', slots, []);
    	let { getSelectionLabel = undefined } = $$props;
    	let { item = undefined } = $$props;
    	const writable_props = ['getSelectionLabel', 'item'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Selection> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('getSelectionLabel' in $$props) $$invalidate(0, getSelectionLabel = $$props.getSelectionLabel);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    	};

    	$$self.$capture_state = () => ({ getSelectionLabel, item });

    	$$self.$inject_state = $$props => {
    		if ('getSelectionLabel' in $$props) $$invalidate(0, getSelectionLabel = $$props.getSelectionLabel);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [getSelectionLabel, item];
    }

    class Selection extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$a, create_fragment$a, safe_not_equal, { getSelectionLabel: 0, item: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Selection",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get getSelectionLabel() {
    		throw new Error("<Selection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getSelectionLabel(value) {
    		throw new Error("<Selection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get item() {
    		throw new Error("<Selection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Selection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/MultiSelection.svelte generated by Svelte v3.44.2 */
    const file$8 = "node_modules/svelte-select/src/MultiSelection.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	child_ctx[11] = i;
    	return child_ctx;
    }

    // (87:8) {#if !isDisabled && !multiFullItemClearable}
    function create_if_block$6(ctx) {
    	let div;
    	let svg;
    	let path;
    	let mounted;
    	let dispose;

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[6](/*i*/ ctx[11], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z");
    			add_location(path, file$8, 97, 20, 3027);
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "height", "100%");
    			attr_dev(svg, "viewBox", "-2 -2 50 50");
    			attr_dev(svg, "focusable", "false");
    			attr_dev(svg, "aria-hidden", "true");
    			attr_dev(svg, "role", "presentation");
    			attr_dev(svg, "class", "svelte-liu9pa");
    			add_location(svg, file$8, 90, 16, 2775);
    			attr_dev(div, "class", "multiSelectItem_clear svelte-liu9pa");
    			add_location(div, file$8, 87, 12, 2647);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, path);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(87:8) {#if !isDisabled && !multiFullItemClearable}",
    		ctx
    	});

    	return block;
    }

    // (77:0) {#each value as item, i}
    function create_each_block$4(ctx) {
    	let div1;
    	let div0;
    	let raw_value = /*getSelectionLabel*/ ctx[4](/*item*/ ctx[9]) + "";
    	let t0;
    	let t1;
    	let div1_class_value;
    	let mounted;
    	let dispose;
    	let if_block = !/*isDisabled*/ ctx[2] && !/*multiFullItemClearable*/ ctx[3] && create_if_block$6(ctx);

    	function click_handler_1(...args) {
    		return /*click_handler_1*/ ctx[7](/*i*/ ctx[11], ...args);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			attr_dev(div0, "class", "multiSelectItem_label svelte-liu9pa");
    			add_location(div0, file$8, 83, 8, 2487);
    			attr_dev(div1, "class", div1_class_value = "multiSelectItem " + (/*activeValue*/ ctx[1] === /*i*/ ctx[11] ? 'active' : '') + " " + (/*isDisabled*/ ctx[2] ? 'disabled' : '') + " svelte-liu9pa");
    			add_location(div1, file$8, 77, 4, 2256);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			div0.innerHTML = raw_value;
    			append_dev(div1, t0);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t1);

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*getSelectionLabel, value*/ 17 && raw_value !== (raw_value = /*getSelectionLabel*/ ctx[4](/*item*/ ctx[9]) + "")) div0.innerHTML = raw_value;
    			if (!/*isDisabled*/ ctx[2] && !/*multiFullItemClearable*/ ctx[3]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					if_block.m(div1, t1);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*activeValue, isDisabled*/ 6 && div1_class_value !== (div1_class_value = "multiSelectItem " + (/*activeValue*/ ctx[1] === /*i*/ ctx[11] ? 'active' : '') + " " + (/*isDisabled*/ ctx[2] ? 'disabled' : '') + " svelte-liu9pa")) {
    				attr_dev(div1, "class", div1_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(77:0) {#each value as item, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let each_1_anchor;
    	let each_value = /*value*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*activeValue, isDisabled, multiFullItemClearable, handleClear, getSelectionLabel, value*/ 63) {
    				each_value = /*value*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MultiSelection', slots, []);
    	const dispatch = createEventDispatcher();
    	let { value = [] } = $$props;
    	let { activeValue = undefined } = $$props;
    	let { isDisabled = false } = $$props;
    	let { multiFullItemClearable = false } = $$props;
    	let { getSelectionLabel = undefined } = $$props;

    	function handleClear(i, event) {
    		event.stopPropagation();
    		dispatch('multiItemClear', { i });
    	}

    	const writable_props = [
    		'value',
    		'activeValue',
    		'isDisabled',
    		'multiFullItemClearable',
    		'getSelectionLabel'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MultiSelection> was created with unknown prop '${key}'`);
    	});

    	const click_handler = (i, event) => handleClear(i, event);
    	const click_handler_1 = (i, event) => multiFullItemClearable ? handleClear(i, event) : {};

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('activeValue' in $$props) $$invalidate(1, activeValue = $$props.activeValue);
    		if ('isDisabled' in $$props) $$invalidate(2, isDisabled = $$props.isDisabled);
    		if ('multiFullItemClearable' in $$props) $$invalidate(3, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('getSelectionLabel' in $$props) $$invalidate(4, getSelectionLabel = $$props.getSelectionLabel);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		dispatch,
    		value,
    		activeValue,
    		isDisabled,
    		multiFullItemClearable,
    		getSelectionLabel,
    		handleClear
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('activeValue' in $$props) $$invalidate(1, activeValue = $$props.activeValue);
    		if ('isDisabled' in $$props) $$invalidate(2, isDisabled = $$props.isDisabled);
    		if ('multiFullItemClearable' in $$props) $$invalidate(3, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('getSelectionLabel' in $$props) $$invalidate(4, getSelectionLabel = $$props.getSelectionLabel);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		value,
    		activeValue,
    		isDisabled,
    		multiFullItemClearable,
    		getSelectionLabel,
    		handleClear,
    		click_handler,
    		click_handler_1
    	];
    }

    class MultiSelection extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			value: 0,
    			activeValue: 1,
    			isDisabled: 2,
    			multiFullItemClearable: 3,
    			getSelectionLabel: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MultiSelection",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get value() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeValue() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeValue(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isDisabled() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isDisabled(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiFullItemClearable() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiFullItemClearable(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getSelectionLabel() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getSelectionLabel(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/VirtualList.svelte generated by Svelte v3.44.2 */
    const file$7 = "node_modules/svelte-select/src/VirtualList.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    const get_default_slot_changes = dirty => ({
    	item: dirty & /*visible*/ 32,
    	i: dirty & /*visible*/ 32,
    	hoverItemIndex: dirty & /*hoverItemIndex*/ 2
    });

    const get_default_slot_context = ctx => ({
    	item: /*row*/ ctx[23].data,
    	i: /*row*/ ctx[23].index,
    	hoverItemIndex: /*hoverItemIndex*/ ctx[1]
    });

    // (154:69) Missing template
    function fallback_block(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Missing template");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(154:69) Missing template",
    		ctx
    	});

    	return block;
    }

    // (152:8) {#each visible as row (row.index)}
    function create_each_block$3(key_1, ctx) {
    	let svelte_virtual_list_row;
    	let t;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[15].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], get_default_slot_context);
    	const default_slot_or_fallback = default_slot || fallback_block(ctx);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			svelte_virtual_list_row = element("svelte-virtual-list-row");
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    			t = space();
    			set_custom_element_data(svelte_virtual_list_row, "class", "svelte-g2cagw");
    			add_location(svelte_virtual_list_row, file$7, 152, 12, 3778);
    			this.first = svelte_virtual_list_row;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svelte_virtual_list_row, anchor);

    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(svelte_virtual_list_row, null);
    			}

    			append_dev(svelte_virtual_list_row, t);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, visible, hoverItemIndex*/ 16418)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[14],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svelte_virtual_list_row);
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(152:8) {#each visible as row (row.index)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let svelte_virtual_list_viewport;
    	let svelte_virtual_list_contents;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let svelte_virtual_list_viewport_resize_listener;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*visible*/ ctx[5];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*row*/ ctx[23].index;
    	validate_each_keys(ctx, each_value, get_each_context$3, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$3(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$3(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			svelte_virtual_list_viewport = element("svelte-virtual-list-viewport");
    			svelte_virtual_list_contents = element("svelte-virtual-list-contents");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			set_style(svelte_virtual_list_contents, "padding-top", /*top*/ ctx[6] + "px");
    			set_style(svelte_virtual_list_contents, "padding-bottom", /*bottom*/ ctx[7] + "px");
    			set_custom_element_data(svelte_virtual_list_contents, "class", "svelte-g2cagw");
    			add_location(svelte_virtual_list_contents, file$7, 148, 4, 3597);
    			set_style(svelte_virtual_list_viewport, "height", /*height*/ ctx[0]);
    			set_custom_element_data(svelte_virtual_list_viewport, "class", "svelte-g2cagw");
    			add_render_callback(() => /*svelte_virtual_list_viewport_elementresize_handler*/ ctx[18].call(svelte_virtual_list_viewport));
    			add_location(svelte_virtual_list_viewport, file$7, 143, 0, 3437);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svelte_virtual_list_viewport, anchor);
    			append_dev(svelte_virtual_list_viewport, svelte_virtual_list_contents);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(svelte_virtual_list_contents, null);
    			}

    			/*svelte_virtual_list_contents_binding*/ ctx[16](svelte_virtual_list_contents);
    			/*svelte_virtual_list_viewport_binding*/ ctx[17](svelte_virtual_list_viewport);
    			svelte_virtual_list_viewport_resize_listener = add_resize_listener(svelte_virtual_list_viewport, /*svelte_virtual_list_viewport_elementresize_handler*/ ctx[18].bind(svelte_virtual_list_viewport));
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(svelte_virtual_list_viewport, "scroll", /*handle_scroll*/ ctx[8], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$$scope, visible, hoverItemIndex*/ 16418) {
    				each_value = /*visible*/ ctx[5];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$3, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, svelte_virtual_list_contents, outro_and_destroy_block, create_each_block$3, null, get_each_context$3);
    				check_outros();
    			}

    			if (!current || dirty & /*top*/ 64) {
    				set_style(svelte_virtual_list_contents, "padding-top", /*top*/ ctx[6] + "px");
    			}

    			if (!current || dirty & /*bottom*/ 128) {
    				set_style(svelte_virtual_list_contents, "padding-bottom", /*bottom*/ ctx[7] + "px");
    			}

    			if (!current || dirty & /*height*/ 1) {
    				set_style(svelte_virtual_list_viewport, "height", /*height*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svelte_virtual_list_viewport);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			/*svelte_virtual_list_contents_binding*/ ctx[16](null);
    			/*svelte_virtual_list_viewport_binding*/ ctx[17](null);
    			svelte_virtual_list_viewport_resize_listener();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('VirtualList', slots, ['default']);
    	let { items = undefined } = $$props;
    	let { height = '100%' } = $$props;
    	let { itemHeight = 40 } = $$props;
    	let { hoverItemIndex = 0 } = $$props;
    	let { start = 0 } = $$props;
    	let { end = 0 } = $$props;
    	let height_map = [];
    	let rows;
    	let viewport;
    	let contents;
    	let viewport_height = 0;
    	let visible;
    	let mounted;
    	let top = 0;
    	let bottom = 0;
    	let average_height;

    	async function refresh(items, viewport_height, itemHeight) {
    		const { scrollTop } = viewport;
    		await tick();
    		let content_height = top - scrollTop;
    		let i = start;

    		while (content_height < viewport_height && i < items.length) {
    			let row = rows[i - start];

    			if (!row) {
    				$$invalidate(10, end = i + 1);
    				await tick();
    				row = rows[i - start];
    			}

    			const row_height = height_map[i] = itemHeight || row.offsetHeight;
    			content_height += row_height;
    			i += 1;
    		}

    		$$invalidate(10, end = i);
    		const remaining = items.length - end;
    		average_height = (top + content_height) / end;
    		$$invalidate(7, bottom = remaining * average_height);
    		height_map.length = items.length;
    		if (viewport) $$invalidate(3, viewport.scrollTop = 0, viewport);
    	}

    	async function handle_scroll() {
    		const { scrollTop } = viewport;
    		const old_start = start;

    		for (let v = 0; v < rows.length; v += 1) {
    			height_map[start + v] = itemHeight || rows[v].offsetHeight;
    		}

    		let i = 0;
    		let y = 0;

    		while (i < items.length) {
    			const row_height = height_map[i] || average_height;

    			if (y + row_height > scrollTop) {
    				$$invalidate(9, start = i);
    				$$invalidate(6, top = y);
    				break;
    			}

    			y += row_height;
    			i += 1;
    		}

    		while (i < items.length) {
    			y += height_map[i] || average_height;
    			i += 1;
    			if (y > scrollTop + viewport_height) break;
    		}

    		$$invalidate(10, end = i);
    		const remaining = items.length - end;
    		average_height = y / end;
    		while (i < items.length) height_map[i++] = average_height;
    		$$invalidate(7, bottom = remaining * average_height);

    		if (start < old_start) {
    			await tick();
    			let expected_height = 0;
    			let actual_height = 0;

    			for (let i = start; i < old_start; i += 1) {
    				if (rows[i - start]) {
    					expected_height += height_map[i];
    					actual_height += itemHeight || rows[i - start].offsetHeight;
    				}
    			}

    			const d = actual_height - expected_height;
    			viewport.scrollTo(0, scrollTop + d);
    		}
    	}

    	onMount(() => {
    		rows = contents.getElementsByTagName('svelte-virtual-list-row');
    		$$invalidate(13, mounted = true);
    	});

    	const writable_props = ['items', 'height', 'itemHeight', 'hoverItemIndex', 'start', 'end'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<VirtualList> was created with unknown prop '${key}'`);
    	});

    	function svelte_virtual_list_contents_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			contents = $$value;
    			$$invalidate(4, contents);
    		});
    	}

    	function svelte_virtual_list_viewport_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			viewport = $$value;
    			$$invalidate(3, viewport);
    		});
    	}

    	function svelte_virtual_list_viewport_elementresize_handler() {
    		viewport_height = this.offsetHeight;
    		$$invalidate(2, viewport_height);
    	}

    	$$self.$$set = $$props => {
    		if ('items' in $$props) $$invalidate(11, items = $$props.items);
    		if ('height' in $$props) $$invalidate(0, height = $$props.height);
    		if ('itemHeight' in $$props) $$invalidate(12, itemHeight = $$props.itemHeight);
    		if ('hoverItemIndex' in $$props) $$invalidate(1, hoverItemIndex = $$props.hoverItemIndex);
    		if ('start' in $$props) $$invalidate(9, start = $$props.start);
    		if ('end' in $$props) $$invalidate(10, end = $$props.end);
    		if ('$$scope' in $$props) $$invalidate(14, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		tick,
    		items,
    		height,
    		itemHeight,
    		hoverItemIndex,
    		start,
    		end,
    		height_map,
    		rows,
    		viewport,
    		contents,
    		viewport_height,
    		visible,
    		mounted,
    		top,
    		bottom,
    		average_height,
    		refresh,
    		handle_scroll
    	});

    	$$self.$inject_state = $$props => {
    		if ('items' in $$props) $$invalidate(11, items = $$props.items);
    		if ('height' in $$props) $$invalidate(0, height = $$props.height);
    		if ('itemHeight' in $$props) $$invalidate(12, itemHeight = $$props.itemHeight);
    		if ('hoverItemIndex' in $$props) $$invalidate(1, hoverItemIndex = $$props.hoverItemIndex);
    		if ('start' in $$props) $$invalidate(9, start = $$props.start);
    		if ('end' in $$props) $$invalidate(10, end = $$props.end);
    		if ('height_map' in $$props) height_map = $$props.height_map;
    		if ('rows' in $$props) rows = $$props.rows;
    		if ('viewport' in $$props) $$invalidate(3, viewport = $$props.viewport);
    		if ('contents' in $$props) $$invalidate(4, contents = $$props.contents);
    		if ('viewport_height' in $$props) $$invalidate(2, viewport_height = $$props.viewport_height);
    		if ('visible' in $$props) $$invalidate(5, visible = $$props.visible);
    		if ('mounted' in $$props) $$invalidate(13, mounted = $$props.mounted);
    		if ('top' in $$props) $$invalidate(6, top = $$props.top);
    		if ('bottom' in $$props) $$invalidate(7, bottom = $$props.bottom);
    		if ('average_height' in $$props) average_height = $$props.average_height;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*items, start, end*/ 3584) {
    			$$invalidate(5, visible = items.slice(start, end).map((data, i) => {
    				return { index: i + start, data };
    			}));
    		}

    		if ($$self.$$.dirty & /*mounted, items, viewport_height, itemHeight*/ 14340) {
    			if (mounted) refresh(items, viewport_height, itemHeight);
    		}
    	};

    	return [
    		height,
    		hoverItemIndex,
    		viewport_height,
    		viewport,
    		contents,
    		visible,
    		top,
    		bottom,
    		handle_scroll,
    		start,
    		end,
    		items,
    		itemHeight,
    		mounted,
    		$$scope,
    		slots,
    		svelte_virtual_list_contents_binding,
    		svelte_virtual_list_viewport_binding,
    		svelte_virtual_list_viewport_elementresize_handler
    	];
    }

    class VirtualList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			items: 11,
    			height: 0,
    			itemHeight: 12,
    			hoverItemIndex: 1,
    			start: 9,
    			end: 10
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "VirtualList",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get items() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemHeight() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemHeight(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hoverItemIndex() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hoverItemIndex(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get start() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set start(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get end() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set end(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/ClearIcon.svelte generated by Svelte v3.44.2 */

    const file$6 = "node_modules/svelte-select/src/ClearIcon.svelte";

    function create_fragment$7(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill", "currentColor");
    			attr_dev(path, "d", "M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124\n    l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z");
    			add_location(path, file$6, 8, 4, 141);
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "height", "100%");
    			attr_dev(svg, "viewBox", "-2 -2 50 50");
    			attr_dev(svg, "focusable", "false");
    			attr_dev(svg, "aria-hidden", "true");
    			attr_dev(svg, "role", "presentation");
    			add_location(svg, file$6, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ClearIcon', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ClearIcon> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class ClearIcon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ClearIcon",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    function debounce(func, wait, immediate) {
        let timeout;

        return function executedFunction() {
            let context = this;
            let args = arguments;

            let later = function () {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };

            let callNow = immediate && !timeout;

            clearTimeout(timeout);

            timeout = setTimeout(later, wait);

            if (callNow) func.apply(context, args);
        };
    }

    /* node_modules/svelte-select/src/Select.svelte generated by Svelte v3.44.2 */

    const { Object: Object_1$1, console: console_1 } = globals;
    const file$5 = "node_modules/svelte-select/src/Select.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[103] = list[i];
    	return child_ctx;
    }

    // (874:8) {#if isFocused}
    function create_if_block_10$1(ctx) {
    	let span0;
    	let t0;
    	let t1;
    	let span1;
    	let t2;

    	const block = {
    		c: function create() {
    			span0 = element("span");
    			t0 = text(/*ariaSelection*/ ctx[33]);
    			t1 = space();
    			span1 = element("span");
    			t2 = text(/*ariaContext*/ ctx[32]);
    			attr_dev(span0, "id", "aria-selection");
    			add_location(span0, file$5, 874, 12, 23775);
    			attr_dev(span1, "id", "aria-context");
    			add_location(span1, file$5, 875, 12, 23836);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);
    			append_dev(span0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, span1, anchor);
    			append_dev(span1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[1] & /*ariaSelection*/ 4) set_data_dev(t0, /*ariaSelection*/ ctx[33]);
    			if (dirty[1] & /*ariaContext*/ 2) set_data_dev(t2, /*ariaContext*/ ctx[32]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(span1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$1.name,
    		type: "if",
    		source: "(874:8) {#if isFocused}",
    		ctx
    	});

    	return block;
    }

    // (882:4) {#if Icon}
    function create_if_block_9$1(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*iconProps*/ ctx[18]];
    	var switch_value = /*Icon*/ ctx[17];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign$2(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty[0] & /*iconProps*/ 262144)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*iconProps*/ ctx[18])])
    			: {};

    			if (switch_value !== (switch_value = /*Icon*/ ctx[17])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$1.name,
    		type: "if",
    		source: "(882:4) {#if Icon}",
    		ctx
    	});

    	return block;
    }

    // (886:4) {#if showMultiSelect}
    function create_if_block_8$1(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*MultiSelection*/ ctx[26];

    	function switch_props(ctx) {
    		return {
    			props: {
    				value: /*value*/ ctx[2],
    				getSelectionLabel: /*getSelectionLabel*/ ctx[12],
    				activeValue: /*activeValue*/ ctx[30],
    				isDisabled: /*isDisabled*/ ctx[9],
    				multiFullItemClearable: /*multiFullItemClearable*/ ctx[8]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		switch_instance.$on("multiItemClear", /*handleMultiItemClear*/ ctx[38]);
    		switch_instance.$on("focus", /*handleFocus*/ ctx[40]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty[0] & /*value*/ 4) switch_instance_changes.value = /*value*/ ctx[2];
    			if (dirty[0] & /*getSelectionLabel*/ 4096) switch_instance_changes.getSelectionLabel = /*getSelectionLabel*/ ctx[12];
    			if (dirty[0] & /*activeValue*/ 1073741824) switch_instance_changes.activeValue = /*activeValue*/ ctx[30];
    			if (dirty[0] & /*isDisabled*/ 512) switch_instance_changes.isDisabled = /*isDisabled*/ ctx[9];
    			if (dirty[0] & /*multiFullItemClearable*/ 256) switch_instance_changes.multiFullItemClearable = /*multiFullItemClearable*/ ctx[8];

    			if (switch_value !== (switch_value = /*MultiSelection*/ ctx[26])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					switch_instance.$on("multiItemClear", /*handleMultiItemClear*/ ctx[38]);
    					switch_instance.$on("focus", /*handleFocus*/ ctx[40]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$1.name,
    		type: "if",
    		source: "(886:4) {#if showMultiSelect}",
    		ctx
    	});

    	return block;
    }

    // (908:4) {#if !isMulti && showSelectedItem}
    function create_if_block_7$1(ctx) {
    	let div;
    	let switch_instance;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*Selection*/ ctx[25];

    	function switch_props(ctx) {
    		return {
    			props: {
    				item: /*value*/ ctx[2],
    				getSelectionLabel: /*getSelectionLabel*/ ctx[12]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div, "class", "selectedItem svelte-17l1npl");
    			add_location(div, file$5, 908, 8, 24658);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "focus", /*handleFocus*/ ctx[40], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty[0] & /*value*/ 4) switch_instance_changes.item = /*value*/ ctx[2];
    			if (dirty[0] & /*getSelectionLabel*/ 4096) switch_instance_changes.getSelectionLabel = /*getSelectionLabel*/ ctx[12];

    			if (switch_value !== (switch_value = /*Selection*/ ctx[25])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, null);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(908:4) {#if !isMulti && showSelectedItem}",
    		ctx
    	});

    	return block;
    }

    // (917:4) {#if showClearIcon}
    function create_if_block_6$1(ctx) {
    	let div;
    	let switch_instance;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*ClearIcon*/ ctx[23];

    	function switch_props(ctx) {
    		return { $$inline: true };
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div, "class", "clearSelect svelte-17l1npl");
    			attr_dev(div, "aria-hidden", "true");
    			add_location(div, file$5, 917, 8, 24897);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", prevent_default(/*handleClear*/ ctx[27]), false, true, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (switch_value !== (switch_value = /*ClearIcon*/ ctx[23])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, null);
    				} else {
    					switch_instance = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(917:4) {#if showClearIcon}",
    		ctx
    	});

    	return block;
    }

    // (926:4) {#if !showClearIcon && (showIndicator || (showChevron && !value) || (!isSearchable && !isDisabled && !isWaiting && ((showSelectedItem && !isClearable) || !showSelectedItem)))}
    function create_if_block_4$1(ctx) {
    	let div;

    	function select_block_type(ctx, dirty) {
    		if (/*indicatorSvg*/ ctx[22]) return create_if_block_5$1;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "indicator svelte-17l1npl");
    			attr_dev(div, "aria-hidden", "true");
    			add_location(div, file$5, 926, 8, 25280);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_block.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(926:4) {#if !showClearIcon && (showIndicator || (showChevron && !value) || (!isSearchable && !isDisabled && !isWaiting && ((showSelectedItem && !isClearable) || !showSelectedItem)))}",
    		ctx
    	});

    	return block;
    }

    // (930:12) {:else}
    function create_else_block$3(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747\n          3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0\n          1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502\n          0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0\n          0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z");
    			add_location(path, file$5, 936, 20, 25637);
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "height", "100%");
    			attr_dev(svg, "viewBox", "0 0 20 20");
    			attr_dev(svg, "focusable", "false");
    			attr_dev(svg, "aria-hidden", "true");
    			attr_dev(svg, "class", "svelte-17l1npl");
    			add_location(svg, file$5, 930, 16, 25427);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(930:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (928:12) {#if indicatorSvg}
    function create_if_block_5$1(ctx) {
    	let html_tag;
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(/*indicatorSvg*/ ctx[22], target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*indicatorSvg*/ 4194304) html_tag.p(/*indicatorSvg*/ ctx[22]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(928:12) {#if indicatorSvg}",
    		ctx
    	});

    	return block;
    }

    // (948:4) {#if isWaiting}
    function create_if_block_3$1(ctx) {
    	let div;
    	let svg;
    	let circle;

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			circle = svg_element("circle");
    			attr_dev(circle, "class", "spinner_path svelte-17l1npl");
    			attr_dev(circle, "cx", "50");
    			attr_dev(circle, "cy", "50");
    			attr_dev(circle, "r", "20");
    			attr_dev(circle, "fill", "none");
    			attr_dev(circle, "stroke", "currentColor");
    			attr_dev(circle, "stroke-width", "5");
    			attr_dev(circle, "stroke-miterlimit", "10");
    			add_location(circle, file$5, 950, 16, 26186);
    			attr_dev(svg, "class", "spinner_icon svelte-17l1npl");
    			attr_dev(svg, "viewBox", "25 25 50 50");
    			add_location(svg, file$5, 949, 12, 26121);
    			attr_dev(div, "class", "spinner svelte-17l1npl");
    			add_location(div, file$5, 948, 8, 26087);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, circle);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(948:4) {#if isWaiting}",
    		ctx
    	});

    	return block;
    }

    // (964:4) {#if listOpen}
    function create_if_block_2$2(ctx) {
    	let switch_instance;
    	let updating_hoverItemIndex;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*listProps*/ ctx[34]];

    	function switch_instance_hoverItemIndex_binding(value) {
    		/*switch_instance_hoverItemIndex_binding*/ ctx[84](value);
    	}

    	var switch_value = /*List*/ ctx[24];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign$2(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		if (/*hoverItemIndex*/ ctx[28] !== void 0) {
    			switch_instance_props.hoverItemIndex = /*hoverItemIndex*/ ctx[28];
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		binding_callbacks.push(() => bind(switch_instance, 'hoverItemIndex', switch_instance_hoverItemIndex_binding));
    		switch_instance.$on("itemSelected", /*itemSelected*/ ctx[43]);
    		switch_instance.$on("itemCreated", /*itemCreated*/ ctx[44]);
    		switch_instance.$on("closeList", /*closeList*/ ctx[45]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty[1] & /*listProps*/ 8)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*listProps*/ ctx[34])])
    			: {};

    			if (!updating_hoverItemIndex && dirty[0] & /*hoverItemIndex*/ 268435456) {
    				updating_hoverItemIndex = true;
    				switch_instance_changes.hoverItemIndex = /*hoverItemIndex*/ ctx[28];
    				add_flush_callback(() => updating_hoverItemIndex = false);
    			}

    			if (switch_value !== (switch_value = /*List*/ ctx[24])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					binding_callbacks.push(() => bind(switch_instance, 'hoverItemIndex', switch_instance_hoverItemIndex_binding));
    					switch_instance.$on("itemSelected", /*itemSelected*/ ctx[43]);
    					switch_instance.$on("itemCreated", /*itemCreated*/ ctx[44]);
    					switch_instance.$on("closeList", /*closeList*/ ctx[45]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(964:4) {#if listOpen}",
    		ctx
    	});

    	return block;
    }

    // (974:4) {#if !isMulti || (isMulti && !showMultiSelect)}
    function create_if_block_1$2(ctx) {
    	let input_1;
    	let input_1_name_value;
    	let input_1_value_value;

    	const block = {
    		c: function create() {
    			input_1 = element("input");
    			attr_dev(input_1, "name", input_1_name_value = /*inputAttributes*/ ctx[16].name);
    			attr_dev(input_1, "type", "hidden");

    			input_1.value = input_1_value_value = /*value*/ ctx[2]
    			? /*getSelectionLabel*/ ctx[12](/*value*/ ctx[2])
    			: null;

    			attr_dev(input_1, "class", "svelte-17l1npl");
    			add_location(input_1, file$5, 974, 8, 26843);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*inputAttributes*/ 65536 && input_1_name_value !== (input_1_name_value = /*inputAttributes*/ ctx[16].name)) {
    				attr_dev(input_1, "name", input_1_name_value);
    			}

    			if (dirty[0] & /*value, getSelectionLabel*/ 4100 && input_1_value_value !== (input_1_value_value = /*value*/ ctx[2]
    			? /*getSelectionLabel*/ ctx[12](/*value*/ ctx[2])
    			: null)) {
    				prop_dev(input_1, "value", input_1_value_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(974:4) {#if !isMulti || (isMulti && !showMultiSelect)}",
    		ctx
    	});

    	return block;
    }

    // (981:4) {#if isMulti && showMultiSelect}
    function create_if_block$5(ctx) {
    	let each_1_anchor;
    	let each_value = /*value*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*inputAttributes, value, getSelectionLabel*/ 69636) {
    				each_value = /*value*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(981:4) {#if isMulti && showMultiSelect}",
    		ctx
    	});

    	return block;
    }

    // (982:8) {#each value as item}
    function create_each_block$2(ctx) {
    	let input_1;
    	let input_1_name_value;
    	let input_1_value_value;

    	const block = {
    		c: function create() {
    			input_1 = element("input");
    			attr_dev(input_1, "name", input_1_name_value = /*inputAttributes*/ ctx[16].name);
    			attr_dev(input_1, "type", "hidden");

    			input_1.value = input_1_value_value = /*item*/ ctx[103]
    			? /*getSelectionLabel*/ ctx[12](/*item*/ ctx[103])
    			: null;

    			attr_dev(input_1, "class", "svelte-17l1npl");
    			add_location(input_1, file$5, 982, 12, 27069);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*inputAttributes*/ 65536 && input_1_name_value !== (input_1_name_value = /*inputAttributes*/ ctx[16].name)) {
    				attr_dev(input_1, "name", input_1_name_value);
    			}

    			if (dirty[0] & /*value, getSelectionLabel*/ 4100 && input_1_value_value !== (input_1_value_value = /*item*/ ctx[103]
    			? /*getSelectionLabel*/ ctx[12](/*item*/ ctx[103])
    			: null)) {
    				prop_dev(input_1, "value", input_1_value_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(982:8) {#each value as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div;
    	let span;
    	let t0;
    	let t1;
    	let t2;
    	let input_1;
    	let input_1_readonly_value;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let div_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*isFocused*/ ctx[1] && create_if_block_10$1(ctx);
    	let if_block1 = /*Icon*/ ctx[17] && create_if_block_9$1(ctx);
    	let if_block2 = /*showMultiSelect*/ ctx[35] && create_if_block_8$1(ctx);

    	let input_1_levels = [
    		{
    			readOnly: input_1_readonly_value = !/*isSearchable*/ ctx[13]
    		},
    		/*_inputAttributes*/ ctx[31],
    		{ placeholder: /*placeholderText*/ ctx[36] },
    		{ style: /*inputStyles*/ ctx[14] },
    		{ disabled: /*isDisabled*/ ctx[9] }
    	];

    	let input_1_data = {};

    	for (let i = 0; i < input_1_levels.length; i += 1) {
    		input_1_data = assign$2(input_1_data, input_1_levels[i]);
    	}

    	let if_block3 = !/*isMulti*/ ctx[7] && /*showSelectedItem*/ ctx[29] && create_if_block_7$1(ctx);
    	let if_block4 = /*showClearIcon*/ ctx[37] && create_if_block_6$1(ctx);
    	let if_block5 = !/*showClearIcon*/ ctx[37] && (/*showIndicator*/ ctx[20] || /*showChevron*/ ctx[19] && !/*value*/ ctx[2] || !/*isSearchable*/ ctx[13] && !/*isDisabled*/ ctx[9] && !/*isWaiting*/ ctx[4] && (/*showSelectedItem*/ ctx[29] && !/*isClearable*/ ctx[15] || !/*showSelectedItem*/ ctx[29])) && create_if_block_4$1(ctx);
    	let if_block6 = /*isWaiting*/ ctx[4] && create_if_block_3$1(ctx);
    	let if_block7 = /*listOpen*/ ctx[5] && create_if_block_2$2(ctx);
    	let if_block8 = (!/*isMulti*/ ctx[7] || /*isMulti*/ ctx[7] && !/*showMultiSelect*/ ctx[35]) && create_if_block_1$2(ctx);
    	let if_block9 = /*isMulti*/ ctx[7] && /*showMultiSelect*/ ctx[35] && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			input_1 = element("input");
    			t3 = space();
    			if (if_block3) if_block3.c();
    			t4 = space();
    			if (if_block4) if_block4.c();
    			t5 = space();
    			if (if_block5) if_block5.c();
    			t6 = space();
    			if (if_block6) if_block6.c();
    			t7 = space();
    			if (if_block7) if_block7.c();
    			t8 = space();
    			if (if_block8) if_block8.c();
    			t9 = space();
    			if (if_block9) if_block9.c();
    			attr_dev(span, "aria-live", "polite");
    			attr_dev(span, "aria-atomic", "false");
    			attr_dev(span, "aria-relevant", "additions text");
    			attr_dev(span, "class", "a11yText svelte-17l1npl");
    			add_location(span, file$5, 868, 4, 23613);
    			set_attributes(input_1, input_1_data);
    			toggle_class(input_1, "svelte-17l1npl", true);
    			add_location(input_1, file$5, 897, 4, 24352);
    			attr_dev(div, "class", div_class_value = "selectContainer " + /*containerClasses*/ ctx[21] + " svelte-17l1npl");
    			attr_dev(div, "style", /*containerStyles*/ ctx[11]);
    			toggle_class(div, "hasError", /*hasError*/ ctx[10]);
    			toggle_class(div, "multiSelect", /*isMulti*/ ctx[7]);
    			toggle_class(div, "disabled", /*isDisabled*/ ctx[9]);
    			toggle_class(div, "focused", /*isFocused*/ ctx[1]);
    			add_location(div, file$5, 859, 0, 23362);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			if (if_block0) if_block0.m(span, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    			append_dev(div, t2);
    			append_dev(div, input_1);
    			if (input_1.autofocus) input_1.focus();
    			/*input_1_binding*/ ctx[82](input_1);
    			set_input_value(input_1, /*filterText*/ ctx[3]);
    			append_dev(div, t3);
    			if (if_block3) if_block3.m(div, null);
    			append_dev(div, t4);
    			if (if_block4) if_block4.m(div, null);
    			append_dev(div, t5);
    			if (if_block5) if_block5.m(div, null);
    			append_dev(div, t6);
    			if (if_block6) if_block6.m(div, null);
    			append_dev(div, t7);
    			if (if_block7) if_block7.m(div, null);
    			append_dev(div, t8);
    			if (if_block8) if_block8.m(div, null);
    			append_dev(div, t9);
    			if (if_block9) if_block9.m(div, null);
    			/*div_binding*/ ctx[85](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "click", /*handleWindowEvent*/ ctx[41], false, false, false),
    					listen_dev(window, "focusin", /*handleWindowEvent*/ ctx[41], false, false, false),
    					listen_dev(window, "keydown", /*handleKeyDown*/ ctx[39], false, false, false),
    					listen_dev(input_1, "focus", /*handleFocus*/ ctx[40], false, false, false),
    					listen_dev(input_1, "input", /*input_1_input_handler*/ ctx[83]),
    					listen_dev(div, "click", /*handleClick*/ ctx[42], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*isFocused*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_10$1(ctx);
    					if_block0.c();
    					if_block0.m(span, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*Icon*/ ctx[17]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*Icon*/ 131072) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_9$1(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*showMultiSelect*/ ctx[35]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[1] & /*showMultiSelect*/ 16) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_8$1(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div, t2);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			set_attributes(input_1, input_1_data = get_spread_update(input_1_levels, [
    				(!current || dirty[0] & /*isSearchable*/ 8192 && input_1_readonly_value !== (input_1_readonly_value = !/*isSearchable*/ ctx[13])) && { readOnly: input_1_readonly_value },
    				dirty[1] & /*_inputAttributes*/ 1 && /*_inputAttributes*/ ctx[31],
    				(!current || dirty[1] & /*placeholderText*/ 32) && { placeholder: /*placeholderText*/ ctx[36] },
    				(!current || dirty[0] & /*inputStyles*/ 16384) && { style: /*inputStyles*/ ctx[14] },
    				(!current || dirty[0] & /*isDisabled*/ 512) && { disabled: /*isDisabled*/ ctx[9] }
    			]));

    			if (dirty[0] & /*filterText*/ 8 && input_1.value !== /*filterText*/ ctx[3]) {
    				set_input_value(input_1, /*filterText*/ ctx[3]);
    			}

    			toggle_class(input_1, "svelte-17l1npl", true);

    			if (!/*isMulti*/ ctx[7] && /*showSelectedItem*/ ctx[29]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*isMulti, showSelectedItem*/ 536871040) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_7$1(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div, t4);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (/*showClearIcon*/ ctx[37]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty[1] & /*showClearIcon*/ 64) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_6$1(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div, t5);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			if (!/*showClearIcon*/ ctx[37] && (/*showIndicator*/ ctx[20] || /*showChevron*/ ctx[19] && !/*value*/ ctx[2] || !/*isSearchable*/ ctx[13] && !/*isDisabled*/ ctx[9] && !/*isWaiting*/ ctx[4] && (/*showSelectedItem*/ ctx[29] && !/*isClearable*/ ctx[15] || !/*showSelectedItem*/ ctx[29]))) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_4$1(ctx);
    					if_block5.c();
    					if_block5.m(div, t6);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*isWaiting*/ ctx[4]) {
    				if (if_block6) ; else {
    					if_block6 = create_if_block_3$1(ctx);
    					if_block6.c();
    					if_block6.m(div, t7);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*listOpen*/ ctx[5]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);

    					if (dirty[0] & /*listOpen*/ 32) {
    						transition_in(if_block7, 1);
    					}
    				} else {
    					if_block7 = create_if_block_2$2(ctx);
    					if_block7.c();
    					transition_in(if_block7, 1);
    					if_block7.m(div, t8);
    				}
    			} else if (if_block7) {
    				group_outros();

    				transition_out(if_block7, 1, 1, () => {
    					if_block7 = null;
    				});

    				check_outros();
    			}

    			if (!/*isMulti*/ ctx[7] || /*isMulti*/ ctx[7] && !/*showMultiSelect*/ ctx[35]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_1$2(ctx);
    					if_block8.c();
    					if_block8.m(div, t9);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*isMulti*/ ctx[7] && /*showMultiSelect*/ ctx[35]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block$5(ctx);
    					if_block9.c();
    					if_block9.m(div, null);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (!current || dirty[0] & /*containerClasses*/ 2097152 && div_class_value !== (div_class_value = "selectContainer " + /*containerClasses*/ ctx[21] + " svelte-17l1npl")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty[0] & /*containerStyles*/ 2048) {
    				attr_dev(div, "style", /*containerStyles*/ ctx[11]);
    			}

    			if (dirty[0] & /*containerClasses, hasError*/ 2098176) {
    				toggle_class(div, "hasError", /*hasError*/ ctx[10]);
    			}

    			if (dirty[0] & /*containerClasses, isMulti*/ 2097280) {
    				toggle_class(div, "multiSelect", /*isMulti*/ ctx[7]);
    			}

    			if (dirty[0] & /*containerClasses, isDisabled*/ 2097664) {
    				toggle_class(div, "disabled", /*isDisabled*/ ctx[9]);
    			}

    			if (dirty[0] & /*containerClasses, isFocused*/ 2097154) {
    				toggle_class(div, "focused", /*isFocused*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			transition_in(if_block7);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			transition_out(if_block7);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			/*input_1_binding*/ ctx[82](null);
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			if (if_block6) if_block6.d();
    			if (if_block7) if_block7.d();
    			if (if_block8) if_block8.d();
    			if (if_block9) if_block9.d();
    			/*div_binding*/ ctx[85](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function convertStringItemsToObjects(_items) {
    	return _items.map((item, index) => {
    		return { index, value: item, label: `${item}` };
    	});
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let filteredItems;
    	let showSelectedItem;
    	let showClearIcon;
    	let placeholderText;
    	let showMultiSelect;
    	let listProps;
    	let ariaSelection;
    	let ariaContext;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Select', slots, []);
    	const dispatch = createEventDispatcher();
    	let { id = null } = $$props;
    	let { container = undefined } = $$props;
    	let { input = undefined } = $$props;
    	let { isMulti = false } = $$props;
    	let { multiFullItemClearable = false } = $$props;
    	let { isDisabled = false } = $$props;
    	let { isCreatable = false } = $$props;
    	let { isFocused = false } = $$props;
    	let { value = null } = $$props;
    	let { filterText = '' } = $$props;
    	let { placeholder = 'Select...' } = $$props;
    	let { placeholderAlwaysShow = false } = $$props;
    	let { items = null } = $$props;
    	let { itemFilter = (label, filterText, option) => `${label}`.toLowerCase().includes(filterText.toLowerCase()) } = $$props;
    	let { groupBy = undefined } = $$props;
    	let { groupFilter = groups => groups } = $$props;
    	let { isGroupHeaderSelectable = false } = $$props;

    	let { getGroupHeaderLabel = option => {
    		return option[labelIdentifier] || option.id;
    	} } = $$props;

    	let { labelIdentifier = 'label' } = $$props;

    	let { getOptionLabel = (option, filterText) => {
    		return option.isCreator
    		? `Create \"${filterText}\"`
    		: option[labelIdentifier];
    	} } = $$props;

    	let { optionIdentifier = 'value' } = $$props;
    	let { loadOptions = undefined } = $$props;
    	let { hasError = false } = $$props;
    	let { containerStyles = '' } = $$props;

    	let { getSelectionLabel = option => {
    		if (option) return option[labelIdentifier]; else return null;
    	} } = $$props;

    	let { createGroupHeaderItem = groupValue => {
    		return { value: groupValue, label: groupValue };
    	} } = $$props;

    	let { createItem = filterText => {
    		return { value: filterText, label: filterText };
    	} } = $$props;

    	const getFilteredItems = () => {
    		return filteredItems;
    	};

    	let { isSearchable = true } = $$props;
    	let { inputStyles = '' } = $$props;
    	let { isClearable = true } = $$props;
    	let { isWaiting = false } = $$props;
    	let { listPlacement = 'auto' } = $$props;
    	let { listOpen = false } = $$props;
    	let { isVirtualList = false } = $$props;
    	let { loadOptionsInterval = 300 } = $$props;
    	let { noOptionsMessage = 'No options' } = $$props;
    	let { hideEmptyState = false } = $$props;
    	let { inputAttributes = {} } = $$props;
    	let { listAutoWidth = true } = $$props;
    	let { itemHeight = 40 } = $$props;
    	let { Icon = undefined } = $$props;
    	let { iconProps = {} } = $$props;
    	let { showChevron = false } = $$props;
    	let { showIndicator = false } = $$props;
    	let { containerClasses = '' } = $$props;
    	let { indicatorSvg = undefined } = $$props;
    	let { listOffset = 5 } = $$props;
    	let { ClearIcon: ClearIcon$1 = ClearIcon } = $$props;
    	let { Item: Item$1 = Item } = $$props;
    	let { List: List$1 = List } = $$props;
    	let { Selection: Selection$1 = Selection } = $$props;
    	let { MultiSelection: MultiSelection$1 = MultiSelection } = $$props;
    	let { VirtualList: VirtualList$1 = VirtualList } = $$props;

    	function filterMethod(args) {
    		if (args.loadOptions && args.filterText.length > 0) return;
    		if (!args.items) return [];

    		if (args.items && args.items.length > 0 && typeof args.items[0] !== 'object') {
    			args.items = convertStringItemsToObjects(args.items);
    		}

    		let filterResults = args.items.filter(item => {
    			let matchesFilter = itemFilter(getOptionLabel(item, args.filterText), args.filterText, item);

    			if (matchesFilter && args.isMulti && args.value && Array.isArray(args.value)) {
    				matchesFilter = !args.value.some(x => {
    					return x[args.optionIdentifier] === item[args.optionIdentifier];
    				});
    			}

    			return matchesFilter;
    		});

    		if (args.groupBy) {
    			filterResults = filterGroupedItems(filterResults);
    		}

    		if (args.isCreatable) {
    			filterResults = addCreatableItem(filterResults, args.filterText);
    		}

    		return filterResults;
    	}

    	function addCreatableItem(_items, _filterText) {
    		if (_filterText.length === 0) return _items;
    		const itemToCreate = createItem(_filterText);
    		if (_items[0] && _filterText === _items[0][labelIdentifier]) return _items;
    		itemToCreate.isCreator = true;
    		return [..._items, itemToCreate];
    	}

    	let { selectedValue = null } = $$props;
    	let activeValue;
    	let prev_value;
    	let prev_filterText;
    	let prev_isFocused;
    	let prev_isMulti;
    	let hoverItemIndex;

    	const getItems = debounce(
    		async () => {
    			$$invalidate(4, isWaiting = true);

    			let res = await loadOptions(filterText).catch(err => {
    				console.warn('svelte-select loadOptions error :>> ', err);
    				dispatch('error', { type: 'loadOptions', details: err });
    			});

    			if (res && !res.cancelled) {
    				if (res) {
    					if (res && res.length > 0 && typeof res[0] !== 'object') {
    						res = convertStringItemsToObjects(res);
    					}

    					$$invalidate(81, filteredItems = [...res]);
    					dispatch('loaded', { items: filteredItems });
    				} else {
    					$$invalidate(81, filteredItems = []);
    				}

    				if (isCreatable) {
    					$$invalidate(81, filteredItems = addCreatableItem(filteredItems, filterText));
    				}

    				$$invalidate(4, isWaiting = false);
    				$$invalidate(1, isFocused = true);
    				$$invalidate(5, listOpen = true);
    			}
    		},
    		loadOptionsInterval
    	);

    	function setValue() {
    		if (typeof value === 'string') {
    			$$invalidate(2, value = { [optionIdentifier]: value, label: value });
    		} else if (isMulti && Array.isArray(value) && value.length > 0) {
    			$$invalidate(2, value = value.map(item => typeof item === 'string'
    			? { value: item, label: item }
    			: item));
    		}
    	}

    	let _inputAttributes;

    	function assignInputAttributes() {
    		$$invalidate(31, _inputAttributes = Object.assign(
    			{
    				autocapitalize: 'none',
    				autocomplete: 'off',
    				autocorrect: 'off',
    				spellcheck: false,
    				tabindex: 0,
    				type: 'text',
    				'aria-autocomplete': 'list'
    			},
    			inputAttributes
    		));

    		if (id) {
    			$$invalidate(31, _inputAttributes.id = id, _inputAttributes);
    		}

    		if (!isSearchable) {
    			$$invalidate(31, _inputAttributes.readonly = true, _inputAttributes);
    		}
    	}

    	function filterGroupedItems(_items) {
    		const groupValues = [];
    		const groups = {};

    		_items.forEach(item => {
    			const groupValue = groupBy(item);

    			if (!groupValues.includes(groupValue)) {
    				groupValues.push(groupValue);
    				groups[groupValue] = [];

    				if (groupValue) {
    					groups[groupValue].push(Object.assign(createGroupHeaderItem(groupValue, item), {
    						id: groupValue,
    						isGroupHeader: true,
    						isSelectable: isGroupHeaderSelectable
    					}));
    				}
    			}

    			groups[groupValue].push(Object.assign({ isGroupItem: !!groupValue }, item));
    		});

    		const sortedGroupedItems = [];

    		groupFilter(groupValues).forEach(groupValue => {
    			sortedGroupedItems.push(...groups[groupValue]);
    		});

    		return sortedGroupedItems;
    	}

    	function dispatchSelectedItem() {
    		if (isMulti) {
    			if (JSON.stringify(value) !== JSON.stringify(prev_value)) {
    				if (checkValueForDuplicates()) {
    					dispatch('select', value);
    				}
    			}

    			return;
    		}

    		if (!prev_value || JSON.stringify(value[optionIdentifier]) !== JSON.stringify(prev_value[optionIdentifier])) {
    			dispatch('select', value);
    		}
    	}

    	function setupFocus() {
    		if (isFocused || listOpen) {
    			handleFocus();
    		} else {
    			if (input) input.blur();
    		}
    	}

    	function setupMulti() {
    		if (value) {
    			if (Array.isArray(value)) {
    				$$invalidate(2, value = [...value]);
    			} else {
    				$$invalidate(2, value = [value]);
    			}
    		}
    	}

    	function setupSingle() {
    		if (value) $$invalidate(2, value = null);
    	}

    	function setupFilterText() {
    		if (filterText.length === 0) return;
    		$$invalidate(1, isFocused = true);
    		$$invalidate(5, listOpen = true);

    		if (loadOptions) {
    			getItems();
    		} else {
    			$$invalidate(5, listOpen = true);

    			if (isMulti) {
    				$$invalidate(30, activeValue = undefined);
    			}
    		}
    	}

    	beforeUpdate(async () => {
    		$$invalidate(77, prev_value = value);
    		$$invalidate(78, prev_filterText = filterText);
    		$$invalidate(79, prev_isFocused = isFocused);
    		$$invalidate(80, prev_isMulti = isMulti);
    	});

    	function checkValueForDuplicates() {
    		let noDuplicates = true;

    		if (value) {
    			const ids = [];
    			const uniqueValues = [];

    			value.forEach(val => {
    				if (!ids.includes(val[optionIdentifier])) {
    					ids.push(val[optionIdentifier]);
    					uniqueValues.push(val);
    				} else {
    					noDuplicates = false;
    				}
    			});

    			if (!noDuplicates) $$invalidate(2, value = uniqueValues);
    		}

    		return noDuplicates;
    	}

    	function findItem(selection) {
    		let matchTo = selection
    		? selection[optionIdentifier]
    		: value[optionIdentifier];

    		return items.find(item => item[optionIdentifier] === matchTo);
    	}

    	function updateValueDisplay(items) {
    		if (!items || items.length === 0 || items.some(item => typeof item !== 'object')) return;

    		if (!value || (isMulti
    		? value.some(selection => !selection || !selection[optionIdentifier])
    		: !value[optionIdentifier])) return;

    		if (Array.isArray(value)) {
    			$$invalidate(2, value = value.map(selection => findItem(selection) || selection));
    		} else {
    			$$invalidate(2, value = findItem() || value);
    		}
    	}

    	function handleMultiItemClear(event) {
    		const { detail } = event;
    		const itemToRemove = value[detail ? detail.i : value.length - 1];

    		if (value.length === 1) {
    			$$invalidate(2, value = undefined);
    		} else {
    			$$invalidate(2, value = value.filter(item => {
    				return item !== itemToRemove;
    			}));
    		}

    		dispatch('clear', itemToRemove);
    	}

    	function handleKeyDown(e) {
    		if (!isFocused) return;

    		switch (e.key) {
    			case 'ArrowDown':
    				e.preventDefault();
    				$$invalidate(5, listOpen = true);
    				$$invalidate(30, activeValue = undefined);
    				break;
    			case 'ArrowUp':
    				e.preventDefault();
    				$$invalidate(5, listOpen = true);
    				$$invalidate(30, activeValue = undefined);
    				break;
    			case 'Tab':
    				if (!listOpen) $$invalidate(1, isFocused = false);
    				break;
    			case 'Backspace':
    				if (!isMulti || filterText.length > 0) return;
    				if (isMulti && value && value.length > 0) {
    					handleMultiItemClear(activeValue !== undefined
    					? activeValue
    					: value.length - 1);

    					if (activeValue === 0 || activeValue === undefined) break;
    					$$invalidate(30, activeValue = value.length > activeValue ? activeValue - 1 : undefined);
    				}
    				break;
    			case 'ArrowLeft':
    				if (!isMulti || filterText.length > 0) return;
    				if (activeValue === undefined) {
    					$$invalidate(30, activeValue = value.length - 1);
    				} else if (value.length > activeValue && activeValue !== 0) {
    					$$invalidate(30, activeValue -= 1);
    				}
    				break;
    			case 'ArrowRight':
    				if (!isMulti || filterText.length > 0 || activeValue === undefined) return;
    				if (activeValue === value.length - 1) {
    					$$invalidate(30, activeValue = undefined);
    				} else if (activeValue < value.length - 1) {
    					$$invalidate(30, activeValue += 1);
    				}
    				break;
    		}
    	}

    	function handleFocus() {
    		$$invalidate(1, isFocused = true);
    		if (input) input.focus();
    	}

    	function handleWindowEvent(event) {
    		if (!container) return;

    		const eventTarget = event.path && event.path.length > 0
    		? event.path[0]
    		: event.target;

    		if (container.contains(eventTarget)) return;
    		$$invalidate(1, isFocused = false);
    		$$invalidate(5, listOpen = false);
    		$$invalidate(30, activeValue = undefined);
    		if (input) input.blur();
    	}

    	function handleClick() {
    		if (isDisabled) return;
    		$$invalidate(1, isFocused = true);
    		$$invalidate(5, listOpen = !listOpen);
    	}

    	function handleClear() {
    		$$invalidate(2, value = undefined);
    		$$invalidate(5, listOpen = false);
    		dispatch('clear', value);
    		handleFocus();
    	}

    	onMount(() => {
    		if (isFocused && input) input.focus();
    	});

    	function itemSelected(event) {
    		const { detail } = event;

    		if (detail) {
    			$$invalidate(3, filterText = '');
    			const item = Object.assign({}, detail);

    			if (!item.isGroupHeader || item.isSelectable) {
    				if (isMulti) {
    					$$invalidate(2, value = value ? value.concat([item]) : [item]);
    				} else {
    					$$invalidate(2, value = item);
    				}

    				$$invalidate(2, value);

    				setTimeout(() => {
    					$$invalidate(5, listOpen = false);
    					$$invalidate(30, activeValue = undefined);
    				});
    			}
    		}
    	}

    	function itemCreated(event) {
    		const { detail } = event;

    		if (isMulti) {
    			$$invalidate(2, value = value || []);
    			$$invalidate(2, value = [...value, createItem(detail)]);
    		} else {
    			$$invalidate(2, value = createItem(detail));
    		}

    		dispatch('itemCreated', detail);
    		$$invalidate(3, filterText = '');
    		$$invalidate(5, listOpen = false);
    		$$invalidate(30, activeValue = undefined);
    	}

    	function closeList() {
    		$$invalidate(3, filterText = '');
    		$$invalidate(5, listOpen = false);
    	}

    	let { ariaValues = values => {
    		return `Option ${values}, selected.`;
    	} } = $$props;

    	let { ariaListOpen = (label, count) => {
    		return `You are currently focused on option ${label}. There are ${count} results available.`;
    	} } = $$props;

    	let { ariaFocused = () => {
    		return `Select is focused, type to refine list, press down to open the menu.`;
    	} } = $$props;

    	function handleAriaSelection() {
    		let selected = undefined;

    		if (isMulti && value.length > 0) {
    			selected = value.map(v => getSelectionLabel(v)).join(', ');
    		} else {
    			selected = getSelectionLabel(value);
    		}

    		return ariaValues(selected);
    	}

    	function handleAriaContent() {
    		if (!isFocused || !filteredItems || filteredItems.length === 0) return '';
    		let _item = filteredItems[hoverItemIndex];

    		if (listOpen && _item) {
    			let label = getSelectionLabel(_item);
    			let count = filteredItems ? filteredItems.length : 0;
    			return ariaListOpen(label, count);
    		} else {
    			return ariaFocused();
    		}
    	}

    	const writable_props = [
    		'id',
    		'container',
    		'input',
    		'isMulti',
    		'multiFullItemClearable',
    		'isDisabled',
    		'isCreatable',
    		'isFocused',
    		'value',
    		'filterText',
    		'placeholder',
    		'placeholderAlwaysShow',
    		'items',
    		'itemFilter',
    		'groupBy',
    		'groupFilter',
    		'isGroupHeaderSelectable',
    		'getGroupHeaderLabel',
    		'labelIdentifier',
    		'getOptionLabel',
    		'optionIdentifier',
    		'loadOptions',
    		'hasError',
    		'containerStyles',
    		'getSelectionLabel',
    		'createGroupHeaderItem',
    		'createItem',
    		'isSearchable',
    		'inputStyles',
    		'isClearable',
    		'isWaiting',
    		'listPlacement',
    		'listOpen',
    		'isVirtualList',
    		'loadOptionsInterval',
    		'noOptionsMessage',
    		'hideEmptyState',
    		'inputAttributes',
    		'listAutoWidth',
    		'itemHeight',
    		'Icon',
    		'iconProps',
    		'showChevron',
    		'showIndicator',
    		'containerClasses',
    		'indicatorSvg',
    		'listOffset',
    		'ClearIcon',
    		'Item',
    		'List',
    		'Selection',
    		'MultiSelection',
    		'VirtualList',
    		'selectedValue',
    		'ariaValues',
    		'ariaListOpen',
    		'ariaFocused'
    	];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Select> was created with unknown prop '${key}'`);
    	});

    	function input_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			input = $$value;
    			$$invalidate(6, input);
    		});
    	}

    	function input_1_input_handler() {
    		filterText = this.value;
    		$$invalidate(3, filterText);
    	}

    	function switch_instance_hoverItemIndex_binding(value) {
    		hoverItemIndex = value;
    		$$invalidate(28, hoverItemIndex);
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			container = $$value;
    			$$invalidate(0, container);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(46, id = $$props.id);
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('input' in $$props) $$invalidate(6, input = $$props.input);
    		if ('isMulti' in $$props) $$invalidate(7, isMulti = $$props.isMulti);
    		if ('multiFullItemClearable' in $$props) $$invalidate(8, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('isDisabled' in $$props) $$invalidate(9, isDisabled = $$props.isDisabled);
    		if ('isCreatable' in $$props) $$invalidate(47, isCreatable = $$props.isCreatable);
    		if ('isFocused' in $$props) $$invalidate(1, isFocused = $$props.isFocused);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('filterText' in $$props) $$invalidate(3, filterText = $$props.filterText);
    		if ('placeholder' in $$props) $$invalidate(48, placeholder = $$props.placeholder);
    		if ('placeholderAlwaysShow' in $$props) $$invalidate(49, placeholderAlwaysShow = $$props.placeholderAlwaysShow);
    		if ('items' in $$props) $$invalidate(50, items = $$props.items);
    		if ('itemFilter' in $$props) $$invalidate(51, itemFilter = $$props.itemFilter);
    		if ('groupBy' in $$props) $$invalidate(52, groupBy = $$props.groupBy);
    		if ('groupFilter' in $$props) $$invalidate(53, groupFilter = $$props.groupFilter);
    		if ('isGroupHeaderSelectable' in $$props) $$invalidate(54, isGroupHeaderSelectable = $$props.isGroupHeaderSelectable);
    		if ('getGroupHeaderLabel' in $$props) $$invalidate(55, getGroupHeaderLabel = $$props.getGroupHeaderLabel);
    		if ('labelIdentifier' in $$props) $$invalidate(56, labelIdentifier = $$props.labelIdentifier);
    		if ('getOptionLabel' in $$props) $$invalidate(57, getOptionLabel = $$props.getOptionLabel);
    		if ('optionIdentifier' in $$props) $$invalidate(58, optionIdentifier = $$props.optionIdentifier);
    		if ('loadOptions' in $$props) $$invalidate(59, loadOptions = $$props.loadOptions);
    		if ('hasError' in $$props) $$invalidate(10, hasError = $$props.hasError);
    		if ('containerStyles' in $$props) $$invalidate(11, containerStyles = $$props.containerStyles);
    		if ('getSelectionLabel' in $$props) $$invalidate(12, getSelectionLabel = $$props.getSelectionLabel);
    		if ('createGroupHeaderItem' in $$props) $$invalidate(60, createGroupHeaderItem = $$props.createGroupHeaderItem);
    		if ('createItem' in $$props) $$invalidate(61, createItem = $$props.createItem);
    		if ('isSearchable' in $$props) $$invalidate(13, isSearchable = $$props.isSearchable);
    		if ('inputStyles' in $$props) $$invalidate(14, inputStyles = $$props.inputStyles);
    		if ('isClearable' in $$props) $$invalidate(15, isClearable = $$props.isClearable);
    		if ('isWaiting' in $$props) $$invalidate(4, isWaiting = $$props.isWaiting);
    		if ('listPlacement' in $$props) $$invalidate(63, listPlacement = $$props.listPlacement);
    		if ('listOpen' in $$props) $$invalidate(5, listOpen = $$props.listOpen);
    		if ('isVirtualList' in $$props) $$invalidate(64, isVirtualList = $$props.isVirtualList);
    		if ('loadOptionsInterval' in $$props) $$invalidate(65, loadOptionsInterval = $$props.loadOptionsInterval);
    		if ('noOptionsMessage' in $$props) $$invalidate(66, noOptionsMessage = $$props.noOptionsMessage);
    		if ('hideEmptyState' in $$props) $$invalidate(67, hideEmptyState = $$props.hideEmptyState);
    		if ('inputAttributes' in $$props) $$invalidate(16, inputAttributes = $$props.inputAttributes);
    		if ('listAutoWidth' in $$props) $$invalidate(68, listAutoWidth = $$props.listAutoWidth);
    		if ('itemHeight' in $$props) $$invalidate(69, itemHeight = $$props.itemHeight);
    		if ('Icon' in $$props) $$invalidate(17, Icon = $$props.Icon);
    		if ('iconProps' in $$props) $$invalidate(18, iconProps = $$props.iconProps);
    		if ('showChevron' in $$props) $$invalidate(19, showChevron = $$props.showChevron);
    		if ('showIndicator' in $$props) $$invalidate(20, showIndicator = $$props.showIndicator);
    		if ('containerClasses' in $$props) $$invalidate(21, containerClasses = $$props.containerClasses);
    		if ('indicatorSvg' in $$props) $$invalidate(22, indicatorSvg = $$props.indicatorSvg);
    		if ('listOffset' in $$props) $$invalidate(70, listOffset = $$props.listOffset);
    		if ('ClearIcon' in $$props) $$invalidate(23, ClearIcon$1 = $$props.ClearIcon);
    		if ('Item' in $$props) $$invalidate(71, Item$1 = $$props.Item);
    		if ('List' in $$props) $$invalidate(24, List$1 = $$props.List);
    		if ('Selection' in $$props) $$invalidate(25, Selection$1 = $$props.Selection);
    		if ('MultiSelection' in $$props) $$invalidate(26, MultiSelection$1 = $$props.MultiSelection);
    		if ('VirtualList' in $$props) $$invalidate(72, VirtualList$1 = $$props.VirtualList);
    		if ('selectedValue' in $$props) $$invalidate(73, selectedValue = $$props.selectedValue);
    		if ('ariaValues' in $$props) $$invalidate(74, ariaValues = $$props.ariaValues);
    		if ('ariaListOpen' in $$props) $$invalidate(75, ariaListOpen = $$props.ariaListOpen);
    		if ('ariaFocused' in $$props) $$invalidate(76, ariaFocused = $$props.ariaFocused);
    	};

    	$$self.$capture_state = () => ({
    		beforeUpdate,
    		createEventDispatcher,
    		onMount,
    		_List: List,
    		_Item: Item,
    		_Selection: Selection,
    		_MultiSelection: MultiSelection,
    		_VirtualList: VirtualList,
    		_ClearIcon: ClearIcon,
    		debounce,
    		dispatch,
    		id,
    		container,
    		input,
    		isMulti,
    		multiFullItemClearable,
    		isDisabled,
    		isCreatable,
    		isFocused,
    		value,
    		filterText,
    		placeholder,
    		placeholderAlwaysShow,
    		items,
    		itemFilter,
    		groupBy,
    		groupFilter,
    		isGroupHeaderSelectable,
    		getGroupHeaderLabel,
    		labelIdentifier,
    		getOptionLabel,
    		optionIdentifier,
    		loadOptions,
    		hasError,
    		containerStyles,
    		getSelectionLabel,
    		createGroupHeaderItem,
    		createItem,
    		getFilteredItems,
    		isSearchable,
    		inputStyles,
    		isClearable,
    		isWaiting,
    		listPlacement,
    		listOpen,
    		isVirtualList,
    		loadOptionsInterval,
    		noOptionsMessage,
    		hideEmptyState,
    		inputAttributes,
    		listAutoWidth,
    		itemHeight,
    		Icon,
    		iconProps,
    		showChevron,
    		showIndicator,
    		containerClasses,
    		indicatorSvg,
    		listOffset,
    		ClearIcon: ClearIcon$1,
    		Item: Item$1,
    		List: List$1,
    		Selection: Selection$1,
    		MultiSelection: MultiSelection$1,
    		VirtualList: VirtualList$1,
    		filterMethod,
    		addCreatableItem,
    		selectedValue,
    		activeValue,
    		prev_value,
    		prev_filterText,
    		prev_isFocused,
    		prev_isMulti,
    		hoverItemIndex,
    		getItems,
    		setValue,
    		_inputAttributes,
    		assignInputAttributes,
    		convertStringItemsToObjects,
    		filterGroupedItems,
    		dispatchSelectedItem,
    		setupFocus,
    		setupMulti,
    		setupSingle,
    		setupFilterText,
    		checkValueForDuplicates,
    		findItem,
    		updateValueDisplay,
    		handleMultiItemClear,
    		handleKeyDown,
    		handleFocus,
    		handleWindowEvent,
    		handleClick,
    		handleClear,
    		itemSelected,
    		itemCreated,
    		closeList,
    		ariaValues,
    		ariaListOpen,
    		ariaFocused,
    		handleAriaSelection,
    		handleAriaContent,
    		filteredItems,
    		ariaContext,
    		ariaSelection,
    		listProps,
    		showMultiSelect,
    		placeholderText,
    		showSelectedItem,
    		showClearIcon
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(46, id = $$props.id);
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('input' in $$props) $$invalidate(6, input = $$props.input);
    		if ('isMulti' in $$props) $$invalidate(7, isMulti = $$props.isMulti);
    		if ('multiFullItemClearable' in $$props) $$invalidate(8, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('isDisabled' in $$props) $$invalidate(9, isDisabled = $$props.isDisabled);
    		if ('isCreatable' in $$props) $$invalidate(47, isCreatable = $$props.isCreatable);
    		if ('isFocused' in $$props) $$invalidate(1, isFocused = $$props.isFocused);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('filterText' in $$props) $$invalidate(3, filterText = $$props.filterText);
    		if ('placeholder' in $$props) $$invalidate(48, placeholder = $$props.placeholder);
    		if ('placeholderAlwaysShow' in $$props) $$invalidate(49, placeholderAlwaysShow = $$props.placeholderAlwaysShow);
    		if ('items' in $$props) $$invalidate(50, items = $$props.items);
    		if ('itemFilter' in $$props) $$invalidate(51, itemFilter = $$props.itemFilter);
    		if ('groupBy' in $$props) $$invalidate(52, groupBy = $$props.groupBy);
    		if ('groupFilter' in $$props) $$invalidate(53, groupFilter = $$props.groupFilter);
    		if ('isGroupHeaderSelectable' in $$props) $$invalidate(54, isGroupHeaderSelectable = $$props.isGroupHeaderSelectable);
    		if ('getGroupHeaderLabel' in $$props) $$invalidate(55, getGroupHeaderLabel = $$props.getGroupHeaderLabel);
    		if ('labelIdentifier' in $$props) $$invalidate(56, labelIdentifier = $$props.labelIdentifier);
    		if ('getOptionLabel' in $$props) $$invalidate(57, getOptionLabel = $$props.getOptionLabel);
    		if ('optionIdentifier' in $$props) $$invalidate(58, optionIdentifier = $$props.optionIdentifier);
    		if ('loadOptions' in $$props) $$invalidate(59, loadOptions = $$props.loadOptions);
    		if ('hasError' in $$props) $$invalidate(10, hasError = $$props.hasError);
    		if ('containerStyles' in $$props) $$invalidate(11, containerStyles = $$props.containerStyles);
    		if ('getSelectionLabel' in $$props) $$invalidate(12, getSelectionLabel = $$props.getSelectionLabel);
    		if ('createGroupHeaderItem' in $$props) $$invalidate(60, createGroupHeaderItem = $$props.createGroupHeaderItem);
    		if ('createItem' in $$props) $$invalidate(61, createItem = $$props.createItem);
    		if ('isSearchable' in $$props) $$invalidate(13, isSearchable = $$props.isSearchable);
    		if ('inputStyles' in $$props) $$invalidate(14, inputStyles = $$props.inputStyles);
    		if ('isClearable' in $$props) $$invalidate(15, isClearable = $$props.isClearable);
    		if ('isWaiting' in $$props) $$invalidate(4, isWaiting = $$props.isWaiting);
    		if ('listPlacement' in $$props) $$invalidate(63, listPlacement = $$props.listPlacement);
    		if ('listOpen' in $$props) $$invalidate(5, listOpen = $$props.listOpen);
    		if ('isVirtualList' in $$props) $$invalidate(64, isVirtualList = $$props.isVirtualList);
    		if ('loadOptionsInterval' in $$props) $$invalidate(65, loadOptionsInterval = $$props.loadOptionsInterval);
    		if ('noOptionsMessage' in $$props) $$invalidate(66, noOptionsMessage = $$props.noOptionsMessage);
    		if ('hideEmptyState' in $$props) $$invalidate(67, hideEmptyState = $$props.hideEmptyState);
    		if ('inputAttributes' in $$props) $$invalidate(16, inputAttributes = $$props.inputAttributes);
    		if ('listAutoWidth' in $$props) $$invalidate(68, listAutoWidth = $$props.listAutoWidth);
    		if ('itemHeight' in $$props) $$invalidate(69, itemHeight = $$props.itemHeight);
    		if ('Icon' in $$props) $$invalidate(17, Icon = $$props.Icon);
    		if ('iconProps' in $$props) $$invalidate(18, iconProps = $$props.iconProps);
    		if ('showChevron' in $$props) $$invalidate(19, showChevron = $$props.showChevron);
    		if ('showIndicator' in $$props) $$invalidate(20, showIndicator = $$props.showIndicator);
    		if ('containerClasses' in $$props) $$invalidate(21, containerClasses = $$props.containerClasses);
    		if ('indicatorSvg' in $$props) $$invalidate(22, indicatorSvg = $$props.indicatorSvg);
    		if ('listOffset' in $$props) $$invalidate(70, listOffset = $$props.listOffset);
    		if ('ClearIcon' in $$props) $$invalidate(23, ClearIcon$1 = $$props.ClearIcon);
    		if ('Item' in $$props) $$invalidate(71, Item$1 = $$props.Item);
    		if ('List' in $$props) $$invalidate(24, List$1 = $$props.List);
    		if ('Selection' in $$props) $$invalidate(25, Selection$1 = $$props.Selection);
    		if ('MultiSelection' in $$props) $$invalidate(26, MultiSelection$1 = $$props.MultiSelection);
    		if ('VirtualList' in $$props) $$invalidate(72, VirtualList$1 = $$props.VirtualList);
    		if ('selectedValue' in $$props) $$invalidate(73, selectedValue = $$props.selectedValue);
    		if ('activeValue' in $$props) $$invalidate(30, activeValue = $$props.activeValue);
    		if ('prev_value' in $$props) $$invalidate(77, prev_value = $$props.prev_value);
    		if ('prev_filterText' in $$props) $$invalidate(78, prev_filterText = $$props.prev_filterText);
    		if ('prev_isFocused' in $$props) $$invalidate(79, prev_isFocused = $$props.prev_isFocused);
    		if ('prev_isMulti' in $$props) $$invalidate(80, prev_isMulti = $$props.prev_isMulti);
    		if ('hoverItemIndex' in $$props) $$invalidate(28, hoverItemIndex = $$props.hoverItemIndex);
    		if ('_inputAttributes' in $$props) $$invalidate(31, _inputAttributes = $$props._inputAttributes);
    		if ('ariaValues' in $$props) $$invalidate(74, ariaValues = $$props.ariaValues);
    		if ('ariaListOpen' in $$props) $$invalidate(75, ariaListOpen = $$props.ariaListOpen);
    		if ('ariaFocused' in $$props) $$invalidate(76, ariaFocused = $$props.ariaFocused);
    		if ('filteredItems' in $$props) $$invalidate(81, filteredItems = $$props.filteredItems);
    		if ('ariaContext' in $$props) $$invalidate(32, ariaContext = $$props.ariaContext);
    		if ('ariaSelection' in $$props) $$invalidate(33, ariaSelection = $$props.ariaSelection);
    		if ('listProps' in $$props) $$invalidate(34, listProps = $$props.listProps);
    		if ('showMultiSelect' in $$props) $$invalidate(35, showMultiSelect = $$props.showMultiSelect);
    		if ('placeholderText' in $$props) $$invalidate(36, placeholderText = $$props.placeholderText);
    		if ('showSelectedItem' in $$props) $$invalidate(29, showSelectedItem = $$props.showSelectedItem);
    		if ('showClearIcon' in $$props) $$invalidate(37, showClearIcon = $$props.showClearIcon);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*filterText, value, isMulti*/ 140 | $$self.$$.dirty[1] & /*loadOptions, items, optionIdentifier, groupBy, isCreatable*/ 405340160) {
    			$$invalidate(81, filteredItems = filterMethod({
    				loadOptions,
    				filterText,
    				items,
    				value,
    				isMulti,
    				optionIdentifier,
    				groupBy,
    				isCreatable
    			}));
    		}

    		if ($$self.$$.dirty[2] & /*selectedValue*/ 2048) {
    			{
    				if (selectedValue) console.warn('selectedValue is no longer used. Please use value instead.');
    			}
    		}

    		if ($$self.$$.dirty[1] & /*items*/ 524288) {
    			updateValueDisplay(items);
    		}

    		if ($$self.$$.dirty[0] & /*value*/ 4) {
    			{
    				if (value) setValue();
    			}
    		}

    		if ($$self.$$.dirty[0] & /*inputAttributes, isSearchable*/ 73728) {
    			{
    				if (inputAttributes || !isSearchable) assignInputAttributes();
    			}
    		}

    		if ($$self.$$.dirty[0] & /*isMulti*/ 128 | $$self.$$.dirty[2] & /*prev_isMulti*/ 262144) {
    			{
    				if (isMulti) {
    					setupMulti();
    				}

    				if (prev_isMulti && !isMulti) {
    					setupSingle();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*isMulti, value*/ 132) {
    			{
    				if (isMulti && value && value.length > 1) {
    					checkValueForDuplicates();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*value*/ 4) {
    			{
    				if (value) dispatchSelectedItem();
    			}
    		}

    		if ($$self.$$.dirty[0] & /*value, isMulti*/ 132 | $$self.$$.dirty[2] & /*prev_value*/ 32768) {
    			{
    				if (!value && isMulti && prev_value) {
    					dispatch('select', value);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*isFocused*/ 2 | $$self.$$.dirty[2] & /*prev_isFocused*/ 131072) {
    			{
    				if (isFocused !== prev_isFocused) {
    					setupFocus();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*filterText*/ 8 | $$self.$$.dirty[2] & /*prev_filterText*/ 65536) {
    			{
    				if (filterText !== prev_filterText) {
    					setupFilterText();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*value, filterText*/ 12) {
    			$$invalidate(29, showSelectedItem = value && filterText.length === 0);
    		}

    		if ($$self.$$.dirty[0] & /*showSelectedItem, isClearable, isDisabled, isWaiting*/ 536904208) {
    			$$invalidate(37, showClearIcon = showSelectedItem && isClearable && !isDisabled && !isWaiting);
    		}

    		if ($$self.$$.dirty[0] & /*isMulti, value*/ 132 | $$self.$$.dirty[1] & /*placeholderAlwaysShow, placeholder*/ 393216) {
    			$$invalidate(36, placeholderText = placeholderAlwaysShow && isMulti
    			? placeholder
    			: value ? '' : placeholder);
    		}

    		if ($$self.$$.dirty[0] & /*isMulti, value*/ 132) {
    			$$invalidate(35, showMultiSelect = isMulti && value && value.length > 0);
    		}

    		if ($$self.$$.dirty[0] & /*filterText, value, isMulti, container*/ 141 | $$self.$$.dirty[1] & /*optionIdentifier, getGroupHeaderLabel, getOptionLabel*/ 218103808 | $$self.$$.dirty[2] & /*Item, noOptionsMessage, hideEmptyState, isVirtualList, VirtualList, filteredItems, itemHeight, listPlacement, listAutoWidth, listOffset*/ 526326) {
    			$$invalidate(34, listProps = {
    				Item: Item$1,
    				filterText,
    				optionIdentifier,
    				noOptionsMessage,
    				hideEmptyState,
    				isVirtualList,
    				VirtualList: VirtualList$1,
    				value,
    				isMulti,
    				getGroupHeaderLabel,
    				items: filteredItems,
    				itemHeight,
    				getOptionLabel,
    				listPlacement,
    				parent: container,
    				listAutoWidth,
    				listOffset
    			});
    		}

    		if ($$self.$$.dirty[0] & /*value, isMulti*/ 132) {
    			$$invalidate(33, ariaSelection = value ? handleAriaSelection() : '');
    		}

    		if ($$self.$$.dirty[0] & /*hoverItemIndex, isFocused, listOpen*/ 268435490 | $$self.$$.dirty[2] & /*filteredItems*/ 524288) {
    			$$invalidate(32, ariaContext = handleAriaContent());
    		}
    	};

    	return [
    		container,
    		isFocused,
    		value,
    		filterText,
    		isWaiting,
    		listOpen,
    		input,
    		isMulti,
    		multiFullItemClearable,
    		isDisabled,
    		hasError,
    		containerStyles,
    		getSelectionLabel,
    		isSearchable,
    		inputStyles,
    		isClearable,
    		inputAttributes,
    		Icon,
    		iconProps,
    		showChevron,
    		showIndicator,
    		containerClasses,
    		indicatorSvg,
    		ClearIcon$1,
    		List$1,
    		Selection$1,
    		MultiSelection$1,
    		handleClear,
    		hoverItemIndex,
    		showSelectedItem,
    		activeValue,
    		_inputAttributes,
    		ariaContext,
    		ariaSelection,
    		listProps,
    		showMultiSelect,
    		placeholderText,
    		showClearIcon,
    		handleMultiItemClear,
    		handleKeyDown,
    		handleFocus,
    		handleWindowEvent,
    		handleClick,
    		itemSelected,
    		itemCreated,
    		closeList,
    		id,
    		isCreatable,
    		placeholder,
    		placeholderAlwaysShow,
    		items,
    		itemFilter,
    		groupBy,
    		groupFilter,
    		isGroupHeaderSelectable,
    		getGroupHeaderLabel,
    		labelIdentifier,
    		getOptionLabel,
    		optionIdentifier,
    		loadOptions,
    		createGroupHeaderItem,
    		createItem,
    		getFilteredItems,
    		listPlacement,
    		isVirtualList,
    		loadOptionsInterval,
    		noOptionsMessage,
    		hideEmptyState,
    		listAutoWidth,
    		itemHeight,
    		listOffset,
    		Item$1,
    		VirtualList$1,
    		selectedValue,
    		ariaValues,
    		ariaListOpen,
    		ariaFocused,
    		prev_value,
    		prev_filterText,
    		prev_isFocused,
    		prev_isMulti,
    		filteredItems,
    		input_1_binding,
    		input_1_input_handler,
    		switch_instance_hoverItemIndex_binding,
    		div_binding
    	];
    }

    class Select extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$6,
    			create_fragment$6,
    			safe_not_equal,
    			{
    				id: 46,
    				container: 0,
    				input: 6,
    				isMulti: 7,
    				multiFullItemClearable: 8,
    				isDisabled: 9,
    				isCreatable: 47,
    				isFocused: 1,
    				value: 2,
    				filterText: 3,
    				placeholder: 48,
    				placeholderAlwaysShow: 49,
    				items: 50,
    				itemFilter: 51,
    				groupBy: 52,
    				groupFilter: 53,
    				isGroupHeaderSelectable: 54,
    				getGroupHeaderLabel: 55,
    				labelIdentifier: 56,
    				getOptionLabel: 57,
    				optionIdentifier: 58,
    				loadOptions: 59,
    				hasError: 10,
    				containerStyles: 11,
    				getSelectionLabel: 12,
    				createGroupHeaderItem: 60,
    				createItem: 61,
    				getFilteredItems: 62,
    				isSearchable: 13,
    				inputStyles: 14,
    				isClearable: 15,
    				isWaiting: 4,
    				listPlacement: 63,
    				listOpen: 5,
    				isVirtualList: 64,
    				loadOptionsInterval: 65,
    				noOptionsMessage: 66,
    				hideEmptyState: 67,
    				inputAttributes: 16,
    				listAutoWidth: 68,
    				itemHeight: 69,
    				Icon: 17,
    				iconProps: 18,
    				showChevron: 19,
    				showIndicator: 20,
    				containerClasses: 21,
    				indicatorSvg: 22,
    				listOffset: 70,
    				ClearIcon: 23,
    				Item: 71,
    				List: 24,
    				Selection: 25,
    				MultiSelection: 26,
    				VirtualList: 72,
    				selectedValue: 73,
    				handleClear: 27,
    				ariaValues: 74,
    				ariaListOpen: 75,
    				ariaFocused: 76
    			},
    			null,
    			[-1, -1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Select",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get id() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get container() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set container(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get input() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set input(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isMulti() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isMulti(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiFullItemClearable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiFullItemClearable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isDisabled() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isDisabled(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isCreatable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isCreatable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isFocused() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isFocused(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filterText() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filterText(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholderAlwaysShow() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholderAlwaysShow(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get items() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemFilter() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemFilter(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groupBy() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groupBy(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groupFilter() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groupFilter(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isGroupHeaderSelectable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isGroupHeaderSelectable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getGroupHeaderLabel() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getGroupHeaderLabel(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelIdentifier() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelIdentifier(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getOptionLabel() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getOptionLabel(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get optionIdentifier() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set optionIdentifier(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loadOptions() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loadOptions(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hasError() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hasError(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get containerStyles() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set containerStyles(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getSelectionLabel() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getSelectionLabel(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get createGroupHeaderItem() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set createGroupHeaderItem(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get createItem() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set createItem(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getFilteredItems() {
    		return this.$$.ctx[62];
    	}

    	set getFilteredItems(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isSearchable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isSearchable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputStyles() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputStyles(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isClearable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isClearable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isWaiting() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isWaiting(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listPlacement() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listPlacement(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listOpen() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listOpen(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isVirtualList() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isVirtualList(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loadOptionsInterval() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loadOptionsInterval(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noOptionsMessage() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noOptionsMessage(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideEmptyState() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideEmptyState(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputAttributes() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputAttributes(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listAutoWidth() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listAutoWidth(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemHeight() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemHeight(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get Icon() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set Icon(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get iconProps() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set iconProps(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showChevron() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showChevron(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showIndicator() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showIndicator(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get containerClasses() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set containerClasses(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get indicatorSvg() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set indicatorSvg(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listOffset() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listOffset(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ClearIcon() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ClearIcon(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get Item() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set Item(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get List() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set List(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get Selection() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set Selection(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get MultiSelection() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set MultiSelection(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get VirtualList() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set VirtualList(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedValue() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedValue(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get handleClear() {
    		return this.$$.ctx[27];
    	}

    	set handleClear(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaValues() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaValues(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaListOpen() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaListOpen(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaFocused() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaFocused(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/views/Settings.svelte generated by Svelte v3.44.2 */

    const { Object: Object_1 } = globals;
    const file$4 = "src/views/Settings.svelte";

    // (58:8) {#if $USER.rpcPing}
    function create_if_block_2$1(ctx) {
    	let div;
    	let div_style_value;
    	let t0;
    	let p;
    	let t1;
    	let t2_value = /*$USER*/ ctx[2].rpcPing + "";
    	let t2;
    	let t3;
    	let p_style_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = space();
    			p = element("p");
    			t1 = text("(");
    			t2 = text(t2_value);
    			t3 = text("ms)");
    			attr_dev(div, "class", "ping-indicator svelte-mfbbq9");

    			attr_dev(div, "style", div_style_value = /*$USER*/ ctx[2].rpcPing < 1000
    			? 'background: var(--success);'
    			: 'background: var(--failure);');

    			add_location(div, file$4, 58, 10, 1863);

    			attr_dev(p, "style", p_style_value = /*$USER*/ ctx[2].rpcPing < 1000
    			? 'color: var(--success);'
    			: 'color: var(--failure);');

    			attr_dev(p, "class", "svelte-mfbbq9");
    			add_location(p, file$4, 63, 10, 2056);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, p, anchor);
    			append_dev(p, t1);
    			append_dev(p, t2);
    			append_dev(p, t3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 4 && div_style_value !== (div_style_value = /*$USER*/ ctx[2].rpcPing < 1000
    			? 'background: var(--success);'
    			: 'background: var(--failure);')) {
    				attr_dev(div, "style", div_style_value);
    			}

    			if (dirty & /*$USER*/ 4 && t2_value !== (t2_value = /*$USER*/ ctx[2].rpcPing + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*$USER*/ 4 && p_style_value !== (p_style_value = /*$USER*/ ctx[2].rpcPing < 1000
    			? 'color: var(--success);'
    			: 'color: var(--failure);')) {
    				attr_dev(p, "style", p_style_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(58:8) {#if $USER.rpcPing}",
    		ctx
    	});

    	return block;
    }

    // (70:8) {#if $USER.rpcNode}
    function create_if_block_1$1(ctx) {
    	let p;
    	let t_value = dictionary[/*$USER*/ ctx[2].language].settings.reset.toUpperCase() + "";
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "reset-rpc bicyclette-bold text-gradient svelte-mfbbq9");
    			add_location(p, file$4, 70, 10, 2270);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);

    			if (!mounted) {
    				dispose = listen_dev(p, "click", /*click_handler*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER*/ 4 && t_value !== (t_value = dictionary[/*$USER*/ ctx[2].language].settings.reset.toUpperCase() + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(70:8) {#if $USER.rpcNode}",
    		ctx
    	});

    	return block;
    }

    // (104:6) {:else}
    function create_else_block$2(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				small: true,
    				secondary: true,
    				text: dictionary[/*$USER*/ ctx[2].language].settings.connect,
    				onClick: /*func_1*/ ctx[8]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty & /*$USER*/ 4) button_changes.text = dictionary[/*$USER*/ ctx[2].language].settings.connect;
    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(104:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (89:6) {#if $USER.wallet}
    function create_if_block$4(ctx) {
    	let div;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let p;
    	let t1_value = shortenPubkey(/*$USER*/ ctx[2].wallet.publicKey.toString(), 4) + "";
    	let t1;
    	let t2;
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				small: true,
    				secondary: true,
    				text: dictionary[/*$USER*/ ctx[2].language].settings.disconnect,
    				onClick: /*func*/ ctx[7]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t0 = space();
    			p = element("p");
    			t1 = text(t1_value);
    			t2 = space();
    			create_component(button.$$.fragment);
    			attr_dev(img, "width", "28px");
    			attr_dev(img, "height", "auto");
    			set_style(img, "margin-right", "var(--spacing-xs)");
    			if (!src_url_equal(img.src, img_src_value = "img/wallets/" + /*$USER*/ ctx[2].wallet.name.replace(' ', '_').toLowerCase() + ".png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = "" + (/*$USER*/ ctx[2].wallet.name + " Logo"));
    			attr_dev(img, "class", "svelte-mfbbq9");
    			add_location(img, file$4, 90, 10, 2933);
    			set_style(p, "margin", "0 var(--spacing-lg) 0 var(--spacing-xs)");
    			attr_dev(p, "class", "svelte-mfbbq9");
    			add_location(p, file$4, 95, 10, 3171);
    			attr_dev(div, "class", "wallet flex-centered svelte-mfbbq9");
    			add_location(div, file$4, 89, 8, 2888);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			append_dev(div, t0);
    			append_dev(div, p);
    			append_dev(p, t1);
    			append_dev(div, t2);
    			mount_component(button, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*$USER*/ 4 && !src_url_equal(img.src, img_src_value = "img/wallets/" + /*$USER*/ ctx[2].wallet.name.replace(' ', '_').toLowerCase() + ".png")) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (!current || dirty & /*$USER*/ 4 && img_alt_value !== (img_alt_value = "" + (/*$USER*/ ctx[2].wallet.name + " Logo"))) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if ((!current || dirty & /*$USER*/ 4) && t1_value !== (t1_value = shortenPubkey(/*$USER*/ ctx[2].wallet.publicKey.toString(), 4) + "")) set_data_dev(t1, t1_value);
    			const button_changes = {};
    			if (dirty & /*$USER*/ 4) button_changes.text = dictionary[/*$USER*/ ctx[2].language].settings.disconnect;
    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(89:6) {#if $USER.wallet}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let title_value;
    	let t0;
    	let div14;
    	let h1;
    	let t1_value = dictionary[/*$USER*/ ctx[2].language].settings.title + "";
    	let t1;
    	let t2;
    	let div0;
    	let t3;
    	let div13;
    	let div2;
    	let span0;
    	let t4_value = dictionary[/*$USER*/ ctx[2].language].settings.rpcNode.toUpperCase() + "";
    	let t4;
    	let t5;
    	let div1;
    	let p;
    	let t6_value = (/*$USER*/ ctx[2].rpcNode ?? dictionary[/*$USER*/ ctx[2].language].settings.defaultNode) + "";
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let input;
    	let updating_value;
    	let t10;
    	let div3;
    	let t11;
    	let div4;
    	let span1;
    	let t12_value = dictionary[/*$USER*/ ctx[2].language].settings.wallet.toUpperCase() + "";
    	let t12;
    	let t13;
    	let current_block_type_index;
    	let if_block2;
    	let t14;
    	let div5;
    	let t15;
    	let div7;
    	let span2;
    	let t16_value = dictionary[/*$USER*/ ctx[2].language].settings.theme.toUpperCase() + "";
    	let t16;
    	let t17;
    	let div6;
    	let toggle;
    	let t18;
    	let div8;
    	let t19;
    	let div10;
    	let span3;
    	let t20_value = dictionary[/*$USER*/ ctx[2].language].language.toUpperCase() + "";
    	let t20;
    	let t21;
    	let div9;
    	let select;
    	let t22;
    	let i0;
    	let t23;
    	let div11;
    	let t24;
    	let div12;
    	let a0;
    	let i1;
    	let t25;
    	let a1;
    	let i2;
    	let t26;
    	let a2;
    	let i3;
    	let current;
    	document.title = title_value = "NEXFIN | " + dictionary[/*$USER*/ ctx[2].language].settings.title;
    	let if_block0 = /*$USER*/ ctx[2].rpcPing && create_if_block_2$1(ctx);
    	let if_block1 = /*$USER*/ ctx[2].rpcNode && create_if_block_1$1(ctx);

    	function input_value_binding(value) {
    		/*input_value_binding*/ ctx[6](value);
    	}

    	let input_props = {
    		type: "text",
    		placeholder: "ex: https://api.devnet.solana.com/",
    		submit: /*checkRPC*/ ctx[4],
    		error: /*inputError*/ ctx[1]
    	};

    	if (/*rpcNodeInput*/ ctx[0] !== void 0) {
    		input_props.value = /*rpcNodeInput*/ ctx[0];
    	}

    	input = new Input({ props: input_props, $$inline: true });
    	binding_callbacks.push(() => bind(input, 'value', input_value_binding));
    	const if_block_creators = [create_if_block$4, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$USER*/ ctx[2].wallet) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	toggle = new Toggle({
    			props: {
    				onClick: /*func_2*/ ctx[9],
    				text: /*$USER*/ ctx[2].darkTheme
    				? dictionary[/*$USER*/ ctx[2].language].settings.dark
    				: dictionary[/*$USER*/ ctx[2].language].settings.light,
    				icon: "❂",
    				active: /*$USER*/ ctx[2].darkTheme
    			},
    			$$inline: true
    		});

    	select = new Select({
    			props: {
    				items: Object.keys(dictionary).map(/*func_3*/ ctx[10]),
    				value: dictionary[/*$USER*/ ctx[2].language].language
    			},
    			$$inline: true
    		});

    	select.$on("select", /*select_handler*/ ctx[11]);

    	const block = {
    		c: function create() {
    			t0 = space();
    			div14 = element("div");
    			h1 = element("h1");
    			t1 = text(t1_value);
    			t2 = space();
    			div0 = element("div");
    			t3 = space();
    			div13 = element("div");
    			div2 = element("div");
    			span0 = element("span");
    			t4 = text(t4_value);
    			t5 = space();
    			div1 = element("div");
    			p = element("p");
    			t6 = text(t6_value);
    			t7 = space();
    			if (if_block0) if_block0.c();
    			t8 = space();
    			if (if_block1) if_block1.c();
    			t9 = space();
    			create_component(input.$$.fragment);
    			t10 = space();
    			div3 = element("div");
    			t11 = space();
    			div4 = element("div");
    			span1 = element("span");
    			t12 = text(t12_value);
    			t13 = space();
    			if_block2.c();
    			t14 = space();
    			div5 = element("div");
    			t15 = space();
    			div7 = element("div");
    			span2 = element("span");
    			t16 = text(t16_value);
    			t17 = space();
    			div6 = element("div");
    			create_component(toggle.$$.fragment);
    			t18 = space();
    			div8 = element("div");
    			t19 = space();
    			div10 = element("div");
    			span3 = element("span");
    			t20 = text(t20_value);
    			t21 = space();
    			div9 = element("div");
    			create_component(select.$$.fragment);
    			t22 = space();
    			i0 = element("i");
    			t23 = space();
    			div11 = element("div");
    			t24 = space();
    			div12 = element("div");
    			a0 = element("a");
    			i1 = element("i");
    			t25 = space();
    			a1 = element("a");
    			i2 = element("i");
    			t26 = space();
    			a2 = element("a");
    			i3 = element("i");
    			attr_dev(h1, "class", "view-title text-gradient");
    			add_location(h1, file$4, 42, 2, 1313);
    			attr_dev(div0, "class", "divider svelte-mfbbq9");
    			add_location(div0, file$4, 45, 2, 1409);
    			attr_dev(span0, "class", "svelte-mfbbq9");
    			add_location(span0, file$4, 49, 6, 1536);
    			attr_dev(p, "class", "svelte-mfbbq9");
    			add_location(p, file$4, 54, 8, 1731);
    			attr_dev(div1, "class", "flex align-center justify-start");
    			set_style(div1, "padding", "var(--spacing-xs) 0");
    			add_location(div1, file$4, 52, 6, 1631);
    			attr_dev(div2, "class", "setting flex align-start justify-center column");
    			add_location(div2, file$4, 48, 4, 1469);
    			attr_dev(div3, "class", "divider svelte-mfbbq9");
    			add_location(div3, file$4, 83, 4, 2668);
    			attr_dev(span1, "class", "svelte-mfbbq9");
    			add_location(span1, file$4, 85, 6, 2767);
    			attr_dev(div4, "class", "setting flex align-start justify-center column");
    			add_location(div4, file$4, 84, 4, 2700);
    			attr_dev(div5, "class", "divider svelte-mfbbq9");
    			add_location(div5, file$4, 113, 4, 3765);
    			attr_dev(span2, "class", "svelte-mfbbq9");
    			add_location(span2, file$4, 116, 6, 3869);
    			attr_dev(div6, "class", "theme-toggle-container flex align-center justify-start svelte-mfbbq9");
    			add_location(div6, file$4, 119, 6, 3962);
    			attr_dev(div7, "class", "setting flex align-start justify-center column");
    			add_location(div7, file$4, 115, 4, 3802);
    			attr_dev(div8, "class", "divider svelte-mfbbq9");
    			add_location(div8, file$4, 127, 4, 4304);
    			attr_dev(span3, "class", "svelte-mfbbq9");
    			add_location(span3, file$4, 129, 6, 4403);
    			attr_dev(i0, "class", "fas fa-caret-down svelte-mfbbq9");
    			add_location(i0, file$4, 148, 8, 5135);
    			attr_dev(div9, "class", "dropdown-select");
    			add_location(div9, file$4, 132, 6, 4490);
    			attr_dev(div10, "class", "setting flex align-start justify-center column");
    			add_location(div10, file$4, 128, 4, 4336);
    			attr_dev(div11, "class", "divider svelte-mfbbq9");
    			add_location(div11, file$4, 151, 4, 5197);
    			attr_dev(i1, "class", "text-gradient fab fa-twitter svelte-mfbbq9");
    			add_location(i1, file$4, 154, 64, 5352);
    			attr_dev(a0, "href", "https://twitter.com/jetprotocol");
    			attr_dev(a0, "target", "_blank");
    			add_location(a0, file$4, 154, 6, 5294);
    			attr_dev(i2, "class", "text-gradient fab fa-discord svelte-mfbbq9");
    			add_location(i2, file$4, 155, 62, 5463);
    			attr_dev(a1, "href", "https://discord.gg/RW2hsqwfej");
    			attr_dev(a1, "target", "_blank");
    			add_location(a1, file$4, 155, 6, 5407);
    			attr_dev(i3, "class", "text-gradient fab fa-github svelte-mfbbq9");
    			add_location(i3, file$4, 156, 66, 5578);
    			attr_dev(a2, "href", "https://github.com/jet-lab/jet-v1");
    			attr_dev(a2, "target", "_blank");
    			add_location(a2, file$4, 156, 6, 5518);
    			attr_dev(div12, "class", "socials flex align-center justify-start svelte-mfbbq9");
    			add_location(div12, file$4, 153, 4, 5234);
    			attr_dev(div13, "class", "settings svelte-mfbbq9");
    			add_location(div13, file$4, 47, 2, 1442);
    			attr_dev(div14, "class", "view-container flex column");
    			add_location(div14, file$4, 41, 0, 1270);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div14, anchor);
    			append_dev(div14, h1);
    			append_dev(h1, t1);
    			append_dev(div14, t2);
    			append_dev(div14, div0);
    			append_dev(div14, t3);
    			append_dev(div14, div13);
    			append_dev(div13, div2);
    			append_dev(div2, span0);
    			append_dev(span0, t4);
    			append_dev(div2, t5);
    			append_dev(div2, div1);
    			append_dev(div1, p);
    			append_dev(p, t6);
    			append_dev(div1, t7);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t8);
    			if (if_block1) if_block1.m(div1, null);
    			append_dev(div2, t9);
    			mount_component(input, div2, null);
    			append_dev(div13, t10);
    			append_dev(div13, div3);
    			append_dev(div13, t11);
    			append_dev(div13, div4);
    			append_dev(div4, span1);
    			append_dev(span1, t12);
    			append_dev(div4, t13);
    			if_blocks[current_block_type_index].m(div4, null);
    			append_dev(div13, t14);
    			append_dev(div13, div5);
    			append_dev(div13, t15);
    			append_dev(div13, div7);
    			append_dev(div7, span2);
    			append_dev(span2, t16);
    			append_dev(div7, t17);
    			append_dev(div7, div6);
    			mount_component(toggle, div6, null);
    			append_dev(div13, t18);
    			append_dev(div13, div8);
    			append_dev(div13, t19);
    			append_dev(div13, div10);
    			append_dev(div10, span3);
    			append_dev(span3, t20);
    			append_dev(div10, t21);
    			append_dev(div10, div9);
    			mount_component(select, div9, null);
    			append_dev(div9, t22);
    			append_dev(div9, i0);
    			append_dev(div13, t23);
    			append_dev(div13, div11);
    			append_dev(div13, t24);
    			append_dev(div13, div12);
    			append_dev(div12, a0);
    			append_dev(a0, i1);
    			append_dev(div12, t25);
    			append_dev(div12, a1);
    			append_dev(a1, i2);
    			append_dev(div12, t26);
    			append_dev(div12, a2);
    			append_dev(a2, i3);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*dictionary, $USER*/ 4) && title_value !== (title_value = "NEXFIN | " + dictionary[/*$USER*/ ctx[2].language].settings.title)) {
    				document.title = title_value;
    			}

    			if ((!current || dirty & /*$USER*/ 4) && t1_value !== (t1_value = dictionary[/*$USER*/ ctx[2].language].settings.title + "")) set_data_dev(t1, t1_value);
    			if ((!current || dirty & /*$USER*/ 4) && t4_value !== (t4_value = dictionary[/*$USER*/ ctx[2].language].settings.rpcNode.toUpperCase() + "")) set_data_dev(t4, t4_value);
    			if ((!current || dirty & /*$USER*/ 4) && t6_value !== (t6_value = (/*$USER*/ ctx[2].rpcNode ?? dictionary[/*$USER*/ ctx[2].language].settings.defaultNode) + "")) set_data_dev(t6, t6_value);

    			if (/*$USER*/ ctx[2].rpcPing) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$1(ctx);
    					if_block0.c();
    					if_block0.m(div1, t8);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*$USER*/ ctx[2].rpcNode) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$1(ctx);
    					if_block1.c();
    					if_block1.m(div1, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			const input_changes = {};
    			if (dirty & /*inputError*/ 2) input_changes.error = /*inputError*/ ctx[1];

    			if (!updating_value && dirty & /*rpcNodeInput*/ 1) {
    				updating_value = true;
    				input_changes.value = /*rpcNodeInput*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			input.$set(input_changes);
    			if ((!current || dirty & /*$USER*/ 4) && t12_value !== (t12_value = dictionary[/*$USER*/ ctx[2].language].settings.wallet.toUpperCase() + "")) set_data_dev(t12, t12_value);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks[current_block_type_index];

    				if (!if_block2) {
    					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block2.c();
    				} else {
    					if_block2.p(ctx, dirty);
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(div4, null);
    			}

    			if ((!current || dirty & /*$USER*/ 4) && t16_value !== (t16_value = dictionary[/*$USER*/ ctx[2].language].settings.theme.toUpperCase() + "")) set_data_dev(t16, t16_value);
    			const toggle_changes = {};
    			if (dirty & /*$USER*/ 4) toggle_changes.onClick = /*func_2*/ ctx[9];

    			if (dirty & /*$USER*/ 4) toggle_changes.text = /*$USER*/ ctx[2].darkTheme
    			? dictionary[/*$USER*/ ctx[2].language].settings.dark
    			: dictionary[/*$USER*/ ctx[2].language].settings.light;

    			if (dirty & /*$USER*/ 4) toggle_changes.active = /*$USER*/ ctx[2].darkTheme;
    			toggle.$set(toggle_changes);
    			if ((!current || dirty & /*$USER*/ 4) && t20_value !== (t20_value = dictionary[/*$USER*/ ctx[2].language].language.toUpperCase() + "")) set_data_dev(t20, t20_value);
    			const select_changes = {};
    			if (dirty & /*$USER*/ 4) select_changes.value = dictionary[/*$USER*/ ctx[2].language].language;
    			select.$set(select_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(input.$$.fragment, local);
    			transition_in(if_block2);
    			transition_in(toggle.$$.fragment, local);
    			transition_in(select.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(input.$$.fragment, local);
    			transition_out(if_block2);
    			transition_out(toggle.$$.fragment, local);
    			transition_out(select.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div14);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_component(input);
    			if_blocks[current_block_type_index].d();
    			destroy_component(toggle);
    			destroy_component(select);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $USER;
    	validate_store(USER, 'USER');
    	component_subscribe($$self, USER, $$value => $$invalidate(2, $USER = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Settings', slots, []);
    	let rpcNodeInput = null;
    	let inputError = null;

    	// Reset connection to default
    	const resetRPC = () => {
    		localStorage.removeItem('jetPreferredNode');

    		USER.update(user => {
    			user.rpcPing = 0;
    			return user;
    		});

    		getMarketAndIDL();
    		initTransactionLogs();
    	};

    	// Check RPC input and set localStorage, restart app
    	const checkRPC = async () => {
    		if (!rpcNodeInput) {
    			$$invalidate(1, inputError = dictionary[$USER.language].settings.noUrl);
    			return;
    		}

    		localStorage.setItem('jetPreferredNode', rpcNodeInput);

    		USER.update(user => {
    			user.rpcPing = 0;
    			return user;
    		});

    		getMarketAndIDL();
    		initTransactionLogs();
    		$$invalidate(1, inputError = null);
    		$$invalidate(0, rpcNodeInput = null);
    	};

    	const writable_props = [];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Settings> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => resetRPC();

    	function input_value_binding(value) {
    		rpcNodeInput = value;
    		$$invalidate(0, rpcNodeInput);
    	}

    	const func = () => disconnectWallet();

    	const func_1 = () => USER.update(user => {
    		user.connectingWallet = true;
    		return user;
    	});

    	const func_2 = () => setDark(!$USER.darkTheme);
    	const func_3 = k => ({ value: k, label: dictionary[k].language });

    	const select_handler = e => {
    		// Fix odd bug where it calls on:select twice
    		Object.keys(dictionary).forEach(k => {
    			if (k === e.detail.value) {
    				localStorage.setItem('jetPreferredLanguage', e.detail.value);

    				USER.update(user => {
    					user.language = e.detail.value;
    					return user;
    				});
    			}
    		});
    	};

    	$$self.$capture_state = () => ({
    		Select,
    		USER,
    		getMarketAndIDL,
    		disconnectWallet,
    		initTransactionLogs,
    		setDark,
    		shortenPubkey,
    		dictionary,
    		Button,
    		Toggle,
    		Input,
    		rpcNodeInput,
    		inputError,
    		resetRPC,
    		checkRPC,
    		$USER
    	});

    	$$self.$inject_state = $$props => {
    		if ('rpcNodeInput' in $$props) $$invalidate(0, rpcNodeInput = $$props.rpcNodeInput);
    		if ('inputError' in $$props) $$invalidate(1, inputError = $$props.inputError);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		rpcNodeInput,
    		inputError,
    		$USER,
    		resetRPC,
    		checkRPC,
    		click_handler,
    		input_value_binding,
    		func,
    		func_1,
    		func_2,
    		func_3,
    		select_handler
    	];
    }

    class Settings extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Settings",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* src/components/ConnectWalletModal.svelte generated by Svelte v3.44.2 */
    const file$3 = "src/components/ConnectWalletModal.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    // (41:0) {#if $USER.connectingWallet && !$USER.wallet}
    function create_if_block$3(ctx) {
    	let div0;
    	let div0_transition;
    	let t0;
    	let div3;
    	let logo;
    	let t1;
    	let span;
    	let t2_value = dictionary[/*$USER*/ ctx[1].language].settings.worldOfDefi + "";
    	let t2;
    	let t3;
    	let div1;
    	let t4;
    	let div2;
    	let t5;
    	let i;
    	let div3_intro;
    	let div3_outro;
    	let current;
    	let mounted;
    	let dispose;
    	logo = new Logo({ props: { width: 120 }, $$inline: true });
    	let each_value = /*providers*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div3 = element("div");
    			create_component(logo.$$.fragment);
    			t1 = space();
    			span = element("span");
    			t2 = text(t2_value);
    			t3 = space();
    			div1 = element("div");
    			t4 = space();
    			div2 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t5 = space();
    			i = element("i");
    			i.textContent = "✕";
    			attr_dev(div0, "class", "modal-bg svelte-fw7hya");
    			add_location(div0, file$3, 41, 2, 1122);
    			attr_dev(span, "class", "svelte-fw7hya");
    			add_location(span, file$3, 52, 4, 1435);
    			attr_dev(div1, "class", "divider");
    			add_location(div1, file$3, 55, 4, 1514);
    			attr_dev(div2, "class", "wallets flex-centered column svelte-fw7hya");
    			add_location(div2, file$3, 57, 4, 1551);
    			attr_dev(i, "class", "jet-icons close");
    			add_location(i, file$3, 77, 4, 2154);
    			attr_dev(div3, "class", "modal flex-centered column svelte-fw7hya");
    			add_location(div3, file$3, 48, 2, 1299);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div3, anchor);
    			mount_component(logo, div3, null);
    			append_dev(div3, t1);
    			append_dev(div3, span);
    			append_dev(span, t2);
    			append_dev(div3, t3);
    			append_dev(div3, div1);
    			append_dev(div3, t4);
    			append_dev(div3, div2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div2, null);
    			}

    			append_dev(div3, t5);
    			append_dev(div3, i);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler*/ ctx[3], false, false, false),
    					listen_dev(i, "click", /*click_handler_2*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$USER*/ 2) && t2_value !== (t2_value = dictionary[/*$USER*/ ctx[1].language].settings.worldOfDefi + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*providers, walletChoice, getWalletAndAnchor*/ 5) {
    				each_value = /*providers*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div2, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fade, { duration: 50 }, true);
    				div0_transition.run(1);
    			});

    			transition_in(logo.$$.fragment, local);

    			add_render_callback(() => {
    				if (div3_outro) div3_outro.end(1);
    				div3_intro = create_in_transition(div3, fly, { y: 25, duration: 500 });
    				div3_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fade, { duration: 50 }, false);
    			div0_transition.run(0);
    			transition_out(logo.$$.fragment, local);
    			if (div3_intro) div3_intro.invalidate();
    			div3_outro = create_out_transition(div3, fade, { duration: 50 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching && div0_transition) div0_transition.end();
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div3);
    			destroy_component(logo);
    			destroy_each(each_blocks, detaching);
    			if (detaching && div3_outro) div3_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(41:0) {#if $USER.connectingWallet && !$USER.wallet}",
    		ctx
    	});

    	return block;
    }

    // (59:6) {#each providers as p}
    function create_each_block$1(ctx) {
    	let div1;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let p;
    	let t1_value = /*p*/ ctx[6].name + "";
    	let t1;
    	let t2;
    	let i;
    	let t4;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[4](/*p*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			p = element("p");
    			t1 = text(t1_value);
    			t2 = space();
    			i = element("i");
    			i.textContent = "➜";
    			t4 = space();
    			if (!src_url_equal(img.src, img_src_value = /*p*/ ctx[6].logo)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "" + (/*p*/ ctx[6].name + " Logo"));
    			attr_dev(img, "class", "svelte-fw7hya");
    			add_location(img, file$3, 66, 12, 1920);
    			attr_dev(p, "class", "svelte-fw7hya");
    			add_location(p, file$3, 67, 12, 1973);
    			attr_dev(div0, "class", "flex-centered");
    			add_location(div0, file$3, 65, 10, 1880);
    			attr_dev(i, "class", "text-gradient jet-icons svelte-fw7hya");
    			add_location(i, file$3, 71, 10, 2044);
    			attr_dev(div1, "class", "" + (/*p*/ ctx[6].name.toLowerCase() + " wallet flex align-center justify-between" + " svelte-fw7hya"));
    			toggle_class(div1, "active", /*walletChoice*/ ctx[0] === /*p*/ ctx[6].name);
    			add_location(div1, file$3, 59, 8, 1631);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, img);
    			append_dev(div0, t0);
    			append_dev(div0, p);
    			append_dev(p, t1);
    			append_dev(div1, t2);
    			append_dev(div1, i);
    			append_dev(div1, t4);

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*walletChoice, providers*/ 5) {
    				toggle_class(div1, "active", /*walletChoice*/ ctx[0] === /*p*/ ctx[6].name);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(59:6) {#each providers as p}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$USER*/ ctx[1].connectingWallet && !/*$USER*/ ctx[1].wallet && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$USER*/ ctx[1].connectingWallet && !/*$USER*/ ctx[1].wallet) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$USER*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $USER;
    	validate_store(USER, 'USER');
    	component_subscribe($$self, USER, $$value => $$invalidate(1, $USER = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ConnectWalletModal', slots, []);
    	let walletChoice;

    	const providers = [
    		{
    			name: "Phantom",
    			logo: "img/wallets/phantom.png",
    			url: "https://phantom.app/"
    		},
    		{
    			name: "Sollet",
    			logo: "img/wallets/sollet.png",
    			url: "https://www.sollet.io/"
    		},
    		{
    			name: "Solflare",
    			logo: "img/wallets/solflare.png",
    			url: "https://solflare.com/"
    		},
    		{
    			name: "Solong",
    			logo: "img/wallets/solong.png",
    			url: "https://solongwallet.com/"
    		},
    		{
    			name: "Math Wallet",
    			logo: "img/wallets/math_wallet.png",
    			url: "https://mathwallet.org/en-us/"
    		},
    		{
    			name: "Slope",
    			logo: "img/wallets/slope.png",
    			url: "https://chrome.google.com/webstore/detail/slope-finance-wallet/pocmplpaccanhmnllbbkpgfliimjljgo"
    		}
    	];

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ConnectWalletModal> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => USER.update(user => {
    		user.connectingWallet = false;
    		return user;
    	});

    	const click_handler_1 = p => {
    		$$invalidate(0, walletChoice = p.name);
    		getWalletAndAnchor(p);
    	};

    	const click_handler_2 = () => USER.update(user => {
    		user.connectingWallet = false;
    		return user;
    	});

    	$$self.$capture_state = () => ({
    		fade,
    		fly,
    		USER,
    		getWalletAndAnchor,
    		dictionary,
    		Logo,
    		walletChoice,
    		providers,
    		$USER
    	});

    	$$self.$inject_state = $$props => {
    		if ('walletChoice' in $$props) $$invalidate(0, walletChoice = $$props.walletChoice);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		walletChoice,
    		$USER,
    		providers,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class ConnectWalletModal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ConnectWalletModal",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src/components/Copilot.svelte generated by Svelte v3.44.2 */
    const file$2 = "src/components/Copilot.svelte";

    // (16:0) {#if $COPILOT}
    function create_if_block$2(ctx) {
    	let div0;
    	let div0_transition;
    	let t0;
    	let div2;
    	let t1;
    	let div1;
    	let current_block_type_index;
    	let if_block1;
    	let t2;
    	let div2_intro;
    	let div2_outro;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*$COPILOT*/ ctx[0].alert || /*$COPILOT*/ ctx[0].suggestion) return create_if_block_10;
    		return create_else_block_2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	const if_block_creators = [create_if_block_2, create_if_block_7, create_if_block_8];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$COPILOT*/ ctx[0].suggestion) return 0;
    		if (/*$COPILOT*/ ctx[0].definition) return 1;
    		if (/*$COPILOT*/ ctx[0].alert) return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_1(ctx))) {
    		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	let if_block2 = /*acceptJetDisclaimer*/ ctx[2] && create_if_block_1(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div2 = element("div");
    			if_block0.c();
    			t1 = space();
    			div1 = element("div");
    			if (if_block1) if_block1.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(div0, "class", "modal-bg flex-centered svelte-k9gecs");
    			add_location(div0, file$2, 16, 2, 517);
    			attr_dev(div1, "class", "copilot-body modal-section flex align-start justify-center column svelte-k9gecs");
    			add_location(div1, file$2, 34, 4, 1260);
    			attr_dev(div2, "class", "copilot modal flex-centered column svelte-k9gecs");
    			add_location(div2, file$2, 20, 2, 670);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			if_block0.m(div2, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div1, null);
    			}

    			append_dev(div1, t2);
    			if (if_block2) if_block2.m(div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div0, "click", /*click_handler*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div2, t1);
    				}
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block1) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block1 = if_blocks[current_block_type_index];

    					if (!if_block1) {
    						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block1.c();
    					} else {
    						if_block1.p(ctx, dirty);
    					}

    					transition_in(if_block1, 1);
    					if_block1.m(div1, t2);
    				} else {
    					if_block1 = null;
    				}
    			}

    			if (/*acceptJetDisclaimer*/ ctx[2]) if_block2.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fade, { duration: 50 }, true);
    				div0_transition.run(1);
    			});

    			transition_in(if_block1);

    			add_render_callback(() => {
    				if (div2_outro) div2_outro.end(1);
    				div2_intro = create_in_transition(div2, fly, { y: 25, duration: 500 });
    				div2_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fade, { duration: 50 }, false);
    			div0_transition.run(0);
    			transition_out(if_block1);
    			if (div2_intro) div2_intro.invalidate();
    			div2_outro = create_out_transition(div2, fade, { duration: 50 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching && div0_transition) div0_transition.end();
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if_block0.d();

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			if (if_block2) if_block2.d();
    			if (detaching && div2_outro) div2_outro.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(16:0) {#if $COPILOT}",
    		ctx
    	});

    	return block;
    }

    // (30:4) {:else}
    function create_else_block_2(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "img/copilot/copilot.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Copilot Icon");
    			attr_dev(img, "class", "svelte-k9gecs");
    			add_location(img, file$2, 30, 6, 1174);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(30:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (24:4) {#if $COPILOT.alert || $COPILOT.suggestion}
    function create_if_block_10(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "img/copilot/copilot_white.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Copilot Icon");
    			attr_dev(img, "class", "svelte-k9gecs");
    			toggle_class(img, "success", /*$COPILOT*/ ctx[0].alert && /*$COPILOT*/ ctx[0].alert?.good || /*$COPILOT*/ ctx[0].suggestion && /*$COPILOT*/ ctx[0].suggestion.good);
    			toggle_class(img, "failure", /*$COPILOT*/ ctx[0].alert && !/*$COPILOT*/ ctx[0].alert?.good || /*$COPILOT*/ ctx[0].suggestion && !/*$COPILOT*/ ctx[0].suggestion.good);
    			add_location(img, file$2, 24, 6, 839);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$COPILOT*/ 1) {
    				toggle_class(img, "success", /*$COPILOT*/ ctx[0].alert && /*$COPILOT*/ ctx[0].alert?.good || /*$COPILOT*/ ctx[0].suggestion && /*$COPILOT*/ ctx[0].suggestion.good);
    			}

    			if (dirty & /*$COPILOT*/ 1) {
    				toggle_class(img, "failure", /*$COPILOT*/ ctx[0].alert && !/*$COPILOT*/ ctx[0].alert?.good || /*$COPILOT*/ ctx[0].suggestion && !/*$COPILOT*/ ctx[0].suggestion.good);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(24:4) {#if $COPILOT.alert || $COPILOT.suggestion}",
    		ctx
    	});

    	return block;
    }

    // (87:31) 
    function create_if_block_8(ctx) {
    	let h1;
    	let t0_value = /*$COPILOT*/ ctx[0].alert.header + "";
    	let t0;
    	let h1_style_value;
    	let t1;
    	let span;
    	let raw_value = /*$COPILOT*/ ctx[0].alert.text + "";
    	let t2;
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block_9, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type_3(ctx, dirty) {
    		if (/*$COPILOT*/ ctx[0].alert.action) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_3(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			span = element("span");
    			t2 = space();
    			div = element("div");
    			if_block.c();
    			attr_dev(h1, "class", "bicyclette svelte-k9gecs");

    			attr_dev(h1, "style", h1_style_value = !/*$COPILOT*/ ctx[0].alert.good
    			? 'color: var(--failure);'
    			: 'color: var(--success);');

    			add_location(h1, file$2, 87, 8, 3244);
    			attr_dev(span, "class", "modal-section svelte-k9gecs");
    			add_location(span, file$2, 91, 8, 3418);
    			attr_dev(div, "class", "button flex-centered svelte-k9gecs");
    			add_location(div, file$2, 94, 8, 3509);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			append_dev(h1, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, span, anchor);
    			span.innerHTML = raw_value;
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$COPILOT*/ 1) && t0_value !== (t0_value = /*$COPILOT*/ ctx[0].alert.header + "")) set_data_dev(t0, t0_value);

    			if (!current || dirty & /*$COPILOT*/ 1 && h1_style_value !== (h1_style_value = !/*$COPILOT*/ ctx[0].alert.good
    			? 'color: var(--failure);'
    			: 'color: var(--success);')) {
    				attr_dev(h1, "style", h1_style_value);
    			}

    			if ((!current || dirty & /*$COPILOT*/ 1) && raw_value !== (raw_value = /*$COPILOT*/ ctx[0].alert.text + "")) span.innerHTML = raw_value;			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_3(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(87:31) ",
    		ctx
    	});

    	return block;
    }

    // (74:36) 
    function create_if_block_7(ctx) {
    	let h1;
    	let t0_value = /*$COPILOT*/ ctx[0].definition.term + "";
    	let t0;
    	let t1;
    	let span;
    	let raw_value = /*$COPILOT*/ ctx[0].definition.definition + "";
    	let t2;
    	let div;
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				text: dictionary[/*$USER*/ ctx[1].language].copilot.okay,
    				onClick: /*func_2*/ ctx[6],
    				small: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			span = element("span");
    			t2 = space();
    			div = element("div");
    			create_component(button.$$.fragment);
    			attr_dev(h1, "class", "bicyclette svelte-k9gecs");
    			set_style(h1, "color", "var(--jet-blue)");
    			add_location(h1, file$2, 74, 8, 2794);
    			attr_dev(span, "class", "modal-section svelte-k9gecs");
    			add_location(span, file$2, 77, 8, 2909);
    			attr_dev(div, "class", "button flex-centered svelte-k9gecs");
    			add_location(div, file$2, 80, 8, 3011);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			append_dev(h1, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, span, anchor);
    			span.innerHTML = raw_value;
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(button, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$COPILOT*/ 1) && t0_value !== (t0_value = /*$COPILOT*/ ctx[0].definition.term + "")) set_data_dev(t0, t0_value);
    			if ((!current || dirty & /*$COPILOT*/ 1) && raw_value !== (raw_value = /*$COPILOT*/ ctx[0].definition.definition + "")) span.innerHTML = raw_value;			const button_changes = {};
    			if (dirty & /*$USER*/ 2) button_changes.text = dictionary[/*$USER*/ ctx[1].language].copilot.okay;
    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div);
    			destroy_component(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(74:36) ",
    		ctx
    	});

    	return block;
    }

    // (36:6) {#if $COPILOT.suggestion}
    function create_if_block_2(ctx) {
    	let h1;
    	let t0_value = dictionary[/*$USER*/ ctx[1].language].copilot.header + "";
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let div;
    	let current_block_type_index;
    	let if_block3;
    	let current;
    	let if_block0 = /*$COPILOT*/ ctx[0].suggestion.overview && create_if_block_6(ctx);
    	let if_block1 = /*$COPILOT*/ ctx[0].suggestion.detail && create_if_block_5(ctx);
    	let if_block2 = /*$COPILOT*/ ctx[0].suggestion.solution && create_if_block_4(ctx);
    	const if_block_creators = [create_if_block_3, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*$COPILOT*/ ctx[0].suggestion.action) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_2(ctx);
    	if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			t4 = space();
    			div = element("div");
    			if_block3.c();
    			attr_dev(h1, "class", "bicyclette modal-section text-gradient svelte-k9gecs");
    			add_location(h1, file$2, 36, 8, 1380);
    			attr_dev(div, "class", "button flex-centered svelte-k9gecs");
    			add_location(div, file$2, 55, 8, 2095);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			append_dev(h1, t0);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$USER*/ 2) && t0_value !== (t0_value = dictionary[/*$USER*/ ctx[1].language].copilot.header + "")) set_data_dev(t0, t0_value);

    			if (/*$COPILOT*/ ctx[0].suggestion.overview) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_6(ctx);
    					if_block0.c();
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*$COPILOT*/ ctx[0].suggestion.detail) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_5(ctx);
    					if_block1.c();
    					if_block1.m(t3.parentNode, t3);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*$COPILOT*/ ctx[0].suggestion.solution) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_4(ctx);
    					if_block2.c();
    					if_block2.m(t4.parentNode, t4);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block3 = if_blocks[current_block_type_index];

    				if (!if_block3) {
    					if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block3.c();
    				} else {
    					if_block3.p(ctx, dirty);
    				}

    				transition_in(if_block3, 1);
    				if_block3.m(div, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(36:6) {#if $COPILOT.suggestion}",
    		ctx
    	});

    	return block;
    }

    // (105:10) {:else}
    function create_else_block_1(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				text: dictionary[/*$USER*/ ctx[1].language].copilot.okay,
    				onClick: /*func_4*/ ctx[8],
    				error: !/*$COPILOT*/ ctx[0].alert?.good,
    				small: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty & /*$USER*/ 2) button_changes.text = dictionary[/*$USER*/ ctx[1].language].copilot.okay;
    			if (dirty & /*$COPILOT*/ 1) button_changes.error = !/*$COPILOT*/ ctx[0].alert?.good;
    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(105:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (96:10) {#if $COPILOT.alert.action}
    function create_if_block_9(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				text: /*$COPILOT*/ ctx[0].alert.action.text,
    				onClick: /*func_3*/ ctx[7],
    				error: !/*$COPILOT*/ ctx[0].alert?.good,
    				small: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty & /*$COPILOT*/ 1) button_changes.text = /*$COPILOT*/ ctx[0].alert.action.text;
    			if (dirty & /*$COPILOT*/ 1) button_changes.onClick = /*func_3*/ ctx[7];
    			if (dirty & /*$COPILOT*/ 1) button_changes.error = !/*$COPILOT*/ ctx[0].alert?.good;
    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(96:10) {#if $COPILOT.alert.action}",
    		ctx
    	});

    	return block;
    }

    // (40:8) {#if $COPILOT.suggestion.overview}
    function create_if_block_6(ctx) {
    	let h2;
    	let t_value = /*$COPILOT*/ ctx[0].suggestion.overview + "";
    	let t;
    	let h2_style_value;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			t = text(t_value);
    			attr_dev(h2, "class", "bicyclette modal-section svelte-k9gecs");

    			attr_dev(h2, "style", h2_style_value = /*$COPILOT*/ ctx[0].suggestion.good
    			? 'color: var(--jet-blue);'
    			: 'color: var(--failure);');

    			add_location(h2, file$2, 40, 10, 1553);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			append_dev(h2, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$COPILOT*/ 1 && t_value !== (t_value = /*$COPILOT*/ ctx[0].suggestion.overview + "")) set_data_dev(t, t_value);

    			if (dirty & /*$COPILOT*/ 1 && h2_style_value !== (h2_style_value = /*$COPILOT*/ ctx[0].suggestion.good
    			? 'color: var(--jet-blue);'
    			: 'color: var(--failure);')) {
    				attr_dev(h2, "style", h2_style_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(40:8) {#if $COPILOT.suggestion.overview}",
    		ctx
    	});

    	return block;
    }

    // (46:8) {#if $COPILOT.suggestion.detail}
    function create_if_block_5(ctx) {
    	let span;
    	let raw_value = /*$COPILOT*/ ctx[0].suggestion.detail + "";

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "modal-section svelte-k9gecs");
    			add_location(span, file$2, 46, 10, 1816);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			span.innerHTML = raw_value;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$COPILOT*/ 1 && raw_value !== (raw_value = /*$COPILOT*/ ctx[0].suggestion.detail + "")) span.innerHTML = raw_value;		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(46:8) {#if $COPILOT.suggestion.detail}",
    		ctx
    	});

    	return block;
    }

    // (51:8) {#if $COPILOT.suggestion.solution}
    function create_if_block_4(ctx) {
    	let span;
    	let raw_value = /*$COPILOT*/ ctx[0].suggestion.solution + "";

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "modal-section svelte-k9gecs");
    			add_location(span, file$2, 51, 10, 1977);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			span.innerHTML = raw_value;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$COPILOT*/ 1 && raw_value !== (raw_value = /*$COPILOT*/ ctx[0].suggestion.solution + "")) span.innerHTML = raw_value;		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(51:8) {#if $COPILOT.suggestion.solution}",
    		ctx
    	});

    	return block;
    }

    // (66:10) {:else}
    function create_else_block$1(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				text: dictionary[/*$USER*/ ctx[1].language].copilot.okay,
    				onClick: /*func_1*/ ctx[5],
    				error: !/*$COPILOT*/ ctx[0].suggestion?.good,
    				small: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty & /*$USER*/ 2) button_changes.text = dictionary[/*$USER*/ ctx[1].language].copilot.okay;
    			if (dirty & /*$COPILOT*/ 1) button_changes.error = !/*$COPILOT*/ ctx[0].suggestion?.good;
    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(66:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (57:10) {#if $COPILOT.suggestion.action}
    function create_if_block_3(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				text: /*$COPILOT*/ ctx[0].suggestion.action.text ?? dictionary[/*$USER*/ ctx[1].language].copilot.okay,
    				onClick: /*func*/ ctx[4],
    				error: !/*$COPILOT*/ ctx[0].suggestion?.good,
    				small: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty & /*$COPILOT, $USER*/ 3) button_changes.text = /*$COPILOT*/ ctx[0].suggestion.action.text ?? dictionary[/*$USER*/ ctx[1].language].copilot.okay;
    			if (dirty & /*$COPILOT*/ 1) button_changes.onClick = /*func*/ ctx[4];
    			if (dirty & /*$COPILOT*/ 1) button_changes.error = !/*$COPILOT*/ ctx[0].suggestion?.good;
    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(57:10) {#if $COPILOT.suggestion.action}",
    		ctx
    	});

    	return block;
    }

    // (115:6) {#if acceptJetDisclaimer}
    function create_if_block_1(ctx) {
    	let i;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			i = element("i");
    			i.textContent = "✕";
    			attr_dev(i, "class", "jet-icons close");
    			add_location(i, file$2, 115, 6, 4213);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);

    			if (!mounted) {
    				dispose = listen_dev(i, "click", /*click_handler_1*/ ctx[9], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(115:6) {#if acceptJetDisclaimer}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$COPILOT*/ ctx[0] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$COPILOT*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$COPILOT*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $COPILOT;
    	let $USER;
    	validate_store(COPILOT, 'COPILOT');
    	component_subscribe($$self, COPILOT, $$value => $$invalidate(0, $COPILOT = $$value));
    	validate_store(USER, 'USER');
    	component_subscribe($$self, USER, $$value => $$invalidate(1, $USER = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Copilot', slots, []);

    	onMount(() => {
    		document.addEventListener('keypress', e => {
    			if (e.code === 'Escape' || e.code === 'Enter') {
    				COPILOT.set(null);
    			}
    		});
    	});

    	const acceptJetDisclaimer = localStorage.getItem('jetDisclaimer');
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Copilot> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => acceptJetDisclaimer ? COPILOT.set(null) : null;

    	const func = () => {
    		$COPILOT?.suggestion?.action?.onClick();
    		COPILOT.set(null);
    	};

    	const func_1 = () => COPILOT.set(null);
    	const func_2 = () => COPILOT.set(null);

    	const func_3 = () => {
    		$COPILOT?.alert?.action?.onClick();
    		COPILOT.set(null);
    	};

    	const func_4 = () => COPILOT.set(null);
    	const click_handler_1 = () => COPILOT.set(null);

    	$$self.$capture_state = () => ({
    		onMount,
    		fade,
    		fly,
    		COPILOT,
    		USER,
    		dictionary,
    		Button,
    		acceptJetDisclaimer,
    		$COPILOT,
    		$USER
    	});

    	return [
    		$COPILOT,
    		$USER,
    		acceptJetDisclaimer,
    		click_handler,
    		func,
    		func_1,
    		func_2,
    		func_3,
    		func_4,
    		click_handler_1
    	];
    }

    class Copilot extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Copilot",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src/components/Notifications.svelte generated by Svelte v3.44.2 */
    const file$1 = "src/components/Notifications.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	child_ctx[6] = i;
    	return child_ctx;
    }

    // (6:0) {#if $USER.notifications?.length}
    function create_if_block$1(ctx) {
    	let div;
    	let current;
    	let each_value = /*$USER*/ ctx[0].notifications;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "notifications flex-centered column svelte-1u4ie2k");
    			add_location(div, file$1, 6, 2, 190);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$USER, navigate*/ 1) {
    				each_value = /*$USER*/ ctx[0].notifications;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(6:0) {#if $USER.notifications?.length}",
    		ctx
    	});

    	return block;
    }

    // (8:4) {#each $USER.notifications as n, i}
    function create_each_block(ctx) {
    	let div1;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let p;
    	let raw_value = /*n*/ ctx[4].text + "";
    	let t1;
    	let i_1;
    	let t3;
    	let div1_intro;
    	let div1_outro;
    	let current;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[1](/*n*/ ctx[4]);
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[2](/*n*/ ctx[4]);
    	}

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[3](/*i*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			p = element("p");
    			t1 = space();
    			i_1 = element("i");
    			i_1.textContent = "✕";
    			t3 = space();
    			if (!src_url_equal(img.src, img_src_value = "img/copilot/copilot.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Copilot Icon");
    			attr_dev(img, "class", "svelte-1u4ie2k");
    			add_location(img, file$1, 14, 10, 562);
    			attr_dev(div0, "class", "copilot-img flex-centered svelte-1u4ie2k");
    			add_location(div0, file$1, 12, 8, 442);
    			attr_dev(p, "class", "svelte-1u4ie2k");
    			add_location(p, file$1, 18, 8, 665);
    			attr_dev(i_1, "class", "jet-icons close svelte-1u4ie2k");
    			add_location(i_1, file$1, 21, 8, 775);
    			attr_dev(div1, "class", "notification flex-centered svelte-1u4ie2k");
    			toggle_class(div1, "success", /*n*/ ctx[4].success);
    			add_location(div1, file$1, 8, 6, 285);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, img);
    			append_dev(div1, t0);
    			append_dev(div1, p);
    			p.innerHTML = raw_value;
    			append_dev(div1, t1);
    			append_dev(div1, i_1);
    			append_dev(div1, t3);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", click_handler, false, false, false),
    					listen_dev(p, "click", click_handler_1, false, false, false),
    					listen_dev(i_1, "click", click_handler_2, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*$USER*/ 1) && raw_value !== (raw_value = /*n*/ ctx[4].text + "")) p.innerHTML = raw_value;
    			if (dirty & /*$USER*/ 1) {
    				toggle_class(div1, "success", /*n*/ ctx[4].success);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (div1_outro) div1_outro.end(1);
    				div1_intro = create_in_transition(div1, fly, { y: 25, duration: 500 });
    				div1_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (div1_intro) div1_intro.invalidate();
    			div1_outro = create_out_transition(div1, fade, { duration: 50 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching && div1_outro) div1_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(8:4) {#each $USER.notifications as n, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$USER*/ ctx[0].notifications?.length && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$USER*/ ctx[0].notifications?.length) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$USER*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let $USER;
    	validate_store(USER, 'USER');
    	component_subscribe($$self, USER, $$value => $$invalidate(0, $USER = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Notifications', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Notifications> was created with unknown prop '${key}'`);
    	});

    	const click_handler = n => {
    		if (n.success) navigate("/transactions");
    	};

    	const click_handler_1 = n => {
    		if (n.success) navigate("/transactions");
    	};

    	const click_handler_2 = i => $USER.clearNotification(i);
    	$$self.$capture_state = () => ({ fade, fly, navigate, USER, $USER });
    	return [$USER, click_handler, click_handler_1, click_handler_2];
    }

    class Notifications extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Notifications",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src/components/TermsConditions.svelte generated by Svelte v3.44.2 */

    const file = "src/components/TermsConditions.svelte";

    function create_fragment$1(ctx) {
    	let div;
    	let a0;
    	let span0;
    	let t1;
    	let a1;
    	let span1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			a0 = element("a");
    			span0 = element("span");
    			span0.textContent = "Terms of Use";
    			t1 = space();
    			a1 = element("a");
    			span1 = element("span");
    			span1.textContent = "Privacy Policy";
    			attr_dev(span0, "class", "bicyclette svelte-4ukasy");
    			add_location(span0, file, 2, 4, 99);
    			attr_dev(a0, "href", "https://www.jetprotocol.io/terms-of-use");
    			attr_dev(a0, "target", "_blank");
    			attr_dev(a0, "class", "svelte-4ukasy");
    			add_location(a0, file, 1, 2, 28);
    			attr_dev(span1, "class", "bicyclette svelte-4ukasy");
    			add_location(span1, file, 7, 4, 238);
    			attr_dev(a1, "href", "https://www.jetprotocol.io/privacy-policy");
    			attr_dev(a1, "target", "_blank");
    			attr_dev(a1, "class", "svelte-4ukasy");
    			add_location(a1, file, 6, 2, 165);
    			attr_dev(div, "class", "flex-center svelte-4ukasy");
    			add_location(div, file, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, a0);
    			append_dev(a0, span0);
    			append_dev(div, t1);
    			append_dev(div, a1);
    			append_dev(a1, span1);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TermsConditions', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TermsConditions> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class TermsConditions extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TermsConditions",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src/App.svelte generated by Svelte v3.44.2 */

    // (41:2) {:else}
    function create_else_block(ctx) {
    	let loader;
    	let current;

    	loader = new Loader({
    			props: { fullscreen: true },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(loader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loader, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(41:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (26:2) {#if launchUI}
    function create_if_block(ctx) {
    	let nav;
    	let t0;
    	let route0;
    	let t1;
    	let route1;
    	let t2;
    	let route2;
    	let t3;
    	let connectwalletmodal;
    	let t4;
    	let copilot;
    	let t5;
    	let notifications;
    	let t6;
    	let termsconditions;
    	let current;
    	nav = new Nav({ $$inline: true });

    	route0 = new Route$1({
    			props: {
    				path: "/",
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route1 = new Route$1({
    			props: {
    				path: "/transactions",
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route2 = new Route$1({
    			props: {
    				path: "/settings",
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	connectwalletmodal = new ConnectWalletModal({ $$inline: true });
    	copilot = new Copilot({ $$inline: true });
    	notifications = new Notifications({ $$inline: true });
    	termsconditions = new TermsConditions({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(nav.$$.fragment);
    			t0 = space();
    			create_component(route0.$$.fragment);
    			t1 = space();
    			create_component(route1.$$.fragment);
    			t2 = space();
    			create_component(route2.$$.fragment);
    			t3 = space();
    			create_component(connectwalletmodal.$$.fragment);
    			t4 = space();
    			create_component(copilot.$$.fragment);
    			t5 = space();
    			create_component(notifications.$$.fragment);
    			t6 = space();
    			create_component(termsconditions.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(nav, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(route0, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(route1, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(route2, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(connectwalletmodal, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(copilot, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(notifications, target, anchor);
    			insert_dev(target, t6, anchor);
    			mount_component(termsconditions, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(nav.$$.fragment, local);
    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			transition_in(route2.$$.fragment, local);
    			transition_in(connectwalletmodal.$$.fragment, local);
    			transition_in(copilot.$$.fragment, local);
    			transition_in(notifications.$$.fragment, local);
    			transition_in(termsconditions.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(nav.$$.fragment, local);
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			transition_out(route2.$$.fragment, local);
    			transition_out(connectwalletmodal.$$.fragment, local);
    			transition_out(copilot.$$.fragment, local);
    			transition_out(notifications.$$.fragment, local);
    			transition_out(termsconditions.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(nav, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(route0, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(route1, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(route2, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(connectwalletmodal, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(copilot, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(notifications, detaching);
    			if (detaching) detach_dev(t6);
    			destroy_component(termsconditions, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(26:2) {#if launchUI}",
    		ctx
    	});

    	return block;
    }

    // (28:4) <Route path="/">
    function create_default_slot_3(ctx) {
    	let cockpit;
    	let current;
    	cockpit = new Cockpit({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(cockpit.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cockpit, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cockpit.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cockpit.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cockpit, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(28:4) <Route path=\\\"/\\\">",
    		ctx
    	});

    	return block;
    }

    // (31:4) <Route path="/transactions">
    function create_default_slot_2(ctx) {
    	let transactionlogs;
    	let current;
    	transactionlogs = new TransactionLogs({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(transactionlogs.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(transactionlogs, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(transactionlogs.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(transactionlogs.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(transactionlogs, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(31:4) <Route path=\\\"/transactions\\\">",
    		ctx
    	});

    	return block;
    }

    // (34:4) <Route path="/settings">
    function create_default_slot_1(ctx) {
    	let settings;
    	let current;
    	settings = new Settings({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(settings.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(settings, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(settings.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(settings.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(settings, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(34:4) <Route path=\\\"/settings\\\">",
    		ctx
    	});

    	return block;
    }

    // (25:0) <Router primary={false}>
    function create_default_slot(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*launchUI*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(25:0) <Router primary={false}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let router;
    	let current;

    	router = new Router$1({
    			props: {
    				primary: false,
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(router.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(router, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const router_changes = {};

    			if (dirty & /*$$scope, launchUI*/ 3) {
    				router_changes.$$scope = { dirty, ctx };
    			}

    			router.$set(router_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(router, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	let launchUI = false;

    	onMount(async () => {
    		// Init dark thtme
    		checkDarkTheme();

    		// get IDL and market reserve data
    		await getMarketAndIDL();

    		// Display Interface
    		$$invalidate(0, launchUI = true);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		Router: Router$1,
    		Route: Route$1,
    		getMarketAndIDL,
    		checkDarkTheme,
    		Nav,
    		Cockpit,
    		TransactionLogs,
    		Settings,
    		Loader,
    		ConnectWalletModal,
    		Copilot,
    		Notifications,
    		TermsConditions,
    		launchUI
    	});

    	$$self.$inject_state = $$props => {
    		if ('launchUI' in $$props) $$invalidate(0, launchUI = $$props.launchUI);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [launchUI];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
        target: document.body
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
